/*
 * generated by Xtext
 */
package de.cau.cs.kieler.prom.ui.contentassist

import com.google.inject.Inject
import de.cau.cs.kieler.prom.build.compilation.KiCoModelCompiler
import de.cau.cs.kieler.prom.build.simulation.CSimulationCompiler
import de.cau.cs.kieler.prom.build.simulation.JavaSimulationCompiler
import de.cau.cs.kieler.prom.build.templates.SimpleTemplateProcessor
import de.cau.cs.kieler.prom.configurable.AttributeExtensions
import de.cau.cs.kieler.prom.kibuild.ModelCompiler
import de.cau.cs.kieler.prom.kibuild.NormalTemplateProcessor
import de.cau.cs.kieler.prom.kibuild.SimulationCompiler
import de.cau.cs.kieler.prom.kibuild.SimulationTemplateProcessor
import de.cau.cs.kieler.prom.kibuild.WrapperCodeTemplateProcessor
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/** 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class KiBuildProposalProvider extends AbstractKiBuildProposalProvider {
    private static val kicoModelCompilerInstance = new KiCoModelCompiler
    private static val simulationTemplateProcessorInstance = new de.cau.cs.kieler.prom.build.templates.SimulationTemplateProcessor
    private static val templateProcessorInstance = new SimpleTemplateProcessor
    private static val wrapperCodeTemplateProcessorInstance = new de.cau.cs.kieler.prom.build.templates.WrapperCodeTemplateProcessor
    private static val javaSimulationCompilerInstance = new JavaSimulationCompiler
    private static val cSimulationCompilerInstance = new CSimulationCompiler
    
    @Inject
    extension AttributeExtensions attributeExtensions
    
    /**
     * Adds proposals for classes with ConfigurableAttribute.
     */
    override complete_AttributeMapping(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // Add proposals of super class
        super.complete_AttributeMapping(model, ruleCall, context, acceptor)
        
        // Add proposals for configurable attributes
        val proposals = <String> newArrayList
        switch(model) {
            ModelCompiler case model.name == "kico" : {
                val attributeNames = kicoModelCompilerInstance.configurableAttributes.map[it.name]
                proposals.addAll(attributeNames)
            }
            NormalTemplateProcessor : {
                val attributeNames = templateProcessorInstance.configurableAttributes.map[it.name]
                proposals.addAll(attributeNames)
            }
            WrapperCodeTemplateProcessor : {
                val attributeNames = wrapperCodeTemplateProcessorInstance.configurableAttributes.map[it.name]
                proposals.addAll(attributeNames)
            }
            SimulationTemplateProcessor : {
                val attributeNames = simulationTemplateProcessorInstance.configurableAttributes.map[it.name]
                proposals.addAll(attributeNames)
            }
            SimulationCompiler case model.name == "c" : {
                val attributeNames = cSimulationCompilerInstance.configurableAttributes.map[it.name]
                proposals.addAll(attributeNames)
            }
            SimulationCompiler case model.name == "java" : {
                val attributeNames = javaSimulationCompilerInstance.configurableAttributes.map[it.name]
                proposals.addAll(attributeNames)
            }
        }
     
        // Create and register the completion proposal
        for(proposal : proposals) {
            acceptor.accept(createCompletionProposal(proposal, context))
        }
    }
}
