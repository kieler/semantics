/*
 * Copyright (c) 2007, 2010 Borland Software Corporation and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::editor::Utils»

«DEFINE doSaveDocument FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void doSaveDocument(org.eclipse.core.runtime.IProgressMonitor monitor, Object element, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, boolean overwrite) throws org.eclipse.core.runtime.CoreException {
	«REM»haf: Set validation here so at each saving the diagram gets validated.«ENDREM»
	ValidateAction.runValidation((org.eclipse.gmf.runtime.notation.View) document.getContent());
	ResourceSetInfo info = getResourceSetInfo(element);
	if (info != null) {
		if (!overwrite && !info.isSynchronized()) {
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 
				«IF null = editorGen.application»org.eclipse.core.resources.IResourceStatus.OUT_OF_SYNC_LOCAL«ELSE»org.eclipse.core.runtime.IStatus.ERROR«ENDIF», 
				«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentUnsynchronizedFileSaveError(self)) FOR editorGen», 
				null));
		}
	«IF null = editorGen.application-»
		info.stopResourceListening();
	«ENDIF-»
		fireElementStateChanging(element);
		try {
			monitor.beginTask(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveDiagramTask(self)) FOR editorGen», info.getResourceSet().getResources().size() + 1); //"Saving diagram"
			«EXPAND CodeStyle::iterate('nextResource', 'org.eclipse.emf.ecore.resource.Resource', 'it', 'info.getLoadedResourcesIterator()')-»
				monitor.setTaskName(org.eclipse.osgi.util.NLS.bind(
						«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveNextResourceTask(self)) FOR editorGen», 
						nextResource.getURI()));
				if (nextResource.isLoaded() && !info.getEditingDomain().isReadOnly(nextResource)) {
					try {
						nextResource.save(«EXPAND xpt::Common::getSaveOptions»);
					} catch (java.io.IOException e) {
						fireElementStateChangeFailed(element);
						throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
					}
				}
				monitor.worked(1);
			}
			monitor.done();
			info.setModificationStamp(computeModificationStamp(info));
		} catch (RuntimeException x) {
			fireElementStateChangeFailed(element);
			throw x;
		} «IF null = editorGen.application» finally {
			info.startResourceListening();
		} «ENDIF»
	} else {
		org.eclipse.emf.common.util.URI newResoruceURI;
		«EXPAND CodeStyle::G('java.util.List', 'org.eclipse.core.resources.IFile')» affectedFiles = null;
		«IF null = editorGen.application»if (element instanceof «EXPAND fileEditorInputClassFQName») {
			org.eclipse.core.resources.IFile newFile = ((«EXPAND fileEditorInputClassFQName») element).getFile();
			affectedFiles = java.util.Collections.singletonList(newFile);
			newResoruceURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(newFile.getFullPath().toString(), true);
		} else «ENDIF»if(element instanceof «EXPAND uriEditorInputClassFQName») {
			newResoruceURI = ((«EXPAND uriEditorInputClassFQName») element).getURI();
		} else {
			fireElementStateChangeFailed(element);
			«EXPAND throwIncorrectInputException-»
		}
		if (false == document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0,
			"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null));«EXPAND xpt::Common::nonNLS(1)»«EXPAND xpt::Common::nonNLS(2)»
		}
		org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
		final org.eclipse.emf.ecore.resource.Resource newResource = diagramDocument.getEditingDomain().getResourceSet().createResource(newResoruceURI);
		final org.eclipse.gmf.runtime.notation.Diagram diagramCopy = (org.eclipse.gmf.runtime.notation.Diagram) org.eclipse.emf.ecore.util.EcoreUtil.copy(diagramDocument.getDiagram());
		try {
			new org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand(diagramDocument.getEditingDomain(), org.eclipse.osgi.util.NLS.bind(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentSaveAs(self)) FOR editorGen», diagramCopy.getName()), affectedFiles) {
				protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
					newResource.getContents().add(diagramCopy);					
					return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
				}
			}.execute(monitor, null);
			newResource.save(«EXPAND xpt::Common::getSaveOptions»);
		} catch (org.eclipse.core.commands.ExecutionException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, e.getLocalizedMessage(), null));
		} catch (java.io.IOException e) {
			fireElementStateChangeFailed(element);
			throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, e.getLocalizedMessage(), null));
		}
		newResource.unload();
	}
}
«ENDDEFINE»

«DEFINE createEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain() {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory.getInstance().createEditingDomain();
	editingDomain.setID("«editingDomainID»");«EXPAND xpt::Common::nonNLS»
	final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter(editingDomain.getResourceSet()).and(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.ADD)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
	editingDomain.getResourceSet().eAdapters().add(new org.eclipse.emf.common.notify.Adapter() {

		private org.eclipse.emf.common.notify.Notifier myTarger;

		public org.eclipse.emf.common.notify.Notifier getTarget() {
			return myTarger;
		}

		public boolean isAdapterForType(Object type) {
			return false;
		}

		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			if (diagramResourceModifiedFilter.matches(notification)) {
				Object value = notification.getNewValue();
				if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
					((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification(true);
				}
			}
		}

		public void setTarget(org.eclipse.emf.common.notify.Notifier newTarget) {
			myTarger = newTarget;
		}
			
	});	
	«REM»haf: Added custom TriggerListener to track changes in the diagram«ENDREM»
	de.cau.cs.kieler.synccharts.listener.SyncchartsContentUtil.addTriggerListeners(editingDomain);
	return editingDomain;
}
«ENDDEFINE»

«DEFINE setDocumentContent FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document, org.eclipse.ui.IEditorInput element) throws org.eclipse.core.runtime.CoreException {
	org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument diagramDocument = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document;
	org.eclipse.emf.transaction.TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
	«IF null = editorGen.application»if (element instanceof «EXPAND fileEditorInputClassFQName») {
		org.eclipse.core.resources.IStorage storage = ((«EXPAND fileEditorInputClassFQName») element).getStorage();
		
		«REM» soh:
        Added checking whether the diagram file is out of date.
        This prevents a freeze of the application due to the
        migration to 0.2.1. 
        FIXME: Find the reason for the freeze and find better solution.    
        «ENDREM»
        // Added checking whether the diagram file is out of date.
        // This prevents a freeze of the application due to the
        // migration to 0.2.1. 
        // FIXME: Find the reason for the freeze and find better solution.     
        de.cau.cs.kieler.synccharts.custom.update.UpdateResourceFactoryImpl
                    .checkDiagramEditorInput((«EXPAND fileEditorInputClassFQName») element);
            
		
		org.eclipse.gmf.runtime.notation.Diagram diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
		
		«REM»
		chsch: added to
		* assure proper initialization of the domain model in case of kits domain models
		* remove notation elements if the domain element is not present anymore (proxy can't be resolved)  
        «ENDREM»		
		de.cau.cs.kieler.synccharts.custom.SyncchartsUtil.assureInitializedDomainModel(domain, diagram);
		de.cau.cs.kieler.synccharts.custom.SyncchartsUtil.cleanUpNotationModel(domain, diagram);		
		
		document.setContent(diagram);
	} else «ENDIF»if(element instanceof «EXPAND uriEditorInputClassFQName») {
		org.eclipse.emf.common.util.URI uri = ((«EXPAND uriEditorInputClassFQName») element).getURI();
		org.eclipse.emf.ecore.resource.Resource resource = null;
		try {
			resource = domain.getResourceSet().getResource(uri.trimFragment(), false);
			if (resource == null) {
				resource = domain.getResourceSet().createResource(uri.trimFragment());
			}
			if (!resource.isLoaded()) {
				try {
					java.util.Map options = new java.util.HashMap(org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory.getDefaultLoadOptions());
					// @see 171060 
					// options.put(org.eclipse.emf.ecore.xmi.XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
					resource.load(options);
				} catch (java.io.IOException e) {
					resource.unload();
					throw e;
				}
			}
			if (uri.fragment() != null) {
				org.eclipse.emf.ecore.EObject rootElement = resource.getEObject(uri.fragment());
				if (rootElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
					document.setContent((org.eclipse.gmf.runtime.notation.Diagram) rootElement);
					return;
				}
			} else {
				for (java.util.Iterator it = resource.getContents().iterator(); it.hasNext();) {
					Object rootElement = it.next();
					if (rootElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
						document.setContent((org.eclipse.gmf.runtime.notation.Diagram) rootElement);
						return;
					}
				}
			}
			throw new RuntimeException(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderNoDiagramInResourceError(self)) FOR editorGen»);
		} catch (Exception e) {
			org.eclipse.core.runtime.CoreException thrownExcp = null;
			if (e instanceof org.eclipse.core.runtime.CoreException) {
				thrownExcp = (org.eclipse.core.runtime.CoreException) e;
			} else {
				String msg = e.getLocalizedMessage();
				thrownExcp = new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, 
				msg != null ? msg : «EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderDiagramLoadingError(self)) FOR editorGen», e));
			}
			throw thrownExcp;
		}
	} else {
	«EXPAND throwIncorrectInputException-»
	}	
}
«ENDDEFINE»

«DEFINE fileEditorInputClassFQName FOR gmfgen::GenDiagram»org.eclipse.ui.part.FileEditorInput«ENDDEFINE»

«DEFINE uriEditorInputClassFQName FOR gmfgen::GenDiagram»org.eclipse.emf.common.ui.URIEditorInput«ENDDEFINE»

«DEFINE throwIncorrectInputException FOR gmfgen::GenDiagram-»
throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «editorGen.plugin.getActivatorQualifiedClassName()».ID, 0, 
		org.eclipse.osgi.util.NLS.bind(
			«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderIncorrectInputError(self)) FOR editorGen»,
			new Object[] {element, «IF null = editorGen.application»"«EXPAND fileEditorInputClassFQName»", «ENDIF»"«EXPAND uriEditorInputClassFQName»"}),«EXPAND xpt::Common::nonNLS(1)»«IF null = editorGen.application»«EXPAND xpt::Common::nonNLS(2)»«ENDIF» 
		null));
«ENDDEFINE»

«REM»soh: Added the elementInfo stuff, used by chsch.«ENDREM»
«DEFINE createElementInfo FOR gmfgen::GenDiagram-»

    private ElementInfo elementInfo;

    public void setCanBeSaved(boolean b) {
        this.elementInfo.fCanBeSaved = b;
    }

    «EXPAND xpt::Common::generatedMemberComment»
protected ElementInfo createElementInfo(Object element) throws org.eclipse.core.runtime.CoreException {
    «EXPAND checkEditorInputInstance-»
    org.eclipse.ui.IEditorInput editorInput = (org.eclipse.ui.IEditorInput) element;
    org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument document = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) createDocument(editorInput);

    ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
    info.setModificationStamp(computeModificationStamp(info));
    info.fStatus = null;
    this.elementInfo = info;
    return info;
}
«ENDDEFINE»

«DEFINE checkEditorInputInstance FOR gmfgen::GenDiagram-»
if («IF null = editorGen.application»false == element instanceof «EXPAND fileEditorInputClassFQName» && «ENDIF»false == element instanceof «EXPAND uriEditorInputClassFQName») {
    «EXPAND throwIncorrectInputException-»
}
«ENDDEFINE»