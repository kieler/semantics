module Counter:
input T, S, S0, S1, S2, S3;
output B0, B1, B2, B3, ALARM;

signal R, T5, C0,C1,C2, A0, A1, A2 in

every 5 T do
  emit T5
end
||
run Bit [ signal T5/CLK, B0/B, C0/CY ]
||
run Bit [ signal C0/CLK, B1/B, C1/CY ]
||
run Bit [ signal C1/CLK, B2/B, C2/CY ]
%||
%run LastBit [ signal C2/CLK, B3/B ]

||
run BitAlarm [signal B0/B, S0/SX, tick/ACI, A0/ACO]
||
run BitAlarm [signal B1/B, S1/SX, A0/ACI, A1/ACO]
||
run BitAlarm [signal B2/B, S2/SX, A1/ACI, A2/ACO]
%||
%run BitAlarm [signal B3/B, S3/SX, A2/ACI, ALARM/ACO]

end signal
end module

module Bit:
input R,CLK;
output B, CY;
loop
  loop
  await CLK;
  abort
    sustain B;
  when CLK;
  emit CY;
  abort
    sustain B;
  when CLK;
  await CLK;
  emit CY
  end
each R
end module

%module LastBit:
%input R,CLK;
%output B;
%loop
%  loop
%  await CLK;
%  abort
%    sustain B
%  when CLK
%  end
%each R
%end module

module BitAlarm:
input B, S, SX, ACI;
output ACO;
signal SMEM, SMEM1 in
loop
  present SMEM then pause; emit SMEM1 else pause end
end loop
||
loop
  present S then
    present SX then emit SMEM end 
  else
    present SMEM1 then emit SMEM end
  end;
  present [ ACI and (SMEM and B or not SMEM and not B) ] then emit ACO end;
pause;
end loop

end signal
end module
