module C:
input dem_in;
input data_in;
input data_vme;
input add_vme;
input modeC;
input sout;
input stop;
input egal;
output raz_reg;
output raz_stop;
output it_data_C;
output it_add;
output it_dem;
output it_adem;
output paren;
output mem_clk;
output sclk;
output sin;
output data_out;
output data_clk_out;
output add_out;
output add_clk_out;
output ld1;
output L1;
output L2;

trap MODE in
  loop
    signal IS_DATA in
      trap ADVDEM in
          await 
            case immediate data_in do
              sustain IS_DATA
            case immediate [not modeC] do
              exit MODE
          end await
        ||
          await immediate dem_in;
          await tick;
          await tick;
          await tick;
          present IS_DATA then
            run em_C
          else
            run rec_C
          end present;
          exit ADVDEM
      end trap
    end signal
  end loop
end trap

end module

module E:
input dem_in;
input modeE;
input stop;
input data_in;
input data_clk;
input add_in;
input add_clk;
input err;
output raz_stop;
output it_data_T;
output it_add;
output it_dem;
output it_adem;
output paren;
output mem_clk;
output sclk;
output sin;
output it_err;

trap MODE in
  loop
    signal IS_DATA in
      trap ADVDEM in
          await 
            case immediate data_in do
              sustain IS_DATA
            case immediate [not modeE] do
              exit MODE
          end await
        ||
          await immediate dem_in;
          await tick;
          await tick;
          await tick;
          present IS_DATA then
            run em_E
          else
            run rec_E
          end present
      end trap
    end signal
  end loop
end trap

end module

module T:
input modeT;
input cmd_vme;
input adem_vme;
input dem_vme;
input stop;
input add_in;
input data_in;
input add_clk;
input data_clk;
input err;
input sout;
output raz_reg;
output raz_bit;
output raz_stop;
output it_data_T;
output it_add;
output it_err;
output sin;
output sclk;
output ld1;
output ld2;
output mem_clk;
output paren;
output dem;
output data_out;

trap MODE in
  loop
    await 
      case immediate cmd_vme do
        run rec_T [
          signal raz_reg / raz_vme ]
      case immediate adem_vme do
        run em_T [
          signal raz_bit / raz_vme ]
      case immediate [not modeT] do
        exit MODE
    end await
  end loop
end trap

end module

module acqadd:
input add_clk;
input add_in;
output sin;
output sclk;
output paren;
output mem_clk;
output it_add;

trap EndAddress in
  [
    run clkdata [
      signal add_clk / iclk,
             add_in / idata,
             sin / data_val,
             sclk / data_ready ]
  ||
    await 7 sclk;
    exit EndAddress
  ]
end trap;
signal NULL in
  run lec_vme [
    signal NULL / ldcomp ]
end signal;
emit it_add

end module

module acqdata:
input data_clk;
input data_in;
output sin;
output sclk;
output paren;
output mem_clk;
output it_data_T;

trap EndData in
  [
    run clkdata [
      signal data_clk / iclk,
             data_in / idata,
             sin / data_val,
             sclk / data_ready ]
  ||
    await sclk;
    exit EndData
  ]
end trap;
signal NULL in
  run lec_vme [
    signal NULL / ldcomp ]
end signal;
emit it_data_T

end module

module atds:
input modeT;
input modeC;
input modeE;
input add_vme;
input data_vme;
input cmd_vme;
input adem_vme;
input dem_vme;
input stop;
input add_in;
input dem_in;
input data_in;
input add_clk;
input data_clk;
input err;
input egal;
input sout;
output raz_reg;
output raz_bit;
output raz_stop;
output it_data_T;
output it_data_C;
output it_add;
output it_err;
output it_adem;
output it_dem;
output sin;
output sclk;
output ld1;
output ld2;
output mem_clk;
output paren;
output dem;
output data_out;
output data_clk_out;
output add_out;
output add_clk_out;
output L1;
output L2;
relation modeT # modeC # modeE;
relation cmd_vme # adem_vme # dem_vme # stop;
relation add_in # data_in;
relation add_clk # data_clk;
relation add_in # data_clk;
relation data_in # add_clk;
relation add_vme # data_vme # adem_vme # dem_vme # cmd_vme # stop;

loop
  await 
    case modeT do
      run T
    case modeC do
      run C
    case modeE do
      run E
  end await
end loop

end module

module clkdata:
input iclk;
input idata;
output data_ready;
output data_val;

loop
  trap DATA in
    signal IS_DATA in
      [
        await immediate iclk;
        await tick;
        present IS_DATA then
          emit data_val;
          await tick;
          emit data_val
        end present;
        exit DATA
      ||
        await immediate idata;
        sustain IS_DATA
      ]
    end signal
  end trap;
  emit data_ready;
  await immediate [not iclk]
end loop

end module

module em_C:
input dem_in;
input data_in;
input data_vme;
input add_vme;
input modeC;
input sout;
input stop;
input egal;
output raz_reg;
output raz_stop;
output it_data_C;
output it_dem;
output it_adem;
output paren;
output mem_clk;
output sclk;
output sin;
output data_out;
output data_clk_out;
output add_out;
output add_clk_out;
output ld1;
output L2;

emit it_adem;
trap STOP in
  loop
    await 
      case add_vme do
        emit raz_reg;
        trap ADRESSE in
          [
            run emdata_C [
              signal add_clk_out / clk_out,
                     add_out / out ]
          ||
            await add_clk_out;
            await tick;
            exit ADRESSE
          ]
        end trap
      case dem_in do
        emit it_dem;
        await data_vme;
        emit raz_reg;
        trap DONNEES in
          [
            run emdata_C [
              signal data_clk_out / clk_out,
                     data_out / out ]
          ||
            await data_clk_out;
            await tick;
            exit DONNEES
          ]
        end trap;
        await tick;
        run recdata;
        run lec_vme [
          signal L2 / ldcomp ];
        await tick;
        present egal else
          run pulse_C [
            signal data_out / S ];
          exit STOP
        end present
      case stop do
        emit raz_stop;
        exit STOP
      case [not modeC] do
        exit STOP
    end await
  end loop
end trap

end module

module em_E:
input dem_in;
input modeE;
input stop;
input add_in;
input data_in;
input add_clk;
input data_clk;
input err;
output raz_stop;
output sin;
output sclk;
output mem_clk;
output paren;
output it_adem;
output it_dem;
output it_err;
output it_data_T;
output it_add;

emit it_adem;
trap ACQADD,
     DEM_VME in
  [
    await immediate add_clk;
    exit ACQADD
  ||
    await immediate add_in;
    exit ACQADD
  ||
    await immediate dem_in;
    exit DEM_VME
  ]
handle ACQADD do
  run acqadd
end trap;
trap ACQDATA in
  loop
    await 
      case immediate dem_in do
        emit it_dem;
        run acqdata
      case stop do
        emit raz_stop;
        exit ACQDATA
      case err do
        emit it_err;
        exit ACQDATA
    end await
  end loop
end trap

end module

module em_T:
input modeT;
input stop;
input cmd_vme;
input adem_vme;
input dem_vme;
input add_in;
input data_in;
input add_clk;
input data_clk;
input sout;
input err;
output dem;
output raz_vme;
output raz_stop;
output sin;
output sclk;
output mem_clk;
output paren;
output it_err;
output it_data_T;
output it_add;
output data_out;
output ld2;

await immediate adem_vme do
  [
    run pulse_T [
      signal dem / S ]
  ||
    run pulse_T [
      signal data_out / S ]
  ]
end await;
trap ACQADD,
     DEM_VME in
  [
    await immediate add_clk;
    exit ACQADD
  ||
    await immediate add_in;
    exit ACQADD
  ||
    await immediate dem_vme;
    exit DEM_VME
  ]
handle ACQADD do
  run acqadd
end trap;
trap ACQDATA in
  loop
    await 
      case immediate dem_vme do
        run pulse_T [
          signal dem / S ];
        emit raz_vme;
        run acqdata;
        run load_vme [
          signal ld2 / load ];
        run emdata
      case stop do
        emit raz_stop;
        exit ACQDATA
      case err do
        emit it_err;
        exit ACQDATA
      case cmd_vme do
        exit ACQDATA
      case [not modeT] do
        exit ACQDATA
    end await
  end loop
end trap

end module

module emdata:
input data_clk;
input sout;
output sclk;
output data_out;

await data_clk;
present sout then
  run pulse_T [
    signal data_out / S ]
end present;
emit sclk;
await immediate [not data_clk]

end module

module emdata_C:
input sout;
output mem_clk;
output sclk;
output out;
output clk_out;
output ld1;

run load_vme [
  signal ld1 / load ];
await tick;
loop
  await tick;
  present sout then
    [
      run pulse_C [
        signal clk_out / S ]
    ||
      run pulse_C [
        signal out / S ]
    ]
  else
    run pulse_C [
      signal clk_out / S ]
  end present;
  emit sclk;
  await 31 tick
end loop

end module

module lec_vme:
output paren;
output mem_clk;
output ldcomp;

emit paren;
await tick;
emit paren;
emit mem_clk;
emit ldcomp

end module

module load_vme:
output load;
output sclk;
output mem_clk;

emit load;
await tick;
emit load;
emit sclk

end module

module pulse_C:
output S;

emit S;
await tick

end module

module pulse_T:
output S;

emit S;
await tick

end module

module rec_C:
input dem_in;
input data_in;
input data_vme;
input add_vme;
input modeC;
input sout;
input stop;
input egal;
output raz_reg;
output it_data_C;
output it_add;
output it_dem;
output it_adem;
output paren;
output mem_clk;
output sclk;
output sin;
output data_out;
output data_clk_out;
output add_out;
output add_clk_out;
output L1;
output L2;

trap RECDATA in
  signal fin_1,
         first in
    [
      run recdata;
      emit fin_1;
      present first then
        run lec_vme [
          signal L1 / ldcomp ];
        emit it_data_C;
        await tick
      else
        run lec_vme [
          signal L2 / ldcomp ];
        exit RECDATA
      end present
    ||
      await fin_1 do
        emit first
      end await
    ]
  end signal
end trap;
await tick;
present egal else
  run pulse_C [
    signal data_out / S ]
end present

end module

module rec_E:
input dem_in;
input modeE;
input stop;
input data_in;
input data_clk;
input err;
output raz_stop;
output sin;
output sclk;
output mem_clk;
output paren;
output it_err;
output it_data_T;

trap ACQDATA in
  loop
    await 
      case immediate dem_in do
        run acqdata
      case stop do
        emit raz_stop;
        exit ACQDATA
      case err do
        emit it_err;
        exit ACQDATA
    end await
  end loop
end trap

end module

module rec_T:
input cmd_vme;
input adem_vme;
input modeT;
input err;
input data_clk;
input sout;
output raz_vme;
output ld1;
output mem_clk;
output sclk;
output dem;
output it_err;
output data_out;

run pulse_T [
  signal dem / S ];
emit raz_vme;
run load_vme [
  signal ld1 / load ];
run emdata;
await 
  case err do
    emit it_err
  case cmd_vme
  case adem_vme
  case [not modeT]
end await

end module

module recdata:
input data_in;
output sclk;
output sin;
output data_clk_out;

await tick;
run pulse_C [
  signal data_clk_out / S ];
signal IS_DATA in
  trap DATA in
    [
      await immediate data_in do
        sustain IS_DATA
      end await
    ||
      await tick;
      present IS_DATA then
        emit sin;
        await tick;
        emit sin
      end present;
      exit DATA
    ]
  end trap
end signal;
emit sclk;
await tick;
await tick

end module
