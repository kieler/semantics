module REFLEX_GAME:
constant LIMIT_TIME : integer;
constant MEASURE_NUMBER : integer;
constant PAUSE_LENGTH : integer;
function RANDOM() : integer;
input MS;
input COIN;
input READY;
input STOP;
output DISPLAY : integer;
output GO_ON;
output GO_OFF;
output GAME_OVER_ON;
output GAME_OVER_OFF;
output TILT_ON;
output TILT_OFF;
output RING_BELL;
relation MS # COIN # READY;
relation COIN # STOP;
relation READY # STOP;

emit DISPLAY(0);
emit GO_OFF;
emit GAME_OVER_ON;
emit TILT_OFF;
every COIN do
  emit DISPLAY(0);
  emit GO_OFF;
  emit GAME_OVER_OFF;
  emit TILT_OFF;
  trap ERROR in
    var TOTAL_TIME : integer in
      TOTAL_TIME := 0;
      repeat MEASURE_NUMBER times
        abort
          abort
            every STOP do
              emit RING_BELL
            end every;
            loop
              pause
            end loop
          when READY
        when LIMIT_TIME MS do
          exit ERROR
        end abort;
        trap END_MEASURE in
          [
            every READY do
              emit RING_BELL
            end every
          ||
            abort
              abort
                loop
                  pause
                end loop
              when RANDOM() MS
            when STOP do
              exit ERROR
            end abort;
            emit GO_ON;
            abort
              var TIME : integer in
                TIME := 0;
                abort
                  every MS do
                    TIME := TIME + 1
                  end every;
                  loop
                    pause
                  end loop
                when STOP;
                emit DISPLAY(TIME);
                TOTAL_TIME := TOTAL_TIME + TIME
              end var
            when LIMIT_TIME MS do
              exit ERROR
            end abort;
            emit GO_OFF;
            exit END_MEASURE
          ]
        end trap
      end repeat;
      abort
        loop
          pause
        end loop
      when PAUSE_LENGTH MS do
        emit DISPLAY(TOTAL_TIME / MEASURE_NUMBER)
      end abort
    end var
  handle ERROR do
    emit TILT_ON;
    emit GO_OFF
  end trap;
  emit GAME_OVER_ON
end every

end module
