module warehouse_rcx2:
constant MAX_SPEED : integer;
constant OFF = 0 : integer;
constant FWD = 1 : integer;
constant REV = 2 : integer;
constant BRAKE = 3 : integer;
constant ITEM_HEIGHT = 118 : integer;
constant PICKUP_HEIGHT = 59 : integer;
constant MAX_ARM_EXTENSION = 230 : integer;
output MOTOR_A_DIR := OFF : integer;
output MOTOR_A_SPEED := 0 : integer;
output MOTOR_B_DIR := OFF : integer;
output MOTOR_B_SPEED := 0 : integer;
output MOTOR_C_DIR := OFF : integer;
output MOTOR_C_SPEED := 0 : integer;
output LCD_INT : integer;
sensor ROTATION_1 : integer;
sensor ROTATION_2 : integer;
input pickup_item : integer;
input drop_item : integer;
output forklift_op_complete;

loop
  abort
    loop
      pause
    end loop
  when
    case immediate pickup_item do
      emit MOTOR_A_SPEED(MAX_SPEED);
      emit MOTOR_B_SPEED(MAX_SPEED);
      emit MOTOR_A_DIR(FWD);
      trap reached_height in
        loop
          if (- ?ROTATION_1 >= (?pickup_item - 1) * ITEM_HEIGHT) {
            exit reached_height
          };
          pause
        end loop
      end trap;
      emit MOTOR_A_DIR(BRAKE);
      emit MOTOR_B_DIR(REV);
      trap arm_extended in
        loop
          if (- ?ROTATION_2 >= MAX_ARM_EXTENSION) {
            exit arm_extended
          };
          pause
        end loop
      end trap;
      emit MOTOR_B_DIR(BRAKE);
      emit MOTOR_A_DIR(FWD);
      trap picked_up_item in
        loop
          if (- ?ROTATION_1 >= (?pickup_item - 1) * ITEM_HEIGHT + PICKUP_HEIGHT) {
            exit picked_up_item
          };
          pause
        end loop
      end trap;
      emit MOTOR_A_DIR(BRAKE);
      emit MOTOR_B_DIR(FWD);
      trap arm_retracted in
        loop
          if (- ?ROTATION_2 <= 0) {
            exit arm_retracted
          };
          pause
        end loop
      end trap;
      emit MOTOR_B_DIR(BRAKE);
      emit MOTOR_A_DIR(REV);
      trap reached_bottom in
        loop
          if (- ?ROTATION_1 <= 0) {
            exit reached_bottom
          };
          pause
        end loop
      end trap;
      emit MOTOR_A_DIR(BRAKE)
    case immediate drop_item do
      emit MOTOR_A_SPEED(MAX_SPEED);
      emit MOTOR_B_SPEED(MAX_SPEED);
      emit MOTOR_A_DIR(FWD);
      trap reached_height in
        loop
          if (- ?ROTATION_1 >= (?drop_item - 1) * ITEM_HEIGHT + PICKUP_HEIGHT) {
            exit reached_height
          };
          pause
        end loop
      end trap;
      emit MOTOR_A_DIR(BRAKE);
      emit MOTOR_B_DIR(REV);
      trap arm_extended in
        loop
          if (- ?ROTATION_2 >= MAX_ARM_EXTENSION) {
            exit arm_extended
          };
          pause
        end loop
      end trap;
      emit MOTOR_B_DIR(BRAKE);
      emit MOTOR_A_DIR(REV);
      trap set_down_item in
        loop
          if (- ?ROTATION_1 <= (?drop_item - 1) * ITEM_HEIGHT) {
            exit set_down_item
          };
          pause
        end loop
      end trap;
      emit MOTOR_A_DIR(BRAKE);
      emit MOTOR_B_DIR(FWD);
      trap arm_retracted in
        loop
          if (- ?ROTATION_2 <= 0) {
            exit arm_retracted
          };
          pause
        end loop
      end trap;
      emit MOTOR_B_DIR(BRAKE);
      emit MOTOR_A_DIR(REV);
      trap reached_bottom in
        loop
          if (- ?ROTATION_1 <= 0) {
            exit reached_bottom
          };
          pause
        end loop
      end trap;
      emit MOTOR_A_DIR(BRAKE)
  end abort;
  pause;
  emit forklift_op_complete
end loop

end module
