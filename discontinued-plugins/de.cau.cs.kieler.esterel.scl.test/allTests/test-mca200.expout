module mca200_sim:
constant TIME_3_Km : integer;
constant K_SENS : integer;
constant MINUS_9 : integer;
constant PLUS_9 : integer;
constant INCR : integer;
constant COANG : integer;
constant UP : integer;
constant DOWN : integer;
constant HHVBAT : integer;
constant LHVBAT : integer;
constant HLVBAT : integer;
constant LLVBAT : integer;
constant BAT_TIME_OUT : integer;
constant TIME_RECOVERY : integer;
constant K1 : integer;
constant SPEED_STOP : integer;
constant A : integer;
constant B : integer;
constant TIME_REF_A : integer;
constant TIME_REF_B : integer;
constant LPERIOD : integer;
constant HPERIOD : integer;
constant MAX_ACC_VALUE : integer;
constant MAX_OUT_TIME : integer;
constant MAX_ABN_NUM : integer;
constant MAX_OUT_ERR_NUM : integer;
constant MIN_TPAR : integer;
constant MAX_MIN_TPAR_NUM : integer;
constant D_TIME_10_MS : integer;
constant D_TIME_1_S : integer;
constant D_TIME_20_MS : integer;
constant D_TIME_4_S : integer;
constant HARD : integer;
constant MED : integer;
constant SOFT : integer;
constant HHHARD : integer;
constant HLHARD : integer;
constant HHMED : integer;
constant HLMED : integer;
constant LHMED : integer;
constant LLMED : integer;
constant LHHARD : integer;
constant LLHARD : integer;
constant DDEHF_4 : integer;
constant DDEHF_5 : integer;
constant ACHR_20 : integer;
constant DDEHF_6 : integer;
constant ACHR_21 : integer;
constant DDEHF_7 : integer;
constant ACHR_22 : integer;
constant DDEHF_8 : integer;
constant ACHR_23 : integer;
constant DDEHF_9 : integer;
constant ACHR_24 : integer;
constant ACHR_25 : integer;
constant ACMR_20 : integer;
constant ACMR_21 : integer;
constant ACMR_22 : integer;
constant ACMR_23 : integer;
constant ACMR_24 : integer;
constant ACMR_25 : integer;
constant DDEHF_10 : integer;
constant DEHR_10 : integer;
constant DDEHF_11 : integer;
constant DEHR_11 : integer;
constant DDEHF_12 : integer;
constant DEHR_12 : integer;
constant DDELFMD : integer;
constant DDEHF_13 : integer;
constant DEHR_13 : integer;
constant DDEHF_14 : integer;
constant DEHR_14 : integer;
constant DDEHF_15 : integer;
constant DDEMF_10 : integer;
constant DEHR_15 : integer;
constant DEMR_10 : integer;
constant DDEHF_16 : integer;
constant DDEMF_11 : integer;
constant DEHR_16 : integer;
constant DEMR_11 : integer;
constant ACMR_1 : integer;
constant Kd : integer;
constant DDEHF_17 : integer;
constant DDEMF_12 : integer;
constant DEHR_17 : integer;
constant DEMR_12 : integer;
constant ACMR_2 : integer;
constant DDEHF_18 : integer;
constant DDEMF_13 : integer;
constant DEHR_18 : integer;
constant DEMR_13 : integer;
constant ACMR_3 : integer;
constant DDEHF_19 : integer;
constant DDEMF_14 : integer;
constant DEHR_19 : integer;
constant DEMR_14 : integer;
constant ACMR_4 : integer;
constant DDEMF_15 : integer;
constant DEMR_15 : integer;
constant ACMR_5 : integer;
constant DDEMF_16 : integer;
constant DEMR_16 : integer;
constant ACMR_6 : integer;
constant DDEMF_17 : integer;
constant DEMR_17 : integer;
constant ACMR_7 : integer;
constant DDEMF_18 : integer;
constant DEMR_18 : integer;
constant DELRHA : integer;
constant ACMR_8 : integer;
constant DDEMF_19 : integer;
constant DEMR_19 : integer;
constant DEHF_1 : integer;
constant ACMR_9 : integer;
constant DEHF_2 : integer;
constant DELRHD : integer;
constant DEHF_3 : integer;
constant DEHF_4 : integer;
constant DEHF_5 : integer;
constant DEHF_6 : integer;
constant DEHF_7 : integer;
constant DEHF_8 : integer;
constant DEHF_9 : integer;
constant DDEHF_20 : integer;
constant DEHR_20 : integer;
constant DDEHF_21 : integer;
constant DEHR_21 : integer;
constant DDEHF_22 : integer;
constant DEHR_22 : integer;
constant DDEHF_23 : integer;
constant DEHR_23 : integer;
constant DDEHF_24 : integer;
constant DEHR_24 : integer;
constant DDEHF_25 : integer;
constant DDEMF_20 : integer;
constant DEHR_25 : integer;
constant DEMR_20 : integer;
constant DELFMA : integer;
constant DDEMF_21 : integer;
constant DEMR_21 : integer;
constant DDEMF_22 : integer;
constant DEMR_22 : integer;
constant DDEMF_23 : integer;
constant DEMR_23 : integer;
constant DELFMD : integer;
constant DDEMF_24 : integer;
constant DEMR_24 : integer;
constant DDEMF_25 : integer;
constant DEMR_25 : integer;
constant DDELFHD : integer;
constant ACHR_1 : integer;
constant ACHR_2 : integer;
constant ACHR_3 : integer;
constant ACHR_4 : integer;
constant ACHR_5 : integer;
constant ACHR_6 : integer;
constant ACHR_7 : integer;
constant ACHR_8 : integer;
constant ACHR_9 : integer;
constant ACHF_10 : integer;
constant ACHF_11 : integer;
constant ACHF_12 : integer;
constant ACHF_13 : integer;
constant ACHF_14 : integer;
constant ACHF_15 : integer;
constant ACMF_10 : integer;
constant DDEMR_1 : integer;
constant ACHF_16 : integer;
constant ACMF_11 : integer;
constant DDEMR_2 : integer;
constant ACHF_17 : integer;
constant ACMF_12 : integer;
constant DDEMR_3 : integer;
constant ACHF_18 : integer;
constant ACMF_13 : integer;
constant DDEMR_4 : integer;
constant ACHF_19 : integer;
constant ACMF_14 : integer;
constant DDEMR_5 : integer;
constant ACMF_15 : integer;
constant DDEMR_6 : integer;
constant ACMF_16 : integer;
constant DDEMR_7 : integer;
constant ACMF_17 : integer;
constant DDEMR_8 : integer;
constant ACMF_18 : integer;
constant DDEMR_9 : integer;
constant ACMF_19 : integer;
constant ACMF_1 : integer;
constant ACMF_2 : integer;
constant ACMF_3 : integer;
constant ACMF_4 : integer;
constant ACMF_5 : integer;
constant ACMF_6 : integer;
constant ACMF_7 : integer;
constant DELFHA : integer;
constant ACMF_8 : integer;
constant ACMF_9 : integer;
constant DELFHD : integer;
constant ACHF_20 : integer;
constant ACHF_21 : integer;
constant DDEHR_10 : integer;
constant ACHF_22 : integer;
constant DDEHR_11 : integer;
constant ACHF_23 : integer;
constant DDEHR_12 : integer;
constant ACHF_24 : integer;
constant DDEHR_13 : integer;
constant ACHF_25 : integer;
constant ACMF_20 : integer;
constant DDEHR_14 : integer;
constant ACMF_21 : integer;
constant DDEHR_15 : integer;
constant DDEMR_10 : integer;
constant ACMF_22 : integer;
constant DDEHR_16 : integer;
constant DDEMR_11 : integer;
constant ACMF_23 : integer;
constant DDEHR_17 : integer;
constant DDEMR_12 : integer;
constant ACMF_24 : integer;
constant DDEHR_18 : integer;
constant DDEMR_13 : integer;
constant ACMF_25 : integer;
constant DDEHR_19 : integer;
constant DDEMR_14 : integer;
constant DEMR_1 : integer;
constant DDEMR_15 : integer;
constant DEMR_2 : integer;
constant DDEMR_16 : integer;
constant DEMR_3 : integer;
constant DDEMR_17 : integer;
constant DEMR_4 : integer;
constant DDEMR_18 : integer;
constant DEMR_5 : integer;
constant DDEMR_19 : integer;
constant DEMR_6 : integer;
constant DEMR_7 : integer;
constant DEMR_8 : integer;
constant DEHF_10 : integer;
constant DEMR_9 : integer;
constant DEHF_11 : integer;
constant DDEHR_1 : integer;
constant DEHF_12 : integer;
constant DDEHR_2 : integer;
constant DEHF_13 : integer;
constant DDEHR_3 : integer;
constant DEHF_14 : integer;
constant DDEHR_4 : integer;
constant DEHF_15 : integer;
constant DEMF_10 : integer;
constant DDEHR_5 : integer;
constant DEHF_16 : integer;
constant DEMF_11 : integer;
constant DDEHR_6 : integer;
constant DEHF_17 : integer;
constant DEMF_12 : integer;
constant DDEHR_7 : integer;
constant DEHF_18 : integer;
constant DEMF_13 : integer;
constant DDEHR_8 : integer;
constant DEHF_19 : integer;
constant DEMF_14 : integer;
constant DDEHR_9 : integer;
constant DEMF_15 : integer;
constant DEMF_16 : integer;
constant ACHF_1 : integer;
constant DEMF_17 : integer;
constant ACHF_2 : integer;
constant DEMF_18 : integer;
constant ACHF_3 : integer;
constant DEMF_19 : integer;
constant ACHF_4 : integer;
constant DDEHR_20 : integer;
constant ACHF_5 : integer;
constant DDEHR_21 : integer;
constant ACHF_6 : integer;
constant DDEHR_22 : integer;
constant ACHF_7 : integer;
constant DDEHR_23 : integer;
constant ACHF_8 : integer;
constant DDEHR_24 : integer;
constant ACHF_9 : integer;
constant DDEHR_25 : integer;
constant DDEMR_20 : integer;
constant DDEMR_21 : integer;
constant DDEMR_22 : integer;
constant DDEMR_23 : integer;
constant DDEMR_24 : integer;
constant DDEMR_25 : integer;
constant DDEMF_1 : integer;
constant DDEMF_2 : integer;
constant DDELRMD : integer;
constant DDEMF_3 : integer;
constant DDEMF_4 : integer;
constant DDEMF_5 : integer;
constant DDEMF_6 : integer;
constant DDEMF_7 : integer;
constant DEHF_20 : integer;
constant DDEMF_8 : integer;
constant DEHF_21 : integer;
constant DDEMF_9 : integer;
constant DEHF_22 : integer;
constant DEHF_23 : integer;
constant DEHF_24 : integer;
constant DEHF_25 : integer;
constant DEMF_20 : integer;
constant DEMF_21 : integer;
constant DEHR_1 : integer;
constant DEMF_22 : integer;
constant DEHR_2 : integer;
constant DEMF_23 : integer;
constant DEHR_3 : integer;
constant DEMF_24 : integer;
constant DEHR_4 : integer;
constant DEMF_25 : integer;
constant DEHR_5 : integer;
constant DEHR_6 : integer;
constant ACHR_10 : integer;
constant DEHR_7 : integer;
constant ACHR_11 : integer;
constant DEHR_8 : integer;
constant ACHR_12 : integer;
constant DEHR_9 : integer;
constant ACHR_13 : integer;
constant ACHR_14 : integer;
constant ACHR_15 : integer;
constant ACMR_10 : integer;
constant ACHR_16 : integer;
constant ACMR_11 : integer;
constant ACHR_17 : integer;
constant ACMR_12 : integer;
constant ACHR_18 : integer;
constant ACMR_13 : integer;
constant ACHR_19 : integer;
constant ACMR_14 : integer;
constant ACMR_15 : integer;
constant ACMR_16 : integer;
constant ACMR_17 : integer;
constant ACMR_18 : integer;
constant ACMR_19 : integer;
constant DELRMA : integer;
constant DEMF_1 : integer;
constant DEMF_2 : integer;
constant DELRMD : integer;
constant DEMF_3 : integer;
constant DEMF_4 : integer;
constant DEMF_5 : integer;
constant DEMF_6 : integer;
constant DEMF_7 : integer;
constant DEMF_8 : integer;
constant DEMF_9 : integer;
constant DDEHF_1 : integer;
constant DDEHF_2 : integer;
constant DDELRHD : integer;
constant DDEHF_3 : integer;
constant SPEED_10_KM : integer;
constant SPEED_20_KM : integer;
constant SPEED_30_KM : integer;
constant SPEED_40_KM : integer;
constant SPEED_50_KM : integer;
constant SPEED_60_KM : integer;
constant SPEED_70_KM : integer;
constant SPEED_80_KM : integer;
constant SPEED_90_KM : integer;
constant SPEED_100_KM : integer;
constant SPEED_110_KM : integer;
constant SPEED_120_KM : integer;
constant SPEED_130_KM : integer;
constant SPEED_140_KM : integer;
constant SPEED_150_KM : integer;
constant SPEED_160_KM : integer;
constant SPEED_170_KM : integer;
constant SPEED_180_KM : integer;
constant SPEED_190_KM : integer;
constant SPEED_200_KM : integer;
constant SPEED_210_KM : integer;
constant SPEED_220_KM : integer;
constant SPEED_230_KM : integer;
constant SPEED_240_KM : integer;
constant SPEED_250_KM : integer;
constant DELCOM_18 : integer;
constant DELCOM_1 : integer;
constant ACLOWH_1 : integer;
constant ACLOWM_15 : integer;
constant DELCOM_19 : integer;
constant DELCOM_2 : integer;
constant DELCOL_10 : integer;
constant ACLOWH_2 : integer;
constant ACLOWM_16 : integer;
constant DELCOM_3 : integer;
constant DELFMME : integer;
constant DELCOL_11 : integer;
constant ACLOWH_3 : integer;
constant ACLOWM_17 : integer;
constant DELCOM_4 : integer;
constant DELCOL_12 : integer;
constant ACLOWH_4 : integer;
constant ACLOWM_18 : integer;
constant DELCOM_5 : integer;
constant DELCOL_13 : integer;
constant ACLOWH_5 : integer;
constant ACLOWM_19 : integer;
constant DELCOM_6 : integer;
constant DELCOL_14 : integer;
constant ACLOWH_6 : integer;
constant ACLOWM_1 : integer;
constant DELCOM_7 : integer;
constant DELCOL_15 : integer;
constant ACLOWH_7 : integer;
constant ACLOWM_2 : integer;
constant DELCOM_8 : integer;
constant DELCOL_16 : integer;
constant ACLOWH_8 : integer;
constant ACLOWM_3 : integer;
constant DELCOM_9 : integer;
constant DELCOL_17 : integer;
constant ACLOWH_9 : integer;
constant ACLOWM_4 : integer;
constant DELCOL_18 : integer;
constant ACLOWM_5 : integer;
constant DELCOL_19 : integer;
constant ACLOWM_6 : integer;
constant ACLOWM_7 : integer;
constant ACLOWM_8 : integer;
constant ACLOWM_9 : integer;
constant DELCOM_20 : integer;
constant DELCOM_21 : integer;
constant DELCOM_22 : integer;
constant DELCOM_23 : integer;
constant ACLOWM_20 : integer;
constant DELCOM_24 : integer;
constant ACLOWM_21 : integer;
constant DELCOM_25 : integer;
constant ACLOWM_22 : integer;
constant ACLOWM_23 : integer;
constant ACLOWM_24 : integer;
constant ACLOWM_25 : integer;
constant DELCOL_20 : integer;
constant DELCOL_21 : integer;
constant DELCOL_22 : integer;
constant DELCOL_23 : integer;
constant DELCOL_24 : integer;
constant DELCOL_25 : integer;
constant DELCOL_1 : integer;
constant DELCOL_2 : integer;
constant ACLOWH_10 : integer;
constant DELCOL_3 : integer;
constant ACLOWH_11 : integer;
constant DELCOL_4 : integer;
constant ACLOWH_12 : integer;
constant DELCOL_5 : integer;
constant ACLOWH_13 : integer;
constant DELCOL_6 : integer;
constant ACLOWH_14 : integer;
constant DELCOL_7 : integer;
constant ACLOWH_15 : integer;
constant DELCOL_8 : integer;
constant ACLOWH_16 : integer;
constant DELCOL_9 : integer;
constant ACLOWH_17 : integer;
constant ACLOWH_18 : integer;
constant ACLOWH_19 : integer;
constant MA0 : integer;
constant MA1 : integer;
constant ACMEDM_10 : integer;
constant ACMEDM_11 : integer;
constant ACMEDM_12 : integer;
constant ACMEDM_13 : integer;
constant ACMEDM_14 : integer;
constant ACLOWH_20 : integer;
constant ACMEDM_15 : integer;
constant ACLOWH_21 : integer;
constant ACMEDM_16 : integer;
constant ACLOWH_22 : integer;
constant ACMEDM_17 : integer;
constant ACLOWH_23 : integer;
constant ACMEDM_18 : integer;
constant ACLOWH_24 : integer;
constant ACMEDM_19 : integer;
constant ACLOWH_25 : integer;
constant MB0 : integer;
constant MB1 : integer;
constant MB2 : integer;
constant ACMEDM_20 : integer;
constant ACMEDM_21 : integer;
constant LA0 : integer;
constant ACMEDM_22 : integer;
constant LA1 : integer;
constant ACMEDM_23 : integer;
constant ACMEDM_24 : integer;
constant ACMEDM_25 : integer;
constant ACMEDH_10 : integer;
constant ACMEDH_1 : integer;
constant ACMEDH_11 : integer;
constant ACMEDH_2 : integer;
constant ACMEDH_12 : integer;
constant ACMEDH_3 : integer;
constant ACMEDH_13 : integer;
constant ACMEDH_4 : integer;
constant ACMEDH_14 : integer;
constant ACMEDH_5 : integer;
constant ACMEDH_15 : integer;
constant ACMEDH_6 : integer;
constant ACMEDM_1 : integer;
constant ACMEDH_16 : integer;
constant ACMEDH_7 : integer;
constant ACMEDM_2 : integer;
constant ACMEDH_17 : integer;
constant ACMEDH_8 : integer;
constant ACMEDM_3 : integer;
constant ACMEDH_18 : integer;
constant ACMEDH_9 : integer;
constant ACMEDM_4 : integer;
constant ACMEDH_19 : integer;
constant ACMEDM_5 : integer;
constant ACMEDM_6 : integer;
constant ACMEDM_7 : integer;
constant ACMEDM_8 : integer;
constant ACMEDM_9 : integer;
constant LB0 : integer;
constant LB1 : integer;
constant LB2 : integer;
constant ACMEDH_20 : integer;
constant ACMEDH_21 : integer;
constant ACMEDH_22 : integer;
constant ACMEDH_23 : integer;
constant ACMEDH_24 : integer;
constant ACMEDH_25 : integer;
constant DELFHLO : integer;
constant DELFMLO : integer;
constant DELCOM_10 : integer;
constant DELCOM_11 : integer;
constant DELCOM_12 : integer;
constant DELCOM_13 : integer;
constant ACLOWM_10 : integer;
constant DELCOM_14 : integer;
constant ACLOWM_11 : integer;
constant DELCOM_15 : integer;
constant DELFHME : integer;
constant ACLOWM_12 : integer;
constant DELCOM_16 : integer;
constant ACLOWM_13 : integer;
constant DELCOM_17 : integer;
constant ACLOWM_14 : integer;
constant ZERO_ACC : integer;
constant GME_ACC : integer;
constant MAX_ACC : integer;
constant MIN_ACC : integer;
constant MAX_R_ACC : integer;
constant MIN_R_ACC : integer;
constant TIME_OUT : integer;
constant TIME_R_OUT : integer;
constant MAX_ABNORM_NUM : integer;
constant ANHR_1 : integer;
constant ANHR_2 : integer;
constant ANHR_3 : integer;
constant ANHR_4 : integer;
constant ANHR_5 : integer;
constant ANHR_6 : integer;
constant ANHR_7 : integer;
constant ANHR_8 : integer;
constant ANHR_9 : integer;
constant ANMF_1 : integer;
constant ANMF_2 : integer;
constant ANMF_3 : integer;
constant ANMF_4 : integer;
constant ANMF_5 : integer;
constant ANMF_6 : integer;
constant ANMF_7 : integer;
constant ANHR_10 : integer;
constant ANMF_8 : integer;
constant ANHR_11 : integer;
constant ANMF_9 : integer;
constant ANHR_12 : integer;
constant ANHR_13 : integer;
constant DELFHAN : integer;
constant ANHR_14 : integer;
constant ANHR_15 : integer;
constant ANMR_10 : integer;
constant ANHR_16 : integer;
constant ANMR_11 : integer;
constant ANHR_17 : integer;
constant ANMR_12 : integer;
constant ANHR_18 : integer;
constant ANMR_13 : integer;
constant DELFMAN : integer;
constant ANHR_19 : integer;
constant ANMR_14 : integer;
constant ANMR_15 : integer;
constant ANMR_16 : integer;
constant ANMR_17 : integer;
constant ANMR_18 : integer;
constant ANMR_19 : integer;
constant ANHR_20 : integer;
constant ANHR_21 : integer;
constant ANHR_22 : integer;
constant ANHR_23 : integer;
constant ANHR_24 : integer;
constant ANHR_25 : integer;
constant ANMR_20 : integer;
constant ANMR_21 : integer;
constant ANMR_22 : integer;
constant ANHF_1 : integer;
constant ANMR_23 : integer;
constant ANHF_2 : integer;
constant ANMR_24 : integer;
constant ANHF_3 : integer;
constant ANMR_25 : integer;
constant ANHF_4 : integer;
constant ANHF_5 : integer;
constant ANHF_6 : integer;
constant ANHF_7 : integer;
constant ANHF_8 : integer;
constant ANHF_9 : integer;
constant DELRHAN : integer;
constant DELRMAN : integer;
constant ANHF_10 : integer;
constant ANHF_11 : integer;
constant ANHF_12 : integer;
constant ANHF_13 : integer;
constant ANHF_14 : integer;
constant ANHF_15 : integer;
constant ANMF_10 : integer;
constant ANHF_16 : integer;
constant ANMF_11 : integer;
constant ANHF_17 : integer;
constant ANMF_12 : integer;
constant ANHF_18 : integer;
constant ANMF_13 : integer;
constant ANHF_19 : integer;
constant ANMF_14 : integer;
constant ANMF_15 : integer;
constant ANMF_16 : integer;
constant ANMF_17 : integer;
constant ANMF_18 : integer;
constant ANMF_19 : integer;
constant ANMR_1 : integer;
constant ANMR_2 : integer;
constant ANMR_3 : integer;
constant ANMR_4 : integer;
constant ANMR_5 : integer;
constant ANMR_6 : integer;
constant ANMR_7 : integer;
constant ANMR_8 : integer;
constant ANMR_9 : integer;
constant ANHF_20 : integer;
constant ANHF_21 : integer;
constant ANHF_22 : integer;
constant ANHF_23 : integer;
constant ANHF_24 : integer;
constant ANHF_25 : integer;
constant ANMF_20 : integer;
constant ANMF_21 : integer;
constant ANMF_22 : integer;
constant ANMF_23 : integer;
constant ANMF_24 : integer;
constant ANMF_25 : integer;
constant MAX_INIT_TIME : integer;
constant INIT_SPEED1 : integer;
constant INIT_SPEED2 : integer;
constant MIN_ANG_VALUE : integer;
constant MAX_ANG_VALUE : integer;
constant ANG_INCR_INIT : integer;
constant ANG_INCR : integer;
constant Kz : integer;
constant T_Kz : integer;
constant MAX_SPEED_VALUE : integer;
constant MIN_CORR_Kz : integer;
constant T_Kt : integer;
constant MAX_CORR : integer;
constant Ky : integer;
constant T_Ky : integer;
constant MIN_CORR_Ky : integer;
constant TIME_A_1 : integer;
constant TIME_A_2 : integer;
constant TIME_A_3 : integer;
constant TIME_B_1 : integer;
constant TIME_B_2 : integer;
constant TIME_B_3 : integer;
constant VAHR_2 : integer;
constant VAHF_13 : integer;
constant VAHR_3 : integer;
constant VAHF_14 : integer;
constant VAHR_4 : integer;
constant VAHF_15 : integer;
constant VAMF_10 : integer;
constant VAHR_5 : integer;
constant VAHF_16 : integer;
constant VAMF_11 : integer;
constant VAHR_6 : integer;
constant VAHF_17 : integer;
constant VAMF_12 : integer;
constant VAHR_7 : integer;
constant VAHF_18 : integer;
constant VAMF_13 : integer;
constant VAHR_8 : integer;
constant VAHF_19 : integer;
constant VAMF_14 : integer;
constant VAHR_9 : integer;
constant VAMF_15 : integer;
constant VAMF_16 : integer;
constant VAMF_17 : integer;
constant VAMF_18 : integer;
constant VAMF_19 : integer;
constant VAMF_1 : integer;
constant VAMF_2 : integer;
constant VAMF_3 : integer;
constant VAMF_4 : integer;
constant VAMF_5 : integer;
constant VAMF_6 : integer;
constant VAHF_20 : integer;
constant VAMF_7 : integer;
constant VAHF_21 : integer;
constant VAMF_8 : integer;
constant VAHF_22 : integer;
constant VAMF_9 : integer;
constant VAHF_23 : integer;
constant VAHF_24 : integer;
constant VAHF_25 : integer;
constant VAMF_20 : integer;
constant VAMF_21 : integer;
constant VAMF_22 : integer;
constant VAMF_23 : integer;
constant VAMF_24 : integer;
constant VAMF_25 : integer;
constant Kv : integer;
constant VAHF_1 : integer;
constant VAHF_2 : integer;
constant VAHF_3 : integer;
constant VAHF_4 : integer;
constant VAHF_5 : integer;
constant DELFHVA : integer;
constant VAHF_6 : integer;
constant VAHF_7 : integer;
constant VAHF_8 : integer;
constant VAHF_9 : integer;
constant DELFMVA : integer;
constant VAHR_10 : integer;
constant VAHR_11 : integer;
constant VAHR_12 : integer;
constant VAHR_13 : integer;
constant VAHR_14 : integer;
constant VAHR_15 : integer;
constant VAMR_10 : integer;
constant VAHR_16 : integer;
constant VAMR_11 : integer;
constant VAHR_17 : integer;
constant VAMR_12 : integer;
constant VAHR_18 : integer;
constant VAMR_13 : integer;
constant VAHR_19 : integer;
constant VAMR_14 : integer;
constant VAMR_15 : integer;
constant VAMR_16 : integer;
constant VAMR_17 : integer;
constant VAMR_18 : integer;
constant VAMR_19 : integer;
constant VAHR_20 : integer;
constant VAHR_21 : integer;
constant VAHR_22 : integer;
constant VAHR_23 : integer;
constant VAHR_24 : integer;
constant VAHR_25 : integer;
constant VAMR_20 : integer;
constant VAMR_21 : integer;
constant VAMR_22 : integer;
constant VAMR_23 : integer;
constant VAMR_24 : integer;
constant VAMR_25 : integer;
constant VAMR_1 : integer;
constant VAMR_2 : integer;
constant VAMR_3 : integer;
constant VAMR_4 : integer;
constant VAMR_5 : integer;
constant VAMR_6 : integer;
constant VAMR_7 : integer;
constant VAMR_8 : integer;
constant VAMR_9 : integer;
constant DELRHVA : integer;
constant DELRMVA : integer;
constant VAHF_10 : integer;
constant VAHF_11 : integer;
constant VAHR_1 : integer;
constant VAHF_12 : integer;
constant MAX_SPEED_VAL : integer;
constant MAX_NUM_SPEED_VAL_OUT : integer;
constant TIME_START : integer;
constant TIME_STOP : integer;
constant TIME_45 : integer;
constant TIME_30 : integer;
constant TIME_15 : integer;
constant VBAT_10_V : integer;
constant VBAT_12_V : integer;
constant VBAT_13_V : integer;
function POLIS_RSH(integer, integer) : integer;
input RESET;
input CLOCK_500;
input CLOCK_24;
input CLOCK_32;
input CLOCK_16;
input ANG_INPUT : integer;
input VELSTER : integer;
input VELINST : integer;
input ACC_SENS : integer;
input VBAT : integer;
input MOT_POS_A1 : boolean;
input MOT_POS_B1 : boolean;
input MOT_POS_A2 : boolean;
input MOT_POS_B2 : boolean;
input MOT_POS_A3 : boolean;
input MOT_POS_B3 : boolean;
input MOT_POS_A4 : boolean;
input MOT_POS_B4 : boolean;
output MOT_CHANNEL_P1 : boolean;
output MOT_CHANNEL_N1 : boolean;
output MOT_CHANNEL_P2 : boolean;
output MOT_CHANNEL_N2 : boolean;
output MOT_CHANNEL_P3 : boolean;
output MOT_CHANNEL_N3 : boolean;
output MOT_CHANNEL_P4 : boolean;
output MOT_CHANNEL_N4 : boolean;

signal STEER_ANG_MOT_REAR : integer,
       LONG_SPEED_KM : integer,
       VER_ACC_FREQ_MED : integer,
       STEER_ANG_DAMAGE : integer,
       STEER_SPEED_ERR,
       STEER1_SENS : boolean,
       LONG_DECC_MOT_FRONT : integer,
       BAT_ERR,
       STEER2_SENS : boolean,
       LONG_SPEED_MOT : integer,
       VER_ACC_MED_MOT_REAR : integer,
       LONG_SPEED_ERR,
       VER_ACC_ERR,
       VER_ACC_LOW_MOT_FRONT : integer,
       BAT_MOT_RES,
       STEER_SPEED_NO_SOFT,
       VER_ACC_MED_MOT_FRONT : integer,
       LONG_ACC_MOT_FRONT : integer,
       STEER_SPEED_MOT_REAR : integer,
       LONG_ACC_MOT_REAR : integer,
       BAT_MOT_HARD,
       STEER_ANG_MOT_FRONT : integer,
       VER_ACC_LOW_MOT_REAR : integer,
       LONG_DECC_MOT_REAR : integer,
       STEER_SPEED_MOT_FRONT : integer,
       LONG_ACC_DER_MOT_REAR : integer,
       SPEED_SENS,
       STEER_ANG_ERR,
       LONG_SPEED_FILT : integer,
       LONG_ACC_DER_MOT_FRONT : integer,
       STEER_SENS : boolean,
       ignored in
    var VELINST_VAL : integer,
        TIME : integer,
        TRS : integer in
      loop
        TIME := TIME_3_Km;
        TRS := TIME_3_Km;
        VELINST_VAL := 0;
        do
          loop
            await [CLOCK_32 or VELINST];
            present VELINST then
              VELINST_VAL := ?VELINST;
              if VELINST_VAL = 0 then
                TRS := TIME_3_Km;
                TIME := TIME_3_Km
              else
                TRS := K_SENS / VELINST_VAL
              end if
            end present;
            present CLOCK_32 then
              TIME := TIME - 1;
              if TIME <= 0 then
                emit SPEED_SENS;
                TIME := TRS
              end if
            end present
          end loop
        watching RESET
      end loop
    end var
  ||
    var ANG_VAL : integer,
        VELSTER_VAL : integer,
        STR_VAL : boolean,
        STR1_VAL : boolean,
        STR2_VAL : boolean,
        TIME : integer,
        Q_TEANG : integer,
        DIR : integer,
        ANG_CUR : integer in
      loop
        ANG_VAL := 0;
        VELSTER_VAL := 0;
        STR_VAL := false;
        STR1_VAL := false;
        STR2_VAL := false;
        TIME := 0;
        Q_TEANG := 0;
        DIR := 0;
        ANG_CUR := 0;
        do
          loop
            await 
              case CLOCK_16 do
                TIME := TIME + 1;
                if TIME > Q_TEANG then
                  emit STEER_SENS(STR_VAL);
                  emit STEER1_SENS(STR1_VAL);
                  emit STEER2_SENS(STR2_VAL);
                  if DIR <> 0 then
                    if not STR1_VAL and not STR2_VAL then
                      if DIR = 1 or DIR = 3 then
                        STR1_VAL := true;
                        ANG_CUR := ANG_CUR + INCR
                      else
                        STR2_VAL := true;
                        ANG_CUR := ANG_CUR - INCR
                      end if
                    else
                      if not STR1_VAL and STR2_VAL then
                        if DIR = 1 or DIR = 3 then
                          STR2_VAL := false
                        else
                          STR1_VAL := true;
                          ANG_CUR := ANG_CUR - INCR
                        end if
                      else
                        if STR1_VAL and not STR2_VAL then
                          if DIR = 1 or DIR = 3 then
                            STR2_VAL := true;
                            ANG_CUR := ANG_CUR + INCR
                          else
                            STR1_VAL := false
                          end if
                        else
                          if DIR = 1 then
                            STR1_VAL := false
                          else
                            if DIR = 2 then
                              STR2_VAL := false
                            else
                              STR1_VAL := false;
                              STR2_VAL := false;
                              if DIR = 3 then
                                DIR := 2
                              else
                                DIR := 1
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  end if;
                  TIME := 0;
                  if ANG_VAL > ANG_CUR - INCR and ANG_VAL < ANG_CUR + INCR then
                    DIR := 0
                  end if;
                  if ANG_CUR <= MINUS_9 or ANG_CUR >= PLUS_9 then
                    STR_VAL := true
                  else
                    if ANG_CUR > MINUS_9 and ANG_CUR < PLUS_9 then
                      STR_VAL := false
                    end if
                  end if
                end if
              case ANG_INPUT do
                ANG_VAL := ?ANG_INPUT;
                if DIR = 1 and ANG_VAL < ANG_CUR - INCR then
                  DIR := 3
                else
                  if DIR = 2 and ANG_VAL > ANG_CUR + INCR then
                    DIR := 4
                  else
                    if ANG_VAL > ANG_CUR - INCR and ANG_VAL < ANG_CUR + INCR then
                      DIR := 0
                    else
                      if ANG_VAL < ANG_CUR - INCR then
                        DIR := 2
                      else
                        DIR := 1
                      end if
                    end if
                  end if
                end if
              case VELSTER do
                VELSTER_VAL := ?VELSTER;
                Q_TEANG := COANG / 2 * VELSTER_VAL
            end await
          end loop
        watching RESET
      end loop
    end var
  ||
    var VBAT_VALUE : integer,
        OLD_VALUE : integer,
        VBAT_OUT_TIME : integer,
        DIRECTION : integer,
        RECOVERY_STATE : boolean in
      loop
        VBAT_VALUE := 0;
        OLD_VALUE := 0;
        VBAT_OUT_TIME := 0;
        DIRECTION := UP;
        RECOVERY_STATE := false;
        do
          loop
            await 
              case VBAT do
                VBAT_VALUE := ?VBAT;
                if VBAT_VALUE > OLD_VALUE then
                  DIRECTION := UP
                else
                  if VBAT_VALUE < OLD_VALUE then
                    DIRECTION := DOWN
                  end if
                end if;
                OLD_VALUE := VBAT_VALUE
              case CLOCK_24 do
                if DIRECTION = UP and (VBAT_VALUE > HHVBAT or VBAT_VALUE < HLVBAT) or DIRECTION = DOWN and (VBAT_VALUE > LHVBAT or VBAT_VALUE < LLVBAT) then
                  VBAT_OUT_TIME := VBAT_OUT_TIME + 1;
                  if not RECOVERY_STATE and VBAT_OUT_TIME >= BAT_TIME_OUT then
                    RECOVERY_STATE := true;
                    emit BAT_MOT_HARD;
                    VBAT_OUT_TIME := 0
                  else
                    if RECOVERY_STATE and VBAT_OUT_TIME >= TIME_RECOVERY then
                      emit BAT_ERR;
                      halt
                    end if
                  end if
                else
                  VBAT_OUT_TIME := 0;
                  if RECOVERY_STATE then
                    emit BAT_MOT_RES;
                    RECOVERY_STATE := false
                  end if
                end if
            end await
          end loop
        watching RESET
      end loop
    end var
  ||
    signal SPEED_OFF,
           SPEED_INST : integer,
           ignored in
        signal TRS_B : integer,
               TRS_A : integer,
               ignored in
            var D_TIME : integer,
                D_TIME_0 : integer,
                D_TIME_1 : integer,
                D_TIME_2 : integer,
                D_TIME_3 : integer,
                D_TIME_4 : integer,
                D_TIME_5 : integer,
                D_TIME_6 : integer,
                D_TIME_7 : integer,
                TIME_A : integer,
                TIME_B : integer in
              loop
                await RESET;
                D_TIME := 0;
                D_TIME_0 := 0;
                D_TIME_1 := 0;
                D_TIME_2 := 0;
                D_TIME_3 := 0;
                D_TIME_4 := 0;
                D_TIME_5 := 0;
                D_TIME_6 := 0;
                D_TIME_7 := 0;
                TIME_A := 0;
                TIME_B := 0;
                do
                  loop
                    TIME_A := TIME_A - D_TIME_3 + D_TIME;
                    TIME_B := TIME_B - D_TIME_7 + D_TIME;
                    if D_TIME < SPEED_STOP then
                      emit TRS_A(TIME_A);
                      emit TRS_B(TIME_B)
                    end if;
                    D_TIME_7 := D_TIME_6;
                    D_TIME_6 := D_TIME_5;
                    D_TIME_5 := D_TIME_4;
                    D_TIME_4 := D_TIME_3;
                    D_TIME_3 := D_TIME_2;
                    D_TIME_2 := D_TIME_1;
                    D_TIME_1 := D_TIME_0;
                    D_TIME_0 := D_TIME;
                    D_TIME := 0;
                    loop
                      await CLOCK_32;
                      D_TIME := D_TIME + 1;
                      if D_TIME > SPEED_STOP then
                        emit SPEED_OFF;
                        halt
                      end if
                    end loop
                  each SPEED_SENS
                watching RESET
              end loop
            end var
          ||
            var STRATEGY : integer,
                TRS_A_VALUE : integer,
                TRS_B_VALUE : integer,
                SPEED_VALUE : integer in
              loop
                STRATEGY := A;
                SPEED_VALUE := 0;
                TRS_A_VALUE := 0;
                TRS_B_VALUE := 0;
                do
                  loop
                    emit SPEED_INST(SPEED_VALUE);
                    await [TRS_A or TRS_B];
                    present TRS_A then
                      TRS_A_VALUE := ?TRS_A
                    end present;
                    present TRS_B then
                      TRS_B_VALUE := ?TRS_B
                    end present;
                    if STRATEGY = A then
                      if TRS_A_VALUE > LPERIOD then
                        SPEED_VALUE := TIME_REF_A / TRS_A_VALUE
                      else
                        if TRS_B_VALUE <> 0 then
                          STRATEGY := B;
                          SPEED_VALUE := TIME_REF_B / TRS_B_VALUE
                        end if
                      end if
                    else
                      if TRS_A_VALUE < HPERIOD then
                        SPEED_VALUE := TIME_REF_B / TRS_B_VALUE
                      else
                        if TRS_A_VALUE <> 0 then
                          STRATEGY := A;
                          SPEED_VALUE := TIME_REF_A / TRS_A_VALUE
                        end if
                      end if
                    end if
                  end loop
                watching [RESET or SPEED_OFF]
              end loop
            end var
        end signal
      ||
        signal ERR_OPEN,
               ERR_ACC,
               ERR_PAR,
               ignored in
            var SPEED_VALUE : integer,
                ACC_VALUE : integer,
                ACC_OUT_TIME : integer,
                ACC_OUT_ERR_NUM : integer,
                ABNORM_NUM : integer in
              loop
                SPEED_VALUE := 0;
                ACC_VALUE := 0;
                ACC_OUT_TIME := 0;
                ACC_OUT_ERR_NUM := 0;
                ABNORM_NUM := 0;
                do
                  loop
                    await [SPEED_OFF or SPEED_INST or VER_ACC_FREQ_MED or CLOCK_24];
                    present SPEED_INST then
                      SPEED_VALUE := ?SPEED_INST
                    end present;
                    present SPEED_OFF then
                      SPEED_VALUE := 0
                    end present;
                    present VER_ACC_FREQ_MED then
                      ACC_VALUE := ?VER_ACC_FREQ_MED
                    end present;
                    present CLOCK_24 then
                      ACC_OUT_TIME := ACC_OUT_TIME + 1;
                      if ACC_OUT_TIME > MAX_OUT_TIME then
                        ACC_OUT_TIME := 0;
                        ACC_OUT_ERR_NUM := 0
                      end if;
                      if ACC_VALUE > MAX_ACC_VALUE and SPEED_VALUE = 0 then
                        ACC_OUT_ERR_NUM := ACC_OUT_ERR_NUM + 1;
                        if ACC_OUT_ERR_NUM > MAX_OUT_ERR_NUM then
                          ABNORM_NUM := ABNORM_NUM + 1;
                          ACC_OUT_ERR_NUM := 0;
                          ACC_OUT_TIME := 0;
                          if ABNORM_NUM > MAX_ABN_NUM then
                            emit ERR_ACC;
                            halt
                          end if
                        end if
                      end if
                    end present
                  end loop
                watching RESET
              end loop
            end var
          ||
            var D_TIME : integer,
                MIN_TPAR_NUM : integer in
              loop
                D_TIME := MIN_TPAR;
                MIN_TPAR_NUM := 0;
                do
                  trap ERROR in
                    loop
                      if D_TIME < MIN_TPAR then
                        MIN_TPAR_NUM := MIN_TPAR_NUM + 1;
                        if MIN_TPAR_NUM > MAX_MIN_TPAR_NUM then
                          exit ERROR
                        end if
                      end if;
                      D_TIME := 0;
                      every CLOCK_500 do
                        D_TIME := D_TIME + 1
                      end every
                    each SPEED_SENS
                  end trap;
                  emit ERR_PAR;
                  halt
                watching RESET
              end loop
            end var
          ||
            var D_TIME : integer,
                D_TIME_OLD : integer in
              loop
                D_TIME := 0;
                D_TIME_OLD := 0;
                do
                  loop
                    await 
                      case SPEED_SENS do
                        if D_TIME_OLD < D_TIME_10_MS and D_TIME > D_TIME_1_S or D_TIME_OLD < D_TIME_20_MS and D_TIME > D_TIME_4_S then
                          emit ERR_OPEN;
                          halt
                        else
                          D_TIME_OLD := D_TIME;
                          D_TIME := 0
                        end if
                      case CLOCK_32 do
                        D_TIME := D_TIME + 1
                    end await
                  end loop
                watching RESET
              end loop
            end var
          ||
            loop
              await 
                case ERR_ACC
                case ERR_OPEN
                case ERR_PAR
              end await;
              emit LONG_SPEED_ERR
            end loop
        end signal
      ||
        var VAL : integer,
            FILT_VAL : integer in
          loop
            FILT_VAL := 0;
            do
              loop
                emit LONG_SPEED_FILT(FILT_VAL);
                await SPEED_INST;
                VAL := ?SPEED_INST;
                FILT_VAL := FILT_VAL + (VAL - FILT_VAL) / K1
              end loop
            watching RESET
          end loop
        end var
      ||
        var VALUE : integer,
            VALUE_KM : integer in
          loop
            VALUE_KM := 0;
            do
              loop
                emit LONG_SPEED_KM(VALUE_KM);
                await LONG_SPEED_FILT;
                VALUE := ?LONG_SPEED_FILT;
                VALUE_KM := VALUE / 256
              end loop
            watching RESET
          end loop
        end var
      ||
        var OLD_SPEED_VALUE : integer,
            SPEED_VALUE : integer,
            LONG_SPEED_MOT_VALUE : integer,
            DIRECTION : integer in
          loop
            SPEED_VALUE := 0;
            OLD_SPEED_VALUE := 0;
            LONG_SPEED_MOT_VALUE := HARD;
            DIRECTION := UP;
            do
              loop
                emit LONG_SPEED_MOT(LONG_SPEED_MOT_VALUE);
                OLD_SPEED_VALUE := SPEED_VALUE;
                await LONG_SPEED_KM;
                SPEED_VALUE := ?LONG_SPEED_KM;
                if SPEED_VALUE < OLD_SPEED_VALUE then
                  DIRECTION := DOWN
                else
                  if SPEED_VALUE > OLD_SPEED_VALUE then
                    DIRECTION := UP
                  end if
                end if;
                if DIRECTION = UP then
                  if SPEED_VALUE < LHHARD then
                    LONG_SPEED_MOT_VALUE := HARD
                  else
                    if SPEED_VALUE < LHMED then
                      LONG_SPEED_MOT_VALUE := MED
                    else
                      if SPEED_VALUE < HHMED then
                        LONG_SPEED_MOT_VALUE := SOFT
                      else
                        if SPEED_VALUE < HHHARD then
                          LONG_SPEED_MOT_VALUE := MED
                        else
                          LONG_SPEED_MOT_VALUE := HARD
                        end if
                      end if
                    end if
                  end if
                else
                  if SPEED_VALUE > HLHARD then
                    LONG_SPEED_MOT_VALUE := HARD
                  else
                    if SPEED_VALUE > HLMED then
                      LONG_SPEED_MOT_VALUE := MED
                    else
                      if SPEED_VALUE > LLMED then
                        LONG_SPEED_MOT_VALUE := SOFT
                      else
                        if SPEED_VALUE > LLHARD then
                          LONG_SPEED_MOT_VALUE := MED
                        else
                          LONG_SPEED_MOT_VALUE := HARD
                        end if
                      end if
                    end if
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
    end signal
  ||
    signal ACC_DER : integer,
           ACC : integer,
           ACC_FILT : integer,
           ignored in
        var SPEED_VAL_0 : integer,
            SPEED_VAL_1 : integer,
            SPEED_VAL_2 : integer,
            SPEED_VAL_3 : integer,
            SPEED_VAL_4 : integer,
            SPEED_VAL_5 : integer,
            SPEED_VAL_6 : integer,
            SPEED_VAL_7 : integer,
            SPEED_VAL_8 : integer,
            ACC_VALUE : integer in
          loop
            SPEED_VAL_0 := 0;
            SPEED_VAL_1 := 0;
            SPEED_VAL_2 := 0;
            SPEED_VAL_3 := 0;
            SPEED_VAL_4 := 0;
            SPEED_VAL_5 := 0;
            SPEED_VAL_6 := 0;
            SPEED_VAL_7 := 0;
            SPEED_VAL_8 := 0;
            do
              loop
                await 
                  case LONG_SPEED_FILT do
                    SPEED_VAL_0 := ?LONG_SPEED_FILT
                  case CLOCK_24 do
                    ACC_VALUE := SPEED_VAL_0 - SPEED_VAL_8;
                    emit ACC(ACC_VALUE);
                    SPEED_VAL_8 := SPEED_VAL_7;
                    SPEED_VAL_7 := SPEED_VAL_6;
                    SPEED_VAL_6 := SPEED_VAL_5;
                    SPEED_VAL_5 := SPEED_VAL_4;
                    SPEED_VAL_4 := SPEED_VAL_3;
                    SPEED_VAL_3 := SPEED_VAL_2;
                    SPEED_VAL_2 := SPEED_VAL_1;
                    SPEED_VAL_1 := SPEED_VAL_0
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var VAL : integer,
            FILT_VAL : integer in
          loop
            FILT_VAL := 0;
            do
              loop
                emit ACC_FILT(FILT_VAL);
                await ACC;
                VAL := ?ACC;
                FILT_VAL := FILT_VAL + (VAL - FILT_VAL) / Kd
              end loop
            watching RESET
          end loop
        end var
      ||
        var ACC_VALUE_0 : integer,
            ACC_VALUE_1 : integer,
            ACC_VALUE_2 : integer,
            ACC_VALUE_3 : integer,
            ACC_VALUE_4 : integer,
            ACC_VALUE_5 : integer,
            ACC_VALUE_6 : integer,
            ACC_VALUE_7 : integer,
            ACC_VALUE_8 : integer,
            ACC_VALUE_9 : integer,
            ACC_VALUE_10 : integer,
            ACC_VALUE_11 : integer,
            ACC_VALUE_12 : integer,
            ACC_DER_VALUE : integer in
          loop
            ACC_VALUE_0 := 0;
            ACC_VALUE_1 := 0;
            ACC_VALUE_2 := 0;
            ACC_VALUE_3 := 0;
            ACC_VALUE_4 := 0;
            ACC_VALUE_5 := 0;
            ACC_VALUE_6 := 0;
            ACC_VALUE_7 := 0;
            ACC_VALUE_8 := 0;
            ACC_VALUE_9 := 0;
            ACC_VALUE_10 := 0;
            ACC_VALUE_11 := 0;
            ACC_VALUE_12 := 0;
            do
              loop
                ACC_DER_VALUE := ACC_VALUE_0 - ACC_VALUE_12;
                emit ACC_DER(ACC_DER_VALUE);
                ACC_VALUE_12 := ACC_VALUE_11;
                ACC_VALUE_11 := ACC_VALUE_10;
                ACC_VALUE_10 := ACC_VALUE_9;
                ACC_VALUE_9 := ACC_VALUE_8;
                ACC_VALUE_8 := ACC_VALUE_7;
                ACC_VALUE_7 := ACC_VALUE_6;
                ACC_VALUE_6 := ACC_VALUE_5;
                ACC_VALUE_5 := ACC_VALUE_4;
                ACC_VALUE_4 := ACC_VALUE_3;
                ACC_VALUE_3 := ACC_VALUE_2;
                ACC_VALUE_2 := ACC_VALUE_1;
                ACC_VALUE_1 := ACC_VALUE_0;
                await ACC_FILT;
                ACC_VALUE_0 := ?ACC_FILT
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ACMF_1;
            V2 := ACHF_1;
            do
              loop
                emit LONG_ACC_MOT_FRONT(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ACMF_1;
                      V2 := ACHF_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ACMF_2;
                        V2 := ACHF_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ACMF_3;
                          V2 := ACHF_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ACMF_4;
                            V2 := ACHF_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ACMF_5;
                              V2 := ACHF_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ACMF_6;
                                V2 := ACHF_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ACMF_7;
                                  V2 := ACHF_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ACMF_8;
                                    V2 := ACHF_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ACMF_9;
                                      V2 := ACHF_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ACMF_10;
                                        V2 := ACHF_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ACMF_11;
                                          V2 := ACHF_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ACMF_12;
                                            V2 := ACHF_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ACMF_13;
                                              V2 := ACHF_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ACMF_14;
                                                V2 := ACHF_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ACMF_15;
                                                  V2 := ACHF_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ACMF_16;
                                                    V2 := ACHF_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ACMF_17;
                                                      V2 := ACHF_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ACMF_18;
                                                        V2 := ACHF_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ACMF_19;
                                                          V2 := ACHF_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ACMF_20;
                                                            V2 := ACHF_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ACMF_21;
                                                              V2 := ACHF_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ACMF_22;
                                                                V2 := ACHF_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ACMF_23;
                                                                  V2 := ACHF_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ACMF_24;
                                                                    V2 := ACHF_24
                                                                  else
                                                                    V1 := ACMF_25;
                                                                    V2 := ACHF_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_FILT do
                    CURRENT_VALUE := ?ACC_FILT;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELFHA then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELFMA then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ACMR_1;
            V2 := ACHR_1;
            do
              loop
                emit LONG_ACC_MOT_REAR(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ACMR_1;
                      V2 := ACHR_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ACMR_2;
                        V2 := ACHR_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ACMR_3;
                          V2 := ACHR_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ACMR_4;
                            V2 := ACHR_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ACMR_5;
                              V2 := ACHR_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ACMR_6;
                                V2 := ACHR_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ACMR_7;
                                  V2 := ACHR_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ACMR_8;
                                    V2 := ACHR_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ACMR_9;
                                      V2 := ACHR_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ACMR_10;
                                        V2 := ACHR_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ACMR_11;
                                          V2 := ACHR_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ACMR_12;
                                            V2 := ACHR_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ACMR_13;
                                              V2 := ACHR_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ACMR_14;
                                                V2 := ACHR_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ACMR_15;
                                                  V2 := ACHR_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ACMR_16;
                                                    V2 := ACHR_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ACMR_17;
                                                      V2 := ACHR_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ACMR_18;
                                                        V2 := ACHR_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ACMR_19;
                                                          V2 := ACHR_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ACMR_20;
                                                            V2 := ACHR_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ACMR_21;
                                                              V2 := ACHR_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ACMR_22;
                                                                V2 := ACHR_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ACMR_23;
                                                                  V2 := ACHR_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ACMR_24;
                                                                    V2 := ACHR_24
                                                                  else
                                                                    V1 := ACMR_25;
                                                                    V2 := ACHR_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_FILT do
                    CURRENT_VALUE := ?ACC_FILT;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELRHA then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELRMA then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := DEMF_1;
            V2 := DEHF_1;
            do
              loop
                emit LONG_DECC_MOT_FRONT(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := DEMF_1;
                      V2 := DEHF_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := DEMF_2;
                        V2 := DEHF_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := DEMF_3;
                          V2 := DEHF_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := DEMF_4;
                            V2 := DEHF_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := DEMF_5;
                              V2 := DEHF_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := DEMF_6;
                                V2 := DEHF_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := DEMF_7;
                                  V2 := DEHF_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := DEMF_8;
                                    V2 := DEHF_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := DEMF_9;
                                      V2 := DEHF_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := DEMF_10;
                                        V2 := DEHF_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := DEMF_11;
                                          V2 := DEHF_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := DEMF_12;
                                            V2 := DEHF_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := DEMF_13;
                                              V2 := DEHF_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := DEMF_14;
                                                V2 := DEHF_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := DEMF_15;
                                                  V2 := DEHF_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := DEMF_16;
                                                    V2 := DEHF_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := DEMF_17;
                                                      V2 := DEHF_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := DEMF_18;
                                                        V2 := DEHF_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := DEMF_19;
                                                          V2 := DEHF_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := DEMF_20;
                                                            V2 := DEHF_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := DEMF_21;
                                                              V2 := DEHF_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := DEMF_22;
                                                                V2 := DEHF_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := DEMF_23;
                                                                  V2 := DEHF_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := DEMF_24;
                                                                    V2 := DEHF_24
                                                                  else
                                                                    V1 := DEMF_25;
                                                                    V2 := DEHF_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_FILT do
                    CURRENT_VALUE := ?ACC_FILT;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELFHD then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELFMD then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := DEMR_1;
            V2 := DEHR_1;
            do
              loop
                emit LONG_DECC_MOT_REAR(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := DEMR_1;
                      V2 := DEHR_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := DEMR_2;
                        V2 := DEHR_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := DEMR_3;
                          V2 := DEHR_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := DEMR_4;
                            V2 := DEHR_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := DEMR_5;
                              V2 := DEHR_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := DEMR_6;
                                V2 := DEHR_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := DEMR_7;
                                  V2 := DEHR_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := DEMR_8;
                                    V2 := DEHR_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := DEMR_9;
                                      V2 := DEHR_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := DEMR_10;
                                        V2 := DEHR_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := DEMR_11;
                                          V2 := DEHR_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := DEMR_12;
                                            V2 := DEHR_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := DEMR_13;
                                              V2 := DEHR_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := DEMR_14;
                                                V2 := DEHR_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := DEMR_15;
                                                  V2 := DEHR_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := DEMR_16;
                                                    V2 := DEHR_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := DEMR_17;
                                                      V2 := DEHR_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := DEMR_18;
                                                        V2 := DEHR_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := DEMR_19;
                                                          V2 := DEHR_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := DEMR_20;
                                                            V2 := DEHR_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := DEMR_21;
                                                              V2 := DEHR_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := DEMR_22;
                                                                V2 := DEHR_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := DEMR_23;
                                                                  V2 := DEHR_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := DEMR_24;
                                                                    V2 := DEHR_24
                                                                  else
                                                                    V1 := DEMR_25;
                                                                    V2 := DEHR_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_FILT do
                    CURRENT_VALUE := ?ACC_FILT;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELRHD then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELRMD then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := DDEMF_1;
            V2 := DDEHF_1;
            do
              loop
                emit LONG_ACC_DER_MOT_FRONT(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := DDEMF_1;
                      V2 := DDEHF_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := DDEMF_2;
                        V2 := DDEHF_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := DDEMF_3;
                          V2 := DDEHF_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := DDEMF_4;
                            V2 := DDEHF_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := DDEMF_5;
                              V2 := DDEHF_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := DDEMF_6;
                                V2 := DDEHF_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := DDEMF_7;
                                  V2 := DDEHF_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := DDEMF_8;
                                    V2 := DDEHF_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := DDEMF_9;
                                      V2 := DDEHF_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := DDEMF_10;
                                        V2 := DDEHF_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := DDEMF_11;
                                          V2 := DDEHF_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := DDEMF_12;
                                            V2 := DDEHF_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := DDEMF_13;
                                              V2 := DDEHF_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := DDEMF_14;
                                                V2 := DDEHF_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := DDEMF_15;
                                                  V2 := DDEHF_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := DDEMF_16;
                                                    V2 := DDEHF_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := DDEMF_17;
                                                      V2 := DDEHF_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := DDEMF_18;
                                                        V2 := DDEHF_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := DDEMF_19;
                                                          V2 := DDEHF_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := DDEMF_20;
                                                            V2 := DDEHF_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := DDEMF_21;
                                                              V2 := DDEHF_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := DDEMF_22;
                                                                V2 := DDEHF_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := DDEMF_23;
                                                                  V2 := DDEHF_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := DDEMF_24;
                                                                    V2 := DDEHF_24
                                                                  else
                                                                    V1 := DDEMF_25;
                                                                    V2 := DDEHF_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_DER do
                    CURRENT_VALUE := ?ACC_DER;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DDELFHD then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DDELFMD then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := DDEMR_1;
            V2 := DDEHR_1;
            do
              loop
                emit LONG_ACC_DER_MOT_REAR(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := DDEMR_1;
                      V2 := DDEHR_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := DDEMR_2;
                        V2 := DDEHR_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := DDEMR_3;
                          V2 := DDEHR_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := DDEMR_4;
                            V2 := DDEHR_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := DDEMR_5;
                              V2 := DDEHR_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := DDEMR_6;
                                V2 := DDEHR_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := DDEMR_7;
                                  V2 := DDEHR_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := DDEMR_8;
                                    V2 := DDEHR_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := DDEMR_9;
                                      V2 := DDEHR_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := DDEMR_10;
                                        V2 := DDEHR_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := DDEMR_11;
                                          V2 := DDEHR_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := DDEMR_12;
                                            V2 := DDEHR_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := DDEMR_13;
                                              V2 := DDEHR_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := DDEMR_14;
                                                V2 := DDEHR_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := DDEMR_15;
                                                  V2 := DDEHR_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := DDEMR_16;
                                                    V2 := DDEHR_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := DDEMR_17;
                                                      V2 := DDEHR_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := DDEMR_18;
                                                        V2 := DDEHR_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := DDEMR_19;
                                                          V2 := DDEHR_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := DDEMR_20;
                                                            V2 := DDEHR_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := DDEMR_21;
                                                              V2 := DDEHR_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := DDEMR_22;
                                                                V2 := DDEHR_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := DDEMR_23;
                                                                  V2 := DDEHR_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := DDEMR_24;
                                                                    V2 := DDEHR_24
                                                                  else
                                                                    V1 := DDEMR_25;
                                                                    V2 := DDEHR_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_DER do
                    CURRENT_VALUE := ?ACC_DER;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DDELRHD then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DDELRMD then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
    end signal
  ||
    signal ACC : integer,
           ACC_FREQ_LOW : integer,
           ignored in
        var ACC_SENS_VAL : integer,
            ACC_VALUE : integer in
          loop
            ACC_VALUE := 0;
            do
              loop
                emit ACC(ACC_VALUE);
                await ACC_SENS;
                ACC_SENS_VAL := ?ACC_SENS;
                ACC_VALUE := (ACC_SENS_VAL - ZERO_ACC) * GME_ACC
              end loop
            watching RESET
          end loop
        end var
      ||
        var ACC_OUT_TIME : integer,
            ACC_OUT_R_TIME : integer,
            SENS_VAL : integer,
            ABNORM_NUM : integer in
          loop
            SENS_VAL := ZERO_ACC;
            ACC_OUT_TIME := 0;
            ACC_OUT_R_TIME := 0;
            ABNORM_NUM := 0;
            do
              loop
                await ACC_SENS;
                SENS_VAL := ?ACC_SENS;
                if SENS_VAL > MAX_R_ACC or SENS_VAL < MIN_R_ACC then
                  ACC_OUT_R_TIME := ACC_OUT_R_TIME + 1;
                  ACC_OUT_TIME := ACC_OUT_TIME + 1;
                  if ACC_OUT_R_TIME >= TIME_R_OUT or ACC_OUT_TIME >= TIME_OUT then
                    ABNORM_NUM := ABNORM_NUM + 1;
                    ACC_OUT_R_TIME := 0;
                    ACC_OUT_TIME := 0
                  end if
                else
                  ACC_OUT_R_TIME := 0;
                  if SENS_VAL > MAX_ACC or SENS_VAL < MIN_ACC then
                    ACC_OUT_TIME := ACC_OUT_TIME + 1;
                    if ACC_OUT_TIME >= TIME_OUT then
                      ABNORM_NUM := ABNORM_NUM + 1;
                      ACC_OUT_TIME := 0
                    end if
                  else
                    ACC_OUT_TIME := 0
                  end if
                end if;
                if ABNORM_NUM >= MAX_ABNORM_NUM then
                  emit VER_ACC_ERR;
                  halt
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var VAL_0 : integer,
            VAL_1 : integer,
            VAL_2 : integer,
            FILT_VAL_0 : integer,
            FILT_VAL_1 : integer,
            FILT_VAL_2 : integer in
          loop
            VAL_0 := 0;
            VAL_1 := 0;
            VAL_2 := 0;
            FILT_VAL_0 := 0;
            FILT_VAL_1 := 0;
            FILT_VAL_2 := 0;
            do
              loop
                FILT_VAL_0 := POLIS_RSH(LB0 * VAL_0 + LB1 * VAL_1 + LB2 * VAL_2 + LA0 * FILT_VAL_1 + LA1 * FILT_VAL_2, 14);
                emit ACC_FREQ_LOW(FILT_VAL_0);
                VAL_2 := VAL_1;
                VAL_1 := VAL_0;
                FILT_VAL_2 := FILT_VAL_1;
                FILT_VAL_1 := FILT_VAL_0;
                await ACC;
                VAL_0 := ?ACC
              end loop
            watching RESET
          end loop
        end var
      ||
        var VAL_0 : integer,
            VAL_1 : integer,
            VAL_2 : integer,
            FILT_VAL_0 : integer,
            FILT_VAL_1 : integer,
            FILT_VAL_2 : integer in
          loop
            VAL_0 := 0;
            VAL_1 := 0;
            VAL_2 := 0;
            FILT_VAL_0 := 0;
            FILT_VAL_1 := 0;
            FILT_VAL_2 := 0;
            do
              loop
                FILT_VAL_0 := POLIS_RSH(MB0 * VAL_0 + MB1 * VAL_1 + MB2 * VAL_2 + MA0 * FILT_VAL_1 + MA1 * FILT_VAL_2, 14);
                emit VER_ACC_FREQ_MED(FILT_VAL_0);
                VAL_2 := VAL_1;
                VAL_1 := VAL_0;
                FILT_VAL_2 := FILT_VAL_1;
                FILT_VAL_1 := FILT_VAL_0;
                await ACC;
                VAL_0 := ?ACC
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ACLOWM_1;
            V2 := ACLOWH_1;
            do
              loop
                emit VER_ACC_LOW_MOT_FRONT(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ACLOWM_1;
                      V2 := ACLOWH_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ACLOWM_2;
                        V2 := ACLOWH_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ACLOWM_3;
                          V2 := ACLOWH_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ACLOWM_4;
                            V2 := ACLOWH_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ACLOWM_5;
                              V2 := ACLOWH_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ACLOWM_6;
                                V2 := ACLOWH_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ACLOWM_7;
                                  V2 := ACLOWH_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ACLOWM_8;
                                    V2 := ACLOWH_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ACLOWM_9;
                                      V2 := ACLOWH_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ACLOWM_10;
                                        V2 := ACLOWH_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ACLOWM_11;
                                          V2 := ACLOWH_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ACLOWM_12;
                                            V2 := ACLOWH_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ACLOWM_13;
                                              V2 := ACLOWH_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ACLOWM_14;
                                                V2 := ACLOWH_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ACLOWM_15;
                                                  V2 := ACLOWH_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ACLOWM_16;
                                                    V2 := ACLOWH_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ACLOWM_17;
                                                      V2 := ACLOWH_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ACLOWM_18;
                                                        V2 := ACLOWH_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ACLOWM_19;
                                                          V2 := ACLOWH_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ACLOWM_20;
                                                            V2 := ACLOWH_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ACLOWM_21;
                                                              V2 := ACLOWH_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ACLOWM_22;
                                                                V2 := ACLOWH_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ACLOWM_23;
                                                                  V2 := ACLOWH_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ACLOWM_24;
                                                                    V2 := ACLOWH_24
                                                                  else
                                                                    V1 := ACLOWM_25;
                                                                    V2 := ACLOWH_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_FREQ_LOW do
                    CURRENT_VALUE := ?ACC_FREQ_LOW;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELFHLO then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELFMLO then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            D : integer,
            TIME : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ACLOWM_1;
            V2 := ACLOWH_1;
            D := DELCOL_1;
            do
              loop
                emit VER_ACC_LOW_MOT_REAR(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ACLOWM_1;
                      V2 := ACLOWH_1;
                      D := DELCOL_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ACLOWM_2;
                        V2 := ACLOWH_2;
                        D := DELCOL_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ACLOWM_3;
                          V2 := ACLOWH_3;
                          D := DELCOL_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ACLOWM_4;
                            V2 := ACLOWH_4;
                            D := DELCOL_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ACLOWM_5;
                              V2 := ACLOWH_5;
                              D := DELCOL_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ACLOWM_6;
                                V2 := ACLOWH_6;
                                D := DELCOL_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ACLOWM_7;
                                  V2 := ACLOWH_7;
                                  D := DELCOL_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ACLOWM_8;
                                    V2 := ACLOWH_8;
                                    D := DELCOL_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ACLOWM_9;
                                      V2 := ACLOWH_9;
                                      D := DELCOL_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ACLOWM_10;
                                        V2 := ACLOWH_10;
                                        D := DELCOL_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ACLOWM_11;
                                          V2 := ACLOWH_11;
                                          D := DELCOL_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ACLOWM_12;
                                            V2 := ACLOWH_12;
                                            D := DELCOL_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ACLOWM_13;
                                              V2 := ACLOWH_13;
                                              D := DELCOL_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ACLOWM_14;
                                                V2 := ACLOWH_14;
                                                D := DELCOL_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ACLOWM_15;
                                                  V2 := ACLOWH_15;
                                                  D := DELCOL_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ACLOWM_16;
                                                    V2 := ACLOWH_16;
                                                    D := DELCOL_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ACLOWM_17;
                                                      V2 := ACLOWH_17;
                                                      D := DELCOL_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ACLOWM_18;
                                                        V2 := ACLOWH_18;
                                                        D := DELCOL_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ACLOWM_19;
                                                          V2 := ACLOWH_19;
                                                          D := DELCOL_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ACLOWM_20;
                                                            V2 := ACLOWH_20;
                                                            D := DELCOL_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ACLOWM_21;
                                                              V2 := ACLOWH_21;
                                                              D := DELCOL_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ACLOWM_22;
                                                                V2 := ACLOWH_22;
                                                                D := DELCOL_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ACLOWM_23;
                                                                  V2 := ACLOWH_23;
                                                                  D := DELCOL_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ACLOWM_24;
                                                                    V2 := ACLOWH_24;
                                                                    D := DELCOL_24
                                                                  else
                                                                    V1 := ACLOWM_25;
                                                                    V2 := ACLOWH_25;
                                                                    D := DELCOL_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ACC_FREQ_LOW do
                    CURRENT_VALUE := ?ACC_FREQ_LOW;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE < V1 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > D then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> HARD then
                            if OLD_VALUE < V2 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > D then
                                CONTROL_VALUE := HARD
                              end if
                            end if
                          end if
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > DELFHLO + D then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > DELFMLO + D then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ACMEDM_1;
            V2 := ACMEDH_1;
            do
              loop
                emit VER_ACC_MED_MOT_FRONT(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ACMEDM_1;
                      V2 := ACMEDH_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ACMEDM_2;
                        V2 := ACMEDH_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ACMEDM_3;
                          V2 := ACMEDH_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ACMEDM_4;
                            V2 := ACMEDH_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ACMEDM_5;
                              V2 := ACMEDH_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ACMEDM_6;
                                V2 := ACMEDH_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ACMEDM_7;
                                  V2 := ACMEDH_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ACMEDM_8;
                                    V2 := ACMEDH_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ACMEDM_9;
                                      V2 := ACMEDH_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ACMEDM_10;
                                        V2 := ACMEDH_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ACMEDM_11;
                                          V2 := ACMEDH_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ACMEDM_12;
                                            V2 := ACMEDH_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ACMEDM_13;
                                              V2 := ACMEDH_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ACMEDM_14;
                                                V2 := ACMEDH_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ACMEDM_15;
                                                  V2 := ACMEDH_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ACMEDM_16;
                                                    V2 := ACMEDH_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ACMEDM_17;
                                                      V2 := ACMEDH_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ACMEDM_18;
                                                        V2 := ACMEDH_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ACMEDM_19;
                                                          V2 := ACMEDH_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ACMEDM_20;
                                                            V2 := ACMEDH_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ACMEDM_21;
                                                              V2 := ACMEDH_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ACMEDM_22;
                                                                V2 := ACMEDH_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ACMEDM_23;
                                                                  V2 := ACMEDH_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ACMEDM_24;
                                                                    V2 := ACMEDH_24
                                                                  else
                                                                    V1 := ACMEDM_25;
                                                                    V2 := ACMEDH_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case VER_ACC_FREQ_MED do
                    CURRENT_VALUE := ?VER_ACC_FREQ_MED;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELFHME then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELFMME then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            D : integer,
            TIME : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ACMEDM_1;
            V2 := ACMEDH_1;
            D := DELCOM_1;
            do
              loop
                emit VER_ACC_MED_MOT_REAR(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ACMEDM_1;
                      V2 := ACMEDH_1;
                      D := DELCOM_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ACMEDM_2;
                        V2 := ACMEDH_2;
                        D := DELCOM_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ACMEDM_3;
                          V2 := ACMEDH_3;
                          D := DELCOM_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ACMEDM_4;
                            V2 := ACMEDH_4;
                            D := DELCOM_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ACMEDM_5;
                              V2 := ACMEDH_5;
                              D := DELCOM_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ACMEDM_6;
                                V2 := ACMEDH_6;
                                D := DELCOM_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ACMEDM_7;
                                  V2 := ACMEDH_7;
                                  D := DELCOM_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ACMEDM_8;
                                    V2 := ACMEDH_8;
                                    D := DELCOM_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ACMEDM_9;
                                      V2 := ACMEDH_9;
                                      D := DELCOM_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ACMEDM_10;
                                        V2 := ACMEDH_10;
                                        D := DELCOM_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ACMEDM_11;
                                          V2 := ACMEDH_11;
                                          D := DELCOM_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ACMEDM_12;
                                            V2 := ACMEDH_12;
                                            D := DELCOM_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ACMEDM_13;
                                              V2 := ACMEDH_13;
                                              D := DELCOM_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ACMEDM_14;
                                                V2 := ACMEDH_14;
                                                D := DELCOM_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ACMEDM_15;
                                                  V2 := ACMEDH_15;
                                                  D := DELCOM_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ACMEDM_16;
                                                    V2 := ACMEDH_16;
                                                    D := DELCOM_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ACMEDM_17;
                                                      V2 := ACMEDH_17;
                                                      D := DELCOM_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ACMEDM_18;
                                                        V2 := ACMEDH_18;
                                                        D := DELCOM_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ACMEDM_19;
                                                          V2 := ACMEDH_19;
                                                          D := DELCOM_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ACMEDM_20;
                                                            V2 := ACMEDH_20;
                                                            D := DELCOM_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ACMEDM_21;
                                                              V2 := ACMEDH_21;
                                                              D := DELCOM_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ACMEDM_22;
                                                                V2 := ACMEDH_22;
                                                                D := DELCOM_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ACMEDM_23;
                                                                  V2 := ACMEDH_23;
                                                                  D := DELCOM_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ACMEDM_24;
                                                                    V2 := ACMEDH_24;
                                                                    D := DELCOM_24
                                                                  else
                                                                    V1 := ACMEDM_25;
                                                                    V2 := ACMEDH_25;
                                                                    D := DELCOM_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case VER_ACC_FREQ_MED do
                    CURRENT_VALUE := ?VER_ACC_FREQ_MED;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE < V1 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > D then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> HARD then
                            if OLD_VALUE < V2 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > D then
                                CONTROL_VALUE := HARD
                              end if
                            end if
                          end if
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > DELFHME + D then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME := 0
                            else
                              TIME := TIME + 1;
                              if TIME > DELFMME + D then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
    end signal
  ||
    signal CORR_ERR,
           ANG : integer,
           ANG_CORR : integer,
           CAL_ERR,
           DIAG_ERR,
           ignored in
        signal INIT,
               ignored in
            var STEER1_VALUE : boolean,
                STEER2_VALUE : boolean,
                STEER_VALUE : boolean,
                SPEED_VALUE : integer,
                INIT_TIME : integer in
              loop
                STEER1_VALUE := false;
                STEER2_VALUE := false;
                STEER_VALUE := false;
                SPEED_VALUE := 0;
                INIT_TIME := 0;
                do
                  loop
                    await [STEER1_SENS or STEER2_SENS or STEER_SENS or LONG_SPEED_FILT or CLOCK_24];
                    present STEER1_SENS then
                      STEER1_VALUE := ?STEER1_SENS
                    end present;
                    present STEER2_SENS then
                      STEER2_VALUE := ?STEER2_SENS
                    end present;
                    present STEER_SENS then
                      STEER_VALUE := ?STEER_SENS
                    end present;
                    present LONG_SPEED_FILT then
                      SPEED_VALUE := ?LONG_SPEED_FILT
                    end present;
                    present CLOCK_24 then
                      INIT_TIME := INIT_TIME + 1
                    end present;
                    if STEER1_VALUE = false and STEER2_VALUE = false and STEER_VALUE = false then
                      if INIT_TIME < MAX_INIT_TIME and SPEED_VALUE > INIT_SPEED1 or INIT_TIME >= MAX_INIT_TIME and SPEED_VALUE > INIT_SPEED2 then
                        emit INIT;
                        halt
                      end if
                    end if
                  end loop
                watching RESET
              end loop
            end var
          ||
            var STEER1_VALUE : boolean,
                STEER2_VALUE : boolean,
                STEER1_VALUE_OLD : boolean,
                STEER2_VALUE_OLD : boolean,
                STEER_VALUE : boolean,
                INCR : integer,
                ANG_VALUE : integer in
              loop
                STEER1_VALUE := false;
                STEER2_VALUE := false;
                STEER1_VALUE_OLD := false;
                STEER2_VALUE_OLD := false;
                STEER_VALUE := false;
                INCR := ANG_INCR_INIT;
                ANG_VALUE := 0;
                await INIT;
                do
                  emit ANG(ANG_VALUE);
                  loop
                    await [CLOCK_24 or STEER1_SENS or STEER2_SENS or STEER_SENS];
                    present STEER1_SENS then
                      STEER1_VALUE := ?STEER1_SENS;
                      if STEER1_VALUE_OLD = false and STEER1_VALUE = true then
                        if STEER1_VALUE_OLD = STEER2_VALUE then
                          ANG_VALUE := ANG_VALUE + INCR
                        else
                          ANG_VALUE := ANG_VALUE - INCR
                        end if
                      end if;
                      STEER1_VALUE_OLD := STEER1_VALUE
                    end present;
                    present STEER2_SENS then
                      STEER2_VALUE := ?STEER2_SENS;
                      if STEER2_VALUE_OLD = false and STEER2_VALUE = true then
                        if STEER1_VALUE = STEER2_VALUE_OLD then
                          ANG_VALUE := ANG_VALUE - INCR
                        else
                          ANG_VALUE := ANG_VALUE + INCR
                        end if
                      end if;
                      STEER2_VALUE_OLD := STEER2_VALUE
                    end present;
                    present STEER_SENS then
                      STEER_VALUE := ?STEER_SENS
                    end present;
                    if not STEER_VALUE and (ANG_VALUE < MIN_ANG_VALUE or ANG_VALUE > MAX_ANG_VALUE) then
                      emit CAL_ERR;
                      halt
                    end if;
                    emit ANG(ANG_VALUE);
                    INCR := ANG_INCR
                  end loop
                watching RESET
              end loop
            end var
        end signal
      ||
        var ANG_CORR_VALUE : integer,
            SPEED_VALUE_OLD : integer,
            SPEED_VALUE : integer,
            ANG_VALUE : integer,
            ZVOL : integer,
            ZVOL_Kt : integer,
            ZVOLM : integer,
            K : integer,
            T_K : integer,
            MIN_CORR_K : integer,
            INIT : boolean,
            TIME : integer,
            TIME_Kt : integer in
          loop
            ANG_CORR_VALUE := 0;
            SPEED_VALUE_OLD := 0;
            SPEED_VALUE := 0;
            ANG_VALUE := 0;
            ZVOL := 0;
            ZVOL_Kt := 0;
            ZVOLM := 0;
            K := Kz;
            T_K := T_Kz;
            MIN_CORR_K := MIN_CORR_Kz;
            do
              loop
                emit ANG_CORR(ANG_CORR_VALUE);
                await [LONG_SPEED_FILT or ANG];
                present LONG_SPEED_FILT then
                  SPEED_VALUE_OLD := SPEED_VALUE;
                  SPEED_VALUE := ?LONG_SPEED_FILT;
                  if SPEED_VALUE_OLD < MAX_SPEED_VALUE and SPEED_VALUE > MAX_SPEED_VALUE then
                    INIT := true;
                    TIME := 0;
                    TIME_Kt := 0
                  end if
                end present;
                present ANG then
                  ANG_VALUE := ?ANG;
                  if SPEED_VALUE > MAX_SPEED_VALUE then
                    TIME_Kt := TIME_Kt + 1;
                    if TIME_Kt = T_Kt then
                      ZVOL := ZVOL_Kt + K * (ANG_VALUE - POLIS_RSH(ZVOL_Kt, 8));
                      if ZVOL > MAX_CORR then
                        emit CORR_ERR;
                        halt
                      end if;
                      ZVOL_Kt := ZVOL;
                      TIME_Kt := 0
                    end if;
                    TIME := TIME + 1;
                    if TIME = T_K then
                      if ZVOL > MIN_CORR_K then
                        ZVOLM := ZVOLM + ZVOL;
                        ZVOL_Kt := 0
                      end if;
                      if INIT = true then
                        INIT := false;
                        K := Ky;
                        T_K := T_Ky;
                        MIN_CORR_K := MIN_CORR_Ky
                      end if;
                      TIME := 0
                    end if;
                    ANG_CORR_VALUE := ANG_VALUE + POLIS_RSH(ZVOLM, 8)
                  else
                    ANG_CORR_VALUE := ANG_VALUE
                  end if
                end present
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ANMF_1;
            V2 := ANHF_1;
            do
              loop
                emit STEER_ANG_MOT_FRONT(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ANMF_1;
                      V2 := ANHF_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ANMF_2;
                        V2 := ANHF_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ANMF_3;
                          V2 := ANHF_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ANMF_4;
                            V2 := ANHF_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ANMF_5;
                              V2 := ANHF_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ANMF_6;
                                V2 := ANHF_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ANMF_7;
                                  V2 := ANHF_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ANMF_8;
                                    V2 := ANHF_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ANMF_9;
                                      V2 := ANHF_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ANMF_10;
                                        V2 := ANHF_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ANMF_11;
                                          V2 := ANHF_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ANMF_12;
                                            V2 := ANHF_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ANMF_13;
                                              V2 := ANHF_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ANMF_14;
                                                V2 := ANHF_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ANMF_15;
                                                  V2 := ANHF_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ANMF_16;
                                                    V2 := ANHF_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ANMF_17;
                                                      V2 := ANHF_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ANMF_18;
                                                        V2 := ANHF_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ANMF_19;
                                                          V2 := ANHF_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ANMF_20;
                                                            V2 := ANHF_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ANMF_21;
                                                              V2 := ANHF_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ANMF_22;
                                                                V2 := ANHF_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ANMF_23;
                                                                  V2 := ANHF_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ANMF_24;
                                                                    V2 := ANHF_24
                                                                  else
                                                                    V1 := ANMF_25;
                                                                    V2 := ANHF_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ANG_CORR do
                    CURRENT_VALUE := ?ANG_CORR;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELFHAN then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELFMAN then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := ANMR_1;
            V2 := ANHR_1;
            do
              loop
                emit STEER_ANG_MOT_REAR(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := ANMR_1;
                      V2 := ANHR_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := ANMR_2;
                        V2 := ANHR_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := ANMR_3;
                          V2 := ANHR_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := ANMR_4;
                            V2 := ANHR_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := ANMR_5;
                              V2 := ANHR_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := ANMR_6;
                                V2 := ANHR_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := ANMR_7;
                                  V2 := ANHR_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := ANMR_8;
                                    V2 := ANHR_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := ANMR_9;
                                      V2 := ANHR_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := ANMR_10;
                                        V2 := ANHR_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := ANMR_11;
                                          V2 := ANHR_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := ANMR_12;
                                            V2 := ANHR_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := ANMR_13;
                                              V2 := ANHR_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := ANMR_14;
                                                V2 := ANHR_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := ANMR_15;
                                                  V2 := ANHR_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := ANMR_16;
                                                    V2 := ANHR_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := ANMR_17;
                                                      V2 := ANHR_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := ANMR_18;
                                                        V2 := ANHR_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := ANMR_19;
                                                          V2 := ANHR_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := ANMR_20;
                                                            V2 := ANHR_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := ANMR_21;
                                                              V2 := ANHR_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := ANMR_22;
                                                                V2 := ANHR_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := ANMR_23;
                                                                  V2 := ANHR_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := ANMR_24;
                                                                    V2 := ANHR_24
                                                                  else
                                                                    V1 := ANMR_25;
                                                                    V2 := ANHR_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case ANG_CORR do
                    CURRENT_VALUE := ?ANG_CORR;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELRHAN then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELRMAN then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var TIME_STEER1 : integer,
            TIME_STEER2 : integer,
            SPEED_VALUE : integer,
            STEER_ANG_DAMAGE_VALUE : integer in
          loop
            TIME_STEER1 := 0;
            TIME_STEER2 := 0;
            SPEED_VALUE := 0;
            STEER_ANG_DAMAGE_VALUE := SOFT;
            do
              loop
                emit STEER_ANG_DAMAGE(STEER_ANG_DAMAGE_VALUE);
                await 
                  case LONG_SPEED_FILT do
                    SPEED_VALUE := ?LONG_SPEED_FILT;
                    if SPEED_VALUE = 0 then
                      TIME_STEER1 := 0;
                      TIME_STEER2 := 0
                    end if
                  case STEER1_SENS do
                    TIME_STEER1 := 0
                  case STEER2_SENS do
                    TIME_STEER2 := 0
                  case CLOCK_24 do
                    TIME_STEER1 := TIME_STEER1 + 1;
                    TIME_STEER2 := TIME_STEER2 + 1
                end await;
                if TIME_STEER1 > TIME_A_3 and TIME_STEER2 > TIME_A_3 or TIME_STEER1 > TIME_B_3 or TIME_STEER1 > TIME_B_3 then
                  emit DIAG_ERR;
                  halt
                else
                  if TIME_STEER1 > TIME_A_2 and TIME_STEER2 > TIME_A_2 or TIME_STEER1 > TIME_B_2 or TIME_STEER1 > TIME_B_2 then
                    STEER_ANG_DAMAGE_VALUE := HARD
                  else
                    if TIME_STEER1 > TIME_A_1 and TIME_STEER2 > TIME_A_1 or TIME_STEER1 > TIME_B_1 or TIME_STEER1 > TIME_B_1 then
                      STEER_ANG_DAMAGE_VALUE := MED
                    else
                      STEER_ANG_DAMAGE_VALUE := SOFT
                    end if
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        loop
          await 
            case CAL_ERR
            case CORR_ERR
            case DIAG_ERR
          end await;
          emit STEER_ANG_ERR
        end loop
    end signal
  ||
    signal SPEED : integer,
           SPEED_FILT : integer,
           ignored in
        var TIME_ANG : integer,
            STEER1_VAL : boolean,
            STEER1_VAL_OLD : boolean,
            STEER2_VAL : boolean,
            STEER2_VAL_OLD : boolean,
            SPEED_VALUE : integer in
          loop
            TIME_ANG := 0;
            STEER1_VAL := false;
            STEER1_VAL_OLD := false;
            STEER2_VAL := false;
            STEER2_VAL_OLD := false;
            SPEED_VALUE := 0;
            do
              loop
                await [CLOCK_16 or STEER1_SENS or STEER2_SENS];
                present CLOCK_16 then
                  TIME_ANG := TIME_ANG + 1;
                  emit SPEED(SPEED_VALUE)
                end present;
                present STEER1_SENS then
                  STEER1_VAL := ?STEER1_SENS;
                  if STEER1_VAL_OLD <> STEER1_VAL and TIME_ANG <> 0 then
                    SPEED_VALUE := COANG / TIME_ANG * 2;
                    TIME_ANG := 0
                  end if;
                  STEER1_VAL_OLD := STEER1_VAL
                end present;
                present STEER2_SENS then
                  STEER2_VAL := ?STEER2_SENS;
                  if STEER2_VAL_OLD <> STEER2_VAL and TIME_ANG <> 0 then
                    SPEED_VALUE := COANG / TIME_ANG * 2;
                    TIME_ANG := 0
                  end if;
                  STEER2_VAL_OLD := STEER2_VAL
                end present
              end loop
            watching RESET
          end loop
        end var
      ||
        var VAL : integer,
            FILT_VAL : integer in
          loop
            FILT_VAL := 0;
            do
              loop
                emit SPEED_FILT(FILT_VAL);
                await SPEED;
                VAL := ?SPEED;
                FILT_VAL := FILT_VAL + (VAL - FILT_VAL) / Kv
              end loop
            watching RESET
          end loop
        end var
      ||
        var NUM_SPEED_VAL_OUT : integer,
            SPEED_VALUE : integer in
          loop
            NUM_SPEED_VAL_OUT := 0;
            SPEED_VALUE := 0;
            do
              loop
                await SPEED do
                  SPEED_VALUE := ?SPEED
                end await;
                if SPEED_VALUE > MAX_SPEED_VAL then
                  emit STEER_SPEED_NO_SOFT;
                  NUM_SPEED_VAL_OUT := NUM_SPEED_VAL_OUT + 1;
                  if NUM_SPEED_VAL_OUT > MAX_NUM_SPEED_VAL_OUT then
                    emit STEER_SPEED_ERR;
                    halt
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := VAMF_1;
            V2 := VAHF_1;
            do
              loop
                emit STEER_SPEED_MOT_FRONT(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := VAMF_1;
                      V2 := VAHF_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := VAMF_2;
                        V2 := VAHF_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := VAMF_3;
                          V2 := VAHF_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := VAMF_4;
                            V2 := VAHF_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := VAMF_5;
                              V2 := VAHF_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := VAMF_6;
                                V2 := VAHF_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := VAMF_7;
                                  V2 := VAHF_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := VAMF_8;
                                    V2 := VAHF_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := VAMF_9;
                                      V2 := VAHF_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := VAMF_10;
                                        V2 := VAHF_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := VAMF_11;
                                          V2 := VAHF_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := VAMF_12;
                                            V2 := VAHF_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := VAMF_13;
                                              V2 := VAHF_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := VAMF_14;
                                                V2 := VAHF_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := VAMF_15;
                                                  V2 := VAHF_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := VAMF_16;
                                                    V2 := VAHF_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := VAMF_17;
                                                      V2 := VAHF_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := VAMF_18;
                                                        V2 := VAHF_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := VAMF_19;
                                                          V2 := VAHF_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := VAMF_20;
                                                            V2 := VAHF_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := VAMF_21;
                                                              V2 := VAHF_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := VAMF_22;
                                                                V2 := VAHF_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := VAMF_23;
                                                                  V2 := VAHF_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := VAMF_24;
                                                                    V2 := VAHF_24
                                                                  else
                                                                    V1 := VAMF_25;
                                                                    V2 := VAHF_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case SPEED_FILT do
                    CURRENT_VALUE := ?SPEED_FILT;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELFHVA then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELFMVA then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
      ||
        var CURRENT_VALUE : integer,
            OLD_VALUE : integer,
            SPEED_VALUE : integer,
            CONTROL_VALUE : integer,
            DIRECTION : integer,
            V1 : integer,
            V2 : integer,
            TIME1 : integer,
            TIME2 : integer in
          loop
            CURRENT_VALUE := 0;
            OLD_VALUE := 0;
            CONTROL_VALUE := SOFT;
            DIRECTION := UP;
            V1 := VAMR_1;
            V2 := VAHR_1;
            do
              loop
                emit STEER_SPEED_MOT_REAR(CONTROL_VALUE);
                OLD_VALUE := CURRENT_VALUE;
                await 
                  case LONG_SPEED_KM do
                    SPEED_VALUE := ?LONG_SPEED_KM;
                    if SPEED_VALUE < SPEED_10_KM then
                      V1 := VAMR_1;
                      V2 := VAHR_1
                    else
                      if SPEED_VALUE < SPEED_20_KM then
                        V1 := VAMR_2;
                        V2 := VAHR_2
                      else
                        if SPEED_VALUE < SPEED_30_KM then
                          V1 := VAMR_3;
                          V2 := VAHR_3
                        else
                          if SPEED_VALUE < SPEED_40_KM then
                            V1 := VAMR_4;
                            V2 := VAHR_4
                          else
                            if SPEED_VALUE < SPEED_50_KM then
                              V1 := VAMR_5;
                              V2 := VAHR_5
                            else
                              if SPEED_VALUE < SPEED_60_KM then
                                V1 := VAMR_6;
                                V2 := VAHR_6
                              else
                                if SPEED_VALUE < SPEED_70_KM then
                                  V1 := VAMR_7;
                                  V2 := VAHR_7
                                else
                                  if SPEED_VALUE < SPEED_80_KM then
                                    V1 := VAMR_8;
                                    V2 := VAHR_8
                                  else
                                    if SPEED_VALUE < SPEED_90_KM then
                                      V1 := VAMR_9;
                                      V2 := VAHR_9
                                    else
                                      if SPEED_VALUE < SPEED_100_KM then
                                        V1 := VAMR_10;
                                        V2 := VAHR_10
                                      else
                                        if SPEED_VALUE < SPEED_110_KM then
                                          V1 := VAMR_11;
                                          V2 := VAHR_11
                                        else
                                          if SPEED_VALUE < SPEED_120_KM then
                                            V1 := VAMR_12;
                                            V2 := VAHR_12
                                          else
                                            if SPEED_VALUE < SPEED_130_KM then
                                              V1 := VAMR_13;
                                              V2 := VAHR_13
                                            else
                                              if SPEED_VALUE < SPEED_140_KM then
                                                V1 := VAMR_14;
                                                V2 := VAHR_14
                                              else
                                                if SPEED_VALUE < SPEED_150_KM then
                                                  V1 := VAMR_15;
                                                  V2 := VAHR_15
                                                else
                                                  if SPEED_VALUE < SPEED_160_KM then
                                                    V1 := VAMR_16;
                                                    V2 := VAHR_16
                                                  else
                                                    if SPEED_VALUE < SPEED_170_KM then
                                                      V1 := VAMR_17;
                                                      V2 := VAHR_17
                                                    else
                                                      if SPEED_VALUE < SPEED_180_KM then
                                                        V1 := VAMR_18;
                                                        V2 := VAHR_18
                                                      else
                                                        if SPEED_VALUE < SPEED_190_KM then
                                                          V1 := VAMR_19;
                                                          V2 := VAHR_19
                                                        else
                                                          if SPEED_VALUE < SPEED_200_KM then
                                                            V1 := VAMR_20;
                                                            V2 := VAHR_20
                                                          else
                                                            if SPEED_VALUE < SPEED_210_KM then
                                                              V1 := VAMR_21;
                                                              V2 := VAHR_21
                                                            else
                                                              if SPEED_VALUE < SPEED_220_KM then
                                                                V1 := VAMR_22;
                                                                V2 := VAHR_22
                                                              else
                                                                if SPEED_VALUE < SPEED_230_KM then
                                                                  V1 := VAMR_23;
                                                                  V2 := VAHR_23
                                                                else
                                                                  if SPEED_VALUE < SPEED_240_KM then
                                                                    V1 := VAMR_24;
                                                                    V2 := VAHR_24
                                                                  else
                                                                    V1 := VAMR_25;
                                                                    V2 := VAHR_25
                                                                  end if
                                                                end if
                                                              end if
                                                            end if
                                                          end if
                                                        end if
                                                      end if
                                                    end if
                                                  end if
                                                end if
                                              end if
                                            end if
                                          end if
                                        end if
                                      end if
                                    end if
                                  end if
                                end if
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                  case SPEED_FILT do
                    CURRENT_VALUE := ?SPEED_FILT;
                    if CURRENT_VALUE < OLD_VALUE then
                      DIRECTION := DOWN
                    else
                      if CURRENT_VALUE > OLD_VALUE then
                        DIRECTION := UP
                      end if
                    end if;
                    if DIRECTION = UP then
                      if CURRENT_VALUE < V1 then
                        CONTROL_VALUE := SOFT
                      else
                        if CURRENT_VALUE < V2 then
                          CONTROL_VALUE := MED
                        else
                          CONTROL_VALUE := HARD
                        end if
                      end if
                    else
                      if CURRENT_VALUE > V2 then
                        CONTROL_VALUE := HARD
                      else
                        if CURRENT_VALUE > V1 then
                          if CONTROL_VALUE <> MED then
                            if OLD_VALUE > V2 then
                              TIME1 := 0
                            else
                              TIME1 := TIME1 + 1;
                              if TIME1 > DELRHVA then
                                CONTROL_VALUE := MED
                              end if
                            end if
                          end if
                        else
                          if CONTROL_VALUE <> SOFT then
                            if OLD_VALUE > V1 then
                              TIME2 := 0
                            else
                              TIME2 := TIME2 + 1;
                              if TIME2 > DELRMVA then
                                CONTROL_VALUE := SOFT
                              end if
                            end if
                          end if
                        end if
                      end if
                    end if
                end await
              end loop
            watching RESET
          end loop
        end var
    end signal
  ||
    signal MOT_DAMAGE : integer,
           MOT_REAR : integer,
           MOT_FRONT : integer,
           ignored in
        var CTRL_1_VAL : integer,
            CTRL_2_VAL : integer,
            CTRL_3_VAL : integer,
            CTRL_4_VAL : integer,
            CTRL_5_VAL : integer,
            CTRL_6_VAL : integer,
            CTRL_7_VAL : integer,
            CTRL_8_VAL : integer,
            CTRL_VAL : integer in
          loop
            CTRL_1_VAL := SOFT;
            CTRL_2_VAL := SOFT;
            CTRL_3_VAL := SOFT;
            CTRL_4_VAL := SOFT;
            CTRL_5_VAL := SOFT;
            CTRL_6_VAL := SOFT;
            CTRL_7_VAL := SOFT;
            CTRL_8_VAL := SOFT;
            CTRL_VAL := SOFT;
            do
              loop
                emit MOT_FRONT(CTRL_VAL);
                await 
                  case LONG_SPEED_MOT do
                    CTRL_1_VAL := ?LONG_SPEED_MOT
                  case LONG_ACC_MOT_FRONT do
                    CTRL_2_VAL := ?LONG_ACC_MOT_FRONT
                  case LONG_DECC_MOT_FRONT do
                    CTRL_3_VAL := ?LONG_DECC_MOT_FRONT
                  case LONG_ACC_DER_MOT_FRONT do
                    CTRL_4_VAL := ?LONG_ACC_DER_MOT_FRONT
                  case VER_ACC_LOW_MOT_FRONT do
                    CTRL_5_VAL := ?VER_ACC_LOW_MOT_FRONT
                  case VER_ACC_MED_MOT_FRONT do
                    CTRL_6_VAL := ?VER_ACC_MED_MOT_FRONT
                  case STEER_ANG_MOT_FRONT do
                    CTRL_7_VAL := ?STEER_ANG_MOT_FRONT
                  case STEER_SPEED_MOT_FRONT do
                    CTRL_8_VAL := ?STEER_SPEED_MOT_FRONT
                end await;
                if CTRL_1_VAL = HARD or CTRL_2_VAL = HARD or CTRL_3_VAL = HARD or CTRL_4_VAL = HARD or CTRL_5_VAL = HARD or CTRL_6_VAL = HARD or CTRL_7_VAL = HARD or CTRL_8_VAL = HARD then
                  CTRL_VAL := HARD
                else
                  if CTRL_1_VAL = MED or CTRL_2_VAL = MED or CTRL_3_VAL = MED or CTRL_4_VAL = MED or CTRL_5_VAL = MED or CTRL_6_VAL = MED or CTRL_7_VAL = MED or CTRL_8_VAL = MED then
                    CTRL_VAL := MED
                  else
                    CTRL_VAL := SOFT
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var CTRL_1_VAL : integer,
            CTRL_2_VAL : integer,
            CTRL_3_VAL : integer,
            CTRL_4_VAL : integer,
            CTRL_5_VAL : integer,
            CTRL_6_VAL : integer,
            CTRL_7_VAL : integer,
            CTRL_8_VAL : integer,
            CTRL_VAL : integer in
          loop
            CTRL_1_VAL := SOFT;
            CTRL_2_VAL := SOFT;
            CTRL_3_VAL := SOFT;
            CTRL_4_VAL := SOFT;
            CTRL_5_VAL := SOFT;
            CTRL_6_VAL := SOFT;
            CTRL_7_VAL := SOFT;
            CTRL_8_VAL := SOFT;
            CTRL_VAL := SOFT;
            do
              loop
                emit MOT_REAR(CTRL_VAL);
                await 
                  case LONG_SPEED_MOT do
                    CTRL_1_VAL := ?LONG_SPEED_MOT
                  case LONG_ACC_MOT_REAR do
                    CTRL_2_VAL := ?LONG_ACC_MOT_REAR
                  case LONG_DECC_MOT_REAR do
                    CTRL_3_VAL := ?LONG_DECC_MOT_REAR
                  case LONG_ACC_DER_MOT_REAR do
                    CTRL_4_VAL := ?LONG_ACC_DER_MOT_REAR
                  case VER_ACC_LOW_MOT_REAR do
                    CTRL_5_VAL := ?VER_ACC_LOW_MOT_REAR
                  case VER_ACC_MED_MOT_REAR do
                    CTRL_6_VAL := ?VER_ACC_MED_MOT_REAR
                  case STEER_ANG_MOT_REAR do
                    CTRL_7_VAL := ?STEER_ANG_MOT_REAR
                  case STEER_SPEED_MOT_REAR do
                    CTRL_8_VAL := ?STEER_SPEED_MOT_REAR
                end await;
                if CTRL_1_VAL = HARD or CTRL_2_VAL = HARD or CTRL_3_VAL = HARD or CTRL_4_VAL = HARD or CTRL_5_VAL = HARD or CTRL_6_VAL = HARD or CTRL_7_VAL = HARD or CTRL_8_VAL = HARD then
                  CTRL_VAL := HARD
                else
                  if CTRL_1_VAL = MED or CTRL_2_VAL = MED or CTRL_3_VAL = MED or CTRL_4_VAL = MED or CTRL_5_VAL = MED or CTRL_6_VAL = MED or CTRL_7_VAL = MED or CTRL_8_VAL = MED then
                    CTRL_VAL := MED
                  else
                    CTRL_VAL := SOFT
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var LONG_SPEED_ERR_VALUE : integer,
            VER_ACC_ERR_VALUE : integer,
            STEER_ANG_ERR_VALUE : integer,
            STEER_SPEED_ERR_VALUE : integer,
            BAT_ERR_VALUE : integer,
            BAT_MOT_HARD_VALUE : integer,
            STEER_ANG_DAMAGE_VALUE : integer,
            MOT_DAMAGE_VALUE : integer in
          loop
            LONG_SPEED_ERR_VALUE := SOFT;
            VER_ACC_ERR_VALUE := SOFT;
            STEER_ANG_ERR_VALUE := SOFT;
            STEER_SPEED_ERR_VALUE := SOFT;
            BAT_ERR_VALUE := SOFT;
            BAT_MOT_HARD_VALUE := SOFT;
            STEER_ANG_DAMAGE_VALUE := SOFT;
            MOT_DAMAGE_VALUE := SOFT;
            do
              loop
                emit MOT_DAMAGE(MOT_DAMAGE_VALUE);
                await 
                  case LONG_SPEED_ERR do
                    LONG_SPEED_ERR_VALUE := HARD
                  case VER_ACC_ERR do
                    VER_ACC_ERR_VALUE := HARD
                  case STEER_ANG_ERR do
                    STEER_ANG_ERR_VALUE := HARD
                  case STEER_SPEED_ERR do
                    STEER_SPEED_ERR_VALUE := HARD
                  case BAT_ERR do
                    BAT_ERR_VALUE := HARD
                  case BAT_MOT_HARD do
                    BAT_MOT_HARD_VALUE := HARD
                  case BAT_MOT_RES do
                    BAT_ERR_VALUE := SOFT;
                    BAT_MOT_HARD_VALUE := SOFT
                  case STEER_SPEED_NO_SOFT do
                    if STEER_SPEED_ERR_VALUE <> HARD then
                      STEER_SPEED_ERR_VALUE := MED
                    end if
                  case STEER_ANG_DAMAGE do
                    STEER_ANG_DAMAGE_VALUE := ?STEER_ANG_DAMAGE
                end await;
                if LONG_SPEED_ERR_VALUE = HARD or VER_ACC_ERR_VALUE = HARD or STEER_ANG_ERR_VALUE = HARD or STEER_SPEED_ERR_VALUE = HARD or BAT_ERR_VALUE = HARD or STEER_ANG_DAMAGE_VALUE = HARD then
                  MOT_DAMAGE_VALUE := HARD
                else
                  if STEER_SPEED_ERR_VALUE = MED or STEER_ANG_DAMAGE_VALUE = MED then
                    MOT_DAMAGE_VALUE := MED
                  else
                    MOT_DAMAGE_VALUE := SOFT
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var CHANNEL_P_VALUE : boolean,
            CHANNEL_N_VALUE : boolean,
            POS_A_VALUE : boolean,
            POS_B_VALUE : boolean,
            POS_VALUE : integer,
            COM_VALUE : integer,
            DAM_VALUE : integer,
            VBAT_VALUE : integer,
            START_TIMER : integer,
            STOP_TIMER : integer,
            TIME_ADD : integer in
          loop
            CHANNEL_P_VALUE := false;
            CHANNEL_N_VALUE := true;
            POS_VALUE := SOFT;
            COM_VALUE := SOFT;
            DAM_VALUE := SOFT;
            START_TIMER := 0;
            STOP_TIMER := 0;
            do
              loop
                emit MOT_CHANNEL_P1(CHANNEL_P_VALUE);
                emit MOT_CHANNEL_N1(CHANNEL_N_VALUE);
                await 
                  case CLOCK_500 do
                    if POS_VALUE <> COM_VALUE and not CHANNEL_P_VALUE then
                      START_TIMER := START_TIMER + 1
                    else
                      if POS_VALUE = COM_VALUE and not CHANNEL_N_VALUE then
                        STOP_TIMER := STOP_TIMER + 1
                      end if
                    end if
                  case MOT_FRONT do
                    COM_VALUE := ?MOT_FRONT;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_DAMAGE do
                    DAM_VALUE := ?MOT_DAMAGE;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_POS_A1 do
                    POS_A_VALUE := ?MOT_POS_A1;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case MOT_POS_B1 do
                    POS_B_VALUE := ?MOT_POS_B1;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case VBAT do
                    VBAT_VALUE := ?VBAT;
                    if VBAT_VALUE < VBAT_10_V then
                      TIME_ADD := TIME_45
                    else
                      if VBAT_VALUE < VBAT_12_V then
                        TIME_ADD := TIME_30
                      else
                        if VBAT_VALUE < VBAT_13_V then
                          TIME_ADD := TIME_15
                        else
                          TIME_ADD := 0
                        end if
                      end if
                    end if
                end await;
                if POS_VALUE <> COM_VALUE then
                  if START_TIMER > TIME_START then
                    CHANNEL_P_VALUE := true;
                    START_TIMER := 0
                  else
                    CHANNEL_N_VALUE := false
                  end if
                else
                  if STOP_TIMER > TIME_STOP + TIME_ADD then
                    CHANNEL_N_VALUE := true;
                    STOP_TIMER := 0
                  else
                    CHANNEL_P_VALUE := false
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var CHANNEL_P_VALUE : boolean,
            CHANNEL_N_VALUE : boolean,
            POS_A_VALUE : boolean,
            POS_B_VALUE : boolean,
            POS_VALUE : integer,
            COM_VALUE : integer,
            DAM_VALUE : integer,
            VBAT_VALUE : integer,
            START_TIMER : integer,
            STOP_TIMER : integer,
            TIME_ADD : integer in
          loop
            CHANNEL_P_VALUE := false;
            CHANNEL_N_VALUE := true;
            POS_VALUE := SOFT;
            COM_VALUE := SOFT;
            DAM_VALUE := SOFT;
            START_TIMER := 0;
            STOP_TIMER := 0;
            do
              loop
                emit MOT_CHANNEL_P2(CHANNEL_P_VALUE);
                emit MOT_CHANNEL_N2(CHANNEL_N_VALUE);
                await 
                  case CLOCK_500 do
                    if POS_VALUE <> COM_VALUE and not CHANNEL_P_VALUE then
                      START_TIMER := START_TIMER + 1
                    else
                      if POS_VALUE = COM_VALUE and not CHANNEL_N_VALUE then
                        STOP_TIMER := STOP_TIMER + 1
                      end if
                    end if
                  case MOT_FRONT do
                    COM_VALUE := ?MOT_FRONT;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_DAMAGE do
                    DAM_VALUE := ?MOT_DAMAGE;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_POS_A2 do
                    POS_A_VALUE := ?MOT_POS_A2;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case MOT_POS_B2 do
                    POS_B_VALUE := ?MOT_POS_B2;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case VBAT do
                    VBAT_VALUE := ?VBAT;
                    if VBAT_VALUE < VBAT_10_V then
                      TIME_ADD := TIME_45
                    else
                      if VBAT_VALUE < VBAT_12_V then
                        TIME_ADD := TIME_30
                      else
                        if VBAT_VALUE < VBAT_13_V then
                          TIME_ADD := TIME_15
                        else
                          TIME_ADD := 0
                        end if
                      end if
                    end if
                end await;
                if POS_VALUE <> COM_VALUE then
                  if START_TIMER > TIME_START then
                    CHANNEL_P_VALUE := true;
                    START_TIMER := 0
                  else
                    CHANNEL_N_VALUE := false
                  end if
                else
                  if STOP_TIMER > TIME_STOP + TIME_ADD then
                    CHANNEL_N_VALUE := true;
                    STOP_TIMER := 0
                  else
                    CHANNEL_P_VALUE := false
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var CHANNEL_P_VALUE : boolean,
            CHANNEL_N_VALUE : boolean,
            POS_A_VALUE : boolean,
            POS_B_VALUE : boolean,
            POS_VALUE : integer,
            COM_VALUE : integer,
            DAM_VALUE : integer,
            VBAT_VALUE : integer,
            START_TIMER : integer,
            STOP_TIMER : integer,
            TIME_ADD : integer in
          loop
            CHANNEL_P_VALUE := false;
            CHANNEL_N_VALUE := true;
            POS_VALUE := SOFT;
            COM_VALUE := SOFT;
            DAM_VALUE := SOFT;
            START_TIMER := 0;
            STOP_TIMER := 0;
            do
              loop
                emit MOT_CHANNEL_P3(CHANNEL_P_VALUE);
                emit MOT_CHANNEL_N3(CHANNEL_N_VALUE);
                await 
                  case CLOCK_500 do
                    if POS_VALUE <> COM_VALUE and not CHANNEL_P_VALUE then
                      START_TIMER := START_TIMER + 1
                    else
                      if POS_VALUE = COM_VALUE and not CHANNEL_N_VALUE then
                        STOP_TIMER := STOP_TIMER + 1
                      end if
                    end if
                  case MOT_REAR do
                    COM_VALUE := ?MOT_REAR;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_DAMAGE do
                    DAM_VALUE := ?MOT_DAMAGE;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_POS_A3 do
                    POS_A_VALUE := ?MOT_POS_A3;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case MOT_POS_B3 do
                    POS_B_VALUE := ?MOT_POS_B3;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case VBAT do
                    VBAT_VALUE := ?VBAT;
                    if VBAT_VALUE < VBAT_10_V then
                      TIME_ADD := TIME_45
                    else
                      if VBAT_VALUE < VBAT_12_V then
                        TIME_ADD := TIME_30
                      else
                        if VBAT_VALUE < VBAT_13_V then
                          TIME_ADD := TIME_15
                        else
                          TIME_ADD := 0
                        end if
                      end if
                    end if
                end await;
                if POS_VALUE <> COM_VALUE then
                  if START_TIMER > TIME_START then
                    CHANNEL_P_VALUE := true;
                    START_TIMER := 0
                  else
                    CHANNEL_N_VALUE := false
                  end if
                else
                  if STOP_TIMER > TIME_STOP + TIME_ADD then
                    CHANNEL_N_VALUE := true;
                    STOP_TIMER := 0
                  else
                    CHANNEL_P_VALUE := false
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
      ||
        var CHANNEL_P_VALUE : boolean,
            CHANNEL_N_VALUE : boolean,
            POS_A_VALUE : boolean,
            POS_B_VALUE : boolean,
            POS_VALUE : integer,
            COM_VALUE : integer,
            DAM_VALUE : integer,
            VBAT_VALUE : integer,
            START_TIMER : integer,
            STOP_TIMER : integer,
            TIME_ADD : integer in
          loop
            CHANNEL_P_VALUE := false;
            CHANNEL_N_VALUE := true;
            POS_VALUE := SOFT;
            COM_VALUE := SOFT;
            DAM_VALUE := SOFT;
            START_TIMER := 0;
            STOP_TIMER := 0;
            do
              loop
                emit MOT_CHANNEL_P4(CHANNEL_P_VALUE);
                emit MOT_CHANNEL_N4(CHANNEL_N_VALUE);
                await 
                  case CLOCK_500 do
                    if POS_VALUE <> COM_VALUE and not CHANNEL_P_VALUE then
                      START_TIMER := START_TIMER + 1
                    else
                      if POS_VALUE = COM_VALUE and not CHANNEL_N_VALUE then
                        STOP_TIMER := STOP_TIMER + 1
                      end if
                    end if
                  case MOT_REAR do
                    COM_VALUE := ?MOT_REAR;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_DAMAGE do
                    DAM_VALUE := ?MOT_DAMAGE;
                    if DAM_VALUE > COM_VALUE then
                      COM_VALUE := DAM_VALUE
                    end if
                  case MOT_POS_A4 do
                    POS_A_VALUE := ?MOT_POS_A4;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case MOT_POS_B4 do
                    POS_B_VALUE := ?MOT_POS_B4;
                    if POS_A_VALUE and not POS_B_VALUE then
                      POS_VALUE := HARD
                    else
                      if POS_B_VALUE and not POS_A_VALUE then
                        POS_VALUE := SOFT
                      else
                        POS_VALUE := MED
                      end if
                    end if
                  case VBAT do
                    VBAT_VALUE := ?VBAT;
                    if VBAT_VALUE < VBAT_10_V then
                      TIME_ADD := TIME_45
                    else
                      if VBAT_VALUE < VBAT_12_V then
                        TIME_ADD := TIME_30
                      else
                        if VBAT_VALUE < VBAT_13_V then
                          TIME_ADD := TIME_15
                        else
                          TIME_ADD := 0
                        end if
                      end if
                    end if
                end await;
                if POS_VALUE <> COM_VALUE then
                  if START_TIMER > TIME_START then
                    CHANNEL_P_VALUE := true;
                    START_TIMER := 0
                  else
                    CHANNEL_N_VALUE := false
                  end if
                else
                  if STOP_TIMER > TIME_STOP + TIME_ADD then
                    CHANNEL_N_VALUE := true;
                    STOP_TIMER := 0
                  else
                    CHANNEL_P_VALUE := false
                  end if
                end if
              end loop
            watching RESET
          end loop
        end var
    end signal
end signal

end module
