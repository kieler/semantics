/*
 * generated by Xtext
 */
package de.cau.cs.kieler.prom.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.Pragma;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.StringPragma;
import de.cau.cs.kieler.annotations.TagAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IgnoreValue;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.JsonArrayValue;
import de.cau.cs.kieler.kexpressions.JsonObjectMember;
import de.cau.cs.kieler.kexpressions.JsonObjectValue;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.NullValue;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.RandomCall;
import de.cau.cs.kieler.kexpressions.RandomizeCall;
import de.cau.cs.kieler.kexpressions.ReferenceCall;
import de.cau.cs.kieler.kexpressions.ScheduleObjectReference;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VectorValue;
import de.cau.cs.kieler.kexpressions.serializer.KExpressionsSemanticSequencer;
import de.cau.cs.kieler.prom.kibuild.ArrayIndex;
import de.cau.cs.kieler.prom.kibuild.AttributeMapping;
import de.cau.cs.kieler.prom.kibuild.BuildConfiguration;
import de.cau.cs.kieler.prom.kibuild.KibuildPackage;
import de.cau.cs.kieler.prom.kibuild.Literal;
import de.cau.cs.kieler.prom.kibuild.ModelCompiler;
import de.cau.cs.kieler.prom.kibuild.NormalTemplateProcessor;
import de.cau.cs.kieler.prom.kibuild.SignedFloat;
import de.cau.cs.kieler.prom.kibuild.SignedInt;
import de.cau.cs.kieler.prom.kibuild.SimulationCompiler;
import de.cau.cs.kieler.prom.kibuild.SimulationTemplateProcessor;
import de.cau.cs.kieler.prom.kibuild.TextValue;
import de.cau.cs.kieler.prom.kibuild.WrapperCodeTemplateProcessor;
import de.cau.cs.kieler.prom.services.KiBuildGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKiBuildSemanticSequencer extends KExpressionsSemanticSequencer {

	@Inject
	private KiBuildGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.COMMENT_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getCommentAnnotationRule()) {
					sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommentAnnotatonSLRule()) {
					sequence_CommentAnnotatonSL(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.PRAGMA:
				sequence_PragmaTag(context, (Pragma) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedKeyStringValueAnnotationRule()) {
					sequence_RestrictedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.STRING_PRAGMA:
				sequence_StringPragma(context, (StringPragma) semanticObject); 
				return; 
			case AnnotationsPackage.TAG_ANNOTATION:
				sequence_TagAnnotation(context, (TagAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()) {
					sequence_RestrictedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.IGNORE_VALUE:
				sequence_IgnoreValue(context, (IgnoreValue) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_ARRAY_VALUE:
				sequence_JsonArrayValue(context, (JsonArrayValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_MEMBER:
				sequence_JsonObjectMember(context, (JsonObjectMember) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_VALUE:
				sequence_JsonObjectValue(context, (JsonObjectValue) semanticObject); 
				return; 
			case KExpressionsPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getFBYExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_FBYExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_ShiftLeftExpression_ShiftRightExpression_ShiftRightUnsignedExpression_SubExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOM_CALL:
				sequence_RandomCall(context, (RandomCall) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOMIZE_CALL:
				sequence_RandomizeCall(context, (RandomizeCall) semanticObject); 
				return; 
			case KExpressionsPackage.REFERENCE_CALL:
				sequence_ReferenceCall(context, (ReferenceCall) semanticObject); 
				return; 
			case KExpressionsPackage.SCHEDULE_OBJECT_REFERENCE:
				sequence_ScheduleObjectReference(context, (ScheduleObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.VECTOR_VALUE:
				sequence_VectorValue(context, (VectorValue) semanticObject); 
				return; 
			}
		else if (epackage == KibuildPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KibuildPackage.ARRAY_INDEX:
				sequence_ArrayIndex(context, (ArrayIndex) semanticObject); 
				return; 
			case KibuildPackage.ATTRIBUTE_MAPPING:
				sequence_AttributeMapping(context, (AttributeMapping) semanticObject); 
				return; 
			case KibuildPackage.BUILD_CONFIGURATION:
				sequence_BuildConfiguration(context, (BuildConfiguration) semanticObject); 
				return; 
			case KibuildPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case KibuildPackage.MODEL_COMPILER:
				sequence_ModelCompiler(context, (ModelCompiler) semanticObject); 
				return; 
			case KibuildPackage.NORMAL_TEMPLATE_PROCESSOR:
				sequence_NormalTemplateProcessor(context, (NormalTemplateProcessor) semanticObject); 
				return; 
			case KibuildPackage.SIGNED_FLOAT:
				sequence_SignedFloat(context, (SignedFloat) semanticObject); 
				return; 
			case KibuildPackage.SIGNED_INT:
				sequence_SignedInt(context, (SignedInt) semanticObject); 
				return; 
			case KibuildPackage.SIMULATION_COMPILER:
				sequence_SimulationCompiler(context, (SimulationCompiler) semanticObject); 
				return; 
			case KibuildPackage.SIMULATION_TEMPLATE_PROCESSOR:
				sequence_SimulationTemplateProcessor(context, (SimulationTemplateProcessor) semanticObject); 
				return; 
			case KibuildPackage.TEXT_VALUE:
				sequence_TextValue(context, (TextValue) semanticObject); 
				return; 
			case KibuildPackage.WRAPPER_CODE_TEMPLATE_PROCESSOR:
				sequence_WrapperCodeTemplateProcessor(context, (WrapperCodeTemplateProcessor) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArrayIndex returns ArrayIndex
	 *
	 * Constraint:
	 *     indices+=INT+
	 */
	protected void sequence_ArrayIndex(ISerializationContext context, ArrayIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeMapping returns AttributeMapping
	 *
	 * Constraint:
	 *     (name=ID arrayIndex=ArrayIndex? (value=Literal | (values+=Literal values+=Literal+) | attributes+=AttributeMapping+))
	 */
	protected void sequence_AttributeMapping(ISerializationContext context, AttributeMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BuildConfiguration returns BuildConfiguration
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             attributes+=AttributeMapping+ 
	 *             ((modelCompilers+=ModelCompiler+ templateProcessors+=TemplateProcessor+) | templateProcessors+=TemplateProcessor+)
	 *         ) | 
	 *         (
	 *             ((attributes+=AttributeMapping+ modelCompilers+=ModelCompiler+) | modelCompilers+=ModelCompiler+)? 
	 *             simulationCompilers+=SimulationCompiler+ 
	 *             templateProcessors+=TemplateProcessor+
	 *         ) | 
	 *         (modelCompilers+=ModelCompiler+ templateProcessors+=TemplateProcessor+) | 
	 *         templateProcessors+=TemplateProcessor+
	 *     )?
	 */
	protected void sequence_BuildConfiguration(ISerializationContext context, BuildConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     ((value=TextValue arrayIndex=ArrayIndex?) | value=SignedInt | value=SignedFloat | value=AnyValue)
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelCompiler returns ModelCompiler
	 *
	 * Constraint:
	 *     (name=ID attributes+=AttributeMapping* simulationProcessor=SimulationTemplateProcessor?)
	 */
	protected void sequence_ModelCompiler(ISerializationContext context, ModelCompiler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TemplateProcessor returns NormalTemplateProcessor
	 *     NormalTemplateProcessor returns NormalTemplateProcessor
	 *
	 * Constraint:
	 *     attributes+=AttributeMapping*
	 */
	protected void sequence_NormalTemplateProcessor(ISerializationContext context, NormalTemplateProcessor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignedFloat returns SignedFloat
	 *
	 * Constraint:
	 *     (sign=Sign? value=FLOAT)
	 */
	protected void sequence_SignedFloat(ISerializationContext context, SignedFloat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignedInt returns SignedInt
	 *
	 * Constraint:
	 *     (sign=Sign? value=INT)
	 */
	protected void sequence_SignedInt(ISerializationContext context, SignedInt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimulationCompiler returns SimulationCompiler
	 *
	 * Constraint:
	 *     (name=ID attributes+=AttributeMapping*)
	 */
	protected void sequence_SimulationCompiler(ISerializationContext context, SimulationCompiler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TemplateProcessor returns SimulationTemplateProcessor
	 *     SimulationTemplateProcessor returns SimulationTemplateProcessor
	 *
	 * Constraint:
	 *     attributes+=AttributeMapping*
	 */
	protected void sequence_SimulationTemplateProcessor(ISerializationContext context, SimulationTemplateProcessor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TextValue returns TextValue
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_TextValue(ISerializationContext context, TextValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KibuildPackage.Literals.TEXT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KibuildPackage.Literals.TEXT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextValueAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TemplateProcessor returns WrapperCodeTemplateProcessor
	 *     WrapperCodeTemplateProcessor returns WrapperCodeTemplateProcessor
	 *
	 * Constraint:
	 *     attributes+=AttributeMapping*
	 */
	protected void sequence_WrapperCodeTemplateProcessor(ISerializationContext context, WrapperCodeTemplateProcessor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
