/*
 * generated by Xtext
 */
package de.cau.cs.kieler.prom.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KiBuildGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BuildConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.BuildConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesAttributeMappingParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Assignment cModelCompilersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelCompilersModelCompilerParserRuleCall_1_0 = (RuleCall)cModelCompilersAssignment_1.eContents().get(0);
		private final Assignment cSimulationCompilersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimulationCompilersSimulationCompilerParserRuleCall_2_0 = (RuleCall)cSimulationCompilersAssignment_2.eContents().get(0);
		private final Assignment cTemplateProcessorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTemplateProcessorsTemplateProcessorParserRuleCall_3_0 = (RuleCall)cTemplateProcessorsAssignment_3.eContents().get(0);
		
		//BuildConfiguration:
		//	attributes+=AttributeMapping*
		//	modelCompilers+=ModelCompiler*
		//	simulationCompilers+=SimulationCompiler*
		//	templateProcessors+=TemplateProcessor*;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes+=AttributeMapping* modelCompilers+=ModelCompiler* simulationCompilers+=SimulationCompiler*
		//templateProcessors+=TemplateProcessor*
		public Group getGroup() { return cGroup; }
		
		//attributes+=AttributeMapping*
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//AttributeMapping
		public RuleCall getAttributesAttributeMappingParserRuleCall_0_0() { return cAttributesAttributeMappingParserRuleCall_0_0; }
		
		//modelCompilers+=ModelCompiler*
		public Assignment getModelCompilersAssignment_1() { return cModelCompilersAssignment_1; }
		
		//ModelCompiler
		public RuleCall getModelCompilersModelCompilerParserRuleCall_1_0() { return cModelCompilersModelCompilerParserRuleCall_1_0; }
		
		//simulationCompilers+=SimulationCompiler*
		public Assignment getSimulationCompilersAssignment_2() { return cSimulationCompilersAssignment_2; }
		
		//SimulationCompiler
		public RuleCall getSimulationCompilersSimulationCompilerParserRuleCall_2_0() { return cSimulationCompilersSimulationCompilerParserRuleCall_2_0; }
		
		//templateProcessors+=TemplateProcessor*
		public Assignment getTemplateProcessorsAssignment_3() { return cTemplateProcessorsAssignment_3; }
		
		//TemplateProcessor
		public RuleCall getTemplateProcessorsTemplateProcessorParserRuleCall_3_0() { return cTemplateProcessorsTemplateProcessorParserRuleCall_3_0; }
	}
	public class ModelCompilerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.ModelCompiler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCompilerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeMappingParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Assignment cSimulationProcessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSimulationProcessorSimulationTemplateProcessorParserRuleCall_5_0 = (RuleCall)cSimulationProcessorAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ModelCompiler:
		//	'model' 'compiler' name=ID '{'
		//	attributes+=AttributeMapping*
		//	simulationProcessor=SimulationTemplateProcessor?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'model' 'compiler' name=ID '{' attributes+=AttributeMapping* simulationProcessor=SimulationTemplateProcessor? '}'
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//'compiler'
		public Keyword getCompilerKeyword_1() { return cCompilerKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//attributes+=AttributeMapping*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//AttributeMapping
		public RuleCall getAttributesAttributeMappingParserRuleCall_4_0() { return cAttributesAttributeMappingParserRuleCall_4_0; }
		
		//simulationProcessor=SimulationTemplateProcessor?
		public Assignment getSimulationProcessorAssignment_5() { return cSimulationProcessorAssignment_5; }
		
		//SimulationTemplateProcessor
		public RuleCall getSimulationProcessorSimulationTemplateProcessorParserRuleCall_5_0() { return cSimulationProcessorSimulationTemplateProcessorParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SimulationCompilerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.SimulationCompiler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCompilerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeMappingParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SimulationCompiler:
		//	'simulation' 'compiler' name=ID '{'
		//	attributes+=AttributeMapping*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'simulation' 'compiler' name=ID '{' attributes+=AttributeMapping* '}'
		public Group getGroup() { return cGroup; }
		
		//'simulation'
		public Keyword getSimulationKeyword_0() { return cSimulationKeyword_0; }
		
		//'compiler'
		public Keyword getCompilerKeyword_1() { return cCompilerKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//attributes+=AttributeMapping*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//AttributeMapping
		public RuleCall getAttributesAttributeMappingParserRuleCall_4_0() { return cAttributesAttributeMappingParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TemplateProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.TemplateProcessor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalTemplateProcessorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimulationTemplateProcessorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWrapperCodeTemplateProcessorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TemplateProcessor:
		//	NormalTemplateProcessor
		//	| SimulationTemplateProcessor
		//	| WrapperCodeTemplateProcessor;
		@Override public ParserRule getRule() { return rule; }
		
		//NormalTemplateProcessor | SimulationTemplateProcessor | WrapperCodeTemplateProcessor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NormalTemplateProcessor
		public RuleCall getNormalTemplateProcessorParserRuleCall_0() { return cNormalTemplateProcessorParserRuleCall_0; }
		
		//SimulationTemplateProcessor
		public RuleCall getSimulationTemplateProcessorParserRuleCall_1() { return cSimulationTemplateProcessorParserRuleCall_1; }
		
		//WrapperCodeTemplateProcessor
		public RuleCall getWrapperCodeTemplateProcessorParserRuleCall_2() { return cWrapperCodeTemplateProcessorParserRuleCall_2; }
	}
	public class NormalTemplateProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.NormalTemplateProcessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTemplateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Action cNormalTemplateProcessorAction_3 = (Action)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeMappingParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NormalTemplateProcessor TemplateProcessor:
		//	'process' 'template' '{' {NormalTemplateProcessor} attributes+=AttributeMapping*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'process' 'template' '{' {NormalTemplateProcessor} attributes+=AttributeMapping* '}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//'template'
		public Keyword getTemplateKeyword_1() { return cTemplateKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//{NormalTemplateProcessor}
		public Action getNormalTemplateProcessorAction_3() { return cNormalTemplateProcessorAction_3; }
		
		//attributes+=AttributeMapping*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//AttributeMapping
		public RuleCall getAttributesAttributeMappingParserRuleCall_4_0() { return cAttributesAttributeMappingParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SimulationTemplateProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.SimulationTemplateProcessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSimulationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTemplateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Action cSimulationTemplateProcessorAction_4 = (Action)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeMappingParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SimulationTemplateProcessor TemplateProcessor:
		//	'process' 'simulation' 'template' '{' {SimulationTemplateProcessor} attributes+=AttributeMapping*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'process' 'simulation' 'template' '{' {SimulationTemplateProcessor} attributes+=AttributeMapping* '}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//'simulation'
		public Keyword getSimulationKeyword_1() { return cSimulationKeyword_1; }
		
		//'template'
		public Keyword getTemplateKeyword_2() { return cTemplateKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//{SimulationTemplateProcessor}
		public Action getSimulationTemplateProcessorAction_4() { return cSimulationTemplateProcessorAction_4; }
		
		//attributes+=AttributeMapping*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//AttributeMapping
		public RuleCall getAttributesAttributeMappingParserRuleCall_5_0() { return cAttributesAttributeMappingParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class WrapperCodeTemplateProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.WrapperCodeTemplateProcessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWrapperKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTemplateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Action cWrapperCodeTemplateProcessorAction_4 = (Action)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeMappingParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WrapperCodeTemplateProcessor TemplateProcessor:
		//	'process' 'wrapper' 'template' '{' {WrapperCodeTemplateProcessor} attributes+=AttributeMapping*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'process' 'wrapper' 'template' '{' {WrapperCodeTemplateProcessor} attributes+=AttributeMapping* '}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//'wrapper'
		public Keyword getWrapperKeyword_1() { return cWrapperKeyword_1; }
		
		//'template'
		public Keyword getTemplateKeyword_2() { return cTemplateKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//{WrapperCodeTemplateProcessor}
		public Action getWrapperCodeTemplateProcessorAction_4() { return cWrapperCodeTemplateProcessorAction_4; }
		
		//attributes+=AttributeMapping*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//AttributeMapping
		public RuleCall getAttributesAttributeMappingParserRuleCall_5_0() { return cAttributesAttributeMappingParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttributeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.AttributeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArrayIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayIndexArrayIndexParserRuleCall_1_0 = (RuleCall)cArrayIndexAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_2_0_1_0 = (RuleCall)cValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesLiteralParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cValuesLiteralParserRuleCall_2_1_2_1_0 = (RuleCall)cValuesAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cColonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cAttributesAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cAttributesAttributeMappingParserRuleCall_2_2_2_0 = (RuleCall)cAttributesAssignment_2_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		
		//AttributeMapping:
		//	name=ID
		//	arrayIndex=ArrayIndex? (':' value=Literal | ':' values+=Literal (',' values+=Literal)+ | ':'? '{'
		//	attributes+=AttributeMapping+ '}');
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID arrayIndex=ArrayIndex? (':' value=Literal | ':' values+=Literal (',' values+=Literal)+ | ':'? '{'
		//attributes+=AttributeMapping+ '}')
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//arrayIndex=ArrayIndex?
		public Assignment getArrayIndexAssignment_1() { return cArrayIndexAssignment_1; }
		
		//ArrayIndex
		public RuleCall getArrayIndexArrayIndexParserRuleCall_1_0() { return cArrayIndexArrayIndexParserRuleCall_1_0; }
		
		//':' value=Literal | ':' values+=Literal (',' values+=Literal)+ | ':'? '{' attributes+=AttributeMapping+ '}'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//':' value=Literal
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }
		
		//value=Literal
		public Assignment getValueAssignment_2_0_1() { return cValueAssignment_2_0_1; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0_1_0() { return cValueLiteralParserRuleCall_2_0_1_0; }
		
		//':' values+=Literal (',' values+=Literal)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//':'
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }
		
		//values+=Literal
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//Literal
		public RuleCall getValuesLiteralParserRuleCall_2_1_1_0() { return cValuesLiteralParserRuleCall_2_1_1_0; }
		
		//(',' values+=Literal)+
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//values+=Literal
		public Assignment getValuesAssignment_2_1_2_1() { return cValuesAssignment_2_1_2_1; }
		
		//Literal
		public RuleCall getValuesLiteralParserRuleCall_2_1_2_1_0() { return cValuesLiteralParserRuleCall_2_1_2_1_0; }
		
		//':'? '{' attributes+=AttributeMapping+ '}'
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//':'?
		public Keyword getColonKeyword_2_2_0() { return cColonKeyword_2_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2_1() { return cLeftCurlyBracketKeyword_2_2_1; }
		
		//attributes+=AttributeMapping+
		public Assignment getAttributesAssignment_2_2_2() { return cAttributesAssignment_2_2_2; }
		
		//AttributeMapping
		public RuleCall getAttributesAttributeMappingParserRuleCall_2_2_2_0() { return cAttributesAttributeMappingParserRuleCall_2_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2_3() { return cRightCurlyBracketKeyword_2_2_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueTextValueParserRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Assignment cArrayIndexAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArrayIndexArrayIndexParserRuleCall_0_1_0 = (RuleCall)cArrayIndexAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueSignedFloatParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueAnyValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Literal:
		//	value=TextValue arrayIndex=ArrayIndex? | value=SignedInt
		//	| value=SignedFloat
		//	| value=AnyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=TextValue arrayIndex=ArrayIndex? | value=SignedInt | value=SignedFloat | value=AnyValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=TextValue arrayIndex=ArrayIndex?
		public Group getGroup_0() { return cGroup_0; }
		
		//value=TextValue
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//TextValue
		public RuleCall getValueTextValueParserRuleCall_0_0_0() { return cValueTextValueParserRuleCall_0_0_0; }
		
		//arrayIndex=ArrayIndex?
		public Assignment getArrayIndexAssignment_0_1() { return cArrayIndexAssignment_0_1; }
		
		//ArrayIndex
		public RuleCall getArrayIndexArrayIndexParserRuleCall_0_1_0() { return cArrayIndexArrayIndexParserRuleCall_0_1_0; }
		
		//value=SignedInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_1_0() { return cValueSignedIntParserRuleCall_1_0; }
		
		//value=SignedFloat
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//SignedFloat
		public RuleCall getValueSignedFloatParserRuleCall_2_0() { return cValueSignedFloatParserRuleCall_2_0; }
		
		//value=AnyValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//AnyValue
		public RuleCall getValueAnyValueParserRuleCall_3_0() { return cValueAnyValueParserRuleCall_3_0; }
	}
	public class ArrayIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.ArrayIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndicesINTTerminalRuleCall_1_0 = (RuleCall)cIndicesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayIndex:
		//	('[' indices+=INT ']')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('[' indices+=INT ']')+
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//indices+=INT
		public Assignment getIndicesAssignment_1() { return cIndicesAssignment_1; }
		
		//INT
		public RuleCall getIndicesINTTerminalRuleCall_1_0() { return cIndicesINTTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SignedFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.SignedFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SignedFloat:
		//	sign=Sign?
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=Sign? value=FLOAT
		public Group getGroup() { return cGroup; }
		
		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//Sign
		public RuleCall getSignSignEnumRuleCall_0_0() { return cSignSignEnumRuleCall_0_0; }
		
		//value=FLOAT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_0() { return cValueFLOATTerminalRuleCall_1_0; }
	}
	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignSignEnumRuleCall_0_0 = (RuleCall)cSignAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SignedInt:
		//	sign=Sign?
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=Sign? value=INT
		public Group getGroup() { return cGroup; }
		
		//sign=Sign?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//Sign
		public RuleCall getSignSignEnumRuleCall_0_0() { return cSignSignEnumRuleCall_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class TextValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.TextValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//TextValue:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	
	public class SignElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPOSITIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPOSITIVEPlusSignKeyword_0_0 = (Keyword)cPOSITIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEGATIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEGATIVEHyphenMinusKeyword_1_0 = (Keyword)cNEGATIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Sign:
		//	POSITIVE='+' | NEGATIVE='-';
		public EnumRule getRule() { return rule; }
		
		//POSITIVE='+' | NEGATIVE='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//POSITIVE='+'
		public EnumLiteralDeclaration getPOSITIVEEnumLiteralDeclaration_0() { return cPOSITIVEEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPOSITIVEPlusSignKeyword_0_0() { return cPOSITIVEPlusSignKeyword_0_0; }
		
		//NEGATIVE='-'
		public EnumLiteralDeclaration getNEGATIVEEnumLiteralDeclaration_1() { return cNEGATIVEEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getNEGATIVEHyphenMinusKeyword_1_0() { return cNEGATIVEHyphenMinusKeyword_1_0; }
	}
	
	private final BuildConfigurationElements pBuildConfiguration;
	private final ModelCompilerElements pModelCompiler;
	private final SimulationCompilerElements pSimulationCompiler;
	private final TemplateProcessorElements pTemplateProcessor;
	private final NormalTemplateProcessorElements pNormalTemplateProcessor;
	private final SimulationTemplateProcessorElements pSimulationTemplateProcessor;
	private final WrapperCodeTemplateProcessorElements pWrapperCodeTemplateProcessor;
	private final AttributeMappingElements pAttributeMapping;
	private final LiteralElements pLiteral;
	private final ArrayIndexElements pArrayIndex;
	private final SignElements eSign;
	private final SignedFloatElements pSignedFloat;
	private final SignedIntElements pSignedInt;
	private final TextValueElements pTextValue;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KiBuildGrammarAccess(GrammarProvider grammarProvider,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pBuildConfiguration = new BuildConfigurationElements();
		this.pModelCompiler = new ModelCompilerElements();
		this.pSimulationCompiler = new SimulationCompilerElements();
		this.pTemplateProcessor = new TemplateProcessorElements();
		this.pNormalTemplateProcessor = new NormalTemplateProcessorElements();
		this.pSimulationTemplateProcessor = new SimulationTemplateProcessorElements();
		this.pWrapperCodeTemplateProcessor = new WrapperCodeTemplateProcessorElements();
		this.pAttributeMapping = new AttributeMappingElements();
		this.pLiteral = new LiteralElements();
		this.pArrayIndex = new ArrayIndexElements();
		this.eSign = new SignElements();
		this.pSignedFloat = new SignedFloatElements();
		this.pSignedInt = new SignedIntElements();
		this.pTextValue = new TextValueElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.prom.KiBuild.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.prom.KiBuild".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BuildConfiguration:
	//	attributes+=AttributeMapping*
	//	modelCompilers+=ModelCompiler*
	//	simulationCompilers+=SimulationCompiler*
	//	templateProcessors+=TemplateProcessor*;
	public BuildConfigurationElements getBuildConfigurationAccess() {
		return pBuildConfiguration;
	}
	
	public ParserRule getBuildConfigurationRule() {
		return getBuildConfigurationAccess().getRule();
	}
	
	//ModelCompiler:
	//	'model' 'compiler' name=ID '{'
	//	attributes+=AttributeMapping*
	//	simulationProcessor=SimulationTemplateProcessor?
	//	'}';
	public ModelCompilerElements getModelCompilerAccess() {
		return pModelCompiler;
	}
	
	public ParserRule getModelCompilerRule() {
		return getModelCompilerAccess().getRule();
	}
	
	//SimulationCompiler:
	//	'simulation' 'compiler' name=ID '{'
	//	attributes+=AttributeMapping*
	//	'}';
	public SimulationCompilerElements getSimulationCompilerAccess() {
		return pSimulationCompiler;
	}
	
	public ParserRule getSimulationCompilerRule() {
		return getSimulationCompilerAccess().getRule();
	}
	
	//TemplateProcessor:
	//	NormalTemplateProcessor
	//	| SimulationTemplateProcessor
	//	| WrapperCodeTemplateProcessor;
	public TemplateProcessorElements getTemplateProcessorAccess() {
		return pTemplateProcessor;
	}
	
	public ParserRule getTemplateProcessorRule() {
		return getTemplateProcessorAccess().getRule();
	}
	
	//NormalTemplateProcessor TemplateProcessor:
	//	'process' 'template' '{' {NormalTemplateProcessor} attributes+=AttributeMapping*
	//	'}';
	public NormalTemplateProcessorElements getNormalTemplateProcessorAccess() {
		return pNormalTemplateProcessor;
	}
	
	public ParserRule getNormalTemplateProcessorRule() {
		return getNormalTemplateProcessorAccess().getRule();
	}
	
	//SimulationTemplateProcessor TemplateProcessor:
	//	'process' 'simulation' 'template' '{' {SimulationTemplateProcessor} attributes+=AttributeMapping*
	//	'}';
	public SimulationTemplateProcessorElements getSimulationTemplateProcessorAccess() {
		return pSimulationTemplateProcessor;
	}
	
	public ParserRule getSimulationTemplateProcessorRule() {
		return getSimulationTemplateProcessorAccess().getRule();
	}
	
	//WrapperCodeTemplateProcessor TemplateProcessor:
	//	'process' 'wrapper' 'template' '{' {WrapperCodeTemplateProcessor} attributes+=AttributeMapping*
	//	'}';
	public WrapperCodeTemplateProcessorElements getWrapperCodeTemplateProcessorAccess() {
		return pWrapperCodeTemplateProcessor;
	}
	
	public ParserRule getWrapperCodeTemplateProcessorRule() {
		return getWrapperCodeTemplateProcessorAccess().getRule();
	}
	
	//AttributeMapping:
	//	name=ID
	//	arrayIndex=ArrayIndex? (':' value=Literal | ':' values+=Literal (',' values+=Literal)+ | ':'? '{'
	//	attributes+=AttributeMapping+ '}');
	public AttributeMappingElements getAttributeMappingAccess() {
		return pAttributeMapping;
	}
	
	public ParserRule getAttributeMappingRule() {
		return getAttributeMappingAccess().getRule();
	}
	
	//Literal:
	//	value=TextValue arrayIndex=ArrayIndex? | value=SignedInt
	//	| value=SignedFloat
	//	| value=AnyValue;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//ArrayIndex:
	//	('[' indices+=INT ']')+;
	public ArrayIndexElements getArrayIndexAccess() {
		return pArrayIndex;
	}
	
	public ParserRule getArrayIndexRule() {
		return getArrayIndexAccess().getRule();
	}
	
	//enum Sign:
	//	POSITIVE='+' | NEGATIVE='-';
	public SignElements getSignAccess() {
		return eSign;
	}
	
	public EnumRule getSignRule() {
		return getSignAccess().getRule();
	}
	
	//SignedFloat:
	//	sign=Sign?
	//	value=FLOAT;
	public SignedFloatElements getSignedFloatAccess() {
		return pSignedFloat;
	}
	
	public ParserRule getSignedFloatRule() {
		return getSignedFloatAccess().getRule();
	}
	
	//SignedInt:
	//	sign=Sign?
	//	value=INT;
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}
	
	//TextValue:
	//	value=ID;
	public TextValueElements getTextValueAccess() {
		return pTextValue;
	}
	
	public ParserRule getTextValueRule() {
		return getTextValueAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | '/' | '\\') ('a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '/' | '\\' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */ // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression) ('||' subExpressions+=LogicalAndExpression)*)?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression) ('&&' subExpressions+=BitwiseOrExpression)*)?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseXOrExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseXOrExpression) ('|' subExpressions+=BitwiseXOrExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseXOrOperator
	//	subExpressions+=BitwiseAndExpression) ('^' subExpressions+=BitwiseAndExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation) ('&' subExpressions+=CompareOperation)*)?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression Expression:
	//	{OperatorExpression} operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | BitwiseNotExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	ShiftLeftExpression;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//ShiftLeftExpression Expression:
	//	ShiftRightExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftLeftOperator
	//	subExpressions+=ShiftRightExpression) ('<<' subExpressions+=ShiftRightExpression)*)?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression Expression:
	//	ShiftRightUnsignedExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightOperator
	//	subExpressions+=ShiftRightUnsignedExpression) ('>>' subExpressions+=ShiftRightUnsignedExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression Expression:
	//	AddExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightUnsignedOperator
	//	subExpressions+=AddExpression) ('>>>' subExpressions+=AddExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} (operator=AddOperator subExpressions+=SubExpression) ('+'
	//	subExpressions+=SubExpression)*)?;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} (operator=SubOperator subExpressions+=MultExpression)
	//	('-' subExpressions+=MultExpression)*)?;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=DivExpression) ('*'
	//	subExpressions+=DivExpression)*)?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=ModExpression) ('/'
	//	subExpressions+=ModExpression)*)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator
	//	subExpressions+=AtomicValuedExpression) ('%' subExpressions+=AtomicValuedExpression)*)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | TernaryOperation;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//TernaryOperation Expression:
	//	{OperatorExpression} subExpressions+=AtomicValuedExpression operator=ConditionalOperator
	//	subExpressions+=AtomicValuedExpression ':' subExpressions+=AtomicValuedExpression
	//	| FBYExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//FBYExpression Expression:
	//	{OperatorExpression} subExpressions+=AtomicValuedExpression operator=FBYOperator
	//	subExpressions+=AtomicValuedExpression
	//	| AtomicValuedExpression;
	public KExpressionsGrammarAccess.FBYExpressionElements getFBYExpressionAccess() {
		return gaKExpressions.getFBYExpressionAccess();
	}
	
	public ParserRule getFBYExpressionRule() {
		return getFBYExpressionAccess().getRule();
	}
	
	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression Expression:
	//	BoolValue
	//	| ValuedObjectTestExpression
	//	| '(' BoolExpression ')'
	//	| ReferenceCall
	//	| FunctionCall
	//	| RandomCall
	//	| RandomizeCall
	//	| TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| VectorValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression ')'
	//	| ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID:
	//	super::ID "'"*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list. 
	//ReferenceCall:
	//	valuedObject=[ValuedObject|PrimeID] ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomCall:
	//	{RandomCall}
	//	'random' '()'?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomizeCall:
	//	{RandomizeCall}
	//	'randomize' '()'?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'extern' functionName=super::ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	annotations+=Annotation*
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue:
	//	value=super::BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue:
	//	'{' values+=VectorValueMember (',' values+=VectorValueMember)* '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember Expression:
	//	BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue:
	//	{IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	super::BOOLEAN | INT | FLOAT | super::ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue Value:
	//	IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//	BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//	BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//	SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//	SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//	SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//	CONDITIONAL="?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum FBYOperator returns OperatorType:
	//	FBY="->";
	public KExpressionsGrammarAccess.FBYOperatorElements getFBYOperatorAccess() {
		return gaKExpressions.getFBYOperatorAccess();
	}
	
	public EnumRule getFBYOperatorRule() {
		return getFBYOperatorAccess().getRule();
	}
	
	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                // 
	//// -------------------- //
	//JsonObjectValue:
	//	{JsonObjectValue}
	//	'{' (members+=JsonObjectMember (',' members+=JsonObjectMember)*)?
	//	'}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember:
	//	key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue:
	//	{JsonArrayValue}
	//	'[' (elements+=JsonValue (',' elements+=JsonValue)*)?
	//	']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue Value:
	//	JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue:
	//	{NullValue}
	//	'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//terminal HOSTCODE:
	//	"`" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "`"))* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.    
	//Pragma:
	//	StringPragma | PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations. 
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	//RestrictedTypeAnnotation Annotation:
	//	CommentAnnotation | RestrictedKeyStringValueAnnotation | RestrictedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//QuotedStringAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL CommentAnnotation:
	//	values+=SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation:
	//	'@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag Pragma:
	//	'#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma:
	//	'#' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean:
	//	STRING | ExtendedID | super::BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes:
	//	STRING | ExtendedID | super::BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	super::ID (('.' | '-') super::ID)* ('#' INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID:
	//	super::ID ("." super::ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//Double ecore::EDouble:
	//	FLOAT;
	public AnnotationsGrammarAccess.DoubleElements getDoubleAccess() {
		return gaAnnotations.getDoubleAccess();
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//Doubleger ecore::EDouble:
	//	'-'? FLOAT;
	public AnnotationsGrammarAccess.DoublegerElements getDoublegerAccess() {
		return gaAnnotations.getDoublegerAccess();
	}
	
	public ParserRule getDoublegerRule() {
		return getDoublegerAccess().getRule();
	}
	
	//terminal COMMENT_ANNOTATION:
	//	'/**'->'*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//@ Override terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION:
	//	'//*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//@ Override terminal SL_COMMENT:
	//	'//' !'*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	}
	
	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//@ Override terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//@ Override terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
