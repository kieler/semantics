/*
 * generated by Xtext
 */
package de.cau.cs.kieler.prom.formatting2

import com.google.inject.Inject
import de.cau.cs.kieler.kexpressions.formatting2.KExpressionsFormatter
import de.cau.cs.kieler.prom.kibuild.AttributeMapping
import de.cau.cs.kieler.prom.kibuild.BuildConfiguration
import de.cau.cs.kieler.prom.kibuild.ModelCompiler
import de.cau.cs.kieler.prom.kibuild.SimulationCompiler
import de.cau.cs.kieler.prom.kibuild.TemplateProcessor
import de.cau.cs.kieler.prom.services.KiBuildGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument

class KiBuildFormatter extends KExpressionsFormatter {
	
	@Inject extension KiBuildGrammarAccess

	def dispatch void format(BuildConfiguration buildConfiguration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AttributeMapping attributeMapping : buildConfiguration.getAttributes()) {
			attributeMapping.format;
		}
		for (ModelCompiler modelCompiler : buildConfiguration.getModelCompilers()) {
			modelCompiler.format;
		}
		for (SimulationCompiler simulationCompiler : buildConfiguration.getSimulationCompilers()) {
			simulationCompiler.format;
		}
		for (TemplateProcessor templateProcessor : buildConfiguration.getTemplateProcessors()) {
			templateProcessor.format;
		}
	}

	def dispatch void format(ModelCompiler modelCompiler, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AttributeMapping attributeMapping : modelCompiler.getAttributes()) {
			attributeMapping.format;
		}
		modelCompiler.getSimulationProcessor.format;
	}
	
	// TODO: implement for SimulationCompiler, NormalTemplateProcessor, SimulationTemplateProcessor, WrapperCodeTemplateProcessor, AttributeMapping, Literal
}
