<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="de.cau.cs.kieler.core.model" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="de.cau.cs.kieler.core.model" id="de.cau.cs.kieler.core.model.Validation" name="Validation"/>
      </appinfo>
      <documentation>
         This extension point is used to register new Checkfiles/Validators and ValidationActions.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="ePackageDefinition"/>
            <element ref="validationRegistry"/>
            <element ref="Validation"/>
            <element ref="ValidateAction"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="Validation">
      <annotation>
         <documentation>
            This contains all the information to identify one Validation element. It can identify either a .chk file or a ValidateAction.
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="referenceEPackageNsURI"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The id used to reference the checkfile/validator. e.g. for programatic enable/disable.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name to display.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="checkfilePath" type="string">
            <annotation>
               <documentation>
                  The path to a checkfile within the root plugin of the ePackage. e.g.: model/Checkfile.chk.
The Validation has to have either a checkfilePath or a validator.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="ePackageId" type="string" use="required">
            <annotation>
               <documentation>
                  The identifier of the EPackage that the checkfile or validator belongs to.
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="de.cau.cs.kieler.core.model.Validation/ePackageDefinition/@ePackageId"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="tooltip" type="string">
            <annotation>
               <documentation>
                  A tooltip describing context or usage of the checkfile or validator.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isWrapExistingValidator" type="boolean" use="required">
            <annotation>
               <documentation>
                  True if the validator should wrap around existing validators. False if the validation should override already registered validators.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isEnabledByDefault" type="boolean">
            <annotation>
               <documentation>
                  True if the check file should be enabled if the user has made no choice yet.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="validator" type="string">
            <annotation>
               <documentation>
                  Instead of a path to a checkfile this EValidator can be used.
The Validation has to have either a checkfilePath or a validator.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.emf.ecore.EValidator"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="ValidateAction">
      <complexType>
         <attribute name="actionFactory" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.core.model.validation.IValidationActionFactory"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="ePackageId" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="de.cau.cs.kieler.core.model.Validation/ePackageDefinition/@ePackageId"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="ePackageDefinition">
      <complexType>
         <attribute name="ePackageId" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="ePackageClass" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.emf.ecore.EPackage"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="ePackageNsURI" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.emf.ecore.generated_package/package/@uri"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="referenceEPackageNsURI">
      <complexType>
         <attribute name="nsURI" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.emf.ecore.generated_package/package/@uri"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="validationRegistry">
      <annotation>
         <documentation>
            Register validation registry classes.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  A validation registry implementation
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":de.cau.cs.kieler.core.model.validation.IValidationRegistry"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         0.3.0
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         &lt;p&gt;
This is a simple example for registering a checkfile to a given metamodel.
&lt;/p&gt;
&lt;p&gt;
First the metamodel has to be registered:
&lt;pre&gt;
&lt;ePackageDefinition
  ePackageClass=&quot;org.example.metamodel.YourMetamodelPackage&quot;
  ePackageId=&quot;some.custom.id&quot;
  ePackageNsURI=&quot;http://org.example.metamodel/yourMetamodel&quot;&gt;
&lt;/ePackageDefinition&gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
The next step is to register the actual file.
&lt;pre&gt;
&lt;Validation
  ePackageId=&quot;some.custom.id&quot;
  id=&quot;some.custom.checkfileId&quot;
  isWrapExistingValidator=&quot;true&quot;
  name=&quot;Custom Checks&quot;
  checkfilePath=&quot;model/MyChecks.chk&quot;
  tooltip=&quot;Use this to check for model validity.&quot;&gt;
  &lt;referenceEPackageNsURI
   nsURI=&quot;http://org.example.metamodel/YourOtherMetamodel&quot;&gt;
  &lt;/referenceEPackageNsURI&gt;
&lt;/Validation&gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
Last we need to register the validate action that should be triggered
when the validate button is pressed.
&lt;pre&gt;
&lt;ValidateAction
  actionFactory=&quot;org.example.metamodel.custom.YourValidationActionFactory&quot;
  ePackageId=&quot;some.custom.id&quot;&gt;
&lt;/ValidateAction&gt;
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         See Description.
      </documentation>
   </annotation>


   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright 2008 by&lt;br&gt;
&amp;nbsp;+ Kiel University&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;+ Department of Computer Science&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ Real-Time and Embedded Systems Group&lt;br&gt;
This program and the accompanying materials are made available under the terms of the Eclipse Public License (EPL) which accompanies this distribution, and is available at &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;.
      </documentation>
   </annotation>

</schema>
