/* 
 * Station2Station/OCOC.sct
 * Author: nfl
 * Description:
 * Performs one loop in the outer Circle
 * Implements automatic arrival track switching
 *
 * Tests:
 * - One train circle from OC_ST_2 to OC_ST_2
 * - Two trains circle from OC_ST_1 and OC_ST_2
 * - Two trains circle to OC_ST_2
 * - Two trains circle to OC_ST_3 
 */

scchart OCOC {
  input int OC_JCT_0_perm, OC_LN_0_perm, OC_LN_1_perm, OC_LN_2_perm;
  input int OC_LN_3_perm, OC_LN_4_perm, OC_LN_5_perm, OC_ST_0_perm;
  input int OC_ST_1_perm, OC_ST_2_perm, OC_ST_3_perm, OC_ST_4_perm;
  output bool OC_JCT_0_req[11], OC_LN_0_req[11], OC_LN_1_req[11], OC_LN_2_req[11];
  output bool OC_LN_3_req[11], OC_LN_4_req[11], OC_LN_5_req[11], OC_ST_0_req[11];
  output bool OC_ST_1_req[11], OC_ST_2_req[11], OC_ST_3_req[11], OC_ST_4_req[11];
  input int trainNum;
  input int depTrack;
  input int destTrack;
  input bool cleanup;
  input bool debug;
  output int arrTrack;
  output bool trainTravelling;
  int i_arrivalTrack;

  initial state OC_ST {
    entry debug / 'println("[trainNum][OC-OC] Controller started")';
    bool perm_all_next_Segments = false;

    region Travel:
    initial state Waiting
    --> Continue with perm_all_next_Segments;    

    state Continue {
      entry / 'railPoint(16,STRAIGHT)';
      entry / 'railPoint(17,STRAIGHT)';
      entry / 'railTrack(OC_LN_0,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_ST_4,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_LN_0, FWD, RED)';
      entry debug / 'println("[trainNum][OC-OC] Leaving OC_ST")';
    }
    --> Continue_OC_ST_1 immediate with depTrack == 1
    --> Continue_OC_ST_2 immediate with depTrack == 2
    --> Continue_OC_ST_3 immediate with depTrack == 3;

    state Continue_OC_ST_1 {
      entry / 'railPoint(21,BRANCH)';
      entry / 'railPoint(22,STRAIGHT)';
      entry / 'railSignal(OC_ST_1,FWD,GREEN)';
      entry / 'railTrack(OC_ST_1,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    state Continue_OC_ST_2 {
      entry / 'railPoint(21,BRANCH)';
      entry / 'railPoint(22,BRANCH)';
      entry / 'railSignal(OC_ST_2,FWD,GREEN)';
      entry / 'railTrack(OC_ST_2,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    state Continue_OC_ST_3 {
      entry / 'railPoint(21,STRAIGHT)';
      entry / 'railSignal(OC_ST_3,FWD,GREEN)';
      entry / 'railTrack(OC_ST_3,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    final state leave;
    
    region Requests:
    
    initial state requesting{
    entry / OC_LN_0_req[trainNum] = true;
    entry / OC_ST_4_req[trainNum] = true;
    }
    --> success with OC_LN_0_perm == trainNum & OC_ST_4_perm == trainNum
    --> waiting with OC_LN_0_perm == trainNum | OC_ST_4_perm == trainNum;
    
    state resolving{
    entry / OC_LN_0_req[trainNum] = false;
    entry / OC_ST_4_req[trainNum] = false;
    }--> requesting;
    
    state waiting
    --> resolving;
    
    state success{
      entry / perm_all_next_Segments = true;
      entry / trainTravelling = true;
    }
	--> done immediate;
	  
	final state done;
  }
  >-> OC_ST_OC_LN_0;

  state OC_ST_OC_LN_0
  --> OC_LN_0 with 'railContact(OC_LN_0,0)'; 
  
  // Next Super-State
  state OC_LN_0 {
    entry / 'railTrack(OC_LN_0,FWD,trainNum,NORMAL)';
    entry / 'println("[trainNum][OC-OC] Entering OC_LN_0")';
    entry depTrack == 1 / 'railSignal(OC_ST_1, FWD, RED)'
    entry depTrack == 2 / 'railSignal(OC_ST_2, FWD, RED)'
    entry depTrack == 3 / 'railSignal(OC_ST_3, FWD, RED)';
    bool perm_all_next_Segments = false;

    region Travel:
    initial state Entry
    --> Continue with 'railContact(OC_LN_0,0)' & perm_all_next_Segments 
    --> Slowdown with 'railContact(OC_LN_0,0)';
    
    state Slowdown {
      entry / 'railTrack(OC_LN_0,FWD,trainNum,CAUTION)';
      entry debug / 'println("[trainNum][OC-OC] Slowing down in OC_LN_0")';
    }
    --> Waiting with 'railContact(OC_LN_0,1)'
    --> Continue with perm_all_next_Segments;
    
    state Waiting {
      entry / 'railTrackBrake(OC_LN_0)';
      entry debug / 'println("[trainNum][OC-OC] Waiting for permission at OC_LN_0")';
    }
    --> Continue with perm_all_next_Segments;
    
    state Continue {
      entry / 'railPoint(10,STRAIGHT)';
      entry / 'railPoint(12,STRAIGHT)';
      entry / 'railSignal(OC_LN_0,FWD,GREEN)';
      entry / 'railTrack(OC_LN_0,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_JCT_0,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_1,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_LN_1, FWD, RED)';
      entry debug / 'println("[trainNum][OC-OC] Continuing in OC_LN_0")';
    }
    --> leave immediate;

    final state leave;
    
    region Requests:
    
    initial state requesting{
    entry / OC_JCT_0_req[trainNum] = true;
    entry / OC_LN_1_req[trainNum] = true;
    }
    --> success with OC_JCT_0_perm == trainNum & OC_LN_1_perm == trainNum
    --> waiting with OC_JCT_0_perm == trainNum | OC_LN_1_perm == trainNum;
    
    state resolving{
    entry / OC_JCT_0_req[trainNum] = false;
    entry / OC_LN_1_req[trainNum] = false;
    }--> requesting;
    
    state waiting
    --> resolving;
    
    state success{
      entry / perm_all_next_Segments = true;
    }
	--> done immediate;
	  
	final state done;

    region Cleanup:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_0,0)';

    state cleanup {
      entry / 'railTrackOff(OC_ST_4)';
      entry / OC_ST_4_req[trainNum] = false;
    }
    --> cleanup_OC_ST_1 immediate with depTrack == 1
    --> cleanup_OC_ST_2 immediate with depTrack == 2
    --> cleanup_OC_ST_3 immediate with depTrack == 3;

    state cleanup_OC_ST_1 {
      entry / 'railTrackOff(OC_ST_1)';
      entry / OC_ST_1_req[trainNum] = false;
    }
    --> done immediate;

    state cleanup_OC_ST_2 {
      entry / 'railTrackOff(OC_ST_2)';
      entry / OC_ST_2_req[trainNum] = false;
    }
    --> done immediate;

    state cleanup_OC_ST_3 {
      entry / 'railTrackOff(OC_ST_3)';
      entry / OC_ST_3_req[trainNum] = false;
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_0_OC_LN_1;

  state OC_LN_0_OC_LN_1
  --> OC_LN_1 with 'railContact(OC_LN_1,0)'; 
  
  // Next Super-State
  state OC_LN_1 {
    entry / OC_LN_2_req[trainNum] = true;
    entry / 'railSignal(OC_LN_0, FWD, RED)';
    entry / 'println("[trainNum][OC-OC] Entering OC_LN_1")';

	region Travel:
	
    initial state Entry
    --> Continue with 'railContact(OC_LN_1,0)' & (OC_LN_2_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_1,0)';

    state Slowdown {
      entry / 'railTrack(OC_LN_1,FWD,trainNum,CAUTION)';
      entry debug / 'println("[trainNum][OC-OC] Slowing down in OC_LN_1")';
    }
    --> Waiting with 'railContact(OC_LN_1,1)'
    --> Continue with (OC_LN_2_perm == trainNum);

    state Waiting {
      entry / 'railTrackBrake(OC_LN_1)';
      entry debug / 'println("[trainNum][OC-OC] Waiting for permission at OC_LN_1")';
    }
    --> Continue with (OC_LN_2_perm == trainNum);

    state Continue {
      entry / 'railSignal(OC_LN_1,FWD,GREEN)';
      entry / 'railTrack(OC_LN_1,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_2,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_LN_2, FWD, RED)';
      entry debug / 'println("[trainNum][OC-OC] Continuing in OC_LN_1")';
    }
    --> leave immediate;

    final state leave;

    region Cleanup:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_1,0)';

    state cleanup {
      entry / 'railTrackOff(OC_JCT_0)';
      entry / OC_JCT_0_req[trainNum] = false;
      entry / 'railTrackOff(OC_LN_0)';
      entry / OC_LN_0_req[trainNum] = false;
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_1_OC_LN_2;

  state OC_LN_1_OC_LN_2
  --> OC_LN_2 with 'railContact(OC_LN_2,0)'; 
  
  // Next Super-State
  state OC_LN_2 {
    entry / OC_LN_3_req[trainNum] = true;
    entry / 'railSignal(OC_LN_1, FWD, RED)';
    entry / 'println("[trainNum][OC-OC] Entering OC_LN_2")';

	region Travel:
	
    initial state Entry
    --> Continue with 'railContact(OC_LN_2,0)' & (OC_LN_3_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_2,0)';

    state Slowdown {
      entry / 'railTrack(OC_LN_2,FWD,trainNum,CAUTION)';
      entry debug / 'println("[trainNum][OC-OC] Slowing down in OC_LN_2")';
    }
    --> Waiting with 'railContact(OC_LN_2,1)'
    --> Continue with (OC_LN_3_perm == trainNum);

    state Waiting {
      entry / 'railTrackBrake(OC_LN_2)';
      entry debug / 'println("[trainNum][OC-OC] Waiting for permission at OC_LN_2")';
    }
    --> Continue with (OC_LN_3_perm == trainNum);

    state Continue {
      entry / 'railSignal(OC_LN_2,FWD,GREEN)';
      entry / 'railTrack(OC_LN_2,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_3,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_LN_3, FWD, RED)';
      entry debug / 'println("[trainNum][OC-OC] Continuing in OC_LN_2")';
    }
    --> leave immediate;

    final state leave;

    region Cleanup:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_2,0)';

    state cleanup {
      entry / 'railTrackOff(OC_LN_1)';
      entry / OC_LN_1_req[trainNum] = false;
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_2_OC_LN_3;

  state OC_LN_2_OC_LN_3
  --> OC_LN_3 with 'railContact(OC_LN_3,0)'; 
  
  // Next Super-State
  state OC_LN_3 {
    entry / OC_LN_4_req[trainNum] = true;
    entry / 'railSignal(OC_LN_2, FWD, RED)';
    entry / 'println("[trainNum][OC-OC] Entering OC_LN_3")';

	region Travel:
	
    initial state Entry
    --> Continue with 'railContact(OC_LN_3,0)' & (OC_LN_4_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_3,0)';

    state Slowdown {
      entry / 'railTrack(OC_LN_3,FWD,trainNum,CAUTION)';
      entry debug / 'println("[trainNum][OC-OC] Slowing down in OC_LN_3")';
    }
    --> Waiting with 'railContact(OC_LN_3,1)'
    --> Continue with (OC_LN_4_perm == trainNum);

    state Waiting {
      entry / 'railTrackBrake(OC_LN_3)';
      entry debug / 'println("[trainNum][OC-OC] Waiting for permission at OC_LN_3")';
    }
    --> Continue with (OC_LN_4_perm == trainNum);

    state Continue {
      entry / 'railSignal(OC_LN_3,FWD,GREEN)';
      entry / 'railTrack(OC_LN_3,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_4,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_LN_4, FWD, RED)';
      entry debug / 'println("[trainNum][OC-OC] Continuing in OC_LN_3")';
    }
    --> leave immediate;

    final state leave;

    region Cleanup:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_3,0)';

    state cleanup {
      entry / 'railTrackOff(OC_LN_2)';
      entry / OC_LN_2_req[trainNum] = false;
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_3_OC_LN_4;

  state OC_LN_3_OC_LN_4
  --> OC_LN_4 with 'railContact(OC_LN_4,0)'; 
  
  // Next Super-State
  state OC_LN_4 {
    entry / OC_LN_5_req[trainNum] = true;
    entry / 'railSignal(OC_LN_3, FWD, RED)';
    entry / 'println("[trainNum][OC-OC] Entering OC_LN_4")';

	region Travel:
	
    initial state Entry
    --> Continue with 'railContact(OC_LN_4,0)' & (OC_LN_5_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_4,0)';

    state Slowdown {
      entry / 'railTrack(OC_LN_4,FWD,trainNum,CAUTION)';
      entry debug / 'println("[trainNum][OC-OC] Slowing down in OC_LN_4")';
    }
    --> Waiting with 'railContact(OC_LN_4,1)'
    --> Continue with (OC_LN_5_perm == trainNum);

    state Waiting {
      entry / 'railTrackBrake(OC_LN_4)';
      entry debug / 'println("[trainNum][OC-OC] Waiting for permission at OC_LN_4")';
    }
    --> Continue with (OC_LN_5_perm == trainNum);

    state Continue {
      entry / 'railSignal(OC_LN_4,FWD,GREEN)';
      entry / 'railTrack(OC_LN_4,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_5,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_LN_5, FWD, RED)';
      entry debug / 'println("[trainNum][OC-OC] Continuing in OC_LN_4")';
    }
    --> leave immediate;

    final state leave;

    region Cleanup:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_4,0)';

    state cleanup {
      entry / 'railTrackOff(OC_LN_3)';
      entry / OC_LN_3_req[trainNum] = false;
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_4_OC_LN_5;

  state OC_LN_4_OC_LN_5
  --> OC_LN_5 with 'railContact(OC_LN_5,0)';
  
  // Next Super-State
  state OC_LN_5 {
    entry / 'railSignal(OC_LN_4, FWD, RED)';
    entry / 'println("[trainNum][OC-OC] Entering OC_LN_5")';
    bool perm_all_next_Segments = false;

	region Travel:
	
    initial state Entry
    --> Continue with 'railContact(OC_LN_5,0)' & perm_all_next_Segments 
    --> Slowdown with 'railContact(OC_LN_5,0)';
        
    state Slowdown {
      entry / 'railTrack(OC_LN_5,FWD,trainNum,CAUTION)';
      entry debug / 'println("[trainNum][OC-OC] Slowing down in OC_LN_5")';
    }
    --> Waiting with 'railContact(OC_LN_5,1)'
    --> Continue with perm_all_next_Segments;

    state Waiting {
      entry / 'railTrackBrake(OC_LN_5)';
      entry debug / 'println("[trainNum][OC-OC] Waiting for permission at OC_LN_5")';
    }
    --> Continue with perm_all_next_Segments;

    state Continue {      
      entry / 'railPoint(27,BRANCH)';
      entry / 'railPoint(28,BRANCH)';
      entry / 'railSignal(OC_LN_5,FWD,GREEN)'; 
      entry / 'railTrack(OC_ST_0,FWD,trainNum,NORMAL)'; 
      entry / 'railTrack(OC_LN_5,FWD,trainNum,NORMAL)';
      entry debug / 'println("[trainNum][OC-OC] Continuing in OC_LN_5")';
    }
    --> Continue1 with i_arrivalTrack == 1 
    --> Continue2 with i_arrivalTrack == 2
    --> Continue3 with i_arrivalTrack == 3;
    
    state Continue1 {
      entry / 'railPoint(25,BRANCH)';
      entry / 'railPoint(26,STRAIGHT)';
      entry / 'railTrack(OC_ST_1,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_ST_1, FWD, RED)';
      }
    --> leave immediate;
      
    state Continue2 {
      entry / 'railPoint(25,BRANCH)';
      entry / 'railPoint(26,BRANCH)';
      entry / 'railTrack(OC_ST_2,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_ST_2, FWD, RED)';
      }
    --> leave immediate;
      
    state Continue3 {  
      entry / 'railPoint(25,STRAIGHT)';
      entry / 'railTrack(OC_ST_3,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_ST_3, FWD, RED)';      
    }
    --> leave immediate;

    final state leave;
        
    region Requests:
    
    initial state requesting{
    entry / OC_ST_0_req[trainNum] = true;
    entry destTrack == 1 | !cleanup / OC_ST_1_req[trainNum] = true;
    entry destTrack == 2 | !cleanup / OC_ST_2_req[trainNum] = true;
    entry destTrack == 3 | !cleanup / OC_ST_3_req[trainNum] = true;
    }
    --> success with destTrack == 1 & OC_ST_0_perm == trainNum & OC_ST_1_perm == trainNum / i_arrivalTrack = 1
    --> success with destTrack == 2 & OC_ST_0_perm == trainNum & OC_ST_2_perm == trainNum / i_arrivalTrack = 2
    --> success with destTrack == 3 & OC_ST_0_perm == trainNum & OC_ST_3_perm == trainNum / i_arrivalTrack = 3
    --> success with OC_ST_0_perm == trainNum & OC_ST_1_perm == trainNum / i_arrivalTrack = 1
    --> success with OC_ST_0_perm == trainNum & OC_ST_2_perm == trainNum / i_arrivalTrack = 2
    --> success with OC_ST_0_perm == trainNum & OC_ST_3_perm == trainNum / i_arrivalTrack = 3
    --> waiting with OC_ST_0_perm == trainNum | OC_ST_1_perm == trainNum | OC_ST_2_perm == trainNum | OC_ST_3_perm == trainNum;
    
    state resolving{
    entry / OC_ST_0_req[trainNum] = false;
    entry / OC_ST_1_req[trainNum] = false;
    entry / OC_ST_2_req[trainNum] = false;
    entry / OC_ST_3_req[trainNum] = false;
    }--> requesting;
    
    state waiting
    --> resolving;
    
    state success
    --> successReal;
    
    state successReal{
      entry / perm_all_next_Segments = true;
      entry / arrTrack = i_arrivalTrack;
      entry !(i_arrivalTrack == 1) / OC_ST_1_req[trainNum] = false;
      entry !(i_arrivalTrack == 2) / OC_ST_2_req[trainNum] = false;
      entry !(i_arrivalTrack == 3) / OC_ST_3_req[trainNum] = false;
    }
	--> done immediate;
	  
	final state done;

    region Cleanup:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_5,0)';

    state cleanup {
      entry / 'railTrackOff(OC_LN_4)';
      entry / OC_LN_4_req[trainNum] = false;
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_5_OC_ST;

  state OC_LN_5_OC_ST
  --> arrival_OC_ST with 'railContact(OC_ST_1,0)' & i_arrivalTrack == 1
  --> arrival_OC_ST with 'railContact(OC_ST_2,0)' & i_arrivalTrack == 2
  --> arrival_OC_ST with 'railContact(OC_ST_3,0)' & i_arrivalTrack == 3;
  
  state arrival_OC_ST{
    entry / 'railSignal(OC_LN_5, FWD, RED)';
    entry / 'railTrackOff(OC_LN_5)';
    entry / OC_LN_5_req[trainNum] = false;
    entry i_arrivalTrack == 1 / 'println("[trainNum][OC-OC] Entering OC_ST_1")';
    entry i_arrivalTrack == 2 / 'println("[trainNum][OC-OC] Entering OC_ST_2")';
    entry i_arrivalTrack == 3 / 'println("[trainNum][OC-OC] Entering OC_ST_3")';
    entry i_arrivalTrack == 1 / 'railTrack(OC_ST_1,FWD,trainNum,SLOW)';
    entry i_arrivalTrack == 2 / 'railTrack(OC_ST_2,FWD,trainNum,SLOW)';
    entry i_arrivalTrack == 3 / 'railTrack(OC_ST_3,FWD,trainNum,SLOW)';
  
	region Travel:
	
    initial state Entry
    --> cleanup with 'railContact(OC_ST_1,0)' & i_arrivalTrack == 1
    --> cleanup with 'railContact(OC_ST_2,0)' & i_arrivalTrack == 2
    --> cleanup with 'railContact(OC_ST_3,0)' & i_arrivalTrack == 3;
    
    state cleanup {
      entry / 'railTrackOff(OC_ST_0)';
      entry / OC_ST_0_req[trainNum] = false;
    }
    --> halt1 with 'railContact(OC_ST_1,1)' & i_arrivalTrack == 1
    --> halt2 with 'railContact(OC_ST_2,1)' & i_arrivalTrack == 2
    --> halt3 with 'railContact(OC_ST_3,1)' & i_arrivalTrack == 3;
    
    state halt1 {
      entry / 'railSignal(OC_ST_1, FWD, RED)';
      entry / 'railTrackBrake(OC_ST_1)';
      entry / 'railArrival(trainNum,OC_ST_1)';
      entry / 'println("[trainNum][OC-OC] Arrival at OC_ST_1")';
    }
    --> done immediate;
    
    state halt2 {
      entry / 'railSignal(OC_ST_2, FWD, RED)';
      entry / 'railTrackBrake(OC_ST_2)';
      entry / 'railArrival(trainNum,OC_ST_2)';
      entry / 'println("[trainNum][OC-OC] Arrival at OC_ST_2")';
    }
    --> done immediate;
    
    state halt3 {
      entry / 'railSignal(OC_ST_3, FWD, RED)';
      entry / 'railTrackBrake(OC_ST_3)';
      entry / 'railArrival(trainNum,OC_ST_3)';
      entry / 'println("[trainNum][OC-OC] Arrival at OC_ST_3")';
    }
    --> done immediate;
    
    final state done;  
  }
  >-> WaitDepart;
    
  state WaitDepart{    
    entry debug / 'println("[trainNum][OC-OC] Waiting for departure")';
  }
  --> done with 'railDeparture(trainNum)'/ trainTravelling = false;  
    
  final state done;
}