/* TODO:
 * -Alles wo noch TODO steht
 * Globale Variablen, Rücklaufschleifen, Distanzberechnung -> mehrere States
 */

@VHLayout
scchart Quadcopter{
  input float motorFrontRight;
  input float motorFrontLeft;
  input float motorBackRight;
  input float motorBackLeft;
  input float roll;
  input float sinRoll = '(float) Math.sin(roll)';
  input float cosRoll = '(float) Math.cos(roll)';
  input float pitch;
  input float sinPitch = '(float) Math.sin(pitch)';
  input float cosPitch = '(float) Math.cos(pitch)';
  input float tanPitch = '(float) Math.tan(pitch)';
  input float yaw = 0;
  input float sinYaw = '(float) Math.sin(yaw)';
  input float cosYaw = '(float) Math.cos(yaw)';
  const float massInverse;
  const float distanceRotorMiddle;
  const float g;
  const float motorRPMpV;
  const float inertiaX;
  const float inertiaY;
  const float inertiaZ;
  const float inertiaXX;
  const float inertiaYY;
  const float inertiaZZ;
  const float inertiaRotation;
  const float liftConstant;
  const float dragConstant;
  const float wallFront;
  const float wallRight;
  const float wallLeft;
  const float wallBack;
  const float roof;
  const float scalingAcc;
  const float scalingAccZ;
  const float scalingDeg;
  const float pi = '(float) Math.PI';
  
  
  initial state FaceFront {
    region A:
    initial state dummy;
    
    dataflow test:
    	float helperRPM;
    	float propFRRPM, propFLRPM, propBRRPM, propBLRPM;
    	float pFRRPMSquare, pFLRPMSquare, pBRRPMSquare, pBLRPMSquare;
    	float thrust, thrustDivMass;
    	float accXInert, accYInert, accZInert;
    	float accXOut, accYOut, accZOut;
    	float velX = 0.0f, velY = 0.0f, velZ = 0.0f;
    	//-----------------Angles------------------------------------
    	float liftC;
    	float torqueRoll, torquePitch, torqueYaw;
    	float rotation;
    	float p = 0.0f, q = 0.0f, r = 0.0f; //Angular velocity of Roll, Pitch, Yaw
		float torqueRollPos, torqueRollNeg, torquePitchPos, torquePitchNeg, torqueYawPos;
		float pDer, qDer, rDer;
		float qsinRoll, rcosRoll;
		float helpRotRoll1, helpRotRoll2;
		float helpRotPitchPos, helpRotPitchNeg;
		float helpRotYaw1, helpRotYaw2;
		float rollDer, pitchDer, yawDer;


    	helperRPM = motorRPMpV * 2 * pi * 60;

		propFRRPM = motorFrontRight * helperRPM;
    	propFLRPM = motorFrontLeft  * helperRPM;
    	propBRRPM = motorBackRight  * helperRPM;
    	propBLRPM = motorBackLeft   * helperRPM;
    	
    	pFRRPMSquare = propFRRPM * propFRRPM;
    	pFLRPMSquare = propFLRPM * propFLRPM;
    	pBRRPMSquare = propBRRPM * propBRRPM;
    	pBLRPMSquare = propBLRPM * propBLRPM;
		
    	thrust = (pBLRPMSquare
     				+ pFLRPMSquare
     				+ pBRRPMSquare
     				+ pFRRPMSquare)
     				* liftConstant;
     				
		thrustDivMass = thrust * massInverse;
		
		accXInert = thrustDivMass *
							   (cosYaw * sinPitch * cosRoll
	  						  	 + sinYaw * sinRoll);
		accYInert = thrustDivMass *
							   (sinYaw * sinPitch * cosRoll
							     - cosYaw * sinRoll);
		accZInert = thrustDivMass * cosPitch * cosRoll
								- g;
								
		accXOut = accXInert + velX * inertiaX * massInverse;
		accYOut = accYInert + velY * inertiaY * massInverse;
		accZOut = accZInert + velZ * inertiaZ * massInverse;
		
		//TODO: Implement Integrate!
//		velX = Integrate(accXOut);
//		velY = Integrate(accYOut);
//		velZ = Integrate(accZOut);

//		posX = Integrate(velX);
//		posY = Integrate(velY);
//		posZ = Integrate(velZ);

//TODO: Convert Back to Body Frame and Scale!

//-------------------------------Angles----------------------
		liftC = distanceRotorMiddle * liftConstant;
		torqueRoll  = liftC * (pBLRPMSquare - pFRRPMSquare);
		torquePitch = liftC * (pFLRPMSquare - pBRRPMSquare);
		torqueRoll  = (pFLRPMSquare + pFRRPMSquare + 
					  pBLRPMSquare + pBRRPMSquare) *
					  dragConstant;
					  
		rotation = (propFRRPM + propBLRPM - propFLRPM - propBRRPM) +
						inertiaRotation;

		torqueRollPos = q * r * (inertiaYY - inertiaZZ);
		torqueRollNeg = q * rotation;
		
		torquePitchPos = p * r * (inertiaZZ - inertiaXX);
		torquePitchNeg = p * rotation;
		
		torqueYawPos = p * q * (inertiaXX - inertiaYY);
		
		pDer = (torqueRoll + torqueRollPos - torqueRollNeg) : inertiaXX;
		qDer = (torquePitch + torquePitchPos - torquePitchNeg) : inertiaYY;
		rDer = (torqueYaw + torqueYawPos) : inertiaZZ;
		
		//TODO: Integrate!!
//		p = Integrate(p);
//		q = integrate(q);
//		r = integrate(r);

		rcosRoll = r * cosRoll;
		qsinRoll = q * sinRoll;

		helpRotRoll1 = qsinRoll * tanPitch;
		helpRotRoll2 = rcosRoll * tanPitch;
		
		helpRotPitchPos = q * cosRoll;
		helpRotPitchNeg = r * sinRoll;
		
		helpRotYaw1 = qsinRoll : cosPitch;
		helpRotYaw2 = rcosRoll : cosPitch;
		
		rollDer  = p + helpRotRoll1 + helpRotRoll2;
		pitchDer = helpRotPitchPos - helpRotPitchNeg;
		yawDer   = helpRotYaw1 + helpRotYaw2;
		
		//roll = integrate(rollDer);
		//pitch = integrate(pitchDer);
		//yaw = integrate(yawDer);
		
		//roll = roll mod 360;
		//pitch = pitch mod 360;
		//yaw = yaw mod 360;
		
		//TODO:
		//Scaling of angular velocities
		//DegToRad?!
		
		//---------------------------Distanzberechnung----------------
		//TODO!!
  }
  
  --> FaceRight  with yaw > 45; // / sinRoll = <sin(roll)>;
  
  state FaceRight
  --> FaceBack with yaw > 50;
 
 state FaceBack
 --> FaceLeft with yaw > 70;
  
  state FaceLeft
  --> FaceFront with yaw < 30;
}