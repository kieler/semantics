/* 
 * Station2Station/ICOC.sct
 * Author: sna
 * Description:
 * Travels from inner circle to outer circle
 * Implements automatic railArrival track switching
 *
 * Tests:
 * - One train travel from IC_ST_2 to OC_ST_3 and back
 * - Two trains circle between IC_ST_2 and OC_ST_2
 * - Two trains from IC to OC_ST_2,
 *   Two trains from OC to IC_ST_2
 * - Two trains from IC to OC_ST_1,
 *   Two trains from OC to IC_ST_1
 */
scchart ICOC "IC to OC Controller" {
  input int IC_JCT_0_perm, IC_LN_0_perm, IC_LN_1_perm, IC_LN_2_perm;
  input int IC_LN_3_perm, IC_LN_4_perm, IC_ST_1_perm, IC_ST_2_perm;
  input int IC_ST_3_perm, IC_ST_4_perm, IO_LN_0_perm, IO_LN_1_perm;
  input int IO_LN_2_perm, OC_JCT_0_perm, OC_LN_1_perm, OC_LN_2_perm;
  input int OC_LN_3_perm, OC_LN_4_perm, OC_LN_5_perm, OC_ST_0_perm;
  input int OC_ST_1_perm, OC_ST_2_perm, OC_ST_3_perm, OC_LN_0_perm;
  output bool IC_JCT_0_req[11], IC_LN_0_req[11], IC_LN_1_req[11], IC_LN_2_req[11];
  output bool IC_LN_3_req[11], IC_LN_4_req[11], IC_ST_1_req[11], IC_ST_2_req[11];
  output bool IC_ST_3_req[11], IC_ST_4_req[11], IO_LN_0_req[11], IO_LN_1_req[11];
  output bool IO_LN_2_req[11], OC_JCT_0_req[11], OC_LN_1_req[11], OC_LN_2_req[11];
  output bool OC_LN_3_req[11], OC_LN_4_req[11], OC_LN_5_req[11], OC_ST_0_req[11];
  output bool OC_ST_1_req[11], OC_ST_2_req[11], OC_ST_3_req[11], OC_LN_0_req[11];

  input int trainNum;
  input int depTrack;
  input int destTrack;
  input bool cleanup;
  input bool debug;
  output int arrTrack;
  output bool trainTravelling;
  int i_arrTrack;

  initial state IC_ST {
    entry debug / 'println("[trainNum][IC-OC] Requesting permission to leave IC_ST")';
    
    initial state waitForPerm {
      entry / IC_ST_4_req[trainNum] = true;
      entry / IC_LN_0_req[trainNum] = true;
    }
    --> gotPerm with (IC_ST_4_perm == trainNum) & (IC_LN_0_perm == trainNum) / trainTravelling = true
    --> backOff with (IC_ST_4_perm == trainNum) | (IC_LN_0_perm == trainNum);
    
    state backOff
    --> backOff1;
    
    state backOff1 {
      entry / IC_ST_4_req[trainNum] = false;
      entry / IC_LN_0_req[trainNum] = false;
    }
    --> waitForPerm;

    final state gotPerm; 
  } >-> Continue;

  state Continue {
    entry debug / 'println("[trainNum][IC-OC] Leaving IC_ST")';
    entry / 'railPoint(29,STRAIGHT)';
    entry / 'railTrack(IC_ST_4,FWD,trainNum,NORMAL)';
    entry / 'railTrack(IC_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(IC_LN_0, FWD, RED)';
    entry depTrack == 1 / 'railSignal(IC_ST_1,FWD,GREEN)';
    entry depTrack == 2 / 'railSignal(IC_ST_2,FWD,GREEN)';
    entry depTrack == 3 / 'railSignal(IC_ST_3,FWD,GREEN)';
    entry depTrack == 1 / 'railTrack(IC_ST_1,FWD,trainNum,NORMAL)';
    entry depTrack == 2 / 'railTrack(IC_ST_2,FWD,trainNum,NORMAL)';
    entry depTrack == 3 / 'railTrack(IC_ST_3,FWD,trainNum,NORMAL)';
    entry depTrack == 1 / 'railPoint(24,STRAIGHT)';
    entry depTrack > 1  / 'railPoint(24,BRANCH)';
    entry depTrack == 2 / 'railPoint(23,BRANCH)';
    entry depTrack == 3 / 'railPoint(23,STRAIGHT)';
  }
  --> IC_LN_0 with 'railContact(IC_LN_0,0)';

  state IC_LN_0 {
    entry / 'println("[trainNum][IC-OC] Entering IC_LN_0")';
    entry depTrack == 1 / 'railSignal(IC_ST_1, FWD, RED)';
    entry depTrack == 2 / 'railSignal(IC_ST_2, FWD, RED)';
    entry depTrack == 3 / 'railSignal(IC_ST_3, FWD, RED)';
    entry depTrack == 1 / 'railTrackOff(IC_ST_1)';
    entry depTrack == 2 / 'railTrackOff(IC_ST_2)';
    entry depTrack == 3 / 'railTrackOff(IC_ST_3)';
    entry depTrack == 1 / IC_ST_1_req [ trainNum ] = false ; 
    entry depTrack == 2 / IC_ST_2_req [ trainNum ] = false ; 
    entry depTrack == 3 / IC_ST_3_req [ trainNum ] = false ; 
    entry / IC_LN_1_req [ trainNum ] = true ;

    region:
      initial state Entry
      --> Continue with 'railContact(IC_LN_0,0)' & (IC_LN_1_perm == trainNum) 
      --> Slowdown with 'railContact(IC_LN_0,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][IC-OC] Slowing down on IC_LN_0")';
        entry / 'railTrack(IC_LN_0,FWD,trainNum,CAUTION)';
      }
      --> Waiting with 'railContact(IC_LN_0,1)'
      --> Continue with (IC_LN_1_perm == trainNum);

      state Waiting {
        entry debug / 'println("[trainNum][IC-OC] Stopping on IC_LN_0")';
        entry / 'railTrackBrake(IC_LN_0)';
      }
      --> Continue with (IC_LN_1_perm == trainNum);

      state Continue {
        entry debug / 'println("[trainNum][IC-OC] Continuing on IC_LN_0")';
        entry / 'railSignal(IC_LN_0,FWD,GREEN)';
        entry / 'railTrack(IC_LN_0,FWD,trainNum,NORMAL)';
        entry / 'railTrack(IC_LN_1,FWD,trainNum,NORMAL)';
        entry / 'railSignal(IC_LN_1, FWD, RED)';
      }
      --> leave immediate;

      final state leave;

    region:
      initial state Entry
      --> cleanup with 'railContact(IC_LN_0,0)';

      state cleanup {
        entry debug / 'println("[trainNum][IC-OC] Entered IC_LN_0 completely")';
        entry / 'railTrackOff(IC_ST_4)';
        entry / IC_ST_4_req [ trainNum ] = false ;
      }
      --> done immediate;

      final state done;
  }
  >-> IC_LN_0_IC_LN_1;

  state IC_LN_0_IC_LN_1
  --> IC_LN_1 with 'railContact(IC_LN_1,0)';

  state IC_LN_1 {
    entry / 'println("[trainNum][IC-OC] Entering IC_LN_1")';
    entry / IC_LN_2_req [ trainNum ] = true ; 
    entry / 'railSignal(IC_LN_0, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(IC_LN_1,0)' & (IC_LN_2_perm == trainNum) 
    --> Slowdown with 'railContact(IC_LN_1,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on IC_LN_1")';
      entry / 'railTrack(IC_LN_1,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IC_LN_1,1)'
    --> Continue with (IC_LN_2_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on IC_LN_1")';
      entry / 'railTrackBrake(IC_LN_1)';
    }
    --> Continue with (IC_LN_2_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on IC_LN_1")';
      entry / 'railSignal(IC_LN_1,FWD,GREEN)';
      entry / 'railTrack(IC_LN_1,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IC_LN_2,FWD,trainNum,NORMAL)';
      entry / 'railSignal(IC_LN_2, FWD, RED)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(IC_LN_1,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered IC_LN_1 completely")';
      entry / 'railTrackOff(IC_LN_0)';
      entry / IC_LN_0_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> IC_LN_1_IC_LN_2;

  state IC_LN_1_IC_LN_2
  --> IC_LN_2 with 'railContact(IC_LN_2,0)';

  state IC_LN_2 {
    entry / 'println("[trainNum][IC-OC] Entering IC_LN_2")';
    entry / IC_LN_3_req [ trainNum ] = true ; 
    entry / 'railSignal(IC_LN_1, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(IC_LN_2,0)' & (IC_LN_3_perm == trainNum) 
    --> Slowdown with 'railContact(IC_LN_2,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on IC_LN_2")';
      entry / 'railTrack(IC_LN_2,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IC_LN_2,1)'
    --> Continue with (IC_LN_3_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on IC_LN_2")';
      entry / 'railTrackBrake(IC_LN_2)';
    }
    --> Continue with (IC_LN_3_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on IC_LN_2")';
      entry / 'railSignal(IC_LN_2,FWD,GREEN)';
      entry / 'railTrack(IC_LN_2,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IC_LN_3,FWD,trainNum,NORMAL)';
      entry / 'railSignal(IC_LN_3, FWD, RED)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(IC_LN_2,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered IC_LN_2 completely")';
      entry / 'railTrackOff(IC_LN_1)';
      entry / IC_LN_1_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> IC_LN_2_IC_LN_3;

  state IC_LN_2_IC_LN_3
  --> IC_LN_3 with 'railContact(IC_LN_3,0)';

  state IC_LN_3 {
    entry / 'println("[trainNum][IC-OC] Entering IC_LN_3")';
    entry / IC_LN_4_req [ trainNum ] = true ; 
    entry / 'railSignal(IC_LN_2, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(IC_LN_3,0)' & (IC_LN_4_perm == trainNum) 
    --> Slowdown with 'railContact(IC_LN_3,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on IC_LN_3")';
      entry / 'railTrack(IC_LN_3,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IC_LN_3,1)'
    --> Continue with (IC_LN_4_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on IC_LN_3")';
      entry / 'railTrackBrake(IC_LN_3)';
    }
    --> Continue with (IC_LN_4_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on IC_LN_3")';
      entry / 'railSignal(IC_LN_3,FWD,GREEN)';
      entry / 'railTrack(IC_LN_3,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IC_LN_4,FWD,trainNum,NORMAL)';
      entry / 'railSignal(IC_LN_4, FWD, RED)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(IC_LN_3,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered IC_LN_3 completely")';
      entry / 'railTrackOff(IC_LN_2)';
      entry / IC_LN_2_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> IC_LN_3_IC_LN_4;

  state IC_LN_3_IC_LN_4
  --> IC_LN_4 with 'railContact(IC_LN_4,0)';

  state IC_LN_4 {
    bool perm_all_next_segments = false;
    entry / 'println("[trainNum][IC-OC] Entering IC_LN_4")';
    entry / 'railSignal(IC_LN_3, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(IC_LN_4,0)' & perm_all_next_segments
    --> Slowdown with 'railContact(IC_LN_4,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on IC_LN_4")';
      entry / 'railTrack(IC_LN_4,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IC_LN_4,1)'
    --> Continue with perm_all_next_segments;

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on IC_LN_4")';
      entry / 'railTrackBrake(IC_LN_4)';
    }
    --> Continue with perm_all_next_segments;

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on IC_LN_4")';
      entry / 'railPoint(11,BRANCH)';
      entry / 'railPoint(13,STRAIGHT)';
      entry / 'railSignal(IC_LN_4,FWD,GREEN)';
      entry / 'railTrack(IC_LN_4,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IO_LN_0,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IC_JCT_0,FWD,trainNum,NORMAL)';
      entry / 'railSignal(IO_LN_0, FWD, RED)';
    }
    --> leave immediate;

    final state leave;

    region cleanup:
      initial state Entry
      --> cleanup with 'railContact(IC_LN_4,0)';
  
      state cleanup {
        entry debug / 'println("[trainNum][IC-OC] Entered IC_LN_4 completely")';
        entry / 'railTrackOff(IC_LN_3)';
        entry / IC_LN_3_req [ trainNum ] = false ; 
      }
      --> done immediate;
  
      final state done;

    region:
      initial state checking {
        entry / IO_LN_0_req[trainNum] = true;
        entry / IC_JCT_0_req[trainNum] = true;
      }
      --> success with IO_LN_0_perm == trainNum & IC_JCT_0_perm == trainNum
      --> resolving with IO_LN_0_perm == trainNum | IC_JCT_0_perm == trainNum;
    
      state resolving
      --> resolving1;
    
      state resolving1 {
      entry / IO_LN_0_req[trainNum] = false;
      entry / IC_JCT_0_req[trainNum] = false;
      }
      --> checking;
    
      state success{
        entry / perm_all_next_segments = true;
      }
      --> done immediate;
      
      final state done;
  }
  >-> IC_LN_4_IO_LN_0;

  state IC_LN_4_IO_LN_0
  --> IO_LN_0 with 'railContact(IO_LN_0,0)';

  state IO_LN_0 {
    entry / 'println("[trainNum][IC-OC] Entering IO_LN_0")';
    entry / IO_LN_1_req [ trainNum ] = true ; 
    entry / 'railSignal(IC_LN_4, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(IO_LN_0,0)' & (IO_LN_1_perm == trainNum) 
    --> Slowdown with 'railContact(IO_LN_0,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on IO_LN_0")';
      entry / 'railTrack(IO_LN_0,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IO_LN_0,1)'
    --> Continue with (IO_LN_1_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on IO_LN_0")';
      entry / 'railTrackBrake(IO_LN_0)';
    }
    --> Continue with (IO_LN_1_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on IO_LN_0")';
      entry / 'railSignal(IO_LN_0,FWD,GREEN)';
      entry / 'railSignal(IO_LN_1, FWD, RED)';
      entry / 'railTrack(IO_LN_0,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IO_LN_1,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(IO_LN_0,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered IO_LN_0 completely")';
      entry / 'railTrackOff(IC_JCT_0)';
      entry / 'railTrackOff(IC_LN_4)';
      entry / IC_JCT_0_req [ trainNum ] = false ; 
      entry / IC_LN_4_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> IO_LN_0_IO_LN_1;

  state IO_LN_0_IO_LN_1
  --> IO_LN_1 with 'railContact(IO_LN_1,0)';

  state IO_LN_1 {
    entry / 'println("[trainNum][IC-OC] Entering IO_LN_1")';
    entry / IO_LN_2_req [ trainNum ] = true ; 
    entry / 'railSignal(IO_LN_0, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(IO_LN_1,0)' & (IO_LN_2_perm == trainNum) 
    --> Slowdown with 'railContact(IO_LN_1,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on IO_LN_1")';
      entry / 'railTrack(IO_LN_1,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IO_LN_1,1)'
    --> Continue with (IO_LN_2_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on IO_LN_1")';
      entry / 'railTrackBrake(IO_LN_1)';
    }
    --> Continue with (IO_LN_2_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on IO_LN_1")';
      entry / 'railSignal(IO_LN_1,FWD,GREEN)';
      entry / 'railSignal(IO_LN_2, FWD, RED)';
      entry / 'railTrack(IO_LN_1,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IO_LN_2,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(IO_LN_1,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered IO_LN_1 completely")';
      entry / 'railTrackOff(IO_LN_0)';
      entry / IO_LN_0_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> IO_LN_1_IO_LN_2;

  state IO_LN_1_IO_LN_2
  --> IO_LN_2 with 'railContact(IO_LN_2,0)';

  state IO_LN_2 {
    bool perm_all_next_segments = false;
    entry / 'println("[trainNum][IC-OC] Entering IO_LN_2")';
    entry / 'railSignal(IO_LN_1, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(IO_LN_2,0)' & perm_all_next_segments
    --> Slowdown with 'railContact(IO_LN_2,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on IO_LN_2")';
      entry / 'railTrack(IO_LN_2,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IO_LN_2,1)'
    --> Continue with perm_all_next_segments;

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on IO_LN_2")';
      entry / 'railTrackBrake(IO_LN_2)';
    }
    --> Continue with perm_all_next_segments;

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on IO_LN_2")';
      entry / 'railPoint(10,BRANCH)';
      entry / 'railPoint(12,STRAIGHT)';
      entry / 'railSignal(IO_LN_2,FWD,GREEN)';
      entry / 'railTrack(IO_LN_2,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_1,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_JCT_0,FWD,trainNum,NORMAL)';
      entry / 'railSignal(OC_LN_1, FWD, RED)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(IO_LN_2,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered IO_LN_2 completely")';
      entry / 'railTrackOff(IO_LN_1)';
      entry / IO_LN_1_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;

    region:
      initial state checking {
        entry / OC_LN_1_req[trainNum] = true;
        entry / OC_JCT_0_req[trainNum] = true;
      }
      --> success with OC_LN_1_perm == trainNum & OC_JCT_0_perm == trainNum
      --> resolving with OC_LN_1_perm == trainNum | OC_JCT_0_perm == trainNum;
    
      state resolving
      --> resolving1;
    
      state resolving1 {
      entry / OC_LN_1_req[trainNum] = false;
      entry / OC_JCT_0_req[trainNum] = false;
      }
      --> checking;
    
      state success{
        entry / perm_all_next_segments = true;
      }
      --> done immediate;
      
      final state done;
  }
  >-> IO_LN_2_OC_LN_1;

  state IO_LN_2_OC_LN_1
  --> OC_LN_1 with 'railContact(OC_LN_1,0)';

  state OC_LN_1 {
    entry / 'println("[trainNum][IC-OC] Entering OC_LN_1")';
    entry / OC_LN_2_req [ trainNum ] = true ; 
    entry / 'railSignal(IO_LN_2, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(OC_LN_1,0)' & (OC_LN_2_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_1,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on OC_LN_1")';
      entry / 'railTrack(OC_LN_1,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(OC_LN_1,1)'
    --> Continue with (OC_LN_2_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on OC_LN_1")';
      entry / 'railTrackBrake(OC_LN_1)';
    }
    --> Continue with (OC_LN_2_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on OC_LN_1")';
      entry / 'railSignal(OC_LN_1,FWD,GREEN)';
      entry / 'railSignal(OC_LN_2, FWD, RED)';
      entry / 'railTrack(OC_LN_1,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_2,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_1,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered OC_LN_1 completely")';
      entry / 'railTrackOff(OC_JCT_0)';
      entry / 'railTrackOff(IO_LN_2)';
      entry / OC_JCT_0_req[trainNum] = false; 
      entry / IO_LN_2_req[trainNum] = false;
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_1_OC_LN_2;

  state OC_LN_1_OC_LN_2
  --> OC_LN_2 with 'railContact(OC_LN_2,0)';

  state OC_LN_2 {
    entry / 'println("[trainNum][IC-OC] Entering OC_LN_2")';
    entry / OC_LN_3_req [ trainNum ] = true ; 
    entry / 'railSignal(OC_LN_1, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(OC_LN_2,0)' & (OC_LN_3_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_2,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on OC_LN_2")';
      entry / 'railTrack(OC_LN_2,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(OC_LN_2,1)'
    --> Continue with (OC_LN_3_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on OC_LN_2")';
      entry / 'railTrackBrake(OC_LN_2)';
    }
    --> Continue with (OC_LN_3_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on OC_LN_2")';
      entry / 'railSignal(OC_LN_2,FWD,GREEN)';
      entry / 'railSignal(OC_LN_3, FWD, RED)';      
      entry / 'railTrack(OC_LN_2,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_3,FWD,trainNum,NORMAL)';      
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_2,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered OC_LN_2 completely")';
      entry / 'railTrackOff(OC_LN_1)';
      entry / OC_LN_1_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_2_OC_LN_3;

  state OC_LN_2_OC_LN_3
  --> OC_LN_3 with 'railContact(OC_LN_3,0)';

  state OC_LN_3 {
    entry / 'println("[trainNum][IC-OC] Entering OC_LN_3")';
    entry / OC_LN_4_req [ trainNum ] = true ; 
    entry / 'railSignal(OC_LN_2, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(OC_LN_3,0)' & (OC_LN_4_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_3,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on OC_LN_3")';
      entry / 'railTrack(OC_LN_3,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(OC_LN_3,1)'
    --> Continue with (OC_LN_4_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on OC_LN_3")';
      entry / 'railTrackBrake(OC_LN_3)';
    }
    --> Continue with (OC_LN_4_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on OC_LN_3")';
      entry / 'railSignal(OC_LN_3,FWD,GREEN)';
      entry / 'railSignal(OC_LN_4, FWD, RED)';
      entry / 'railTrack(OC_LN_3,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_4,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_3,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered OC_LN_3 completely")';
      entry / 'railTrackOff(OC_LN_2)';
      entry / OC_LN_2_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_3_OC_LN_4;

  state OC_LN_3_OC_LN_4
  --> OC_LN_4 with 'railContact(OC_LN_4,0)';

  state OC_LN_4 {
    entry / 'println("[trainNum][IC-OC] Entering OC_LN_4")';
    entry / OC_LN_5_req [ trainNum ] = true ; 
    entry / 'railSignal(OC_LN_3, FWD, RED)';

    initial state Entry
    --> Continue with 'railContact(OC_LN_4,0)' & (OC_LN_5_perm == trainNum) 
    --> Slowdown with 'railContact(OC_LN_4,0)';

    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on OC_LN_4")';
      entry / 'railTrack(OC_LN_4,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(OC_LN_4,1)'
    --> Continue with (OC_LN_5_perm == trainNum);

    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on OC_LN_4")';
      entry / 'railTrackBrake(OC_LN_4)';
    }
    --> Continue with (OC_LN_5_perm == trainNum);

    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on OC_LN_4")';
      entry / 'railSignal(OC_LN_4,FWD,GREEN)';
      entry / 'railSignal(OC_LN_5, FWD, RED)';
      entry / 'railTrack(OC_LN_4,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_LN_5,FWD,trainNum,NORMAL)';
    }
    --> leave immediate;

    final state leave;

    region:

    initial state Entry
    --> cleanup with 'railContact(OC_LN_4,0)';

    state cleanup {
      entry debug / 'println("[trainNum][IC-OC] Entered OC_LN_4 completely")';
      entry / 'railTrackOff(OC_LN_3)';
      entry / OC_LN_3_req [ trainNum ] = false ; 
    }
    --> done immediate;

    final state done;
  }
  >-> OC_LN_4_OC_LN_5;

  state OC_LN_4_OC_LN_5
  --> OC_LN_5 with 'railContact(OC_LN_5,0)';

  state OC_LN_5 {
    bool perm_all_next_segments = false;
    entry / 'println("[trainNum][IC-OC] Entering OC_LN_5")';
    entry / 'railSignal(OC_LN_4, FWD, RED)';
    
    initial state Entry
    --> Continue with 'railContact(OC_LN_5,0)' & perm_all_next_segments
    --> Slowdown with 'railContact(OC_LN_5,0)';
  
    state Slowdown {
      entry debug / 'println("[trainNum][IC-OC] Slowing down on OC_LN_5")';
      entry / 'railTrack(OC_LN_5,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(OC_LN_5,1)'
    --> Continue with perm_all_next_segments;
  
    state Waiting {
      entry debug / 'println("[trainNum][IC-OC] Stopping on OC_LN_5")';
      entry / 'railTrackBrake(OC_LN_5)';
    }
    --> Continue with perm_all_next_segments;
  
    state Continue {
      entry debug / 'println("[trainNum][IC-OC] Continuing on OC_LN_5")';
      entry / 'railPoint(27,BRANCH)';
      entry / 'railPoint(28,BRANCH)';
      entry / 'railSignal(OC_LN_5,FWD,GREEN)';
      entry / 'railTrack(OC_LN_5,FWD,trainNum,NORMAL)';
      entry / 'railTrack(OC_ST_0,FWD,trainNum,NORMAL)';
      entry / arrTrack = i_arrTrack;
      entry i_arrTrack == 1 / 'railPoint(26,STRAIGHT)';
      entry i_arrTrack == 1 / 'railTrack(OC_ST_1,FWD,trainNum,NORMAL)';
      entry i_arrTrack == 1 / 'railSignal(OC_ST_1, FWD, RED)';
      entry i_arrTrack == 2 / 'railPoint(26,BRANCH)';
      entry i_arrTrack == 2 / 'railTrack(OC_ST_2,FWD,trainNum,NORMAL)';
      entry i_arrTrack == 2 / 'railSignal(OC_ST_2, FWD, RED)';
      entry i_arrTrack < 3  / 'railPoint(25,BRANCH)';
      entry i_arrTrack == 3 / 'railPoint(25,STRAIGHT)';      
      entry i_arrTrack == 3 / 'railTrack(OC_ST_3,FWD,trainNum,NORMAL)';
      entry i_arrTrack == 3 / 'railSignal(OC_ST_3, FWD, RED)';      
    }
    --> leave immediate;

    final state leave;
  
    region:
      initial state Entry
      --> cleanup with 'railContact(OC_LN_5,0)';
  
      state cleanup {
        entry debug / 'println("[trainNum][IC-OC] Entered OC_LN_5 completely")';
        entry / 'railTrackOff(OC_LN_4)';
        entry / OC_LN_4_req[trainNum] = false;
      }
    --> done immediate;
  
    final state done;

    region:
      initial state checking {
        entry / OC_ST_0_req[trainNum] = true;
        entry destTrack == 3 | !cleanup / OC_ST_3_req[trainNum] = true;
        entry destTrack == 2 | !cleanup / OC_ST_2_req[trainNum] = true;
        entry destTrack == 1 | !cleanup / OC_ST_1_req[trainNum] = true;
      }
      --> success with OC_ST_0_perm == trainNum & OC_ST_1_perm == trainNum & destTrack == 1 / i_arrTrack = 1
      --> success with OC_ST_0_perm == trainNum & OC_ST_2_perm == trainNum & destTrack == 2 / i_arrTrack = 2
      --> success with OC_ST_0_perm == trainNum & OC_ST_3_perm == trainNum & destTrack == 3 / i_arrTrack = 3
      --> success with OC_ST_0_perm == trainNum & OC_ST_3_perm == trainNum / i_arrTrack = 3
      --> success with OC_ST_0_perm == trainNum & OC_ST_2_perm == trainNum / i_arrTrack = 2
      --> success with OC_ST_0_perm == trainNum & OC_ST_1_perm == trainNum / i_arrTrack = 1
      --> resolving with OC_ST_0_perm == trainNum | OC_ST_3_perm == trainNum | OC_ST_2_perm == trainNum | OC_ST_1_perm == trainNum;
    
      state resolving
      --> resolving1;
    
      state resolving1 {
        entry / OC_ST_0_req[trainNum] = false;
        entry / OC_ST_3_req[trainNum] = false;
        entry / OC_ST_2_req[trainNum] = false;
        entry / OC_ST_1_req[trainNum] = false;
      }
      --> checking;
    
      state success
      --> success1;
    
      state success1 {
        entry !(i_arrTrack == 3) / OC_ST_3_req[trainNum] = false;
        entry !(i_arrTrack == 2) / OC_ST_2_req[trainNum] = false;
        entry !(i_arrTrack == 1) / OC_ST_1_req[trainNum] = false;      
        entry / perm_all_next_segments = true;
      }
      --> done immediate;
      
      final state done;
  }>-> OC_LN_5_OC_ST;
  
  state OC_LN_5_OC_ST
  --> Arr_OC_ST with i_arrTrack == 1 & 'railContact(OC_ST_1,0)'
  --> Arr_OC_ST with i_arrTrack == 2 & 'railContact(OC_ST_2,0)'
  --> Arr_OC_ST with i_arrTrack == 3 & 'railContact(OC_ST_3,0)';
  
  state Arr_OC_ST {
    entry / 'railSignal(OC_LN_5, FWD, RED)';
    entry / 'railTrackOff(OC_LN_5)';
    entry / 'railTrack(OC_ST_0,FWD,trainNum,SLOW)';    
    entry / OC_LN_5_req[trainNum] = false;
    entry i_arrTrack == 1 / 'println("[trainNum][IC-OC] Entering OC_ST_1")';
    entry i_arrTrack == 1 / 'railTrack(OC_ST_1,FWD,trainNum,SLOW)';
    entry i_arrTrack == 2 / 'println("[trainNum][IC-OC] Entering OC_ST_2")';
    entry i_arrTrack == 2 / 'railTrack(OC_ST_2,FWD,trainNum,SLOW)';
    entry i_arrTrack == 3 / 'println("[trainNum][IC-OC] Entering OC_ST_3")';
    entry i_arrTrack == 3 / 'railTrack(OC_ST_3,FWD,trainNum,SLOW)';
    
    
    initial state SlowEntry
    --> Slow with i_arrTrack == 1 & 'railContact(OC_ST_1,0)'
    --> Slow with i_arrTrack == 2 & 'railContact(OC_ST_2,0)'
    --> Slow with i_arrTrack == 3 & 'railContact(OC_ST_3,0)';
    
    state Slow {
      entry / 'railTrackOff(OC_ST_0)';
      entry / OC_ST_0_req[trainNum] = false;
    }
    --> Halt with i_arrTrack == 1 & 'railContact(OC_ST_1,1)'
    --> Halt with i_arrTrack == 2 & 'railContact(OC_ST_2,1)'
    --> Halt with i_arrTrack == 3 & 'railContact(OC_ST_3,1)';

    state Halt {
      entry i_arrTrack == 1 / 'railTrackBrake(OC_ST_1)';
      entry i_arrTrack == 1 / 'railArrival(trainNum,OC_ST_1)';
      entry i_arrTrack == 2 / 'railTrackBrake(OC_ST_2)';
      entry i_arrTrack == 2 / 'railArrival(trainNum,OC_ST_2)';
      entry i_arrTrack == 3 / 'railTrackBrake(OC_ST_3)';      
      entry i_arrTrack == 3 / 'railArrival(trainNum,OC_ST_3)';
    } --> done;
    
    final state done;
  }>-> done;
  
  state done
  --> reallyDone with 'railDeparture(trainNum)' / trainTravelling = false;

  final state reallyDone;
}
