/* 
 * Station2Station/KHKH.sct
 * Author: csp
 * Description:
 * One round over the Kicking Horse Pass (forward)
 * Implements automatic arrival track switching
 *
 * Tests:
 * - 
 * - 
 * - 
 * - 
 */
 scchart KHKH "KH to KH Controller" {
  input int KH_LN_1_perm , KH_LN_2_perm , KH_LN_3_perm , KH_LN_4_perm;
  input int KH_LN_5_perm , KH_LN_6_perm , KH_LN_7_perm , KH_LN_8_perm;
  input int KH_ST_0_perm , KH_ST_1_perm , KH_ST_2_perm , KH_ST_3_perm;
  input int KH_ST_4_perm , KH_ST_5_perm , KH_ST_6_perm , KH_LN_0_perm;
  input bool perm_in_R , perm_out_R , perm_in_L , perm_out_L;
  output bool KH_LN_1_req[11] , KH_LN_2_req[11] , KH_LN_3_req[11] , KH_LN_4_req[11];
  output bool KH_LN_5_req[11] , KH_LN_6_req[11] , KH_LN_7_req[11] , KH_LN_8_req[11];
  output bool KH_ST_0_req[11] , KH_ST_1_req[11] , KH_ST_2_req[11] , KH_ST_3_req[11];
  output bool KH_ST_4_req[11] , KH_ST_5_req[11] , KH_ST_6_req[11] , KH_LN_0_req[11];
  output bool req_in_R , req_out_R , req_in_L , req_out_L;

  input int trainNum;
  input int depTrack;
  input int destTrack;
  input bool cleanup;
  input bool debug;
  output int arrTrack;
  output bool trainTravelling;

  initial state req_KH_in {
    entry / req_in_R = req_in_R | true;
  }
  --> requestingBlockPerms with perm_in_R
  --> waiting;

  state waiting
  --> req_KH_in with / KH_ST_6_req[trainNum] = false; KH_LN_0_req[trainNum] = false;

  state requestingBlockPerms {
    initial state requesting {
      entry / KH_ST_6_req[trainNum] = true;
      entry / KH_LN_0_req[trainNum] = true;
    }
    --> success with KH_ST_6_perm == trainNum & KH_LN_0_perm == trainNum / trainTravelling = true
    --> waiting with KH_ST_6_perm == trainNum | KH_LN_0_perm == trainNum;

    state waiting
    --> resolving;

    state resolving {
      entry / KH_ST_6_req[trainNum] = false;
      entry / KH_LN_0_req[trainNum] = false;
    }
    --> requesting;

    final state success;
  }
  o-> waiting with !perm_in_R
  >-> init;

  state init
  --> Dep_KH_ST_1 with depTrack == 1
  --> Dep_KH_ST_2 with depTrack == 2
  --> Dep_KH_ST_3 with depTrack == 3
  --> Dep_KH_ST_4 with depTrack == 4
  --> Dep_KH_ST_5 with depTrack == 5;

  state Dep_KH_ST_1 {
    entry / 'railPoint(8,STRAIGHT)';
    entry / 'railPoint(9,STRAIGHT)';
    entry / 'railSignal(KH_ST_1,FWD,GREEN)';
    entry / 'railTrack(KH_ST_1,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_ST_6,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(KH_LN_0, FWD, RED)';
    entry debug / 'println("[trainNum][KH-KH] Continuing on KH_ST_1")';
  }
  --> KH_ST_1_KH_LN_0 with 'railContact(KH_LN_0,0)';

  state KH_ST_1_KH_LN_0 {
    entry / 'railSignal(KH_ST_1,FWD,RED)';
    entry / 'railTrackOff(KH_ST_1)';
    entry / KH_ST_1_req[trainNum] = false;
  }
  --> KH_LN_0;

  state Dep_KH_ST_2 {
    entry / 'railPoint(7,BRANCH)';
    entry / 'railPoint(8,BRANCH)';
    entry / 'railPoint(9,STRAIGHT)';
    entry / 'railSignal(KH_ST_2,FWD,GREEN)';
    entry / 'railTrack(KH_ST_2,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_ST_6,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(KH_LN_0, FWD, RED)';
    entry debug / 'println("[trainNum][KH-KH] Continuing on KH_ST_2")';
  }
  --> KH_ST_2_KH_LN_0 with 'railContact(KH_LN_0,0)';

  state KH_ST_2_KH_LN_0 {
    entry / 'railSignal(KH_ST_2,FWD,RED)';
    entry / 'railTrackOff(KH_ST_2)';
    entry / KH_ST_2_req[trainNum] = false;
  }
  --> KH_LN_0;

  state Dep_KH_ST_3 {
    entry / 'railPoint(6,BRANCH)';
    entry / 'railPoint(7,STRAIGHT)';
    entry / 'railPoint(8,BRANCH)';
    entry / 'railPoint(9,STRAIGHT)';
    entry / 'railSignal(KH_ST_3,FWD,GREEN)';
    entry / 'railTrack(KH_ST_3,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_ST_6,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(KH_LN_0, FWD, RED)';
    entry debug / 'println("[trainNum][KH-KH] Continuing on KH_ST_3")';
  }
  --> KH_ST_3_KH_LN_0 with 'railContact(KH_LN_0,0)';

  state KH_ST_3_KH_LN_0 {
    entry / 'railSignal(KH_ST_3,FWD,RED)';
    entry / 'railTrackOff(KH_ST_3)';
    entry / KH_ST_3_req[trainNum] = false;
  }
  --> KH_LN_0;

  state Dep_KH_ST_4 {
    entry / 'railPoint(5,BRANCH)';
    entry / 'railPoint(6,STRAIGHT)';
    entry / 'railPoint(7,STRAIGHT)';
    entry / 'railPoint(8,BRANCH)';
    entry / 'railPoint(9,STRAIGHT)';
    entry / 'railSignal(KH_ST_4,FWD,GREEN)';
    entry / 'railTrack(KH_ST_4,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_ST_6,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(KH_LN_0, FWD, RED)';
    entry debug / 'println("[trainNum][KH-KH] Continuing on KH_ST_4")';
  }
  --> KH_ST_4_KH_LN_0 with 'railContact(KH_LN_0,0)';

  state KH_ST_4_KH_LN_0 {
    entry / 'railSignal(KH_ST_4,FWD,RED)';
    entry / 'railTrackOff(KH_ST_4)';
    entry / KH_ST_4_req[trainNum] = false;
  }
  --> KH_LN_0;

  state Dep_KH_ST_5 {
    entry / 'railPoint(5,STRAIGHT)';
    entry / 'railPoint(6,STRAIGHT)';
    entry / 'railPoint(7,STRAIGHT)';
    entry / 'railPoint(8,BRANCH)';
    entry / 'railPoint(9,STRAIGHT)';
    entry / 'railSignal(KH_ST_5,FWD,GREEN)';
    entry / 'railTrack(KH_ST_5,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_ST_6,FWD,trainNum,NORMAL)';
    entry / 'railTrack(KH_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(KH_LN_0, FWD, RED)';
    entry debug / 'println("[trainNum][KH-KH] Continuing on KH_ST_5")';
  }
  --> KH_ST_5_KH_LN_0 with 'railContact(KH_LN_0,0)';

  state KH_ST_5_KH_LN_0 {
    entry / 'railSignal(KH_ST_5,FWD,RED)';
    entry / 'railTrackOff(KH_ST_5)';
    entry / KH_ST_5_req[trainNum] = false;
  }
  --> KH_LN_0;

  state KH_LN_0 {
    entry / 'println("[trainNum][KH-KH] Entering KH_LN_0")';
    entry / KH_LN_1_req[trainNum] = true;

    region Travel:

      initial state Entry
      --> Continue with 'railContact(KH_LN_0,0)' & KH_LN_1_perm == trainNum
      --> Slowdown with 'railContact(KH_LN_0,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_LN_0")';
        entry / 'railTrack(KH_LN_0,FWD,trainNum,CAUTION)';
      }
      --> Waiting with 'railContact(KH_LN_0,1)'
      --> Continue with KH_LN_1_perm == trainNum;

      state Waiting {
        entry debug / 'println("[trainNum][KH-KH] Waiting on KH_LN_0")';
        entry / 'railTrackBrake(KH_LN_0)';
      }
      --> Continue with KH_LN_1_perm == trainNum;

      state Continue {
        entry / 'railSignal(KH_LN_0,FWD,GREEN)';
        entry / 'railTrack(KH_LN_0,FWD,trainNum,NORMAL)';
        entry / 'railTrack(KH_LN_1,FWD,trainNum,NORMAL)';
        entry / 'railSignal(KH_LN_1, FWD, RED)';
        entry debug / 'println("[trainNum][KH-KH] Continuing on KH_LN_0")';
      }
      --> done immediate;
      
      final state done;

    region Cleanup:

      initial state Entry
      --> cleanup with 'railContact(KH_LN_0,0)';

      state cleanup {
        entry / 'railTrackOff(KH_ST_6)';
        entry / KH_ST_6_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;
  }
  >-> KH_LN_0_KH_LN_1;

  state KH_LN_0_KH_LN_1
  --> KH_LN_1 with 'railContact(KH_LN_1,0)';

  state KH_LN_1 {
    entry / 'println("[trainNum][KH-KH] Entering KH_LN_1")';
    entry / KH_LN_2_req[trainNum] = true;
    entry / 'railSignal(KH_LN_0, FWD, RED)';

    region Travel:

      initial state Entry
      --> Continue with 'railContact(KH_LN_1,0)' & KH_LN_2_perm == trainNum & 'railGateClosed()'
      --> Slowdown with 'railContact(KH_LN_1,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_LN_1")';
        entry debug & '!railGateClosed()' / 'println("[trainNum][KH-KH] Waiting for gate")';
        entry / 'railTrack(KH_LN_1,FWD,trainNum,CAUTION)';
      }
      --> Waiting with 'railContact(KH_LN_1,1)'
      --> Continue with KH_LN_2_perm == trainNum & 'railGateClosed()';

      state Waiting {
        entry debug / 'println("[trainNum][KH-KH] Waiting on KH_LN_1")';
        entry debug & '!railGateClosed()' / 'println("[trainNum][KH-KH] Waiting for gate")';
        entry / 'railTrackBrake(KH_LN_1)';
      }
      --> Continue with KH_LN_2_perm == trainNum & 'railGateClosed()';

      state Continue {
        entry / 'railSignal(KH_LN_1,FWD,GREEN)';
        entry / 'railTrack(KH_LN_1,FWD,trainNum,NORMAL)';
        entry / 'railTrack(KH_LN_2,FWD,trainNum,NORMAL)';
        entry / 'railSignal(KH_LN_2, FWD, RED)';
        entry debug / 'println("[trainNum][KH-KH] Continuing on KH_LN_1")';
      }
      --> done immediate;
      
      final state done;

    region Gate:

      initial state Entry
      --> closing with KH_LN_2_perm == trainNum / 'railGateClose()';

      final state closing;

    region Cleanup:

      initial state Entry
      --> cleanup with 'railContact(KH_LN_1,0)';

      state cleanup {
        entry / 'railTrackOff(KH_LN_0)';
        entry / KH_LN_0_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;
  }
  >-> KH_LN_1_KH_LN_2;

  state KH_LN_1_KH_LN_2
  --> KH_LN_2 with 'railContact(KH_LN_2,0)';

  state KH_LN_2 {
    entry / 'println("[trainNum][KH-KH] Entering KH_LN_2")';
    entry / KH_LN_4_req[trainNum] = true;
    entry / 'railSignal(KH_LN_1, FWD, RED)';

    region Travel:

      initial state Entry
      --> Continue with 'railContact(KH_LN_2,0)' & KH_LN_4_perm == trainNum
      --> Slowdown with 'railContact(KH_LN_2,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_LN_2")';
        entry / 'railTrack(KH_LN_2,FWD,trainNum,CAUTION)';
      }
      --> Waiting with 'railContact(KH_LN_2,1)'
      --> Continue with KH_LN_4_perm == trainNum;

      state Waiting {
        entry debug / 'println("[trainNum][KH-KH] Waiting on KH_LN_2")';
        entry / 'railTrackBrake(KH_LN_2)';
      }
      --> Continue with KH_LN_4_perm == trainNum;

      state Continue {
        entry / 'railPoint(15,BRANCH)';
        entry / 'railSignal(KH_LN_2,FWD,GREEN)';
        entry / 'railTrack(KH_LN_2,FWD,trainNum,NORMAL)';
        entry / 'railTrack(KH_LN_4,FWD,trainNum,NORMAL)';
        entry / 'railSignal(KH_LN_4, FWD, RED)';
        entry debug / 'println("[trainNum][KH-KH] Continuing on KH_LN_2")';
      }
      --> done immediate;
      
      final state done;

    region Cleanup:

      initial state Entry
      --> cleanup with 'railContact(KH_LN_2,0)';

      state cleanup {
        entry / 'railTrackOff(KH_LN_1)';
        entry / KH_LN_1_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;
  }
  >-> KH_LN_2_KH_LN_4;

  state KH_LN_2_KH_LN_4
  --> KH_LN_4 with 'railContact(KH_LN_4,0)';

  state KH_LN_4 {
    entry / 'println("[trainNum][KH-KH] Entering KH_LN_4")';
    entry / KH_LN_6_req[trainNum] = true;
    entry / 'railSignal(KH_LN_2, FWD, RED)';

    region Travel:

      initial state Entry
      --> Continue with 'railContact(KH_LN_4,0)' & KH_LN_6_perm == trainNum
      --> Slowdown with 'railContact(KH_LN_4,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_LN_4")';
        entry / 'railTrack(KH_LN_4,FWD,trainNum,CAUTION)';
      }
      --> Waiting with 'railContact(KH_LN_4,1)'
      --> Continue with KH_LN_6_perm == trainNum;

      state Waiting {
        entry debug / 'println("[trainNum][KH-KH] Waiting on KH_LN_4")';
        entry / 'railTrackBrake(KH_LN_4)';
      }
      --> Continue with KH_LN_6_perm == trainNum;

      state Continue {
        entry / 'railSignal(KH_LN_4,FWD,GREEN)';
        entry / 'railTrack(KH_LN_4,FWD,trainNum,NORMAL)';
        entry / 'railTrack(KH_LN_6,FWD,trainNum,NORMAL)';
        entry / 'railSignal(KH_LN_6, FWD, RED)';
        entry debug / 'println("[trainNum][KH-KH] Continuing on KH_LN_4")';
      }
      --> done immediate;
      
      final state done;

    region Cleanup:

      initial state Entry
      --> cleanup with 'railContact(KH_LN_4,0)';

      state cleanup {
        entry / 'railTrackOff(KH_LN_2)';
        entry / 'railGateOpen()';
        entry / KH_LN_2_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;
  }
  >-> KH_LN_4_KH_LN_6;

  state KH_LN_4_KH_LN_6
  --> KH_LN_6 with 'railContact(KH_LN_6,0)';

  state KH_LN_6 {
    bool combined_permission = false;
    entry / 'println("[trainNum][KH-KH] Entering KH_LN_6")';
    entry / 'railSignal(KH_LN_4, FWD, RED)';

    region Permissions:

      initial state req_KH_out {
        entry / req_out_L = req_out_L | true;
      }
      --> requestingBlockPerms with perm_out_L
      --> waiting;
      
      state requestingBlockPerms {
        entry / KH_LN_7_req[trainNum] = true;
      }
      --> waiting with !perm_out_L
      --> success with KH_LN_7_perm == trainNum;
      
      state waiting
      --> req_KH_out with / KH_LN_7_req[trainNum] = false;
      
      state success{
        entry / combined_permission = true;
      }
      --> done immediate;
      
      final state done;

    region Travel:

      initial state Entry
      --> Continue with 'railContact(KH_LN_6,0)' & combined_permission == true
      --> Slowdown with 'railContact(KH_LN_6,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_LN_6")';
        entry / 'railTrack(KH_LN_6,FWD,trainNum,CAUTION)';
      }
      --> Waiting with 'railContact(KH_LN_6,1)'
      --> Continue with combined_permission == true;

      state Waiting {
        entry debug / 'println("[trainNum][KH-KH] Waiting on KH_LN_6")';
        entry / 'railTrackBrake(KH_LN_6)';
      }
      --> Continue with combined_permission == true;

      state Continue {
        entry / 'railPoint(14,STRAIGHT)';
        entry / 'railSignal(KH_LN_6,FWD,GREEN)';
        entry / 'railTrack(KH_LN_6,FWD,trainNum,NORMAL)';
        entry / 'railTrack(KH_LN_7,FWD,trainNum,NORMAL)';
        entry / 'railSignal(KH_LN_7, FWD, RED)';
        entry debug / 'println("[trainNum][KH-KH] Continuing on KH_LN_6")';
      }
      --> done immediate;
      
      final state done;

    region Cleanup:

      initial state Entry
      --> cleanup with 'railContact(KH_LN_6,0)';

      state cleanup {
        entry / 'railTrackOff(KH_LN_4)';
        entry / KH_LN_4_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;
  }
  >-> KH_LN_6_KH_LN_7;

  state KH_LN_6_KH_LN_7
  --> KH_LN_7 with 'railContact(KH_LN_7,0)';

  state KH_LN_7 {
    entry / 'println("[trainNum][KH-KH] Entering KH_LN_7")';
    entry / KH_LN_8_req[trainNum] = true;
    entry / 'railSignal(KH_LN_6, FWD, RED)';

    region Travel:

      initial state Entry
      --> Continue with 'railContact(KH_LN_7,0)' & KH_LN_8_perm == trainNum
      --> Slowdown with 'railContact(KH_LN_7,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_LN_7")';
        entry / 'railTrack(KH_LN_7,FWD,trainNum,CAUTION)';
      }
      --> Waiting with 'railContact(KH_LN_7,1)'
      --> Continue with KH_LN_8_perm == trainNum;

      state Waiting {
        entry debug / 'println("[trainNum][KH-KH] Waiting on KH_LN_7")';
        entry / 'railTrackBrake(KH_LN_7)';
      }
      --> Continue with KH_LN_8_perm == trainNum;

      state Continue {
        entry / 'railSignal(KH_LN_7,FWD,GREEN)';
        entry / 'railTrack(KH_LN_7,FWD,trainNum,NORMAL)';
        entry / 'railTrack(KH_LN_8,FWD,trainNum,NORMAL)';
        entry / 'railSignal(KH_LN_8, FWD, RED)';
        entry debug / 'println("[trainNum][KH-KH] Continuing on KH_LN_7")';
      }
      --> done immediate;
      
      final state done;

    region Cleanup:

      initial state Entry
      --> cleanup with 'railContact(KH_LN_7,0)';

      state cleanup {
        entry / 'railTrackOff(KH_LN_6)';
        entry / KH_LN_6_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;
  }
  >-> KH_LN_7_KH_LN_8;

  state KH_LN_7_KH_LN_8
  --> KH_LN_8 with 'railContact(KH_LN_8,0)';

  state KH_LN_8 {
    bool permAll = false;
    entry / 'println("[trainNum][KH-KH] Entering KH_LN_8")';
    entry / 'railSignal(KH_LN_7, FWD, RED)';

    region Travel:

      initial state Entry
      --> Continue with 'railContact(KH_LN_8,0)' & permAll
      --> Slowdown with 'railContact(KH_LN_8,0)';

      state Slowdown {
        entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_LN_8")';
        entry / 'railTrack(KH_LN_8,FWD,trainNum,CAUTION)';
      }
      --> Continue with permAll
      --> Waiting with 'railContact(KH_LN_8,1)';

      state Waiting {
        entry debug / 'println("[trainNum][KH-KH] Waiting on KH_LN_8")';
        entry / 'railTrackBrake(KH_LN_8)';
      }
      --> Continue with permAll;

      state Continue {
        entry debug / 'println("[trainNum][KH-KH] Continuing on KH_LN_8")';
        entry / 'railPoint(0,STRAIGHT)';
        entry arrTrack == 5 / 'railPoint(1,STRAIGHT)';
        entry arrTrack <> 5 / 'railPoint(1,BRANCH)';
        entry arrTrack == 4 / 'railPoint(2,BRANCH)';
        entry arrTrack <> 4 / 'railPoint(2,STRAIGHT)';
        entry arrTrack == 3 / 'railPoint(3,BRANCH)';
        entry arrTrack <> 3 / 'railPoint(3,STRAIGHT)';
        entry arrTrack == 2 / 'railPoint(4,BRANCH)';
        entry arrTrack <> 2 / 'railPoint(4,STRAIGHT)';
        entry / 'railSignal(KH_LN_8,FWD,GREEN)';
        entry / 'railTrack(KH_LN_8,FWD,trainNum,NORMAL)';
        entry / 'railTrack(KH_ST_0,FWD,trainNum,NORMAL)';
        entry arrTrack == 1 / 'railTrack(KH_ST_1,FWD,trainNum,NORMAL)';
        entry arrTrack == 2 / 'railTrack(KH_ST_2,FWD,trainNum,NORMAL)';
        entry arrTrack == 3 / 'railTrack(KH_ST_3,FWD,trainNum,NORMAL)';
        entry arrTrack == 4 / 'railTrack(KH_ST_4,FWD,trainNum,NORMAL)';
        entry arrTrack == 5 / 'railTrack(KH_ST_5,FWD,trainNum,NORMAL)';
        entry arrTrack == 1 / 'railSignal(KH_ST_1, FWD, RED)';
        entry arrTrack == 2 / 'railSignal(KH_ST_2, FWD, RED)';
        entry arrTrack == 3 / 'railSignal(KH_ST_3, FWD, RED)';
        entry arrTrack == 4 / 'railSignal(KH_ST_4, FWD, RED)';
        entry arrTrack == 5 / 'railSignal(KH_ST_5, FWD, RED)';
      }
      --> done immediate;
      
      final state done; 

    region "Resolve Deadlock":

      initial state checking{
        entry destTrack == 1 | !cleanup / KH_ST_1_req[trainNum] = true;
        entry destTrack == 2 | !cleanup / KH_ST_2_req[trainNum] = true;
        entry destTrack == 3 | !cleanup / KH_ST_3_req[trainNum] = true;
        entry destTrack == 4 | !cleanup / KH_ST_4_req[trainNum] = true;
        entry destTrack == 5 | !cleanup / KH_ST_5_req[trainNum] = true;
        entry / KH_ST_0_req[trainNum] = true;
      }
      --> success_waiting with destTrack == 1 & KH_ST_0_perm == trainNum & KH_ST_1_perm == trainNum / arrTrack = 1; 'println("[trainNum][KH-KH] Got requested track KH_ST_1")'
      --> success_waiting with destTrack == 2 & KH_ST_0_perm == trainNum & KH_ST_2_perm == trainNum / arrTrack = 2; 'println("[trainNum][KH-KH] Got requested track KH_ST_2")'
      --> success_waiting with destTrack == 3 & KH_ST_0_perm == trainNum & KH_ST_3_perm == trainNum / arrTrack = 3; 'println("[trainNum][KH-KH] Got requested track KH_ST_3")'
      --> success_waiting with destTrack == 4 & KH_ST_0_perm == trainNum & KH_ST_4_perm == trainNum / arrTrack = 4; 'println("[trainNum][KH-KH] Got requested track KH_ST_4")'
      --> success_waiting with destTrack == 5 & KH_ST_0_perm == trainNum & KH_ST_5_perm == trainNum / arrTrack = 5; 'println("[trainNum][KH-KH] Got requested track KH_ST_5")'
      --> success_waiting with KH_ST_0_perm == trainNum & KH_ST_1_perm == trainNum / arrTrack = 1; 'println("[trainNum][KH-KH] Switched to track KH_ST_1")' 
      --> success_waiting with KH_ST_0_perm == trainNum & KH_ST_2_perm == trainNum / arrTrack = 2; 'println("[trainNum][KH-KH] Switched to track KH_ST_2")' 
      --> success_waiting with KH_ST_0_perm == trainNum & KH_ST_3_perm == trainNum / arrTrack = 3; 'println("[trainNum][KH-KH] Switched to track KH_ST_3")' 
      --> success_waiting with KH_ST_0_perm == trainNum & KH_ST_4_perm == trainNum / arrTrack = 4; 'println("[trainNum][KH-KH] Switched to track KH_ST_4")' 
      --> success_waiting with KH_ST_0_perm == trainNum & KH_ST_5_perm == trainNum / arrTrack = 5; 'println("[trainNum][KH-KH] Switched to track KH_ST_5")' 
      --> waiting with KH_ST_0_perm == trainNum | KH_ST_2_perm == trainNum | KH_ST_3_perm == trainNum | KH_ST_4_perm == trainNum | KH_ST_5_perm == trainNum | KH_ST_1_perm == trainNum;

      state success_waiting
      --> success;

      state waiting
      --> resolving;

      state resolving{
        entry / KH_ST_1_req[trainNum] = false;
        entry / KH_ST_2_req[trainNum] = false;
        entry / KH_ST_3_req[trainNum] = false;
        entry / KH_ST_4_req[trainNum] = false;
        entry / KH_ST_5_req[trainNum] = false;
        entry / KH_ST_0_req[trainNum] = false;
      }
      --> checking;

      state success{
        entry / permAll = true;
        entry arrTrack <> 1 / KH_ST_1_req[trainNum] = false;
        entry arrTrack <> 2 / KH_ST_2_req[trainNum] = false;
        entry arrTrack <> 3 / KH_ST_3_req[trainNum] = false;
        entry arrTrack <> 4 / KH_ST_4_req[trainNum] = false;
        entry arrTrack <> 5 / KH_ST_5_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;

    region Cleanup:

      initial state Entry
      --> cleanup with 'railContact(KH_LN_8,0)';

      state cleanup {
        entry / 'railTrackOff(KH_LN_7)';
        entry / KH_LN_7_req[trainNum] = false;
      }
      --> done immediate;
      
      final state done;
  }
  >-> KH_LN_8_KH_ST;

  state KH_LN_8_KH_ST
  --> KH_ST_1 with arrTrack == 1 & 'railContact(KH_ST_1,0)'
  --> KH_ST_2 with arrTrack == 2 & 'railContact(KH_ST_2,0)'
  --> KH_ST_3 with arrTrack == 3 & 'railContact(KH_ST_3,0)'
  --> KH_ST_4 with arrTrack == 4 & 'railContact(KH_ST_4,0)'
  --> KH_ST_5 with arrTrack == 5 & 'railContact(KH_ST_5,0)';

  state KH_ST_1 {
    entry / 'println("[trainNum][KH-KH] Entering KH_ST_1")';
    entry / 'railSignal(KH_LN_8, FWD, RED)';

    initial state Slowdown {
      entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_ST_1")';
      entry / 'railTrack(KH_ST_1,FWD,trainNum,SLOW)';
    }
    --> cleanup with 'railContact(KH_ST_1,0)';

    state cleanup {
      entry / 'railTrackOff(KH_ST_0)';
      entry / KH_ST_0_req[trainNum] = false;
      entry / 'railTrackOff(KH_LN_8)';
      entry / KH_LN_8_req[trainNum] = false;
    }
    --> Stop with 'railContact(KH_ST_1,1)';

    state Stop {
      entry debug / 'println("[trainNum][KH-KH] Stop on KH_ST_1")';
      entry / 'railTrackBrake(KH_ST_1)';
      entry / 'railArrival(trainNum, KH_ST_1)'
    }
    --> done immediate;
      
    final state done;
  }
  >-> waitForDeparture;

  state KH_ST_2 {
    entry / 'println("[trainNum][KH-KH] Entering KH_ST_2")';
    entry / 'railSignal(KH_LN_8, FWD, RED)';

    initial state Slowdown {
      entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_ST_2")';
      entry / 'railTrack(KH_ST_2,FWD,trainNum,SLOW)';
    }
    --> cleanup with 'railContact(KH_ST_2,0)';

    state cleanup {
      entry / 'railTrackOff(KH_ST_0)';
      entry / KH_ST_0_req[trainNum] = false;
      entry / 'railTrackOff(KH_LN_8)';
      entry / KH_LN_8_req[trainNum] = false;
    }
    --> Stop with 'railContact(KH_ST_2,1)';

    state Stop {
      entry debug / 'println("[trainNum][KH-KH] Stop on KH_ST_2")';
      entry / 'railTrackBrake(KH_ST_2)';
      entry / 'railArrival(trainNum, KH_ST_2)'
    }
    --> done immediate;

    final state done;
  }
  >-> waitForDeparture;

  state KH_ST_3 {
    entry / 'println("[trainNum][KH-KH] Entering KH_ST_3")';
    entry / 'railSignal(KH_LN_8, FWD, RED)';

    initial state Slowdown {
      entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_ST_3")';
      entry / 'railTrack(KH_ST_3,FWD,trainNum,SLOW)';
    }
    --> cleanup with 'railContact(KH_ST_3,0)';

    state cleanup {
      entry / 'railTrackOff(KH_ST_0)';
      entry / KH_ST_0_req[trainNum] = false;
      entry / 'railTrackOff(KH_LN_8)';
      entry / KH_LN_8_req[trainNum] = false;
    }
    --> Stop with 'railContact(KH_ST_3,1)';

    state Stop {
      entry debug / 'println("[trainNum][KH-KH] Stop on KH_ST_3")';
      entry / 'railTrackBrake(KH_ST_3)';
      entry / 'railArrival(trainNum, KH_ST_3)'
    }
    --> done immediate;
      
    final state done;
  }
  >-> waitForDeparture;

  state KH_ST_4 {
    entry / 'println("[trainNum][KH-KH] Entering KH_ST_4")';
    entry / 'railSignal(KH_LN_8, FWD, RED)';

    initial state Slowdown {
      entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_ST_4")';
      entry / 'railTrack(KH_ST_4,FWD,trainNum,SLOW)';
    }
    --> cleanup with 'railContact(KH_ST_4,0)';

    state cleanup {
      entry / 'railTrackOff(KH_ST_0)';
      entry / KH_ST_0_req[trainNum] = false;
      entry / 'railTrackOff(KH_LN_8)';
      entry / KH_LN_8_req[trainNum] = false;
    }
    --> Stop with 'railContact(KH_ST_4,1)';

    state Stop {
      entry debug / 'println("[trainNum][KH-KH] Stop on KH_ST_4")';
      entry / 'railTrackBrake(KH_ST_4)';
      entry / 'railArrival(trainNum, KH_ST_4)'
    }
    --> done immediate;
      
    final state done;
  }
  >-> waitForDeparture;

  state KH_ST_5 {
    entry / 'println("[trainNum][KH-KH] Entering KH_ST_5")';
    entry / 'railSignal(KH_LN_8, FWD, RED)';

    initial state Slowdown {
      entry debug / 'println("[trainNum][KH-KH] Slowdown on KH_ST_5")';
      entry / 'railTrack(KH_ST_5,FWD,trainNum,SLOW)';
    }
    --> cleanup with 'railContact(KH_ST_5,0)';

    state cleanup {
      entry / 'railTrackOff(KH_ST_0)';
      entry / KH_ST_0_req[trainNum] = false;
      entry / 'railTrackOff(KH_LN_8)';
      entry / KH_LN_8_req[trainNum] = false;
    }
    --> Stop with 'railContact(KH_ST_5,1)';

    state Stop {
      entry debug / 'println("[trainNum][KH-KH] Stop on KH_ST_5")';
      entry / 'railTrackBrake(KH_ST_5)';
      entry / 'railArrival(trainNum, KH_ST_5)'
    }
    --> done immediate;

    final state done;
  }
  >-> waitForDeparture;

  state waitForDeparture
  --> done with 'railDeparture(trainNum)' / trainTravelling = false;

  final state done;
}