@VHLayout
scchart Controller {
  input bool init;
  input bool normalLoad;
  input bool overLoad;
  input bool lightTraffic;
  input bool accident;
  input bool endUpdates;
  output bool initComplete;
  output bool triggerHumanControl;

  region Main:
 
  initial state Init
  --> Operating with init / triggerHumanControl = false; initComplete = true;
  
  state Operating{
    region Updater:
    initial state Update{
      region triggerLights:
      initial state Start
      --> State1 with / 'triggerBackLights()';
      state State1
      --> State2 with / 'triggerFrontLights()';
      state State2
      --> State3 with / 'triggerLeftLights()';
      state State3
      --> State4 with / 'triggerRightLights()';
      state State4 
      --> State5 with / 'triggerTopLights()';
      final state State5;
      
      region RegisterCounters:
      initial state Start
      --> State1 with / 'registerObjectCounter()';
      state State1
      --> State2 with / 'registerEventCounter()';
      state State2
      --> State3 with / 'registerOccurrences()';
      state State3
      --> State4 with / 'registerEmptySlots()';
      state State4
      --> State5 with / 'registerOccupiedSlots()';
      final state State5;
      
      region routineCaller:
      initial state Start
      --> State1 with / 'soundRoutine()';
      state State1
      --> State2 with / 'pressureRoutine()';
      state State2
      --> Done with endUpdates / 'finishUpdates()';
      final state Done;
    }
    >-> Done;
    
    final state Done;
    
    region ModeHandler:
    initial state normalLoad
    --> criticalLoad with overLoad / 'handleOverload()'
    --> easyMode with lightTraffic / 'handleLightTraffic()'
    --> Done with endUpdates;
    state criticalLoad
    --> easyMode with lightTraffic / 'handleLightTraffic()'
    --> normalLoad with normalLoad
    --> Done with endUpdates;
    state easyMode
    --> criticalLoad with overLoad / 'handleOverload()'
    --> normalLoad with normalLoad
    --> Done with endUpdates;
    final state Done;   
    
    region AccidentWatch:
    initial state noAccident
    --> registeredAccident with / 'writeAccidentLog()';
    final state registeredAccident;
  }
  >-> Done;
  final state Done;
}
