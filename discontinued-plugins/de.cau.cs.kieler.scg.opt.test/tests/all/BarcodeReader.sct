scchart BarcodeReader {

	// ===== The Motors ===== //
	@Wrapper MotorSpeed, B
	output int leftMotor_speed;
	@Wrapper MotorSpeed, C
	output int rightMotor_speed;
	
	// ===== The MotorPositionSensor ===== //
	@Wrapper MotorRotation, B
	input int currentPosition;
	
	// ===== The LightSensor ===== //
	@Wrapper LightSensor, S4
	input float color;
	
	// ===== The GyroSensor ===== //
	@Wrapper GyroSensor, S2
	input float currentRotation;
	
	// ===== The Buttons ===== //
	// Press Enter to start the robot
	@Wrapper Button, ENTER
	input bool ENTER;
	
	// ===== some settings ===== //
	// Constants used within the chart
	const int SPEED = 100;
	const int ROTATION_REPOSITION = 280;
	const int ROTATION_ACCURACY = 3;
	const int ROTATION_SPEED = 150;
	
	const int RESCANS = 2; // times we rescan a barcode before we mark it invalid
	
	const int calibration_tolerance_white = 1;
	const int calibration_tolerance_black = 2;
	
	// notice: the closer the sensor is to the surface, 
	// the more reliable the values are
	const float WHITE = ' 0.35f ';
	const float BLACK = ' 0.3f ';
	
	// ===== some variables ===== //
	int barcode_raw[50]; // the raw data read from light-sensor
	int barcode_dec[32]; // decoded bits
	int barcode;         // the interpreted decoded barcode
	
	int index; 	// used to index barcode_raw while scanning
	int i; 		// used to index barcode_raw while decoding
  	int x;  	// used to index the decoded bits
	int flanks; // there are always 24 flanks, so we stop when we reach 24 flanks
	
	bool error; // set to true if any error occurred
	bool unexpectedEnd; // set to true if barcode ends before 24 flanks are read
	int rescans; // count the rescans per barcode
	
   	// if we read a flank we save the position to determine the length of the bar
  	int lastPosition;
	
	int calibration; // used to measure the length of one bar
	
	int startPosition; // since the rotate()-methods in the snippets are not working (again)
					   // we need this for our own rotation-implementation
	
	// ============== DEBUG HELPER VARIABLES =============== //
	@Wrapper Button, UP
	input bool UP;
	
	// ===== wait for start ===== //
    initial state waitStart
	
	--> scan with ENTER / 
		leftMotor_speed = SPEED;
    	rightMotor_speed = SPEED;
    	
	// ===== Scan the barcode raw data ===== //
	state scan{
	  	
	  	region detectUnexpectedEnd:
	  		initial state init --> detectUnexpectedEnd with color < BLACK;
	  		
	  		state detectUnexpectedEnd 
	  			--> init with flanks == 24
	  			--> unexpectedEnd with currentPosition > (lastPosition + 60) / 
	  				unexpectedEnd = true;
  			
  			final state unexpectedEnd;
	  		
		// We use the start delimiter to calibrate the motor-rotation sensor
		// HERE
	  	region calibrateSensor:
			int calibration_helper; 
		  		
		  	initial state waitFirstBar --> waitSecondBar with color < BLACK /
		  		calibration = currentPosition;
			  		
	  		state waitSecondBar --> waitThirdBar with color > WHITE /
	  			calibration_helper = currentPosition; 
	  			calibration = calibration_helper - calibration;
  			
  			state waitThirdBar --> calibrationDone with color < BLACK / 
  				calibration = (calibration + (currentPosition - calibration_helper)) : 2;

			final state calibrationDone; 
  		
  		region scanBarcode:
  			
	  		initial state waitStartDelim --> blackFlank with color < BLACK /
	  			lastPosition = currentPosition;
	  			flanks++;
	
			// ===== now start scanning the code ===== //
			// we check for flanks 
			// then we make use of the calibration value and the motor-position
			// to compute the actual width of the bar between the last two flanks
			state blackFlank{
			  entry / barcode_raw[index] = 1; index++;
			} --> checkBlack with color > WHITE /
		    	flanks++;
			    	
	    	 // if the current position is greater then...
	    	 // ... 2 times the calibration value add one one bit to barcode_raw
	    	 // ... 3 times the calibration value add two one bit to barcode_raw
	    	 // ... and so on ...
	    	state checkBlack
	    	--> whiteFlank immediate with (currentPosition - lastPosition) >= 4*(calibration - calibration_tolerance_black) - 1 /
	    		barcode_raw[index    ] = 1;
	    		barcode_raw[index + 1] = 1;
	    		barcode_raw[index + 2] = 1;
	    		index += 3;
	    		lastPosition = currentPosition
	    		 
	    	--> whiteFlank immediate with (currentPosition - lastPosition) >= 3*(calibration - calibration_tolerance_black) - 1 /
	    		barcode_raw[index    ] = 1;
	    		barcode_raw[index + 1] = 1;
	    		index += 2;
	    		lastPosition = currentPosition
	    		
			--> whiteFlank immediate with (currentPosition - lastPosition) >= 2*(calibration - calibration_tolerance_black) - 1 /
	    		barcode_raw[index    ] = 1;
	    		index++;
	    		lastPosition = currentPosition
	    		
			--> whiteFlank immediate with / lastPosition = currentPosition;
			
			state whiteFlank{
			  entry / barcode_raw[index] = 0; index++;
			} --> checkWhite with color < BLACK /
		    	flanks++;
			    	
	    	 // if the current position is greater then...
	    	 // ... 2 times the calibration value add one zero bit to barcode_raw
	    	 // ... 3 times the calibration value add two zero bit to barcode_raw
	    	 // ... and so on ...
	    	state checkWhite 
	    	--> blackFlank immediate with (currentPosition - lastPosition) >= 3*(calibration - calibration_tolerance_white) /
	    		barcode_raw[index    ] = 0;
	    		barcode_raw[index + 1] = 0;
	    		index += 2;
	    		lastPosition = currentPosition
	    		
			--> blackFlank immediate with (currentPosition - lastPosition) >= 2*(calibration - calibration_tolerance_white) /
	    		barcode_raw[index    ] = 0;
	    		index++;
	    		lastPosition = currentPosition
	    		
			--> blackFlank immediate with / lastPosition = currentPosition;
	    	
	} 
	--> decode with flanks == 24 || UP /
		leftMotor_speed = 0;
		rightMotor_speed = 0
	// HERE
	--> unexpectedEnd with unexpectedEnd / 
		flanks = 0;
		index = 0;
		unexpectedEnd = false;
	
	state unexpectedEnd --> scan;	
		
	// ===== Decode ===== //
	state decode{
	  	// workaround for non-usable array comparison in transitions
		int bar0;
		int bar1;
		int bar2;
		int bar3;
		int bar4;
		int bar5;
		int bar6;
		
		// we dont need to check for start-delimiter
		initial state selectFirstBar --> decodeBar immediate with / 
			 bar0 = barcode_raw[i + 3];
         	 bar1 = barcode_raw[i + 4];
         	 bar2 = barcode_raw[i + 5];
         	 bar3 = barcode_raw[i + 6];
         	 bar4 = barcode_raw[i + 7];
         	 bar5 = barcode_raw[i + 8];
         	 bar6 = barcode_raw[i + 9];
         	 i += 10;
         	 
		state decodeBar // decodes numbers from array, one at the time
		--> Found0 with bar0 == 0 &&
		                bar1 == 0 &&
		                bar2 == 0 &&
		                bar3 == 1 &&
		                bar4 == 1 &&
		                bar5 == 0 &&
		                bar6 == 1
	    --> Found1 with bar0 == 0 &&
		                bar1 == 0 &&
		                bar2 == 1 &&
		                bar3 == 1 &&
		                bar4 == 0 &&
		                bar5 == 0 &&
		                bar6 == 1
		--> Found2 with bar0 == 0 &&
		                bar1 == 0 &&
		                bar2 == 1 &&
		                bar3 == 0 &&
		                bar4 == 0 &&
		                bar5 == 1 &&
		                bar6 == 1
		--> Found3 with bar0 == 0 &&
		                bar1 == 1 &&
		                bar2 == 1 &&
		                bar3 == 1 &&
		                bar4 == 1 &&
		                bar5 == 0 &&
		                bar6 == 1
		--> Found4 with bar0 == 0 &&
		                bar1 == 1 &&
		                bar2 == 0 &&
		                bar3 == 0 &&
		                bar4 == 0 &&
		                bar5 == 1 &&
		                bar6 == 1
		--> Found5 with bar0 == 0 &&
		                bar1 == 1 &&
		                bar2 == 1 &&
		                bar3 == 0 &&
		                bar4 == 0 &&
		                bar5 == 0 &&
		                bar6 == 1
		--> Found6 with bar0 == 0 &&
		                bar1 == 1 &&
		                bar2 == 0 &&
		                bar3 == 1 &&
		                bar4 == 1 &&
		                bar5 == 1 &&
		                bar6 == 1
		--> Found7 with bar0 == 0 &&
		                bar1 == 1 &&
		                bar2 == 1 &&
		                bar3 == 1 &&
		                bar4 == 0 &&
		                bar5 == 1 &&
		                bar6 == 1
		--> Found8 with bar0 == 0 &&
		                bar1 == 1 &&
		                bar2 == 1 &&
		                bar3 == 0 &&
		                bar4 == 1 &&
		                bar5 == 1 &&
		                bar6 == 1
		--> Found9 with bar0 == 0 &&
		                bar1 == 0 &&
		                bar2 == 0 &&
		                bar3 == 1 &&
		                bar4 == 0 &&
		                bar5 == 1 &&
		                bar6 == 1
        --> error; // aborts if no number was found. This is one way to avoid false barcodes
        
        // increment and save states for the decodes barcode pieces
        state Found0 --> selectNextBar immediate with / barcode_dec[x]=0; x += 1;
		state Found1 --> selectNextBar immediate with / barcode_dec[x]=1; x += 1;
		state Found2 --> selectNextBar immediate with / barcode_dec[x]=2; x += 1;
		state Found3 --> selectNextBar immediate with / barcode_dec[x]=3; x += 1;
		state Found4 --> selectNextBar immediate with / barcode_dec[x]=4; x += 1;
		state Found5 --> selectNextBar immediate with / barcode_dec[x]=5; x += 1;
		state Found6 --> selectNextBar immediate with / barcode_dec[x]=6; x += 1;
		state Found7 --> selectNextBar immediate with / barcode_dec[x]=7; x += 1;
		state Found8 --> selectNextBar immediate with / barcode_dec[x]=8; x += 1;
		state Found9 --> selectNextBar immediate with / barcode_dec[x]=9; x += 1;
	  	
	  	// we are done decoding, if we have found 4 digits
	  	// select next 7 bits otherwise
	  	state selectNextBar
	  	--> error with i > 50
	  	--> checkParity with x == 4
		--> decodeBar with /
			bar0=barcode_raw[i + 0];
 			bar1=barcode_raw[i + 1];
 	 		bar2=barcode_raw[i + 2];
 	 		bar3=barcode_raw[i + 3];
 	 		bar4=barcode_raw[i + 4];
         	bar5=barcode_raw[i + 5];
         	bar6=barcode_raw[i + 6];
 	 		i += 7;
	                 	 
 	 	state checkParity{
 	 	  	initial state init 
 	  		--> done with (100 * barcode_dec[0] + 10 * barcode_dec[1] + barcode_dec[2]) < 500 / 
				barcode = (100 * barcode_dec[0] + 10 * barcode_dec[1] + barcode_dec[2])
				
  			--> done with (100 * barcode_dec[0] + 10 * barcode_dec[1] + barcode_dec[2]) >= 500 / 
  				barcode = (100 * barcode_dec[0] + 10 * barcode_dec[1] + barcode_dec[2]) - 1000;
  				 			
			final state done;
 	 	} 
 	 	// if parity check succeeds we are done decoding and can print the barcode and rotate
 	 	>-> done with (9-((barcode_dec[0] + barcode_dec[1] + barcode_dec[2]) % 10)) == barcode_dec[3] /
  	 		lastPosition = currentPosition;
  			'System.out.println(barcode)'
  	 		 
	 	// parity check failed
  		>-> error;
  			
		state error --> done with / error = true;
		
		final state done;
	} >-> decideNextStep immediate; //workaround termination transitions wont work with guards
	
	state decideNextStep	
	--> prepareNextScan with error && rescans >= RESCANS /
		error = false;
		rescans = 0;
		barcode = 0 // set to 0 cause we dont want to rotate if barcode was invalid
	--> rescan with error / error = false
	--> rotate;
	
	// we will move backwards till start of barcode and 
	// rescan if an error occured while decoding
	// HERE
	state rescan{
	  	int reverseFlanks;
	  	
	  	initial state init
	  	--> prepareReposition immediate with /
	  		reverseFlanks = 0;
	  		leftMotor_speed = ROTATION_SPEED;
	  		rightMotor_speed = ROTATION_SPEED;
	  		lastPosition = currentPosition;
	  		
  		state prepareReposition --> whiteFlank with currentPosition > (lastPosition + 70) /
  			leftMotor_speed = -ROTATION_SPEED;
  			rightMotor_speed = -ROTATION_SPEED;
  		
  		state blackFlank 
  		--> reposition with reverseFlanks == 24 / 
  			lastPosition = currentPosition
  		--> whiteFlank with color > WHITE / 
  			reverseFlanks++;
  		
  		state whiteFlank 
  		--> reposition with reverseFlanks == 24 / 
  			lastPosition = currentPosition
  		--> blackFlank with color < BLACK /
  			reverseFlanks++;
  			
		state reposition --> repositioned with currentPosition < (lastPosition - 70);
  		
  		final state repositioned; 
  		
	} >-> prepareNextScan immediate with / rescans++;
  	
  	state rotate{
  	  	float lastRotation;
  	  
	  	// reposition roboter, since we want to rotate at the end of barcode
	  	initial state init --> prepare_rotate immediate with /
	  		lastRotation = currentRotation; 
  			leftMotor_speed = ROTATION_SPEED;
			rightMotor_speed = ROTATION_SPEED;
		
		// start rotation, when repositioned	
	  	state prepare_rotate
	  	--> start_rotate with currentPosition >= (lastPosition + ROTATION_REPOSITION) / 
	  		leftMotor_speed = 0;
	  		rightMotor_speed = 0;
		  	
	  	state start_rotate
	  	// turn clockwise for positive barcode values
	  	--> clockwise with barcode > 0 /
	  		startPosition = currentPosition;
	  		rightMotor_speed = - ROTATION_SPEED;
	  		leftMotor_speed  =   ROTATION_SPEED
	  	// turn counterclockwise for negative barcode values
	  	--> counterClockwise with barcode < 0 /
	  		startPosition = currentPosition;
	  		rightMotor_speed =   ROTATION_SPEED;
	  		leftMotor_speed  = - ROTATION_SPEED
	  	--> done; // if barcode is 0 we dont need to rotate at all
	  	
	  	
	  	// at this point we wanted to use the rotate or rotateTo method from the lejos project
	  	// after some unsuccessful test, we added also a project only using the rotate functionality, 
	  	// we decided to write our own rotation in SCC
	  	// imo the snippet or the implementation of the rotation is broken for the EV3
	  	state clockwise // basically position checking of motor B, so that the rotation is as exact as possible
	  	--> done with currentRotation <= lastRotation - (barcode - ROTATION_ACCURACY) / 
	  		rightMotor_speed = 0; 
	  		leftMotor_speed = 0;
		
		state counterClockwise // same as clockwise but negative
		--> done with currentRotation >= lastRotation + (barcode - ROTATION_ACCURACY) /
			rightMotor_speed = 0; 
			leftMotor_speed = 0;
			
		final state done;
  	} >-> prepareNextScan immediate;
		
	// reset main variables for the next scan and run it
	state prepareNextScan --> scan with /
		index = 0;
		flanks = 0;
		i = 0;
		x = 0;
		leftMotor_speed = SPEED;
		rightMotor_speed = SPEED;
}