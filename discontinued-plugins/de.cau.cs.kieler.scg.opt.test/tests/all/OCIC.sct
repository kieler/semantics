/* 
 * Station2Station/OCIC.sct
 * Author: sna
 * Description:
 * Travels from Outer Circle Station to Inner Circle
 * Implements automatic railArrival track switching
 *
 * Tested in combination with ICOC
 * (see ICOC.sct for more information) 
 */
scchart OCIC "OC to IC Controller" {
  input int IC_JCT_0_perm, IC_LN_5_perm, IC_ST_0_perm, IC_ST_1_perm;
  input int IC_ST_2_perm, IC_ST_3_perm, OC_JCT_0_perm, OC_LN_0_perm;
  input int OC_ST_1_perm, OC_ST_2_perm, OC_ST_3_perm, OC_ST_4_perm;
  input int OI_LN_0_perm, OI_LN_1_perm, OI_LN_2_perm;
  output bool IC_JCT_0_req[11], IC_LN_5_req[11], IC_ST_0_req[11], IC_ST_1_req[11];
  output bool IC_ST_2_req[11], IC_ST_3_req[11], OC_JCT_0_req[11], OC_LN_0_req[11];
  output bool OC_ST_1_req[11], OC_ST_2_req[11], OC_ST_3_req[11], OC_ST_4_req[11];
  output bool OI_LN_0_req[11], OI_LN_1_req[11], OI_LN_2_req[11];

  input int trainNum;
  input int depTrack;
  input int destTrack;
  input bool cleanup;
  input bool debug;
  output int arrTrack;
  output bool trainTravelling;
  int i_arrTrack;

  initial state OC_ST { 
    bool perm_all_next_railSignals = false;
    entry debug / 'println("[trainNum][OC-IC] Requesting permission to leave OC_ST")';
    
    initial state waitForPerm {
      entry / OC_ST_4_req[trainNum] = true;
      entry / OC_LN_0_req[trainNum] = true;
    }
    --> gotPerm with (OC_ST_4_perm == trainNum) & (OC_LN_0_perm == trainNum) / trainTravelling = true
    --> backOff with (OC_ST_4_perm == trainNum) | (OC_LN_0_perm == trainNum);
    
    state backOff
    --> backOff1;
    
    state backOff1 {
      entry / OC_ST_4_req[trainNum] = false;
      entry / OC_LN_0_req[trainNum] = false;
    }
    --> waitForPerm;

    final state gotPerm; 
    }
    >-> OC_ST_OC_LN_0;

  state OC_ST_OC_LN_0 {
    entry / 'railPoint(16,STRAIGHT)';
    entry / 'railPoint(17,STRAIGHT)';
    entry depTrack == 3 / 'railPoint(21,STRAIGHT)';
    entry depTrack < 3  / 'railPoint(21,BRANCH)';
    entry depTrack == 1 / 'railPoint(22,STRAIGHT)';      
    entry depTrack == 2 / 'railPoint(22,BRANCH)';      
    entry / 'railSignal(OC_LN_0, FWD, RED)';
    entry depTrack == 1 / 'railSignal(OC_ST_1,FWD,GREEN)';
    entry depTrack == 2 / 'railSignal(OC_ST_2,FWD,GREEN)';
    entry depTrack == 3 / 'railSignal(OC_ST_3,FWD,GREEN)';
    entry / 'railTrack(OC_ST_4,FWD,trainNum,NORMAL)';
    entry / 'railTrack(OC_LN_0,FWD,trainNum,NORMAL)';
    entry depTrack == 1 / 'railTrack(OC_ST_1,FWD,trainNum,NORMAL)';
    entry depTrack == 2 / 'railTrack(OC_ST_2,FWD,trainNum,NORMAL)';
    entry depTrack == 3 / 'railTrack(OC_ST_3,FWD,trainNum,NORMAL)';
  }
  --> OC_LN_0 with 'railContact(OC_LN_0,0)';

 state OC_LN_0 {
  bool perm_all_next_segments = false
  entry / 'println("[trainNum][OC-IC] Entering OC_LN_0")';
  entry depTrack == 1 / 'railSignal(OC_ST_1, FWD, RED)'; 
  entry depTrack == 2 / 'railSignal(OC_ST_2, FWD, RED)'; 
  entry depTrack == 3 / 'railSignal(OC_ST_3, FWD, RED)'; 
  entry depTrack == 1 / 'railTrackOff(OC_ST_1)';
  entry depTrack == 2 / 'railTrackOff(OC_ST_2)';
  entry depTrack == 3 / 'railTrackOff(OC_ST_3)';
  entry depTrack == 1 / OC_ST_1_req[trainNum] = false;
  entry depTrack == 2 / OC_ST_2_req[trainNum] = false;
  entry depTrack == 3 / OC_ST_3_req[trainNum] = false;
  
  initial state Entry
  --> Continue with 'railContact(OC_LN_0,0)' & perm_all_next_segments
  --> Slowdown with 'railContact(OC_LN_0,0)';

  state Slowdown {
    entry debug / 'println("[trainNum][OC-IC] Slowing down on OC_LN_0")';
    entry / 'railTrack(OC_LN_0,FWD,trainNum,CAUTION)';
  }
  --> Waiting with 'railContact(OC_LN_0,1)'
  --> Continue with perm_all_next_segments;

  state Waiting {
    entry debug / 'println("[trainNum][OC-IC] Stopping on OC_LN_0")';
    entry / 'railTrackBrake(OC_LN_0)';
  }
  --> Continue with perm_all_next_segments;

  state Continue {
    entry debug / 'println("[trainNum][OC-IC] Continuing on OC_LN_0")';
    entry / 'railPoint(10,STRAIGHT)';
    entry / 'railPoint(12,BRANCH)';
    entry / 'railSignal(OC_LN_0,FWD,GREEN)';
    entry / 'railTrack(OC_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railTrack(OI_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railTrack(OC_JCT_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(OI_LN_0, FWD, RED)';
  }
  --> leave immediate;

  final state leave;

  region:
    initial state Entry
    --> cleanup with 'railContact(OC_LN_0,0)';

    state cleanup {
      entry debug / 'println("[trainNum][OC-IC] Entered OC_LN_0 completely")';
      entry / 'railTrackOff(OC_ST_4)';
      entry / OC_ST_4_req[trainNum] = false;
    }
  --> done immediate;

  final state done;
  region:
    initial state checking {
      entry / OI_LN_0_req[trainNum] = true;
      entry / OC_JCT_0_req[trainNum] = true;
    }
    --> success with OI_LN_0_perm == trainNum & OC_JCT_0_perm == trainNum
    --> resolving with OI_LN_0_perm == trainNum | OC_JCT_0_perm == trainNum;
  
    state resolving
    --> resolving1;
  
    state resolving1 {
    entry / OI_LN_0_req[trainNum] = false;
    entry / OC_JCT_0_req[trainNum] = false;
    }
    --> checking;
  
    state success{
      entry / perm_all_next_segments = true;
    }
	--> done immediate;
	  
    final state done;
  
  
}>-> OC_LN_0_OI_LN_0;

state OC_LN_0_OI_LN_0
--> OI_LN_0 with 'railContact(OI_LN_0,0)';
 
state OI_LN_0 {
  entry / 'println("[trainNum][OC-IC] Entering OI_LN_0")';
  entry / OI_LN_1_req[trainNum] = true;
  entry / 'railSignal(OC_LN_0, FWD, RED)';
  initial state Entry
  --> Continue with 'railContact(OI_LN_0,0)' & (OI_LN_1_perm == trainNum)
  --> Slowdown with 'railContact(OI_LN_0,0)';

  state Slowdown {
    entry debug / 'println("[trainNum][OC-IC] Slowing down on OI_LN_0")';
    entry / 'railTrack(OI_LN_0,FWD,trainNum,CAUTION)';
  }
  --> Waiting with 'railContact(OI_LN_0,1)'
  --> Continue with (OI_LN_1_perm == trainNum);

  state Waiting {
    entry debug / 'println("[trainNum][OC-IC] Stopping on OI_LN_0")';
    entry / 'railTrackBrake(OI_LN_0)';
  }
  --> Continue with (OI_LN_1_perm == trainNum);

  state Continue {
    entry debug / 'println("[trainNum][OC-IC] Continuing on OI_LN_0")';
    entry / 'railSignal(OI_LN_0,FWD,GREEN)';
    entry / 'railTrack(OI_LN_0,FWD,trainNum,NORMAL)';
    entry / 'railTrack(OI_LN_1,FWD,trainNum,NORMAL)';
    entry / 'railSignal(OI_LN_1, FWD, RED)';
  }
  --> leave immediate;

  final state leave;

  region:
    initial state Entry
    --> cleanup with 'railContact(OI_LN_0,0)';

    state cleanup {
      entry debug / 'println("[trainNum][OC-IC] Entered OI_LN_0 completely")';
      entry / 'railTrackOff(OC_LN_0)';
      entry / 'railTrackOff(OC_JCT_0)';
      entry / OC_LN_0_req[trainNum] = false;
      entry / OC_JCT_0_req[trainNum] = false;
    }
  --> done immediate;

  final state done;
}>-> OI_LN_0_OI_LN_1;

state OI_LN_0_OI_LN_1
--> OI_LN_1 with 'railContact(OI_LN_1,0)';

state OI_LN_1 {
  entry / 'println("[trainNum][OC-IC] Entering OI_LN_1")';
  entry / OI_LN_2_req[trainNum] = true;
  entry / 'railSignal(OI_LN_0, FWD, RED)';
  initial state Entry
  --> Continue with 'railContact(OI_LN_1,0)' & (OI_LN_2_perm == trainNum)
  --> Slowdown with 'railContact(OI_LN_1,0)';

  state Slowdown {
    entry debug / 'println("[trainNum][OC-IC] Slowing down on OI_LN_1")';
    entry / 'railTrack(OI_LN_1,FWD,trainNum,CAUTION)';
  }
  --> Waiting with 'railContact(OI_LN_1,1)'
  --> Continue with (OI_LN_2_perm == trainNum);

  state Waiting {
    entry debug / 'println("[trainNum][OC-IC] Stopping on OI_LN_1")';
    entry / 'railTrackBrake(OI_LN_1)';
  }
  --> Continue with (OI_LN_2_perm == trainNum);

  state Continue {
    entry debug / 'println("[trainNum][OC-IC] Continuing on OI_LN_1")';
    entry / 'railSignal(OI_LN_1,FWD,GREEN)';
    entry / 'railTrack(OI_LN_1,FWD,trainNum,NORMAL)';
    entry / 'railTrack(OI_LN_2,FWD,trainNum,NORMAL)';
    entry / 'railSignal(OI_LN_2, FWD, RED)';
  }
  --> leave immediate;

  final state leave;

  region:
    initial state Entry
    --> cleanup with 'railContact(OI_LN_1,0)';

    state cleanup {
      entry debug / 'println("[trainNum][OC-IC] Entered OI_LN_1 completely")';
      entry / 'railTrackOff(OI_LN_0)';
      entry / OI_LN_0_req[trainNum] = false;
    }
  --> done immediate;

  final state done;
}>-> OI_LN_1_OI_LN_2;

state OI_LN_1_OI_LN_2
--> OI_LN_2 with 'railContact(OI_LN_2,0)';
 
 state OI_LN_2 {
  bool perm_all_next_segments = false;
  entry / 'println("[trainNum][OC-IC] Entering OI_LN_2")';
  entry / 'railSignal(OI_LN_1, FWD, RED)';
  initial state Entry
  --> Continue with 'railContact(OI_LN_2,0)' & perm_all_next_segments
  --> Slowdown with 'railContact(OI_LN_2,0)';

  state Slowdown {
    entry debug / 'println("[trainNum][OC-IC] Slowing down on OI_LN_2")';
    entry / 'railTrack(OI_LN_2,FWD,trainNum,CAUTION)';
  }
  --> Waiting with 'railContact(OI_LN_2,1)'
  --> Continue with perm_all_next_segments;

  state Waiting {
    entry debug / 'println("[trainNum][OC-IC] Stopping on OI_LN_2")';
    entry / 'railTrackBrake(OI_LN_2)';
  }
  --> Continue with perm_all_next_segments;

  state Continue {
    entry debug / 'println("[trainNum][OC-IC] Continuing on OI_LN_2")';
    entry / 'railPoint(11,STRAIGHT)';
    entry / 'railPoint(13,BRANCH)';
    entry / 'railSignal(OI_LN_2,FWD,GREEN)';
    entry / 'railTrack(OI_LN_2,FWD,trainNum,NORMAL)';
    entry / 'railTrack(IC_LN_5,FWD,trainNum,NORMAL)';
    entry / 'railTrack(IC_JCT_0,FWD,trainNum,NORMAL)';
    entry / 'railSignal(IC_LN_5, FWD, RED)';
  }
  --> leave immediate;

  final state leave;

  region:
    initial state Entry
    --> cleanup with 'railContact(OI_LN_2,0)';

    state cleanup {
      entry debug / 'println("[trainNum][OC-IC] Entered OI_LN_2 completely")';
      entry / 'railTrackOff(OI_LN_1)';
      entry / OI_LN_1_req[trainNum] = false;
    }
  --> done immediate;

  final state done;

  region:
    initial state checking {
      entry / IC_LN_5_req[trainNum] = true;
      entry / IC_JCT_0_req[trainNum] = true;
    }
    --> success with IC_JCT_0_perm == trainNum & IC_LN_5_perm == trainNum
    --> resolving with IC_JCT_0_perm == trainNum | IC_LN_5_perm == trainNum;
  
    state resolving
    --> resolving1;
  
    state resolving1 {
    entry / IC_LN_5_req[trainNum] = false;
    entry / IC_JCT_0_req[trainNum] = false;
    }
    --> checking;
  
    state success{
      entry / perm_all_next_segments = true;
    }
    --> done immediate;
	  
    final state done;

  
}>-> OI_LN_2_IC_LN_5;

state OI_LN_2_IC_LN_5
--> IC_LN_5 with 'railContact(IC_LN_5,0)';
 
  state IC_LN_5 {
    bool perm_all_next_segments = false;
    entry / 'println("[trainNum][OC-IC] Entering IC_LN_5")';
    entry / 'railSignal(OI_LN_2, FWD, RED)';
    
    initial state Entry
    --> Continue with 'railContact(IC_LN_5,0)' & perm_all_next_segments
    --> Slowdown with 'railContact(IC_LN_5,0)';
  
    state Slowdown {
      entry debug / 'println("[trainNum][OC-IC] Slowing down on IC_LN_5")';
      entry / 'railTrack(IC_LN_5,FWD,trainNum,CAUTION)';
    }
    --> Waiting with 'railContact(IC_LN_5,1)'
    --> Continue with perm_all_next_segments;
  
    state Waiting {
      entry debug / 'println("[trainNum][OC-IC] Stopping on IC_LN_5")';
      entry / 'railTrackBrake(IC_LN_5)';
    }
    --> Continue with perm_all_next_segments;
  
    state Continue {
      entry debug / 'println("[trainNum][OC-IC] Continuing on IC_LN_5")';
      entry / 'railPoint(18,STRAIGHT)';
      entry i_arrTrack == 1 / 'railPoint(20,STRAIGHT)';
      entry i_arrTrack == 2 / 'railPoint(20,BRANCH)';
      entry i_arrTrack == 2 / 'railPoint(19,BRANCH)';
      entry i_arrTrack == 3 / 'railPoint(20,BRANCH)';
      entry i_arrTrack == 3 / 'railPoint(19,STRAIGHT)';
      entry / 'railSignal(IC_LN_5,FWD,GREEN)';
      entry / 'railTrack(IC_LN_5,FWD,trainNum,NORMAL)';
      entry / 'railTrack(IC_ST_0,FWD,trainNum,NORMAL)';
      entry i_arrTrack == 1 / 'railTrack(IC_ST_1,FWD,trainNum,NORMAL)';
      entry i_arrTrack == 2 / 'railTrack(IC_ST_2,FWD,trainNum,NORMAL)';
      entry i_arrTrack == 3 / 'railTrack(IC_ST_3,FWD,trainNum,NORMAL)';
      entry i_arrTrack == 1 / 'railSignal(IC_ST_1, FWD, RED)';
      entry i_arrTrack == 2 / 'railSignal(IC_ST_2, FWD, RED)';
      entry i_arrTrack == 3 / 'railSignal(IC_ST_3, FWD, RED)';
      entry / arrTrack = i_arrTrack;
    }
    --> leave immediate;

    final state leave;
  
    region:
      initial state Entry
      --> cleanup with 'railContact(IC_LN_5,0)';
  
      state cleanup {
        entry debug / 'println("[trainNum][OC-IC] Entered IC_LN_5 completely")';
        entry / 'railTrackOff(IC_JCT_0)';
        entry / 'railTrackOff(OI_LN_2)';
        entry / OI_LN_2_req[trainNum] = false;
        entry / IC_JCT_0_req[trainNum] = false;
      }
    --> done immediate;
  
    final state done;

    region:
      initial state checking {
        entry / IC_ST_0_req[trainNum] = true;
        entry destTrack == 3 | !cleanup / IC_ST_3_req[trainNum] = true;
        entry destTrack == 2 | !cleanup / IC_ST_2_req[trainNum] = true;
        entry destTrack == 1 | !cleanup / IC_ST_1_req[trainNum] = true;
      }
      --> success with IC_ST_0_perm == trainNum & IC_ST_3_perm == trainNum & destTrack == 3 / i_arrTrack = 3
      --> success with IC_ST_0_perm == trainNum & IC_ST_2_perm == trainNum & destTrack == 2 / i_arrTrack = 2
      --> success with IC_ST_0_perm == trainNum & IC_ST_1_perm == trainNum & destTrack == 1 / i_arrTrack = 1
      --> success with IC_ST_0_perm == trainNum & IC_ST_1_perm == trainNum / i_arrTrack = 1
      --> success with IC_ST_0_perm == trainNum & IC_ST_2_perm == trainNum / i_arrTrack = 2
      --> success with IC_ST_0_perm == trainNum & IC_ST_3_perm == trainNum / i_arrTrack = 3
      --> resolving with IC_ST_0_perm == trainNum | IC_ST_3_perm == trainNum | IC_ST_2_perm == trainNum | IC_ST_1_perm == trainNum;
    
      state resolving
      --> resolving1;
    
      state resolving1 {
        entry / IC_ST_0_req[trainNum] = false;
        entry / IC_ST_3_req[trainNum] = false;
        entry / IC_ST_2_req[trainNum] = false;
        entry / IC_ST_1_req[trainNum] = false;
      }
      --> checking;
    
      state success
      --> success1;
    
      state success1 {
        entry !(i_arrTrack == 3) / IC_ST_3_req[trainNum] = false;
        entry !(i_arrTrack == 2) / IC_ST_2_req[trainNum] = false;
        entry !(i_arrTrack == 1) / IC_ST_1_req[trainNum] = false;      
        entry / perm_all_next_segments = true;
      }
	  --> done immediate;
	  
	  final state done;
  }>-> IC_LN_5_IC_ST;
  
  state IC_LN_5_IC_ST
  --> Arr_IC_ST with i_arrTrack == 1 & 'railContact(IC_ST_1,0)'
  --> Arr_IC_ST with i_arrTrack == 2 & 'railContact(IC_ST_2,0)'
  --> Arr_IC_ST with i_arrTrack == 3 & 'railContact(IC_ST_3,0)';
  
  state Arr_IC_ST {
    entry i_arrTrack == 1 / 'println("[trainNum][OC-IC] Entering IC_ST_1")';
    entry i_arrTrack == 2 / 'println("[trainNum][OC-IC] Entering IC_ST_2")';
    entry i_arrTrack == 3 / 'println("[trainNum][OC-IC] Entering IC_ST_3")';
    entry / 'railSignal(IC_LN_5, FWD, RED)';
    entry / 'railTrackOff(IC_LN_5)';
    entry / IC_LN_5_req[trainNum] = false;
    entry / 'railTrack(IC_ST_0,FWD,trainNum,SLOW)';
    entry i_arrTrack == 1 / 'railTrack(IC_ST_1,FWD,trainNum,SLOW)';
    entry i_arrTrack == 2 / 'railTrack(IC_ST_2,FWD,trainNum,SLOW)';
    entry i_arrTrack == 3 / 'railTrack(IC_ST_3,FWD,trainNum,SLOW)';
    
    initial state SlowEntry
    --> Slow with i_arrTrack == 1 & 'railContact(IC_ST_1,0)'
    --> Slow with i_arrTrack == 2 & 'railContact(IC_ST_2,0)'
    --> Slow with i_arrTrack == 3 & 'railContact(IC_ST_3,0)';
    
    state Slow {
      entry / 'railTrackOff(IC_ST_0)';
      entry / IC_ST_0_req[trainNum] = false;
    }
    --> Halt with i_arrTrack == 1 & 'railContact(IC_ST_1,1)'
    --> Halt with i_arrTrack == 2 & 'railContact(IC_ST_2,1)'
    --> Halt with i_arrTrack == 3 & 'railContact(IC_ST_3,1)';

    state Halt {
      entry i_arrTrack == 1 / 'railTrackBrake(IC_ST_1)';
      entry i_arrTrack == 2 / 'railTrackBrake(IC_ST_2)';
      entry i_arrTrack == 3 / 'railTrackBrake(IC_ST_3)';
      entry i_arrTrack == 1 / 'railArrival(trainNum,IC_ST_1)';
      entry i_arrTrack == 2 / 'railArrival(trainNum,IC_ST_2)';
      entry i_arrTrack == 3 / 'railArrival(trainNum,IC_ST_3)';
    } --> done;
    
    final state done;
  }>-> done;
  
  state done
  --> reallyDone with 'railDeparture(trainNum)' / trainTravelling = false;

  final state reallyDone;

 }
