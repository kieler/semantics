/* 
 * Station2Station/KHIC.sct
 * Author: cbu
 * Description:
 * Travels from Kicking Horse Station to Inner Circle Station
 * Implements automatic arrival track switching
 *
 * Tested in combination with ICKH
 * (see ICKH.sct) 
 */

scchart KHIC {
  input int IC_JCT_0_perm, IC_LN_0_perm, IC_LN_1_perm, IC_LN_2_perm;
  input int IC_LN_3_perm, IC_LN_4_perm, IC_LN_5_perm, IC_ST_0_perm;
  input int IC_ST_1_perm, IC_ST_2_perm, IC_ST_3_perm, IC_ST_4_perm;
  input int IO_LN_0_perm, IO_LN_1_perm, IO_LN_2_perm, KH_LN_0_perm;
  input int KH_LN_1_perm, KH_LN_2_perm, KH_LN_3_perm, KH_LN_4_perm;
  input int KH_LN_5_perm, KH_LN_6_perm, KH_LN_7_perm, KH_LN_8_perm;
  input int KH_ST_0_perm, KH_ST_1_perm, KH_ST_2_perm, KH_ST_3_perm;
  input int KH_ST_4_perm, KH_ST_5_perm, KH_ST_6_perm, KIO_LN_0_perm;
  input int KIO_LN_1_perm, OC_JCT_0_perm, OC_LN_0_perm, OC_LN_1_perm;
  input int OC_LN_2_perm, OC_LN_3_perm, OC_LN_4_perm, OC_LN_5_perm;
  input int OC_ST_0_perm, OC_ST_1_perm, OC_ST_2_perm, OC_ST_3_perm;
  input int OC_ST_4_perm, OI_LN_0_perm, OI_LN_1_perm, OI_LN_2_perm;
  output bool IC_JCT_0_req[11], IC_LN_0_req[11], IC_LN_1_req[11], IC_LN_2_req[11];
  output bool IC_LN_3_req[11], IC_LN_4_req[11], IC_LN_5_req[11], IC_ST_0_req[11];
  output bool IC_ST_1_req[11], IC_ST_2_req[11], IC_ST_3_req[11], IC_ST_4_req[11];
  output bool IO_LN_0_req[11], IO_LN_1_req[11], IO_LN_2_req[11], KH_LN_0_req[11];
  output bool KH_LN_1_req[11], KH_LN_2_req[11], KH_LN_3_req[11], KH_LN_4_req[11];
  output bool KH_LN_5_req[11], KH_LN_6_req[11], KH_LN_7_req[11], KH_LN_8_req[11];
  output bool KH_ST_0_req[11], KH_ST_1_req[11], KH_ST_2_req[11], KH_ST_3_req[11];
  output bool KH_ST_4_req[11], KH_ST_5_req[11], KH_ST_6_req[11], KIO_LN_0_req[11];
  output bool KIO_LN_1_req[11], OC_JCT_0_req[11], OC_LN_0_req[11], OC_LN_1_req[11];
  output bool OC_LN_2_req[11], OC_LN_3_req[11], OC_LN_4_req[11], OC_LN_5_req[11];
  output bool OC_ST_0_req[11], OC_ST_1_req[11], OC_ST_2_req[11], OC_ST_3_req[11];
  output bool OC_ST_4_req[11], OI_LN_0_req[11], OI_LN_1_req[11], OI_LN_2_req[11];

  input int trainNum;
  input int depTrack;
  input int destTrack;
  input bool cleanup;
  input bool debug;
  output int arrTrack;
  output bool trainTravelling;
  int i_arrTrack;
  
  initial state leave_KH_ST{
    entry debug / 'println("[trainNum][KH-IC] Controller started")';
    bool all_perms = false;
    
  region "get perms":
      initial state Entry {
        entry debug / 'println("[trainNum][KH-IC] Requesting permissions for KH_ST_0 and KIO_LN_0")';
            entry / KH_ST_0_req[trainNum] = true;
            entry / KIO_LN_0_req[trainNum] = true;
          }
          --> Success with (KH_ST_0_perm == trainNum) & (KIO_LN_0_perm == trainNum)
          --> Release1 with (KH_ST_0_perm == trainNum) | (KIO_LN_0_perm == trainNum);
          
          state Release1
          --> Release;
          
          state Success {
            entry debug / 'println("[trainNum][KH-IC] Got permissions for KH_ST_0 and KIO_LN_0")';
            entry / all_perms = true;
            entry / trainTravelling = true;
          }
          --> done;
          
          state Release {
            entry debug / 'println("[trainNum][KH-IC] Releasing requests for KH_ST_0 and KIO_LN_0")';
            entry / KH_ST_0_req[trainNum] = false;
            entry / KIO_LN_0_req[trainNum] = false;
          }
          --> waitTick;
          
          state waitTick
          --> Entry;
          
          final state done;  
    
  region main:
   initial state init 
   --> Dep_KH_ST_1 with depTrack == 1 & all_perms
   --> Dep_KH_ST_2 with depTrack == 2 & all_perms
   --> Dep_KH_ST_3 with depTrack == 3 & all_perms
   --> Dep_KH_ST_4 with depTrack == 4 & all_perms
   --> Dep_KH_ST_5 with depTrack == 5 & all_perms;
   
   state Dep_KH_ST_1 {
     entry debug / 'println("[trainNum][KH-IC] Leaving KH_ST_1")';
     entry / 'railPoint(4,STRAIGHT)'
     entry / 'railPoint(3,STRAIGHT)'
     entry / 'railPoint(2,STRAIGHT)'
     entry / 'railPoint(1,BRANCH)';
     entry / 'railPoint(0,BRANCH)';
     entry / 'railSignal(KH_ST_1, REV, GREEN)';
     entry / 'railSignal(KIO_LN_0, REV, RED)';
     entry / 'railTrack(KH_ST_1, REV, trainNum, NORMAL)';
     entry / 'railTrack(KH_ST_0, REV, trainNum, NORMAL)';
     entry / 'railTrack(KIO_LN_0,REV, trainNum, NORMAL)';
   }
   --> KH_ST_1_KIO_LN_0 with 'railContact(KIO_LN_0,1)';
   
   state Dep_KH_ST_2 {
     entry debug / 'println("[trainNum][KH-IC] Leaving KH_ST_2")';
     entry / 'railPoint(4,BRANCH)';
     entry / 'railPoint(3,STRAIGHT)';
     entry / 'railPoint(2,STRAIGHT)';
     entry / 'railPoint(1,BRANCH)';
     entry / 'railPoint(0,BRANCH)';
     entry / 'railSignal(KH_ST_2, REV, GREEN)';
     entry / 'railSignal(KIO_LN_0, REV, RED)';
     entry / 'railTrack(KH_ST_2, REV, trainNum, NORMAL)';
     entry / 'railTrack(KH_ST_0, REV, trainNum, NORMAL)';
     entry / 'railTrack(KIO_LN_0,REV, trainNum, NORMAL)';
   }
   --> KH_ST_2_KIO_LN_0 with 'railContact(KIO_LN_0,1)';
   
   state Dep_KH_ST_3 {
     entry debug / 'println("[trainNum][KH-IC] Leaving KH_ST_3")';
     entry / 'railPoint(3,BRANCH)';
     entry / 'railPoint(2,STRAIGHT)';
     entry / 'railPoint(1,BRANCH)';
     entry / 'railPoint(0,BRANCH)';
     entry / 'railSignal(KH_ST_3, REV, GREEN)';
     entry / 'railSignal(KIO_LN_0, REV, RED)';
     entry / 'railTrack(KH_ST_3, REV, trainNum, NORMAL)';
     entry / 'railTrack(KH_ST_0, REV, trainNum, NORMAL)';
     entry / 'railTrack(KIO_LN_0,REV, trainNum, NORMAL)';
   }
   --> KH_ST_3_KIO_LN_0 with 'railContact(KIO_LN_0,1)';
   
    state Dep_KH_ST_4 {
     entry debug / 'println("[trainNum][KH-IC] Leaving KH_ST_4")';
     entry / 'railPoint(2,BRANCH)';
     entry / 'railPoint(1,BRANCH)';
     entry / 'railPoint(0,BRANCH)';
     entry / 'railSignal(KH_ST_4, REV, GREEN)';
     entry / 'railSignal(KIO_LN_0, REV, RED)';
     entry / 'railTrack(KH_ST_4, REV, trainNum, NORMAL)';
     entry / 'railTrack(KH_ST_0, REV, trainNum, NORMAL)';
     entry / 'railTrack(KIO_LN_0,REV, trainNum, NORMAL)';
   }
   --> KH_ST_4_KIO_LN_0 with 'railContact(KIO_LN_0,1)';
   
   state Dep_KH_ST_5 {
     entry debug / 'println("[trainNum][KH-IC] Leaving KH_ST_5")';
     entry / 'railPoint(1,STRAIGHT)';
     entry / 'railPoint(0,BRANCH)';
     entry / 'railSignal(KH_ST_5, REV, GREEN)';
     entry / 'railSignal(KIO_LN_0, REV, RED)';
     entry / 'railTrack(KH_ST_5, REV, trainNum, NORMAL)';
     entry / 'railTrack(KH_ST_0, REV, trainNum, NORMAL)';
     entry / 'railTrack(KIO_LN_0,REV, trainNum, NORMAL)';
   }
   --> KH_ST_5_KIO_LN_0 with 'railContact(KIO_LN_0,1)';
   
   
   state KH_ST_1_KIO_LN_0 {
    entry / 'println("[trainNum][KH-IC] Entering KIO_LN_0")';
    entry / 'railSignal(KH_ST_1, REV, RED)';
    entry / KH_ST_1_req[trainNum] = false;
    entry / 'railTrackOff(KH_ST_1)';
  } --> done;
  state KH_ST_2_KIO_LN_0 {
    entry / 'println("[trainNum][KH-IC] Entering KIO_LN_0")';
    entry / 'railSignal(KH_ST_2, REV, RED)';
    entry / KH_ST_2_req[trainNum] = false;
    entry / 'railTrackOff(KH_ST_2)';
  } --> done;
  state KH_ST_3_KIO_LN_0 {
    entry / 'println("[trainNum][KH-IC] Entering KIO_LN_0")';
    entry / 'railSignal(KH_ST_3, REV, RED)';
    entry / KH_ST_3_req[trainNum] = false;
    entry / 'railTrackOff(KH_ST_3)';
  } --> done;
  state KH_ST_4_KIO_LN_0 {
    entry / 'println("[trainNum][KH-IC] Entering KIO_LN_0")';
    entry / 'railSignal(KH_ST_4, REV, RED)';
    entry / KH_ST_4_req[trainNum] = false;
    entry / 'railTrackOff(KH_ST_4)';
  } --> done;
  state KH_ST_5_KIO_LN_0 {
    entry / 'println("[trainNum][KH-IC] Entering KIO_LN_0")';
    entry / 'railSignal(KH_ST_5, REV, RED)';
    entry / KH_ST_5_req[trainNum] = false;
    entry / 'railTrackOff(KH_ST_5)';
  } --> done;
  
  final state done;
  } >-> Tick1;
  
  state Tick1
  --> KIO_LN_0;
  ///////////////////////////////////////////////////////////////////////////////////////////
  
  state KIO_LN_0 {
    bool all_perms = false;
    bool on_track = false;
    bool waitForOC = false;
    
    region onTrack:
    initial state Entry
    --> done with 'railContact(KIO_LN_0,1)' / on_track=true; 
    
    final state done;
    
    region clear:
    
    initial state Entry
    --> clearPrevBlocks with on_track;
    
    state clearPrevBlocks {
      entry debug / 'println("[trainNum][KH-IC] Fully entered KIO_LN_0")';
          entry / KH_ST_0_req[trainNum] = false;
      entry / 'railTrackOff(KH_ST_0)';
          } 
          --> clear;
          
        final state clear;
        
        region "get perms":
        initial state Entry {
          entry debug / 'println("[trainNum][KH-IC] Requesting permissons for OC_ST_4, IC_ST_0, IC_ST_destTrack and others")';
                entry / OC_ST_4_req[trainNum] = true;
                entry / IC_ST_0_req[trainNum] = true;
            entry destTrack == 1 | !cleanup / IC_ST_1_req[trainNum] = true;
            entry destTrack == 2 | !cleanup / IC_ST_2_req[trainNum] = true;
            entry destTrack == 3 | !cleanup / IC_ST_3_req[trainNum] = true;
        }
        --> Success with (OC_ST_4_perm == trainNum) & (IC_ST_0_perm == trainNum) & (destTrack == 1) & (IC_ST_1_perm == trainNum) / i_arrTrack = 1
    --> Success with (OC_ST_4_perm == trainNum) & (IC_ST_0_perm == trainNum) & (destTrack == 2) & (IC_ST_2_perm == trainNum) / i_arrTrack = 2
    --> Success with (OC_ST_4_perm == trainNum) & (IC_ST_0_perm == trainNum) & (destTrack == 3) & (IC_ST_3_perm == trainNum) / i_arrTrack = 3
    --> Success with (OC_ST_4_perm == trainNum) & (IC_ST_0_perm == trainNum) & !(destTrack == 1) & (IC_ST_1_perm == trainNum) / i_arrTrack = 1
    --> Success with (OC_ST_4_perm == trainNum) & (IC_ST_0_perm == trainNum) & !(destTrack == 2) & (IC_ST_2_perm == trainNum) / i_arrTrack = 2
    --> Success with (OC_ST_4_perm == trainNum) & (IC_ST_0_perm == trainNum) & !(destTrack == 3) & (IC_ST_3_perm == trainNum) / i_arrTrack = 3
    --> Release1 with (OC_ST_4_perm == trainNum) / waitForOC=true
    --> Release1 with (IC_ST_0_perm == trainNum) | (IC_ST_1_perm == trainNum) | (IC_ST_2_perm == trainNum) | (IC_ST_3_perm == trainNum);
    
    state Release1
    --> Release;
    
    state Success {
      entry debug / 'println("[trainNum][KH-IC] Got permissons for OC_ST_4,  IC_ST_0, and IC_ST_X")';
      entry / all_perms = true;
    } --> UndoReqs;
    
    state UndoReqs {
      entry (i_arrTrack==2) | (i_arrTrack==3) / IC_ST_1_req[trainNum] = false; 
      entry (i_arrTrack==1) | (i_arrTrack==3) / IC_ST_2_req[trainNum] = false;
      entry (i_arrTrack==1) | (i_arrTrack==2) / IC_ST_3_req[trainNum] = false;
    } --> done;
    
    state Release {
      entry debug / 'println("[trainNum][KH-IC] Releasing requests for IC_ST_0, OC_ST_4, and IC_ST_X")';
      entry / OC_ST_4_req[trainNum] = false;
      entry / IC_ST_0_req[trainNum] = false;
          entry / IC_ST_1_req[trainNum] = false;
          entry / IC_ST_2_req[trainNum] = false;
          entry / IC_ST_3_req[trainNum] = false;
    } --> Wait with waitForOC 
    --> Entry with !waitForOC;
    
    state Wait
    --> Entry with / waitForOC=false;
    
    final state done;
        /////////////////////////////////////////////////////
        region main:
        initial state Entry       
          --> Continue with on_track & all_perms
          --> Slowdown with on_track;
        
          state Slowdown {
            entry debug / 'println("[trainNum][KH-IC] Slowing down on KIO_LN_0")';
            entry / 'railTrack(KIO_LN_0,REV,trainNum,CAUTION)';
          }
          --> Continue with all_perms
          --> Waiting with 'railContact(KIO_LN_0,0)';
        
          state Waiting {
            entry debug / 'println("[trainNum][KH-IC] Stopping on KIO_LN_0")';
            entry / 'railTrackBrake(KIO_LN_0)';
          }
          --> Continue with all_perms;
          
          
        
          state Continue {
            entry debug / 'println("[trainNum][KH-IC] Continuing from KIO_LN_0 to IC_ST_X")';
            entry / 'railSignal(KIO_LN_0,REV,GREEN)';
            entry / 'railTrack(KIO_LN_0,REV,trainNum,NORMAL)';
            entry / 'railPoint(16,BRANCH)';
            entry / 'railPoint(17,BRANCH)';
            entry / 'railPoint(18,BRANCH)';
            entry / 'railTrack(KIO_LN_0,REV,trainNum,NORMAL)';
            entry / 'railTrack(OC_ST_4,REV,trainNum,NORMAL)';
            entry / 'railTrack(IC_ST_0,FWD,trainNum,NORMAL)';
          }
          --> Dest_IC_ST_1 with (i_arrTrack == 1)
          --> Dest_IC_ST_2 with (i_arrTrack == 2)
          --> Dest_IC_ST_3 with (i_arrTrack == 3);
          
          state Dest_IC_ST_1{
            entry / 'railPoint(20,STRAIGHT)';
            entry / 'railSignal(IC_ST_1, FWD, RED)';
            entry / 'railTrack(IC_ST_1,FWD,trainNum,NORMAL)';
          }
          --> leave;
          
          state Dest_IC_ST_2{
            entry / 'railPoint(20,BRANCH)';
            entry / 'railPoint(19,BRANCH)';
            entry / 'railSignal(IC_ST_2, FWD, RED)';
            entry / 'railTrack(IC_ST_2,FWD,trainNum,NORMAL)';
          }
          --> leave;

      state Dest_IC_ST_3{
        entry / 'railPoint(20,BRANCH)';
        entry / 'railPoint(19,STRAIGHT)';
        entry / 'railSignal(IC_ST_3, FWD, RED)';
            entry / 'railTrack(IC_ST_3,FWD,trainNum,NORMAL)';
      }
      --> leave;
        
          final state leave;
          }
          >-> Tick2;
          
          state Tick2
          --> arrive_at_IC_ST;

/////////////////////////////////////////////////////

    state arrive_at_IC_ST{
        
        initial state KIO_LN_0_IC_ST
        --> Arr_IC_ST_1 with i_arrTrack == 1 & 'railContact(IC_ST_1,0)'
        --> Arr_IC_ST_2 with i_arrTrack == 2 & 'railContact(IC_ST_2,0)'
        --> Arr_IC_ST_3 with i_arrTrack == 3 & 'railContact(IC_ST_3,0)';
        
        
        state Arr_IC_ST_1 {
          entry / 'println("[trainNum][KH-IC] Entering IC Station on IC_ST_1")';
          entry / 'railSignal(KIO_LN_0, REV, RED)';
          entry / 'railTrackOff(KIO_LN_0)';
          entry / 'railTrackOff(OC_ST_4)';
          entry / 'railTrack(IC_ST_1,FWD,trainNum,SLOW)';
      entry / KIO_LN_0_req[trainNum] = false;
      entry / OC_ST_4_req[trainNum] = false;
          
          initial state SlowEntry
          --> Slow with 'railContact(IC_ST_1,0)';
          
          state Slow {
            entry / 'railTrackOff(IC_ST_0)';
        entry / IC_ST_0_req[trainNum] = false;
          }
          --> Halt with 'railContact(IC_ST_1,1)';

          state Halt {
            entry debug / 'println("[trainNum][KH-IC] Arrived IC Station on track IC_ST_1")';
            entry / 'railTrackBrake(IC_ST_1)';
            entry / arrTrack  = i_arrTrack;
            entry / 'railArrival(trainNum,IC_ST_1)';
          } --> done;
          
          final state done;
        }
        >-> done;
        
        state Arr_IC_ST_2 {
          entry / 'println("[trainNum][KH-IC] Entering IC Station on IC_ST_2")';
          entry / 'railSignal(KIO_LN_0, REV, RED)';
          entry / 'railTrackOff(KIO_LN_0)';
          entry / 'railTrackOff(OC_ST_4)';
          entry / 'railTrack(IC_ST_2,FWD,trainNum,SLOW)';
      entry / KIO_LN_0_req[trainNum] = false;
      entry / OC_ST_4_req[trainNum] = false;
          
          initial state SlowEntry
          --> Slow with 'railContact(IC_ST_2,0)';
          
          state Slow {
            entry / 'railTrackOff(IC_ST_0)';
        entry / IC_ST_0_req[trainNum] = false;
          }
          --> Halt with 'railContact(IC_ST_2,1)';

          state Halt {
            entry debug / 'println("[trainNum][KH-IC] Arrived IC Station on track IC_ST_2")';
            entry / 'railTrackBrake(IC_ST_2)';
            entry / arrTrack  = i_arrTrack;
            entry / 'railArrival(trainNum,IC_ST_2)';
          } --> done;
          
          final state done;
        }>-> done;
        
        state Arr_IC_ST_3 {
          entry / 'println("[trainNum][KH-IC] Entering IC Station on IC_ST_3")';
          entry / 'railSignal(KIO_LN_1, REV, RED)';
          entry / 'railTrackOff(IC_LN_5)';
          entry / 'railTrackOff(OC_ST_4)';
          entry / 'railTrack(IC_ST_3,FWD,trainNum,SLOW)';
      entry / KIO_LN_0_req[trainNum] = false;
      entry / OC_ST_4_req[trainNum] = false;
          
          initial state SlowEntry
          --> Slow with 'railContact(IC_ST_3,0)';
          
          state Slow {
            entry / 'railTrackOff(IC_ST_0)';
        entry / IC_ST_0_req[trainNum] = false;
          }
          --> Halt with 'railContact(IC_ST_3,1)';

          state Halt {
            entry debug / 'println("[trainNum][KH-IC] Arrived IC Station on track IC_ST_3")';
            entry / 'railTrackBrake(IC_ST_3)';
            entry / arrTrack  = i_arrTrack;
            entry / 'railArrival(trainNum,IC_ST_3)';
          } --> done;
          
          final state done;
        }>-> done;

        final state done;
        
        }
        >-> arrived;
        
        state arrived
        --> done with 'railDeparture(trainNum)' / trainTravelling = false;
        final state done;
        
}