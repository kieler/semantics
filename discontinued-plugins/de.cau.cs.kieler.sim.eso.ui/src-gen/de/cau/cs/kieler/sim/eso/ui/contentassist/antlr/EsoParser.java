/*
* generated by Xtext
*/
package de.cau.cs.kieler.sim.eso.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.sim.eso.services.EsoGrammarAccess;

public class EsoParser extends AbstractContentAssistParser {
	
	@Inject
	private EsoGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.sim.eso.ui.contentassist.antlr.internal.InternalEsoParser createParser() {
		de.cau.cs.kieler.sim.eso.ui.contentassist.antlr.internal.InternalEsoParser result = new de.cau.cs.kieler.sim.eso.ui.contentassist.antlr.internal.InternalEsoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTickAccess().getAlternatives_2_1(), "rule__Tick__Alternatives_2_1");
					put(grammarAccess.getTickAccess().getAlternatives_4_1(), "rule__Tick__Alternatives_4_1");
					put(grammarAccess.getSignalAccess().getValAlternatives_2_0_0(), "rule__Signal__ValAlternatives_2_0_0");
					put(grammarAccess.getKvpairAccess().getValueAlternatives_4_0(), "rule__Kvpair__ValueAlternatives_4_0");
					put(grammarAccess.getTraceAccess().getGroup(), "rule__Trace__Group__0");
					put(grammarAccess.getTickAccess().getGroup(), "rule__Tick__Group__0");
					put(grammarAccess.getTickAccess().getGroup_2(), "rule__Tick__Group_2__0");
					put(grammarAccess.getTickAccess().getGroup_2_1_1(), "rule__Tick__Group_2_1_1__0");
					put(grammarAccess.getTickAccess().getGroup_4(), "rule__Tick__Group_4__0");
					put(grammarAccess.getTickAccess().getGroup_4_1_1(), "rule__Tick__Group_4_1_1__0");
					put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
					put(grammarAccess.getSignalAccess().getGroup_2(), "rule__Signal__Group_2__0");
					put(grammarAccess.getKvpairAccess().getGroup(), "rule__Kvpair__Group__0");
					put(grammarAccess.getTracelistAccess().getTracesAssignment(), "rule__Tracelist__TracesAssignment");
					put(grammarAccess.getTraceAccess().getTicksAssignment_3(), "rule__Trace__TicksAssignment_3");
					put(grammarAccess.getTickAccess().getInputAssignment_1(), "rule__Tick__InputAssignment_1");
					put(grammarAccess.getTickAccess().getOutputAssignment_2_2(), "rule__Tick__OutputAssignment_2_2");
					put(grammarAccess.getTickAccess().getExtraInfosAssignment_3(), "rule__Tick__ExtraInfosAssignment_3");
					put(grammarAccess.getTickAccess().getExtraInfosOutputAssignment_4_2(), "rule__Tick__ExtraInfosOutputAssignment_4_2");
					put(grammarAccess.getSignalAccess().getNameAssignment_0(), "rule__Signal__NameAssignment_0");
					put(grammarAccess.getSignalAccess().getValuedAssignment_1(), "rule__Signal__ValuedAssignment_1");
					put(grammarAccess.getSignalAccess().getValAssignment_2_0(), "rule__Signal__ValAssignment_2_0");
					put(grammarAccess.getKvpairAccess().getKeyAssignment_2(), "rule__Kvpair__KeyAssignment_2");
					put(grammarAccess.getKvpairAccess().getValueAssignment_4(), "rule__Kvpair__ValueAssignment_4");
					put(grammarAccess.getEsoIntAccess().getValueAssignment(), "rule__EsoInt__ValueAssignment");
					put(grammarAccess.getEsoStringAccess().getValueAssignment(), "rule__EsoString__ValueAssignment");
					put(grammarAccess.getEsoFloatAccess().getValueAssignment(), "rule__EsoFloat__ValueAssignment");
					put(grammarAccess.getEsoBoolAccess().getValueAssignment(), "rule__EsoBool__ValueAssignment");
					put(grammarAccess.getEsoJsonAccess().getValueAssignment(), "rule__EsoJson__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.sim.eso.ui.contentassist.antlr.internal.InternalEsoParser typedParser = (de.cau.cs.kieler.sim.eso.ui.contentassist.antlr.internal.InternalEsoParser) parser;
			typedParser.entryRuletracelist();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public EsoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EsoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
