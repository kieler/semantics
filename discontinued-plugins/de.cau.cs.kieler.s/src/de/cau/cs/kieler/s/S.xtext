//grammar de.cau.cs.kieler.s.S with org.eclipse.xtext.common.Terminals
//		 de.cau.cs.kieler.core.expressions.Expressions, 
//		 de.cau.cs.kieler.core.annotations.Annotations
grammar de.cau.cs.kieler.s.S with de.cau.cs.kieler.kexpressions.kext.KExt
//grammar de.cau.cs.kieler.s.S with de.cau.cs.kieler.synccharts.text.actions.Actions
//grammar de.cau.cs.kieler.s.S with de.cau.cs.kieler.synccharts.text.interfaces.Interfaces

//import 'http://kieler.cs.cau.de/expressions' as expressions --> wrong
//import 'http://kieler.cs.cau.de/annotations' as annotations

import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects
import "http://kieler.cs.cau.de/kext/0.1.0" as kext

generate s "http://www.cau.de/cs/kieler/s" 

Program:
    (annotations += Annotation)* 
	'synchronous program' name = ID '(' priority=INT ')'
//	((signals += Signal) (signals += Signal)*)?
//	(((signals+=Signal)+ ';') | ((variables+=Variable)+ ';'))? 
//	(((variables+=Variable)|(signals += Signal)) ((variables+=Variable)|(signals += Signal))*)?
    
    (declarations += Declaration)*
//    (((valuedObjects+=ValuedObject)+ ';')*)? 
	(globalHostCodeInstruction = HOSTCODE)?
	(states += State)+
;

MetamodelManipulationRule returns annotations::Annotatable:
    Program
;


//Annotation:
//	'@' key = ID ':'
//	value = STRING
//;

//TODO: Consolidate with Annotatable xtext grammar somehow... (s.a.)
//Annotatable returns annotations::Annotatable:
// 	State | Instruction;


State:
    (annotations += Annotation)*
	'state' '(' name = ID ')' '{'
    (declarations += Declaration)*
	(instructions += Instruction';')*
	'}'
;

// TODO: ensure signal AND variable declaration in top level....



//
// OLD S DECLARATION
//
//ValuedObject returns kexpressions::ValuedObject:
//    (isInput?='input')?
//	(isOutput?='output')?
//	(isSignal?='signal')?
//	(name=EString)
//	(':=' initialValue=Expression)?
//    ((':' type=ValueType)
//      |
//     (':' 'combine' type=ValueType 'with' (combineOperator=CombineOperator) )
//    )? ";";
////    )?;
    

//---------------------------------------------------------------------
//----------------------- List of S-Instructions ----------------------
//---------------------------------------------------------------------

HostCodeInstruction:
	hostCode = HOSTCODE
;

// custom terminal rule for strings
//terminal HOSTCODESTRINGTERMINAL returns ecore::EString:
//    '$' ('a'..'z'|'A'..'Z'|'_'|'.'|'"'|'0'..'9')+ '$';
    

Instruction:
   Halt | Abort | Join | Pause | Term | If | Trans | Fork | LocalSignal | Emit | Await | Prio | HostCodeInstruction | Assignment
;

Assignment:
    valuedObject=[kexpressions::ValuedObject]
    ('[' indices+=Expression ']')*
     "=" expression = Expression ;

// Change priority
Prio:
	'prio' '('priority=INT (',' continuation=[State])?')'
;

// Transition to anothe Thread or State   
Trans :
	'trans''(' continuation=[State] ')'
;
  
// Forking new Threads
Fork :
	'fork''('continuation=[State] ',' priority=INT ')'
;


// Joining Threads
Join : 
	{Join}
	'join' ('('continuation=[State]')')?
;
   

// Simple instructions
Pause :
	{Pause} 
	'pause'('('continuation=[State]')')?
;
  
Term : 
	{Term}
	'term'('('continuation=[State]')')?
;
  
Halt : 
	{Halt}
	'halt'('('continuation=[State]')')?
;
  
  
LocalSignal: // For handling local signal re-initialization (taking care or reincarnation)
    'signal''('signal = [kexpressions::ValuedObject]')'
;

Emit:
	'emit''('signal = [kexpressions::ValuedObject] ('(' value=SExpression ')')? (',' continuation=[State])?')'
;
  
Abort : 
	{Abort}
	'abort'('('continuation=[State]')')?
;

// Conditioned execution of instructions  
If : 
	'if''('expression = SExpression (',' continuation=[State])?')' '{'
		(instructions += Instruction';')*
	'}'
;
  
// Complex instruction
Await:
	'await' '('signal= [kexpressions::ValuedObject] (',' continuation=[State])?')'
;


SExpression returns kexpressions::Expression:
	Expression //| HOSTCODE
;
