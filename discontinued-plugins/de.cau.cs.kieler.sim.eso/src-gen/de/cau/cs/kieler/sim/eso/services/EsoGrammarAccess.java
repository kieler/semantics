/*
* generated by Xtext
*/
package de.cau.cs.kieler.sim.eso.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class EsoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TracelistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracelist");
		private final Assignment cTracesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTracesTraceParserRuleCall_0 = (RuleCall)cTracesAssignment.eContents().get(0);
		
		//tracelist:
		//	traces+=trace+;
		public ParserRule getRule() { return rule; }

		//traces+=trace+
		public Assignment getTracesAssignment() { return cTracesAssignment; }

		//trace
		public RuleCall getTracesTraceParserRuleCall_0() { return cTracesTraceParserRuleCall_0; }
	}

	public class TraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "trace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cResetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTicksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTicksTickParserRuleCall_3_0 = (RuleCall)cTicksAssignment_3.eContents().get(0);
		
		//trace:
		//	"!" "reset" ";" ticks+=tick+;
		public ParserRule getRule() { return rule; }

		//"!" "reset" ";" ticks+=tick+
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"reset"
		public Keyword getResetKeyword_1() { return cResetKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//ticks+=tick+
		public Assignment getTicksAssignment_3() { return cTicksAssignment_3; }

		//tick
		public RuleCall getTicksTickParserRuleCall_3_0() { return cTicksTickParserRuleCall_3_0; }
	}

	public class TickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTickAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputSignalParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPercentSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cOutputKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cOutputKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cOutputAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOutputSignalParserRuleCall_2_2_0 = (RuleCall)cOutputAssignment_2_2.eContents().get(0);
		private final Assignment cExtraInfosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtraInfosKvpairParserRuleCall_3_0 = (RuleCall)cExtraInfosAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPercentSignPercentSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cOutputKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Keyword cOutputKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Keyword cColonKeyword_4_1_1_1 = (Keyword)cGroup_4_1_1.eContents().get(1);
		private final Assignment cExtraInfosOutputAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExtraInfosOutputKvpairParserRuleCall_4_2_0 = (RuleCall)cExtraInfosOutputAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//tick:
		//	{tick} input+=signal* ("%" ("Output:" | "Output" ":") output+=signal*)? extraInfos+=kvpair* ("%%" ("Output:" |
		//	"Output" ":") extraInfosOutput+=kvpair*)? ";";
		public ParserRule getRule() { return rule; }

		//{tick} input+=signal* ("%" ("Output:" | "Output" ":") output+=signal*)? extraInfos+=kvpair* ("%%" ("Output:" | "Output"
		//":") extraInfosOutput+=kvpair*)? ";"
		public Group getGroup() { return cGroup; }

		//{tick}
		public Action getTickAction_0() { return cTickAction_0; }

		//input+=signal*
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }

		//signal
		public RuleCall getInputSignalParserRuleCall_1_0() { return cInputSignalParserRuleCall_1_0; }

		//("%" ("Output:" | "Output" ":") output+=signal*)?
		public Group getGroup_2() { return cGroup_2; }

		//"%"
		public Keyword getPercentSignKeyword_2_0() { return cPercentSignKeyword_2_0; }

		//"Output:" | "Output" ":"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"Output:"
		public Keyword getOutputKeyword_2_1_0() { return cOutputKeyword_2_1_0; }

		//"Output" ":"
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"Output"
		public Keyword getOutputKeyword_2_1_1_0() { return cOutputKeyword_2_1_1_0; }

		//":"
		public Keyword getColonKeyword_2_1_1_1() { return cColonKeyword_2_1_1_1; }

		//output+=signal*
		public Assignment getOutputAssignment_2_2() { return cOutputAssignment_2_2; }

		//signal
		public RuleCall getOutputSignalParserRuleCall_2_2_0() { return cOutputSignalParserRuleCall_2_2_0; }

		//extraInfos+=kvpair*
		public Assignment getExtraInfosAssignment_3() { return cExtraInfosAssignment_3; }

		//kvpair
		public RuleCall getExtraInfosKvpairParserRuleCall_3_0() { return cExtraInfosKvpairParserRuleCall_3_0; }

		//("%%" ("Output:" | "Output" ":") extraInfosOutput+=kvpair*)?
		public Group getGroup_4() { return cGroup_4; }

		//"%%"
		public Keyword getPercentSignPercentSignKeyword_4_0() { return cPercentSignPercentSignKeyword_4_0; }

		//"Output:" | "Output" ":"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//"Output:"
		public Keyword getOutputKeyword_4_1_0() { return cOutputKeyword_4_1_0; }

		//"Output" ":"
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//"Output"
		public Keyword getOutputKeyword_4_1_1_0() { return cOutputKeyword_4_1_1_0; }

		//":"
		public Keyword getColonKeyword_4_1_1_1() { return cColonKeyword_4_1_1_1; }

		//extraInfosOutput+=kvpair*
		public Assignment getExtraInfosOutputAssignment_4_2() { return cExtraInfosOutputAssignment_4_2; }

		//kvpair
		public RuleCall getExtraInfosOutputKvpairParserRuleCall_4_2_0() { return cExtraInfosOutputKvpairParserRuleCall_4_2_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameALPHANUMSPECIALTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValuedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValuedLeftParenthesisKeyword_1_0 = (Keyword)cValuedAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cValAlternatives_2_0_0 = (Alternatives)cValAssignment_2_0.eContents().get(0);
		private final RuleCall cValEsoIntParserRuleCall_2_0_0_0 = (RuleCall)cValAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cValEsoFloatParserRuleCall_2_0_0_1 = (RuleCall)cValAlternatives_2_0_0.eContents().get(1);
		private final RuleCall cValEsoBoolParserRuleCall_2_0_0_2 = (RuleCall)cValAlternatives_2_0_0.eContents().get(2);
		private final RuleCall cValEsoStringParserRuleCall_2_0_0_3 = (RuleCall)cValAlternatives_2_0_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		/// * From the Xtext documentation:
		// * The ?= sign (boolean assignment operator) expects a feature of type EBoolean and sets it to true if
		// * the right hand side was consumed independently from the concrete value of the right hand side.
		// * 
		// * I. e. 'valued' is set to true if a value could be read.
		// * / signal:
		//	name=ALPHANUMSPECIAL valued?="("? (val=(EsoInt | EsoFloat | EsoBool | EsoString) ")")?;
		public ParserRule getRule() { return rule; }

		//name=ALPHANUMSPECIAL valued?="("? (val=(EsoInt | EsoFloat | EsoBool | EsoString) ")")?
		public Group getGroup() { return cGroup; }

		//name=ALPHANUMSPECIAL
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ALPHANUMSPECIAL
		public RuleCall getNameALPHANUMSPECIALTerminalRuleCall_0_0() { return cNameALPHANUMSPECIALTerminalRuleCall_0_0; }

		//valued?="("?
		public Assignment getValuedAssignment_1() { return cValuedAssignment_1; }

		//"("
		public Keyword getValuedLeftParenthesisKeyword_1_0() { return cValuedLeftParenthesisKeyword_1_0; }

		//(val=(EsoInt | EsoFloat | EsoBool | EsoString) ")")?
		public Group getGroup_2() { return cGroup_2; }

		//val=(EsoInt | EsoFloat | EsoBool | EsoString)
		public Assignment getValAssignment_2_0() { return cValAssignment_2_0; }

		//EsoInt | EsoFloat | EsoBool | EsoString
		public Alternatives getValAlternatives_2_0_0() { return cValAlternatives_2_0_0; }

		//EsoInt
		public RuleCall getValEsoIntParserRuleCall_2_0_0_0() { return cValEsoIntParserRuleCall_2_0_0_0; }

		//EsoFloat
		public RuleCall getValEsoFloatParserRuleCall_2_0_0_1() { return cValEsoFloatParserRuleCall_2_0_0_1; }

		//EsoBool
		public RuleCall getValEsoBoolParserRuleCall_2_0_0_2() { return cValEsoBoolParserRuleCall_2_0_0_2; }

		//EsoString
		public RuleCall getValEsoStringParserRuleCall_2_0_0_3() { return cValEsoStringParserRuleCall_2_0_0_3; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1() { return cRightParenthesisKeyword_2_1; }
	}

	public class KvpairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kvpair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKvpairAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPercentSignPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyALPHANUMSPECIALTerminalRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cValueAlternatives_4_0 = (Alternatives)cValueAssignment_4.eContents().get(0);
		private final RuleCall cValueEsoJsonParserRuleCall_4_0_0 = (RuleCall)cValueAlternatives_4_0.eContents().get(0);
		private final RuleCall cValueEsoStringParserRuleCall_4_0_1 = (RuleCall)cValueAlternatives_4_0.eContents().get(1);
		private final RuleCall cValueEsoFloatParserRuleCall_4_0_2 = (RuleCall)cValueAlternatives_4_0.eContents().get(2);
		private final RuleCall cValueEsoBoolParserRuleCall_4_0_3 = (RuleCall)cValueAlternatives_4_0.eContents().get(3);
		private final RuleCall cValueEsoIntParserRuleCall_4_0_4 = (RuleCall)cValueAlternatives_4_0.eContents().get(4);
		
		//kvpair:
		//	{kvpair} "%%" key=ALPHANUMSPECIAL "=" value=(EsoJson | EsoString | EsoFloat | EsoBool | EsoInt);
		public ParserRule getRule() { return rule; }

		//{kvpair} "%%" key=ALPHANUMSPECIAL "=" value=(EsoJson | EsoString | EsoFloat | EsoBool | EsoInt)
		public Group getGroup() { return cGroup; }

		//{kvpair}
		public Action getKvpairAction_0() { return cKvpairAction_0; }

		//"%%"
		public Keyword getPercentSignPercentSignKeyword_1() { return cPercentSignPercentSignKeyword_1; }

		//key=ALPHANUMSPECIAL
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }

		//ALPHANUMSPECIAL
		public RuleCall getKeyALPHANUMSPECIALTerminalRuleCall_2_0() { return cKeyALPHANUMSPECIALTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=(EsoJson | EsoString | EsoFloat | EsoBool | EsoInt)
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//EsoJson | EsoString | EsoFloat | EsoBool | EsoInt
		public Alternatives getValueAlternatives_4_0() { return cValueAlternatives_4_0; }

		//EsoJson
		public RuleCall getValueEsoJsonParserRuleCall_4_0_0() { return cValueEsoJsonParserRuleCall_4_0_0; }

		//EsoString
		public RuleCall getValueEsoStringParserRuleCall_4_0_1() { return cValueEsoStringParserRuleCall_4_0_1; }

		//EsoFloat
		public RuleCall getValueEsoFloatParserRuleCall_4_0_2() { return cValueEsoFloatParserRuleCall_4_0_2; }

		//EsoBool
		public RuleCall getValueEsoBoolParserRuleCall_4_0_3() { return cValueEsoBoolParserRuleCall_4_0_3; }

		//EsoInt
		public RuleCall getValueEsoIntParserRuleCall_4_0_4() { return cValueEsoIntParserRuleCall_4_0_4; }
	}

	public class EsoIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EsoInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EsoInt:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class EsoStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EsoString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EsoString:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class EsoFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EsoFloat");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EsoFloat:
		//	value=FLOAT;
		public ParserRule getRule() { return rule; }

		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}

	public class EsoBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EsoBool");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EsoBool:
		//	value=BOOL;
		public ParserRule getRule() { return rule; }

		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0() { return cValueBOOLTerminalRuleCall_0; }
	}

	public class EsoJsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EsoJson");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueALPHANUMSPECIALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EsoJson:
		//	value=ALPHANUMSPECIAL;
		public ParserRule getRule() { return rule; }

		//value=ALPHANUMSPECIAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ALPHANUMSPECIAL
		public RuleCall getValueALPHANUMSPECIALTerminalRuleCall_0() { return cValueALPHANUMSPECIALTerminalRuleCall_0; }
	}
	
	
	private final TracelistElements pTracelist;
	private final TraceElements pTrace;
	private final TickElements pTick;
	private final SignalElements pSignal;
	private final KvpairElements pKvpair;
	private final EsoIntElements pEsoInt;
	private final EsoStringElements pEsoString;
	private final EsoFloatElements pEsoFloat;
	private final EsoBoolElements pEsoBool;
	private final EsoJsonElements pEsoJson;
	private final TerminalRule tSPECIAL;
	private final TerminalRule tBOOL;
	private final TerminalRule tFLOAT;
	private final TerminalRule tINT;
	private final TerminalRule tALPHANUMSPECIAL;
	private final TerminalRule tSTRING;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public EsoGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pTracelist = new TracelistElements();
		this.pTrace = new TraceElements();
		this.pTick = new TickElements();
		this.pSignal = new SignalElements();
		this.pKvpair = new KvpairElements();
		this.pEsoInt = new EsoIntElements();
		this.pEsoString = new EsoStringElements();
		this.pEsoFloat = new EsoFloatElements();
		this.pEsoBool = new EsoBoolElements();
		this.pEsoJson = new EsoJsonElements();
		this.tSPECIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPECIAL");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tALPHANUMSPECIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALPHANUMSPECIAL");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sim.eso.Eso".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//tracelist:
	//	traces+=trace+;
	public TracelistElements getTracelistAccess() {
		return pTracelist;
	}
	
	public ParserRule getTracelistRule() {
		return getTracelistAccess().getRule();
	}

	//trace:
	//	"!" "reset" ";" ticks+=tick+;
	public TraceElements getTraceAccess() {
		return pTrace;
	}
	
	public ParserRule getTraceRule() {
		return getTraceAccess().getRule();
	}

	//tick:
	//	{tick} input+=signal* ("%" ("Output:" | "Output" ":") output+=signal*)? extraInfos+=kvpair* ("%%" ("Output:" |
	//	"Output" ":") extraInfosOutput+=kvpair*)? ";";
	public TickElements getTickAccess() {
		return pTick;
	}
	
	public ParserRule getTickRule() {
		return getTickAccess().getRule();
	}

	/// * From the Xtext documentation:
	// * The ?= sign (boolean assignment operator) expects a feature of type EBoolean and sets it to true if
	// * the right hand side was consumed independently from the concrete value of the right hand side.
	// * 
	// * I. e. 'valued' is set to true if a value could be read.
	// * / signal:
	//	name=ALPHANUMSPECIAL valued?="("? (val=(EsoInt | EsoFloat | EsoBool | EsoString) ")")?;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//kvpair:
	//	{kvpair} "%%" key=ALPHANUMSPECIAL "=" value=(EsoJson | EsoString | EsoFloat | EsoBool | EsoInt);
	public KvpairElements getKvpairAccess() {
		return pKvpair;
	}
	
	public ParserRule getKvpairRule() {
		return getKvpairAccess().getRule();
	}

	//EsoInt:
	//	value=INT;
	public EsoIntElements getEsoIntAccess() {
		return pEsoInt;
	}
	
	public ParserRule getEsoIntRule() {
		return getEsoIntAccess().getRule();
	}

	//EsoString:
	//	value=STRING;
	public EsoStringElements getEsoStringAccess() {
		return pEsoString;
	}
	
	public ParserRule getEsoStringRule() {
		return getEsoStringAccess().getRule();
	}

	//EsoFloat:
	//	value=FLOAT;
	public EsoFloatElements getEsoFloatAccess() {
		return pEsoFloat;
	}
	
	public ParserRule getEsoFloatRule() {
		return getEsoFloatAccess().getRule();
	}

	//EsoBool:
	//	value=BOOL;
	public EsoBoolElements getEsoBoolAccess() {
		return pEsoBool;
	}
	
	public ParserRule getEsoBoolRule() {
		return getEsoBoolAccess().getRule();
	}

	//EsoJson:
	//	value=ALPHANUMSPECIAL;
	public EsoJsonElements getEsoJsonAccess() {
		return pEsoJson;
	}
	
	public ParserRule getEsoJsonRule() {
		return getEsoJsonAccess().getRule();
	}

	//terminal SPECIAL:
	//	"," | "." | "/" | "@" | "#" | "$" | "&" | "*" | ":" | "+" | "-" | "_";
	public TerminalRule getSPECIALRule() {
		return tSPECIAL;
	} 

	//terminal BOOL returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	} 

	//terminal FLOAT returns ecore::EFloat:
	//	("+" | "-")? "0".."9"+ "." "0".."9"+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ALPHANUMSPECIAL:
	//	"0".."9"* ("a".."z" | "A".."Z" | SPECIAL) ("a".."z" | "A".."Z" | "0".."9" | SPECIAL)*;
	public TerminalRule getALPHANUMSPECIALRule() {
		return tALPHANUMSPECIAL;
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 
}
