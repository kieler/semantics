/*
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractLustreSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LustreGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AState___FullStopKeyword_5_0_or_SemicolonKeyword_5_1__q;
	protected AbstractElementAlias match_AState___LetKeyword_4_0_TelKeyword_4_2__q;
	protected AbstractElementAlias match_AnAction_DoKeyword_1_0_q;
	protected AbstractElementAlias match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__a;
	protected AbstractElementAlias match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__p;
	protected AbstractElementAlias match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a__q;
	protected AbstractElementAlias match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__a;
	protected AbstractElementAlias match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__p;
	protected AbstractElementAlias match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a;
	protected AbstractElementAlias match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__p;
	protected AbstractElementAlias match_ExternalNodeDeclaration_SemicolonKeyword_8_q;
	protected AbstractElementAlias match_NodeDeclaration_SemicolonKeyword_7_q;
	protected AbstractElementAlias match_NodeDeclaration___FullStopKeyword_12_0_or_SemicolonKeyword_12_1__q;
	protected AbstractElementAlias match_RandomCall_LeftParenthesisRightParenthesisKeyword_2_q;
	protected AbstractElementAlias match_RandomizeCall_LeftParenthesisRightParenthesisKeyword_2_q;
	protected AbstractElementAlias match_ReferenceValuedObject_LeftParenthesisRightParenthesisKeyword_5_1_q;
	protected AbstractElementAlias match_TypeDeclaration_SemicolonKeyword_2_1_2_4_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LustreGrammarAccess) access;
		match_AState___FullStopKeyword_5_0_or_SemicolonKeyword_5_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getAStateAccess().getFullStopKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAStateAccess().getSemicolonKeyword_5_1()));
		match_AState___LetKeyword_4_0_TelKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAStateAccess().getLetKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getAStateAccess().getTelKeyword_4_2()));
		match_AnAction_DoKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getAnActionAccess().getDoKeyword_1_0());
		match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(true, true, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()));
		match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(true, true, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()));
		match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0()), new GroupAlias(true, true, new TokenAlias(true, true, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0())));
		match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()));
		match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()));
		match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a = new GroupAlias(true, true, new TokenAlias(true, true, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0()));
		match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__p = new GroupAlias(true, false, new TokenAlias(true, true, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0()));
		match_ExternalNodeDeclaration_SemicolonKeyword_8_q = new TokenAlias(false, true, grammarAccess.getExternalNodeDeclarationAccess().getSemicolonKeyword_8());
		match_NodeDeclaration_SemicolonKeyword_7_q = new TokenAlias(false, true, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_7());
		match_NodeDeclaration___FullStopKeyword_12_0_or_SemicolonKeyword_12_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getNodeDeclarationAccess().getFullStopKeyword_12_0()), new TokenAlias(false, false, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_12_1()));
		match_RandomCall_LeftParenthesisRightParenthesisKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRandomCallAccess().getLeftParenthesisRightParenthesisKeyword_2());
		match_RandomizeCall_LeftParenthesisRightParenthesisKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRandomizeCallAccess().getLeftParenthesisRightParenthesisKeyword_2());
		match_ReferenceValuedObject_LeftParenthesisRightParenthesisKeyword_5_1_q = new TokenAlias(false, true, grammarAccess.getReferenceValuedObjectAccess().getLeftParenthesisRightParenthesisKeyword_5_1());
		match_TypeDeclaration_SemicolonKeyword_2_1_2_4_q = new TokenAlias(false, true, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_2_1_2_4());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AState___FullStopKeyword_5_0_or_SemicolonKeyword_5_1__q.equals(syntax))
				emit_AState___FullStopKeyword_5_0_or_SemicolonKeyword_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AState___LetKeyword_4_0_TelKeyword_4_2__q.equals(syntax))
				emit_AState___LetKeyword_4_0_TelKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AnAction_DoKeyword_1_0_q.equals(syntax))
				emit_AnAction_DoKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__a.equals(syntax))
				emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__p.equals(syntax))
				emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a__q.equals(syntax))
				emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__a.equals(syntax))
				emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__p.equals(syntax))
				emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a.equals(syntax))
				emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__p.equals(syntax))
				emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExternalNodeDeclaration_SemicolonKeyword_8_q.equals(syntax))
				emit_ExternalNodeDeclaration_SemicolonKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NodeDeclaration_SemicolonKeyword_7_q.equals(syntax))
				emit_NodeDeclaration_SemicolonKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NodeDeclaration___FullStopKeyword_12_0_or_SemicolonKeyword_12_1__q.equals(syntax))
				emit_NodeDeclaration___FullStopKeyword_12_0_or_SemicolonKeyword_12_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RandomCall_LeftParenthesisRightParenthesisKeyword_2_q.equals(syntax))
				emit_RandomCall_LeftParenthesisRightParenthesisKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RandomizeCall_LeftParenthesisRightParenthesisKeyword_2_q.equals(syntax))
				emit_RandomizeCall_LeftParenthesisRightParenthesisKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReferenceValuedObject_LeftParenthesisRightParenthesisKeyword_5_1_q.equals(syntax))
				emit_ReferenceValuedObject_LeftParenthesisRightParenthesisKeyword_5_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypeDeclaration_SemicolonKeyword_2_1_2_4_q.equals(syntax))
				emit_TypeDeclaration_SemicolonKeyword_2_1_2_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('.' | ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     assertions+=Assertion 'tel' (ambiguity) (rule end)
	 *     assertions+=Assertion 'tel' (ambiguity) transitions+=ATransition
	 *     automatons+=Automaton 'tel' (ambiguity) (rule end)
	 *     automatons+=Automaton 'tel' (ambiguity) transitions+=ATransition
	 *     constants+=VariableDeclarationInit ';' ('let' 'tel')? (ambiguity) (rule end)
	 *     constants+=VariableDeclarationInit ';' ('let' 'tel')? (ambiguity) transitions+=ATransition
	 *     emissions+=Emission 'tel' (ambiguity) (rule end)
	 *     emissions+=Emission 'tel' (ambiguity) transitions+=ATransition
	 *     equations+=Equation 'tel' (ambiguity) (rule end)
	 *     equations+=Equation 'tel' (ambiguity) transitions+=ATransition
	 *     valuedObject=StateValuedObject ('let' 'tel')? (ambiguity) (rule end)
	 *     valuedObject=StateValuedObject ('let' 'tel')? (ambiguity) transitions+=ATransition
	 *     variables+=VariableDeclarationInit ';' ('let' 'tel')? (ambiguity) (rule end)
	 *     variables+=VariableDeclarationInit ';' ('let' 'tel')? (ambiguity) transitions+=ATransition
	 
	 * </pre>
	 */
	protected void emit_AState___FullStopKeyword_5_0_or_SemicolonKeyword_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('let' 'tel')?
	 *
	 * This ambiguous syntax occurs at:
	 *     constants+=VariableDeclarationInit ';' (ambiguity) ('.' | ';')? (rule end)
	 *     constants+=VariableDeclarationInit ';' (ambiguity) ('.' | ';')? transitions+=ATransition
	 *     valuedObject=StateValuedObject (ambiguity) ('.' | ';')? (rule end)
	 *     valuedObject=StateValuedObject (ambiguity) ('.' | ';')? transitions+=ATransition
	 *     variables+=VariableDeclarationInit ';' (ambiguity) ('.' | ';')? (rule end)
	 *     variables+=VariableDeclarationInit ';' (ambiguity) ('.' | ';')? transitions+=ATransition
	 
	 * </pre>
	 */
	protected void emit_AState___LetKeyword_4_0_TelKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'do'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'restart' nextState=[StateValuedObject|ID]
	 *     (rule start) (ambiguity) history?='resume'
	 *     condition=BoolExpression (ambiguity) 'restart' nextState=[StateValuedObject|ID]
	 *     condition=BoolExpression (ambiguity) history?='resume'
	 
	 * </pre>
	 */
	protected void emit_AnAction_DoKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' '('*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operator=AtMostOneOperator
	 *     (rule start) (ambiguity) operator=NorOperator
	 *     (rule start) (ambiguity) operator=PreOperator
	 *     (rule start) (ambiguity) operator=ValOperator
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) valuedObject=[ValuedObject|PrimeID]
	 
	 * </pre>
	 */
	protected void emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' '('*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) '{' values+=IntValue
	 *     (rule start) (ambiguity) '{' values+=VectorValueMember
	 *     (rule start) (ambiguity) operator=CurrentOperator
	 *     (rule start) (ambiguity) operator=LastOperator
	 *     (rule start) (ambiguity) operator=PreOperator
	 *     (rule start) (ambiguity) operator=SubOperator
	 *     (rule start) (ambiguity) subExpressions+=AtomicValuedExpression
	 *     (rule start) (ambiguity) value=FLOAT
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {OperatorExpression.subExpressions+=}
	 
	 * </pre>
	 */
	protected void emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_5_0_a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ('('* '(')*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operator=NotOperator
	 
	 * </pre>
	 */
	protected void emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' | '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'null' 'schedule' schedule+=ScheduleObjectReference
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) '{' values+=IntValue
	 *     (rule start) (ambiguity) '{' values+=VectorValueMember
	 *     (rule start) (ambiguity) operator=AtMostOneOperator
	 *     (rule start) (ambiguity) operator=CurrentOperator
	 *     (rule start) (ambiguity) operator=LastOperator
	 *     (rule start) (ambiguity) operator=NorOperator
	 *     (rule start) (ambiguity) operator=PreOperator
	 *     (rule start) (ambiguity) operator=SubOperator
	 *     (rule start) (ambiguity) operator=ValOperator
	 *     (rule start) (ambiguity) subExpressions+=AtomicValuedExpression
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=FLOAT
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) valuedObject=[ValuedObject|PrimeID]
	 *     (rule start) (ambiguity) {OperatorExpression.subExpressions+=}
	 
	 * </pre>
	 */
	protected void emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' | '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operator=CurrentOperator
	 *     (rule start) (ambiguity) operator=LastOperator
	 *     (rule start) (ambiguity) operator=PreOperator
	 *     (rule start) (ambiguity) operator=SubOperator
	 *     (rule start) (ambiguity) subExpressions+=AtomicValuedExpression
	 *     (rule start) (ambiguity) {OperatorExpression.subExpressions+=}
	 
	 * </pre>
	 */
	protected void emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_1_0_or_LeftParenthesisKeyword_5_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('('* '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) operator=ConditionalOperator
	 *     (rule start) '(' (ambiguity) operator=NotOperator
	 *     (rule start) '(' (ambiguity) {OperatorExpression.subExpressions+=}
	 *     (rule start) (ambiguity) operator=ConditionalOperator
	 *     (rule start) (ambiguity) operator=NotOperator
	 *     (rule start) (ambiguity) {OperatorExpression.subExpressions+=}
	 
	 * </pre>
	 */
	protected void emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('('* '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) operator=ConditionalOperator
	 *     (rule start) (ambiguity) operator=NotOperator
	 *     (rule start) (ambiguity) {OperatorExpression.subExpressions+=}
	 
	 * </pre>
	 */
	protected void emit_AtomicExpression_AtomicValuedExpression___LeftParenthesisKeyword_5_0_a_LeftParenthesisKeyword_1_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) (rule end)
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) (rule end)
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ExternalNodeDeclaration_SemicolonKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'const' constants+=VariableDeclarationInit
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'let' 'tel' ('.' | ';')? (rule end)
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'let' assertions+=Assertion
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'let' automatons+=Automaton
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'let' emissions+=Emission
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'let' equations+=Equation
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'var' variables+=VariableDeclarationInit
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' (ambiguity) 'var' variables+=VariableDeclarationNoInit
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'const' constants+=VariableDeclarationInit
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'let' 'tel' ('.' | ';')? (rule end)
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'let' assertions+=Assertion
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'let' automatons+=Automaton
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'let' emissions+=Emission
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'let' equations+=Equation
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'var' variables+=VariableDeclarationInit
	 *     outputs+=VariableDeclarationNoInit ')' (ambiguity) 'var' variables+=VariableDeclarationNoInit
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'const' constants+=VariableDeclarationInit
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'let' 'tel' ('.' | ';')? (rule end)
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'let' assertions+=Assertion
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'let' automatons+=Automaton
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'let' emissions+=Emission
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'let' equations+=Equation
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'var' variables+=VariableDeclarationInit
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' (ambiguity) 'var' variables+=VariableDeclarationNoInit
	 
	 * </pre>
	 */
	protected void emit_NodeDeclaration_SemicolonKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('.' | ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     assertions+=Assertion 'tel' (ambiguity) (rule end)
	 *     automatons+=Automaton 'tel' (ambiguity) (rule end)
	 *     constants+=VariableDeclarationInit ';' 'let' 'tel' (ambiguity) (rule end)
	 *     emissions+=Emission 'tel' (ambiguity) (rule end)
	 *     equations+=Equation 'tel' (ambiguity) (rule end)
	 *     inputs+=VariableDeclarationNoInit ')' 'returns' '()' ';'? 'let' 'tel' (ambiguity) (rule end)
	 *     outputs+=VariableDeclarationNoInit ')' ';'? 'let' 'tel' (ambiguity) (rule end)
	 *     valuedObjects+=NodeValuedObject '()' 'returns' '()' ';'? 'let' 'tel' (ambiguity) (rule end)
	 *     variables+=VariableDeclarationInit ';' 'let' 'tel' (ambiguity) (rule end)
	 *     variables+=VariableDeclarationNoInit ';' 'let' 'tel' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_NodeDeclaration___FullStopKeyword_12_0_or_SemicolonKeyword_12_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '()'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'random' (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_RandomCall_LeftParenthesisRightParenthesisKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '()'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'randomize' (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_RandomizeCall_LeftParenthesisRightParenthesisKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '()'?
	 *
	 * This ambiguous syntax occurs at:
	 *     cardinalities+=Expression ']' (ambiguity) '=' initialValue=Expression
	 *     cardinalities+=Expression ']' (ambiguity) 'label' label=STRING
	 *     cardinalities+=Expression ']' (ambiguity) (rule end)
	 *     genericParameters+=GenericParameter '&gt;' (ambiguity) '=' initialValue=Expression
	 *     genericParameters+=GenericParameter '&gt;' (ambiguity) 'label' label=STRING
	 *     genericParameters+=GenericParameter '&gt;' (ambiguity) (rule end)
	 *     name=PrimeID (ambiguity) '=' initialValue=Expression
	 *     name=PrimeID (ambiguity) 'label' label=STRING
	 *     name=PrimeID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ReferenceValuedObject_LeftParenthesisRightParenthesisKeyword_5_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     variables+=VariableDeclarationInit (ambiguity) '}' (rule end)
	 *     variables+=VariableDeclarationNoInit (ambiguity) '}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_TypeDeclaration_SemicolonKeyword_2_1_2_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
