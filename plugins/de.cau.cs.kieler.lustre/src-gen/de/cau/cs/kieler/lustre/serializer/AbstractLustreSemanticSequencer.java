/*
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.Pragma;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.StringPragma;
import de.cau.cs.kieler.annotations.TagAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.ExternString;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.GenericParameterDeclaration;
import de.cau.cs.kieler.kexpressions.GenericTypeReference;
import de.cau.cs.kieler.kexpressions.IgnoreValue;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.JsonAnnotation;
import de.cau.cs.kieler.kexpressions.JsonArrayValue;
import de.cau.cs.kieler.kexpressions.JsonObjectMember;
import de.cau.cs.kieler.kexpressions.JsonObjectValue;
import de.cau.cs.kieler.kexpressions.JsonPragma;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.MethodDeclaration;
import de.cau.cs.kieler.kexpressions.NullValue;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.PrintCall;
import de.cau.cs.kieler.kexpressions.RandomCall;
import de.cau.cs.kieler.kexpressions.RandomizeCall;
import de.cau.cs.kieler.kexpressions.ReferenceCall;
import de.cau.cs.kieler.kexpressions.ReferenceDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleObjectReference;
import de.cau.cs.kieler.kexpressions.SpecialAccessExpression;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ThisExpression;
import de.cau.cs.kieler.kexpressions.ValueTypeReference;
import de.cau.cs.kieler.kexpressions.ValuedObject;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;
import de.cau.cs.kieler.kexpressions.VectorValue;
import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.kexpressions.keffects.PrintCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.RandomizeCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.ReferenceCallEffect;
import de.cau.cs.kieler.kexpressions.kext.AnnotatedExpression;
import de.cau.cs.kieler.kexpressions.kext.ClassDeclaration;
import de.cau.cs.kieler.kexpressions.kext.KExtPackage;
import de.cau.cs.kieler.kexpressions.kext.KExtScope;
import de.cau.cs.kieler.kexpressions.kext.Kext;
import de.cau.cs.kieler.kexpressions.kext.TestEntity;
import de.cau.cs.kieler.kexpressions.kext.serializer.KExtSemanticSequencer;
import de.cau.cs.kieler.lustre.lustre.AState;
import de.cau.cs.kieler.lustre.lustre.ATransition;
import de.cau.cs.kieler.lustre.lustre.AnAction;
import de.cau.cs.kieler.lustre.lustre.Assertion;
import de.cau.cs.kieler.lustre.lustre.Automaton;
import de.cau.cs.kieler.lustre.lustre.Equation;
import de.cau.cs.kieler.lustre.lustre.ExternalNodeDeclaration;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;
import de.cau.cs.kieler.lustre.lustre.LustreProgram;
import de.cau.cs.kieler.lustre.lustre.LustreValuedObject;
import de.cau.cs.kieler.lustre.lustre.LustreVariableDeclaration;
import de.cau.cs.kieler.lustre.lustre.NodeDeclaration;
import de.cau.cs.kieler.lustre.lustre.NodeValuedObject;
import de.cau.cs.kieler.lustre.lustre.StateValuedObject;
import de.cau.cs.kieler.lustre.lustre.TypeDeclaration;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractLustreSemanticSequencer extends KExtSemanticSequencer {

	@Inject
	private LustreGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.COMMENT_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getCommentAnnotationRule()) {
					sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommentAnnotatonSLRule()) {
					sequence_CommentAnnotatonSL(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.PRAGMA:
				sequence_PragmaTag(context, (Pragma) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedKeyStringValueAnnotationRule()) {
					sequence_RestrictedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.STRING_PRAGMA:
				sequence_StringPragma(context, (StringPragma) semanticObject); 
				return; 
			case AnnotationsPackage.TAG_ANNOTATION:
				sequence_TagAnnotation(context, (TagAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()) {
					sequence_RestrictedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KEffectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				if (rule == grammarAccess.getAssignmentRule()) {
					sequence_Assignment(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEffectRule()) {
					sequence_Assignment_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPostfixEffectRule()) {
					sequence_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else break;
			case KEffectsPackage.EMISSION:
				if (rule == grammarAccess.getPureEmissionRule()) {
					sequence_PureEmission(context, (Emission) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEmissionRule()
						|| rule == grammarAccess.getEffectRule()
						|| rule == grammarAccess.getPureOrValuedEmissionRule()) {
					sequence_PureEmission_ValuedEmission(context, (Emission) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedEmissionRule()) {
					sequence_ValuedEmission(context, (Emission) semanticObject); 
					return; 
				}
				else break;
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			case KEffectsPackage.PRINT_CALL_EFFECT:
				sequence_PrintCallEffect(context, (PrintCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.RANDOMIZE_CALL_EFFECT:
				sequence_RandomizeCallEffect(context, (RandomizeCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.REFERENCE_CALL_EFFECT:
				sequence_ReferenceCallEffect(context, (ReferenceCallEffect) semanticObject); 
				return; 
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_BoolValue(context, (BoolValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getBoolValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_BoolValue(context, (BoolValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.EXTERN_STRING:
				sequence_ExternString(context, (ExternString) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_FloatValue(context, (FloatValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getFloatValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_FloatValue(context, (FloatValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.GENERIC_PARAMETER_DECLARATION:
				sequence_GenericParameterDeclaration(context, (GenericParameterDeclaration) semanticObject); 
				return; 
			case KExpressionsPackage.GENERIC_TYPE_REFERENCE:
				if (rule == grammarAccess.getGenericParameter_GenericTypeReference_ParameterizedRule()) {
					sequence_GenericParameter_GenericTypeReference_Parameterized(context, (GenericTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericTypeReferenceRule()) {
					sequence_GenericTypeReference(context, (GenericTypeReference) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.IGNORE_VALUE:
				sequence_IgnoreValue(context, (IgnoreValue) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_IntValue(context, (IntValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getIntValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_IntValue(context, (IntValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.JSON_ANNOTATION:
				sequence_JsonAnnotation(context, (JsonAnnotation) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_ARRAY_VALUE:
				sequence_JsonArrayValue(context, (JsonArrayValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_MEMBER:
				sequence_JsonObjectMember(context, (JsonObjectMember) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_VALUE:
				sequence_JsonObjectValue(context, (JsonObjectValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_PRAGMA:
				sequence_JsonPragma(context, (JsonPragma) semanticObject); 
				return; 
			case KExpressionsPackage.METHOD_DECLARATION:
				if (rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()
						|| rule == grammarAccess.getMethodDeclarationWOSemicolonRule()) {
					sequence_MethodDeclarationWOSemicolon(context, (MethodDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationOrMethodRule()
						|| rule == grammarAccess.getMethodDeclarationRule()) {
					sequence_MethodDeclaration(context, (MethodDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.NULL_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_NullValue(context, (NullValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getJsonValueRule()
						|| rule == grammarAccess.getNullValueRule()) {
					sequence_NullValue(context, (NullValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_AddExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBitwiseOrExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseXOrExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()) {
					sequence_BitwiseAndExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBitwiseNotExpressionRule()) {
					sequence_BitwiseNotExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDivExpressionRule()) {
					sequence_CompareOperation_CurrentExpression_DivExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModExpressionRule()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_ModExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultExpressionRule()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_MultExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSfbyExpressionRule()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SfbyExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftLeftExpressionRule()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftLeftExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftRightExpressionRule()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftRightExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftRightUnsignedExpressionRule()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftRightUnsignedExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SubExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNorAtMostOneExpressionRule()) {
					sequence_NorAtMostOneExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				if (rule == grammarAccess.getGenericParameterRule()) {
					sequence_GenericParameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PRINT_CALL:
				sequence_PrintCall(context, (PrintCall) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOM_CALL:
				sequence_RandomCall(context, (RandomCall) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOMIZE_CALL:
				sequence_RandomizeCall(context, (RandomizeCall) semanticObject); 
				return; 
			case KExpressionsPackage.REFERENCE_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_ReferenceCall(context, (ReferenceCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getReferenceCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_ReferenceCall(context, (ReferenceCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.REFERENCE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()
						|| rule == grammarAccess.getReferenceDeclarationWOSemicolonRule()) {
					sequence_ReferenceDeclarationWOSemicolon(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getDeclarationOrMethodRule()
						|| rule == grammarAccess.getReferenceDeclarationRule()) {
					sequence_ReferenceDeclaration(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()
						|| rule == grammarAccess.getScheduleDeclarationWOSemicolonRule()) {
					sequence_ScheduleDeclarationWOSemicolon(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getDeclarationOrMethodRule()
						|| rule == grammarAccess.getScheduleDeclarationRule()) {
					sequence_ScheduleDeclaration(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_OBJECT_REFERENCE:
				sequence_ScheduleObjectReference(context, (ScheduleObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.SPECIAL_ACCESS_EXPRESSION:
				sequence_SpecialAccessExpression(context, (SpecialAccessExpression) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_StringValue(context, (StringValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getStringValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_StringValue(context, (StringValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.THIS_EXPRESSION:
				sequence_ThisExpression(context, (ThisExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUE_TYPE_REFERENCE:
				sequence_ValueTypeReference(context, (ValueTypeReference) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				if (rule == grammarAccess.getReferenceValuedObjectRule()) {
					sequence_ReferenceValuedObject(context, (ValuedObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSimpleValuedObjectRule()) {
					sequence_SimpleValuedObject(context, (ValuedObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectNoInitRule()) {
					sequence_ValuedObjectNoInit(context, (ValuedObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectRule()) {
					sequence_ValuedObject(context, (ValuedObject) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericParameter_ValuedObjectReference_ArrayRule()) {
					sequence_GenericParameter_ValuedObjectReference_Array(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericParameter_ValuedObjectReference_SubRule()) {
					sequence_GenericParameter_ValuedObjectReference_Sub(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getValuedObjectTestExpressionRule()
						|| rule == grammarAccess.getValuedObjectReferenceRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VARIABLE_DECLARATION:
				if (rule == grammarAccess.getEnumMemberDeclarationRule()) {
					sequence_EnumMemberDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getVariableDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()) {
					sequence_VariableDeclarationWOSemicolon(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getVariableDeclarationRule()
						|| rule == grammarAccess.getDeclarationOrMethodRule()) {
					sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VECTOR_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_VectorValue(context, (VectorValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| action == grammarAccess.getIntDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getLastExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_VectorValue(context, (VectorValue) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KExtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExtPackage.ANNOTATED_EXPRESSION:
				if (rule == grammarAccess.getAnnotatedExpressionRule()) {
					sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotatedJsonExpressionRule()) {
					sequence_AnnotatedJsonExpression(context, (AnnotatedExpression) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.CLASS_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getClassDeclarationWOSemicolonRule()) {
					sequence_ClassDeclarationWOSemicolon(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()) {
					sequence_ClassDeclarationWOSemicolon_EnumDeclarationWOSemicolon(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getClassDeclarationRule()) {
					sequence_ClassDeclaration(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationOrMethodRule()) {
					sequence_ClassDeclaration_EnumDeclaration(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEnumDeclarationWOSemicolonRule()) {
					sequence_EnumDeclarationWOSemicolon(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEnumDeclarationRule()) {
					sequence_EnumDeclaration(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.KEXT_SCOPE:
				if (rule == grammarAccess.getRootScopeRule()) {
					sequence_RootScope(context, (KExtScope) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getScopeRule()) {
					sequence_Scope(context, (KExtScope) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KExtPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if (epackage == LustrePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LustrePackage.ASTATE:
				sequence_AState(context, (AState) semanticObject); 
				return; 
			case LustrePackage.ATRANSITION:
				sequence_ATransition(context, (ATransition) semanticObject); 
				return; 
			case LustrePackage.AN_ACTION:
				sequence_AnAction(context, (AnAction) semanticObject); 
				return; 
			case LustrePackage.ASSERTION:
				sequence_Assertion(context, (Assertion) semanticObject); 
				return; 
			case LustrePackage.AUTOMATON:
				sequence_Automaton(context, (Automaton) semanticObject); 
				return; 
			case LustrePackage.EQUATION:
				sequence_Equation(context, (Equation) semanticObject); 
				return; 
			case LustrePackage.EXTERNAL_NODE_DECLARATION:
				sequence_ExternalNodeDeclaration(context, (ExternalNodeDeclaration) semanticObject); 
				return; 
			case LustrePackage.LUSTRE_PROGRAM:
				sequence_LustreProgram(context, (LustreProgram) semanticObject); 
				return; 
			case LustrePackage.LUSTRE_VALUED_OBJECT:
				sequence_ValuedObjectInit(context, (LustreValuedObject) semanticObject); 
				return; 
			case LustrePackage.LUSTRE_VARIABLE_DECLARATION:
				if (rule == grammarAccess.getVariableDeclarationInitRule()) {
					sequence_VariableDeclarationInit(context, (LustreVariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariableDeclarationNoInitRule()) {
					sequence_VariableDeclarationNoInit(context, (LustreVariableDeclaration) semanticObject); 
					return; 
				}
				else break;
			case LustrePackage.NODE_DECLARATION:
				sequence_NodeDeclaration(context, (NodeDeclaration) semanticObject); 
				return; 
			case LustrePackage.NODE_VALUED_OBJECT:
				sequence_NodeValuedObject(context, (NodeValuedObject) semanticObject); 
				return; 
			case LustrePackage.STATE_VALUED_OBJECT:
				sequence_StateValuedObject(context, (StateValuedObject) semanticObject); 
				return; 
			case LustrePackage.TYPE_DECLARATION:
				sequence_TypeDeclaration(context, (TypeDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AState returns AState
	 *
	 * Constraint:
	 *     (
	 *         initial?='initial'? 
	 *         valuedObject=StateValuedObject 
	 *         (
	 *             (constants+=VariableDeclarationInit constants+=VariableDeclarationInit*) | 
	 *             (variables+=VariableDeclarationInit variables+=VariableDeclarationInit*)
	 *         )* 
	 *         (equations+=Equation | emissions+=Emission | assertions+=Assertion | automatons+=Automaton)* 
	 *         transitions+=ATransition*
	 *     )
	 * </pre>
	 */
	protected void sequence_AState(ISerializationContext context, AState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ATransition returns ATransition
	 *
	 * Constraint:
	 *     (strong?='unless'? actions+=AnAction*)
	 * </pre>
	 */
	protected void sequence_ATransition(ISerializationContext context, ATransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 operator=AddOperator subExpressions+=ProductExpression) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_AddExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AnAction returns AnAction
	 *
	 * Constraint:
	 *     (condition=BoolExpression? (effects+=Equation | effects+=Emission)* history?='resume'? nextState=[StateValuedObject|ID])
	 * </pre>
	 */
	protected void sequence_AnAction(ISerializationContext context, AnAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Assertion returns Assertion
	 *
	 * Constraint:
	 *     expr=Expression
	 * </pre>
	 */
	protected void sequence_Assertion(ISerializationContext context, Assertion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LustrePackage.Literals.ASSERTION__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LustrePackage.Literals.ASSERTION__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssertionAccess().getExprExpressionParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Automaton returns Automaton
	 *
	 * Constraint:
	 *     (name=ID states+=AState states+=AState*)
	 * </pre>
	 */
	protected void sequence_Automaton(ISerializationContext context, Automaton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BitwiseOrExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseXOrExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseXOrExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseAndExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BitwiseNotExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseNotExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *                 operator=MultOperator 
	 *                 subExpressions+=IntDivExpression 
	 *                 subExpressions+=IntDivExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *                 operator=DivOperator 
	 *                 subExpressions+=IntDivExpression 
	 *                 subExpressions+=IntDivExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *                 operator=ModOperator 
	 *                 subExpressions+=IntDivExpression 
	 *                 subExpressions+=IntDivExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *                 operator=IntDivOperator 
	 *                 subExpressions+=NegExpression 
	 *                 subExpressions+=AtomicValuedExpression*
	 *             ) | 
	 *             (operator=SubOperator subExpressions+=NegExpression) | 
	 *             (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *             (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *             (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *             (operator=PreOperator subExpressions+=LastExpression) | 
	 *             (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *             (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *             (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *             (
	 *                 subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *                 operator=ImpliesOperator 
	 *                 subExpressions+=LogicalXorExpression 
	 *                 subExpressions+=LogicalXorExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *                 operator=LogicalXorOperator 
	 *                 subExpressions+=LogicalOrExpression 
	 *                 subExpressions+=LogicalOrExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *                 operator=LogicalOrOperator 
	 *                 subExpressions+=LogicalAndExpression 
	 *                 subExpressions+=LogicalAndExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *                 operator=LogicalAndOperator 
	 *                 subExpressions+=CompareOperation 
	 *                 subExpressions+=CompareOperation*
	 *             ) | 
	 *             ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *             (operator=NotOperator subExpressions+=NotExpression) | 
	 *             (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *             (
	 *                 subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *                 operator=AddOperator 
	 *                 subExpressions+=ProductExpression 
	 *                 subExpressions+=ProductExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *                 operator=SubOperator 
	 *                 subExpressions+=ProductExpression 
	 *                 subExpressions+=ProductExpression*
	 *             ) | 
	 *             ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *         ) 
	 *         schedule+=ScheduleObjectReference?
	 *     )
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DivExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_DivExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_ModExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_MultExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SfbyExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SfbyExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShiftExpressions returns OperatorExpression
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns OperatorExpression
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns OperatorExpression
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShiftLeftExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=ShiftLeftExpression_OperatorExpression_1_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=ShiftRightExpression 
	 *             subExpressions+=ShiftRightExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftLeftExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShiftRightExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=ShiftRightExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=ShiftRightUnsignedExpression 
	 *             subExpressions+=ShiftRightUnsignedExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftRightExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShiftRightUnsignedExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=ShiftRightUnsignedExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_ShiftRightUnsignedExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 operator=SubOperator subExpressions+=ProductExpression) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SubExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProductExpression returns OperatorExpression
	 *     ProductExpression.OperatorExpression_1_0_0 returns OperatorExpression
	 *     ProductExpression.OperatorExpression_1_1_0 returns OperatorExpression
	 *     ProductExpression.OperatorExpression_1_2_0 returns OperatorExpression
	 *     IntDivExpression returns OperatorExpression
	 *     IntDivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     FbyExpression returns OperatorExpression
	 *     FbyExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     WhenExpression returns OperatorExpression
	 *     CurrentExpression returns OperatorExpression
	 *     PreExpression returns OperatorExpression
	 *     LastExpression returns OperatorExpression
	 *     BoolExpression returns OperatorExpression
	 *     InitExpression returns OperatorExpression
	 *     InitExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     TernaryOperation returns OperatorExpression
	 *     ImpliesExpression returns OperatorExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalXorExpression returns OperatorExpression
	 *     LogicalXorExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalOrExpression returns OperatorExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalAndExpression returns OperatorExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     AtomicExpression returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     Root returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     CompareOperation.OperatorExpression_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SumExpression returns OperatorExpression
	 *     SumExpression.OperatorExpression_1_0_0 returns OperatorExpression
	 *     SumExpression.OperatorExpression_1_1_0 returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SfbyExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *     VectorValueMember returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_0_0 
	 *             operator=MultOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_1_0 
	 *             operator=DivOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ProductExpression_OperatorExpression_1_2_0 
	 *             operator=ModOperator 
	 *             subExpressions+=IntDivExpression 
	 *             subExpressions+=IntDivExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=IntDivExpression_OperatorExpression_1_0 
	 *             operator=IntDivOperator 
	 *             subExpressions+=NegExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=WhenExpression subExpressions+=WhenExpression*) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=LastExpression) | 
	 *         (operator=LastOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation*) | 
	 *         (operator=ConditionalOperator subExpressions+=TernaryOperation subExpressions+=TernaryOperation subExpressions+=TernaryOperation) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=ImpliesOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_CompareOperation_CurrentExpression_FbyExpression_ImpliesExpression_InitExpression_IntDivExpression_LastExpression_LogicalAndExpression_LogicalOrExpression_LogicalXorExpression_NegExpression_NorAtMostOneExpression_NotExpression_PreExpression_ProductExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression_WhenExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Equation returns Equation
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (references+=ValuedObjectReference references+=ValuedObjectReference references+=ValuedObjectReference*) | 
	 *             (references+=ValuedObjectReference references+=ValuedObjectReference references+=ValuedObjectReference*) | 
	 *             reference=ValuedObjectReference
	 *         ) 
	 *         operator=AssignOperator 
	 *         expression=Expression
	 *     )
	 * </pre>
	 */
	protected void sequence_Equation(ISerializationContext context, Equation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExternalNodeDeclaration returns ExternalNodeDeclaration
	 *
	 * Constraint:
	 *     (
	 *         isUnsafe?='unsafe'? 
	 *         hasState?='node'? 
	 *         valuedObjects+=NodeValuedObject 
	 *         (inputs+=VariableDeclarationNoInit inputs+=VariableDeclarationNoInit*)? 
	 *         (outputs+=VariableDeclarationNoInit outputs+=VariableDeclarationNoInit*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ExternalNodeDeclaration(ISerializationContext context, ExternalNodeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LustreProgram returns LustreProgram
	 *
	 * Constraint:
	 *     (
	 *         (includes+=STRING | includes+=STRING)+ | 
	 *         (
	 *             (includes+=STRING | includes+=STRING)+ 
	 *             (
	 *                 (constants+=VariableDeclarationInit constants+=VariableDeclarationInit*) | 
	 *                 (types+=TypeDeclaration types+=TypeDeclaration*) | 
	 *                 externals+=ExternalNodeDeclaration | 
	 *                 nodes+=NodeDeclaration
	 *             )+
	 *         )
	 *     )?
	 * </pre>
	 */
	protected void sequence_LustreProgram(ISerializationContext context, LustreProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NodeDeclaration returns NodeDeclaration
	 *
	 * Constraint:
	 *     (
	 *         &lt;unknown&gt; 
	 *         isUnsafe?='unsafe'? 
	 *         hasState?='node'? 
	 *         valuedObjects+=NodeValuedObject 
	 *         (inputs+=VariableDeclarationNoInit inputs+=VariableDeclarationNoInit*)? 
	 *         (outputs+=VariableDeclarationNoInit outputs+=VariableDeclarationNoInit*)? 
	 *         equations+=Equation?
	 *     )
	 * </pre>
	 */
	protected void sequence_NodeDeclaration(ISerializationContext context, NodeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NodeValuedObject returns NodeValuedObject
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_NodeValuedObject(ISerializationContext context, NodeValuedObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeValuedObjectAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NorAtMostOneExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     ((operator=AtMostOneOperator | operator=NorOperator) subExpressions+=Expression subExpressions+=Expression*)
	 * </pre>
	 */
	protected void sequence_NorAtMostOneExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateValuedObject returns StateValuedObject
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_StateValuedObject(ISerializationContext context, StateValuedObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateValuedObjectAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TypeDeclaration returns TypeDeclaration
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             type=ValueType | 
	 *             (type=EnumType enums+=PrimeID enums+=PrimeID*) | 
	 *             (
	 *                 type=StructType 
	 *                 (variables+=VariableDeclarationInit | variables+=VariableDeclarationNoInit) 
	 *                 variables+=VariableDeclarationInit? 
	 *                 (variables+=VariableDeclarationNoInit? variables+=VariableDeclarationInit?)*
	 *             )
	 *         )?
	 *     )
	 * </pre>
	 */
	protected void sequence_TypeDeclaration(ISerializationContext context, TypeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ValuedObjectInit returns LustreValuedObject
	 *
	 * Constraint:
	 *     (name=PrimeID cardinalities+=Expression* type=ValueType initialValue=Expression?)
	 * </pre>
	 */
	protected void sequence_ValuedObjectInit(ISerializationContext context, LustreValuedObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ValuedObjectNoInit returns ValuedObject
	 *
	 * Constraint:
	 *     (name=PrimeID cardinalities+=Expression*)
	 * </pre>
	 */
	protected void sequence_ValuedObjectNoInit(ISerializationContext context, ValuedObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableDeclarationInit returns LustreVariableDeclaration
	 *
	 * Constraint:
	 *     (valuedObjects+=ValuedObjectInit clockExpr=BoolExpression?)
	 * </pre>
	 */
	protected void sequence_VariableDeclarationInit(ISerializationContext context, LustreVariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableDeclarationNoInit returns LustreVariableDeclaration
	 *
	 * Constraint:
	 *     (valuedObjects+=ValuedObjectNoInit valuedObjects+=ValuedObjectNoInit* type=ValueType clockExpr=BoolExpression?)
	 * </pre>
	 */
	protected void sequence_VariableDeclarationNoInit(ISerializationContext context, LustreVariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
