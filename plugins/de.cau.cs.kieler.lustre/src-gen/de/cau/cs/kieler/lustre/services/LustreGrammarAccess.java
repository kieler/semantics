/*
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LustreGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LustreProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LustreProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cIncludesAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cIncludesSTRINGTerminalRuleCall_0_1_0_0 = (RuleCall)cIncludesAssignment_0_1_0.eContents().get(0);
		private final Assignment cIncludesAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cIncludesSTRINGTerminalRuleCall_0_1_1_0 = (RuleCall)cIncludesAssignment_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cConstKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cConstantsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cConstantsVariableDeclarationInitParserRuleCall_1_0_1_0 = (RuleCall)cConstantsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cConstantsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cConstantsVariableDeclarationInitParserRuleCall_1_0_2_1_0 = (RuleCall)cConstantsAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cTypeKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypesTypeDeclarationParserRuleCall_1_1_1_0 = (RuleCall)cTypesAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cTypesTypeDeclarationParserRuleCall_1_1_2_1_0 = (RuleCall)cTypesAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cExternalsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cExternalsExternalNodeDeclarationParserRuleCall_1_2_0 = (RuleCall)cExternalsAssignment_1_2.eContents().get(0);
		private final Assignment cNodesAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cNodesNodeDeclarationParserRuleCall_1_3_0 = (RuleCall)cNodesAssignment_1_3.eContents().get(0);
		
		///**
		// * The syntax for this grammar is extracted from the Lustre V6 reference manual.
		// * http://www-verimag.imag.fr/DIST-TOOLS/SYNCHRONE/lustre-v6/doc/lv6-ref-man.pdf
		// *
		// * @author lgr
		// */
		//LustreProgram hidden(WS, SL_COMMENT, ML_COMMENT):
		//    ('include' (includes+=STRING | includes+=STRING))*
		//    (
		//        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		//        | ('type' types+=TypeDeclaration (';' types+=TypeDeclaration)* ';')
		//        | externals+=ExternalNodeDeclaration
		//        | nodes+=NodeDeclaration
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('include' (includes+=STRING | includes+=STRING))*
		//(
		//    ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		//    | ('type' types+=TypeDeclaration (';' types+=TypeDeclaration)* ';')
		//    | externals+=ExternalNodeDeclaration
		//    | nodes+=NodeDeclaration
		//)*
		public Group getGroup() { return cGroup; }
		
		//('include' (includes+=STRING | includes+=STRING))*
		public Group getGroup_0() { return cGroup_0; }
		
		//'include'
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }
		
		//(includes+=STRING | includes+=STRING)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//includes+=STRING
		public Assignment getIncludesAssignment_0_1_0() { return cIncludesAssignment_0_1_0; }
		
		//STRING
		public RuleCall getIncludesSTRINGTerminalRuleCall_0_1_0_0() { return cIncludesSTRINGTerminalRuleCall_0_1_0_0; }
		
		//includes+=STRING
		public Assignment getIncludesAssignment_0_1_1() { return cIncludesAssignment_0_1_1; }
		
		//STRING
		public RuleCall getIncludesSTRINGTerminalRuleCall_0_1_1_0() { return cIncludesSTRINGTerminalRuleCall_0_1_1_0; }
		
		//(
		//    ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		//    | ('type' types+=TypeDeclaration (';' types+=TypeDeclaration)* ';')
		//    | externals+=ExternalNodeDeclaration
		//    | nodes+=NodeDeclaration
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'const'
		public Keyword getConstKeyword_1_0_0() { return cConstKeyword_1_0_0; }
		
		//constants+=VariableDeclarationInit
		public Assignment getConstantsAssignment_1_0_1() { return cConstantsAssignment_1_0_1; }
		
		//VariableDeclarationInit
		public RuleCall getConstantsVariableDeclarationInitParserRuleCall_1_0_1_0() { return cConstantsVariableDeclarationInitParserRuleCall_1_0_1_0; }
		
		//(';' constants+=VariableDeclarationInit)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_2_0() { return cSemicolonKeyword_1_0_2_0; }
		
		//constants+=VariableDeclarationInit
		public Assignment getConstantsAssignment_1_0_2_1() { return cConstantsAssignment_1_0_2_1; }
		
		//VariableDeclarationInit
		public RuleCall getConstantsVariableDeclarationInitParserRuleCall_1_0_2_1_0() { return cConstantsVariableDeclarationInitParserRuleCall_1_0_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_3() { return cSemicolonKeyword_1_0_3; }
		
		//('type' types+=TypeDeclaration (';' types+=TypeDeclaration)* ';')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'type'
		public Keyword getTypeKeyword_1_1_0() { return cTypeKeyword_1_1_0; }
		
		//types+=TypeDeclaration
		public Assignment getTypesAssignment_1_1_1() { return cTypesAssignment_1_1_1; }
		
		//TypeDeclaration
		public RuleCall getTypesTypeDeclarationParserRuleCall_1_1_1_0() { return cTypesTypeDeclarationParserRuleCall_1_1_1_0; }
		
		//(';' types+=TypeDeclaration)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_2_0() { return cSemicolonKeyword_1_1_2_0; }
		
		//types+=TypeDeclaration
		public Assignment getTypesAssignment_1_1_2_1() { return cTypesAssignment_1_1_2_1; }
		
		//TypeDeclaration
		public RuleCall getTypesTypeDeclarationParserRuleCall_1_1_2_1_0() { return cTypesTypeDeclarationParserRuleCall_1_1_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }
		
		//externals+=ExternalNodeDeclaration
		public Assignment getExternalsAssignment_1_2() { return cExternalsAssignment_1_2; }
		
		//ExternalNodeDeclaration
		public RuleCall getExternalsExternalNodeDeclarationParserRuleCall_1_2_0() { return cExternalsExternalNodeDeclarationParserRuleCall_1_2_0; }
		
		//nodes+=NodeDeclaration
		public Assignment getNodesAssignment_1_3() { return cNodesAssignment_1_3; }
		
		//NodeDeclaration
		public RuleCall getNodesNodeDeclarationParserRuleCall_1_3_0() { return cNodesNodeDeclarationParserRuleCall_1_3_0; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_2_1_0_0 = (RuleCall)cTypeAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cTypeEnumTypeEnumRuleCall_2_1_1_0_0 = (RuleCall)cTypeAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cEnumsAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cEnumsPrimeIDParserRuleCall_2_1_1_2_0 = (RuleCall)cEnumsAssignment_2_1_1_2.eContents().get(0);
		private final Group cGroup_2_1_1_3 = (Group)cGroup_2_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Assignment cEnumsAssignment_2_1_1_3_1 = (Assignment)cGroup_2_1_1_3.eContents().get(1);
		private final RuleCall cEnumsPrimeIDParserRuleCall_2_1_1_3_1_0 = (RuleCall)cEnumsAssignment_2_1_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_1_4 = (Keyword)cGroup_2_1_1.eContents().get(4);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Assignment cTypeAssignment_2_1_2_0 = (Assignment)cGroup_2_1_2.eContents().get(0);
		private final RuleCall cTypeStructTypeEnumRuleCall_2_1_2_0_0 = (RuleCall)cTypeAssignment_2_1_2_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Assignment cVariablesAssignment_2_1_2_2 = (Assignment)cGroup_2_1_2.eContents().get(2);
		private final Alternatives cVariablesAlternatives_2_1_2_2_0 = (Alternatives)cVariablesAssignment_2_1_2_2.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationInitParserRuleCall_2_1_2_2_0_0 = (RuleCall)cVariablesAlternatives_2_1_2_2_0.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationNoInitParserRuleCall_2_1_2_2_0_1 = (RuleCall)cVariablesAlternatives_2_1_2_2_0.eContents().get(1);
		private final Group cGroup_2_1_2_3 = (Group)cGroup_2_1_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_2_1_2_3_0 = (Keyword)cGroup_2_1_2_3.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1_2_3_1 = (Assignment)cGroup_2_1_2_3.eContents().get(1);
		private final Alternatives cVariablesAlternatives_2_1_2_3_1_0 = (Alternatives)cVariablesAssignment_2_1_2_3_1.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationInitParserRuleCall_2_1_2_3_1_0_0 = (RuleCall)cVariablesAlternatives_2_1_2_3_1_0.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationNoInitParserRuleCall_2_1_2_3_1_0_1 = (RuleCall)cVariablesAlternatives_2_1_2_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_2_4 = (Keyword)cGroup_2_1_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_2_1_2_5 = (Keyword)cGroup_2_1_2.eContents().get(5);
		
		//// Type Declaration
		//// TODO: Does not work: this should be a VariableDeclaration too, since it can be a node parameter and thus must be scoped
		//TypeDeclaration:
		//    {TypeDeclaration}
		//    name=ID
		//    ('='
		//        (
		//            type=ValueType
		//            | (type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
		//            // TODO: StructType may also be left empty
		//            | (
		//                type=StructType
		//                '{'
		//                variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		//                (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
		//                (';')?
		//                '}'
		//            )
		//        )
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeDeclaration}
		//name=ID
		//('='
		//    (
		//        type=ValueType
		//        | (type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
		//        // TODO: StructType may also be left empty
		//        | (
		//            type=StructType
		//            '{'
		//            variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		//            (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
		//            (';')?
		//            '}'
		//        )
		//    )
		//)?
		public Group getGroup() { return cGroup; }
		
		//{TypeDeclaration}
		public Action getTypeDeclarationAction_0() { return cTypeDeclarationAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('='
		//    (
		//        type=ValueType
		//        | (type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
		//        // TODO: StructType may also be left empty
		//        | (
		//            type=StructType
		//            '{'
		//            variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		//            (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
		//            (';')?
		//            '}'
		//        )
		//    )
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//(
		//    type=ValueType
		//    | (type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
		//    // TODO: StructType may also be left empty
		//    | (
		//        type=StructType
		//        '{'
		//        variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		//        (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
		//        (';')?
		//        '}'
		//    )
		//)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//type=ValueType
		public Assignment getTypeAssignment_2_1_0() { return cTypeAssignment_2_1_0; }
		
		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_2_1_0_0() { return cTypeValueTypeEnumRuleCall_2_1_0_0; }
		
		//(type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//type=EnumType
		public Assignment getTypeAssignment_2_1_1_0() { return cTypeAssignment_2_1_1_0; }
		
		//EnumType
		public RuleCall getTypeEnumTypeEnumRuleCall_2_1_1_0_0() { return cTypeEnumTypeEnumRuleCall_2_1_1_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_1_1() { return cLeftCurlyBracketKeyword_2_1_1_1; }
		
		//enums+=PrimeID
		public Assignment getEnumsAssignment_2_1_1_2() { return cEnumsAssignment_2_1_1_2; }
		
		//PrimeID
		public RuleCall getEnumsPrimeIDParserRuleCall_2_1_1_2_0() { return cEnumsPrimeIDParserRuleCall_2_1_1_2_0; }
		
		//(',' enums+=PrimeID)*
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_3_0() { return cCommaKeyword_2_1_1_3_0; }
		
		//enums+=PrimeID
		public Assignment getEnumsAssignment_2_1_1_3_1() { return cEnumsAssignment_2_1_1_3_1; }
		
		//PrimeID
		public RuleCall getEnumsPrimeIDParserRuleCall_2_1_1_3_1_0() { return cEnumsPrimeIDParserRuleCall_2_1_1_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_1_4() { return cRightCurlyBracketKeyword_2_1_1_4; }
		
		//(
		//               type=StructType
		//               '{'
		//               variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		//               (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
		//               (';')?
		//               '}'
		//           )
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//type=StructType
		public Assignment getTypeAssignment_2_1_2_0() { return cTypeAssignment_2_1_2_0; }
		
		//StructType
		public RuleCall getTypeStructTypeEnumRuleCall_2_1_2_0_0() { return cTypeStructTypeEnumRuleCall_2_1_2_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_2_1() { return cLeftCurlyBracketKeyword_2_1_2_1; }
		
		//variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		public Assignment getVariablesAssignment_2_1_2_2() { return cVariablesAssignment_2_1_2_2; }
		
		//(VariableDeclarationInit|VariableDeclarationNoInit)
		public Alternatives getVariablesAlternatives_2_1_2_2_0() { return cVariablesAlternatives_2_1_2_2_0; }
		
		//VariableDeclarationInit
		public RuleCall getVariablesVariableDeclarationInitParserRuleCall_2_1_2_2_0_0() { return cVariablesVariableDeclarationInitParserRuleCall_2_1_2_2_0_0; }
		
		//VariableDeclarationNoInit
		public RuleCall getVariablesVariableDeclarationNoInitParserRuleCall_2_1_2_2_0_1() { return cVariablesVariableDeclarationNoInitParserRuleCall_2_1_2_2_0_1; }
		
		//(';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
		public Group getGroup_2_1_2_3() { return cGroup_2_1_2_3; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_2_3_0() { return cSemicolonKeyword_2_1_2_3_0; }
		
		//variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		public Assignment getVariablesAssignment_2_1_2_3_1() { return cVariablesAssignment_2_1_2_3_1; }
		
		//(VariableDeclarationInit|VariableDeclarationNoInit)
		public Alternatives getVariablesAlternatives_2_1_2_3_1_0() { return cVariablesAlternatives_2_1_2_3_1_0; }
		
		//VariableDeclarationInit
		public RuleCall getVariablesVariableDeclarationInitParserRuleCall_2_1_2_3_1_0_0() { return cVariablesVariableDeclarationInitParserRuleCall_2_1_2_3_1_0_0; }
		
		//VariableDeclarationNoInit
		public RuleCall getVariablesVariableDeclarationNoInitParserRuleCall_2_1_2_3_1_0_1() { return cVariablesVariableDeclarationNoInitParserRuleCall_2_1_2_3_1_0_1; }
		
		//(';')?
		public Keyword getSemicolonKeyword_2_1_2_4() { return cSemicolonKeyword_2_1_2_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2_5() { return cRightCurlyBracketKeyword_2_1_2_5; }
	}
	public class ExternalNodeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ExternalNodeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternalNodeDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsUnsafeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsUnsafeUnsafeKeyword_1_0 = (Keyword)cIsUnsafeAssignment_1.eContents().get(0);
		private final Keyword cExternKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cFunctionKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Assignment cHasStateAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cHasStateNodeKeyword_3_1_0 = (Keyword)cHasStateAssignment_3_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuedObjectsNodeValuedObjectParserRuleCall_4_0 = (RuleCall)cValuedObjectsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cInputsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cInputsVariableDeclarationNoInitParserRuleCall_5_0_1_0 = (RuleCall)cInputsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cInputsAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cInputsVariableDeclarationNoInitParserRuleCall_5_0_2_1_0 = (RuleCall)cInputsAssignment_5_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cReturnsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cOutputsAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cOutputsVariableDeclarationNoInitParserRuleCall_7_0_1_0 = (RuleCall)cOutputsAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_0_2 = (Group)cGroup_7_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_0_2_0 = (Keyword)cGroup_7_0_2.eContents().get(0);
		private final Assignment cOutputsAssignment_7_0_2_1 = (Assignment)cGroup_7_0_2.eContents().get(1);
		private final RuleCall cOutputsVariableDeclarationNoInitParserRuleCall_7_0_2_1_0 = (RuleCall)cOutputsAssignment_7_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_0_3 = (Keyword)cGroup_7_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// External Node Declaration
		//ExternalNodeDeclaration returns kexpressions::Declaration:
		//    {ExternalNodeDeclaration}
		//    (isUnsafe?='unsafe')? 'extern' ('function' | hasState?='node')
		//    valuedObjects+=NodeValuedObject
		//    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
		//    'returns'
		//    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
		//    (';')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExternalNodeDeclaration}
		//(isUnsafe?='unsafe')? 'extern' ('function' | hasState?='node')
		//valuedObjects+=NodeValuedObject
		//('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
		//'returns'
		//('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
		//(';')?
		public Group getGroup() { return cGroup; }
		
		//{ExternalNodeDeclaration}
		public Action getExternalNodeDeclarationAction_0() { return cExternalNodeDeclarationAction_0; }
		
		//(isUnsafe?='unsafe')?
		public Assignment getIsUnsafeAssignment_1() { return cIsUnsafeAssignment_1; }
		
		//'unsafe'
		public Keyword getIsUnsafeUnsafeKeyword_1_0() { return cIsUnsafeUnsafeKeyword_1_0; }
		
		//'extern'
		public Keyword getExternKeyword_2() { return cExternKeyword_2; }
		
		//('function' | hasState?='node')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'function'
		public Keyword getFunctionKeyword_3_0() { return cFunctionKeyword_3_0; }
		
		//hasState?='node'
		public Assignment getHasStateAssignment_3_1() { return cHasStateAssignment_3_1; }
		
		//'node'
		public Keyword getHasStateNodeKeyword_3_1_0() { return cHasStateNodeKeyword_3_1_0; }
		
		//valuedObjects+=NodeValuedObject
		public Assignment getValuedObjectsAssignment_4() { return cValuedObjectsAssignment_4; }
		
		//NodeValuedObject
		public RuleCall getValuedObjectsNodeValuedObjectParserRuleCall_4_0() { return cValuedObjectsNodeValuedObjectParserRuleCall_4_0; }
		
		//('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//inputs+=VariableDeclarationNoInit
		public Assignment getInputsAssignment_5_0_1() { return cInputsAssignment_5_0_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getInputsVariableDeclarationNoInitParserRuleCall_5_0_1_0() { return cInputsVariableDeclarationNoInitParserRuleCall_5_0_1_0; }
		
		//(';' inputs+=VariableDeclarationNoInit)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0_2_0() { return cSemicolonKeyword_5_0_2_0; }
		
		//inputs+=VariableDeclarationNoInit
		public Assignment getInputsAssignment_5_0_2_1() { return cInputsAssignment_5_0_2_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getInputsVariableDeclarationNoInitParserRuleCall_5_0_2_1_0() { return cInputsVariableDeclarationNoInitParserRuleCall_5_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_3() { return cRightParenthesisKeyword_5_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_5_1() { return cLeftParenthesisRightParenthesisKeyword_5_1; }
		
		//'returns'
		public Keyword getReturnsKeyword_6() { return cReturnsKeyword_6; }
		
		//('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')'
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0_0() { return cLeftParenthesisKeyword_7_0_0; }
		
		//outputs+=VariableDeclarationNoInit
		public Assignment getOutputsAssignment_7_0_1() { return cOutputsAssignment_7_0_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getOutputsVariableDeclarationNoInitParserRuleCall_7_0_1_0() { return cOutputsVariableDeclarationNoInitParserRuleCall_7_0_1_0; }
		
		//(';' outputs+=VariableDeclarationNoInit)*
		public Group getGroup_7_0_2() { return cGroup_7_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_7_0_2_0() { return cSemicolonKeyword_7_0_2_0; }
		
		//outputs+=VariableDeclarationNoInit
		public Assignment getOutputsAssignment_7_0_2_1() { return cOutputsAssignment_7_0_2_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getOutputsVariableDeclarationNoInitParserRuleCall_7_0_2_1_0() { return cOutputsVariableDeclarationNoInitParserRuleCall_7_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_0_3() { return cRightParenthesisKeyword_7_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_7_1() { return cLeftParenthesisRightParenthesisKeyword_7_1; }
		
		//(';')?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class VariableDeclarationNoInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.VariableDeclarationNoInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLustreVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectNoInitParserRuleCall_1_0 = (RuleCall)cValuedObjectsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectNoInitParserRuleCall_2_1_0 = (RuleCall)cValuedObjectsAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeValueTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cClockExprAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cClockExprBoolExpressionParserRuleCall_5_1_0 = (RuleCall)cClockExprAssignment_5_1.eContents().get(0);
		
		//VariableDeclarationNoInit returns kexpressions::VariableDeclaration:
		//    {LustreVariableDeclaration}
		//    valuedObjects+=ValuedObjectNoInit (',' valuedObjects+=ValuedObjectNoInit)* ':' type=ValueType ('when' clockExpr=BoolExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LustreVariableDeclaration}
		//valuedObjects+=ValuedObjectNoInit (',' valuedObjects+=ValuedObjectNoInit)* ':' type=ValueType ('when' clockExpr=BoolExpression)?
		public Group getGroup() { return cGroup; }
		
		//{LustreVariableDeclaration}
		public Action getLustreVariableDeclarationAction_0() { return cLustreVariableDeclarationAction_0; }
		
		//valuedObjects+=ValuedObjectNoInit
		public Assignment getValuedObjectsAssignment_1() { return cValuedObjectsAssignment_1; }
		
		//ValuedObjectNoInit
		public RuleCall getValuedObjectsValuedObjectNoInitParserRuleCall_1_0() { return cValuedObjectsValuedObjectNoInitParserRuleCall_1_0; }
		
		//(',' valuedObjects+=ValuedObjectNoInit)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//valuedObjects+=ValuedObjectNoInit
		public Assignment getValuedObjectsAssignment_2_1() { return cValuedObjectsAssignment_2_1; }
		
		//ValuedObjectNoInit
		public RuleCall getValuedObjectsValuedObjectNoInitParserRuleCall_2_1_0() { return cValuedObjectsValuedObjectNoInitParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=ValueType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_4_0() { return cTypeValueTypeEnumRuleCall_4_0; }
		
		//('when' clockExpr=BoolExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'when'
		public Keyword getWhenKeyword_5_0() { return cWhenKeyword_5_0; }
		
		//clockExpr=BoolExpression
		public Assignment getClockExprAssignment_5_1() { return cClockExprAssignment_5_1; }
		
		//BoolExpression
		public RuleCall getClockExprBoolExpressionParserRuleCall_5_1_0() { return cClockExprBoolExpressionParserRuleCall_5_1_0; }
	}
	public class VariableDeclarationInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.VariableDeclarationInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLustreVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectInitParserRuleCall_1_0 = (RuleCall)cValuedObjectsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClockExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClockExprBoolExpressionParserRuleCall_2_1_0 = (RuleCall)cClockExprAssignment_2_1.eContents().get(0);
		
		//VariableDeclarationInit returns kexpressions::VariableDeclaration:
		//    {LustreVariableDeclaration}
		//    valuedObjects+=ValuedObjectInit ('when' clockExpr=BoolExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LustreVariableDeclaration}
		//valuedObjects+=ValuedObjectInit ('when' clockExpr=BoolExpression)?
		public Group getGroup() { return cGroup; }
		
		//{LustreVariableDeclaration}
		public Action getLustreVariableDeclarationAction_0() { return cLustreVariableDeclarationAction_0; }
		
		//valuedObjects+=ValuedObjectInit
		public Assignment getValuedObjectsAssignment_1() { return cValuedObjectsAssignment_1; }
		
		//ValuedObjectInit
		public RuleCall getValuedObjectsValuedObjectInitParserRuleCall_1_0() { return cValuedObjectsValuedObjectInitParserRuleCall_1_0; }
		
		//('when' clockExpr=BoolExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//clockExpr=BoolExpression
		public Assignment getClockExprAssignment_2_1() { return cClockExprAssignment_2_1; }
		
		//BoolExpression
		public RuleCall getClockExprBoolExpressionParserRuleCall_2_1_0() { return cClockExprBoolExpressionParserRuleCall_2_1_0; }
	}
	public class ValuedObjectNoInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ValuedObjectNoInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePrimeIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCardinalitiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCardinalitiesExpressionParserRuleCall_1_1_0 = (RuleCall)cCardinalitiesAssignment_1_1.eContents().get(0);
		
		//ValuedObjectNoInit returns kexpressions::ValuedObject:
		//    name=PrimeID
		//    ('^' cardinalities+=Expression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrimeID
		//('^' cardinalities+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//name=PrimeID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_0_0() { return cNamePrimeIDParserRuleCall_0_0; }
		
		//('^' cardinalities+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }
		
		//cardinalities+=Expression
		public Assignment getCardinalitiesAssignment_1_1() { return cCardinalitiesAssignment_1_1; }
		
		//Expression
		public RuleCall getCardinalitiesExpressionParserRuleCall_1_1_0() { return cCardinalitiesExpressionParserRuleCall_1_1_0; }
	}
	public class ValuedObjectInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ValuedObjectInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLustreValuedObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrimeIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalitiesExpressionParserRuleCall_2_1_0 = (RuleCall)cCardinalitiesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_4_1_0 = (RuleCall)cInitialValueAssignment_4_1.eContents().get(0);
		
		//ValuedObjectInit returns kexpressions::ValuedObject:
		//    {LustreValuedObject}
		//    name=PrimeID
		//    ('^' cardinalities+=Expression)*
		//    (':' type=ValueType)
		//    ('=' initialValue=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LustreValuedObject}
		//name=PrimeID
		//('^' cardinalities+=Expression)*
		//(':' type=ValueType)
		//('=' initialValue=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{LustreValuedObject}
		public Action getLustreValuedObjectAction_0() { return cLustreValuedObjectAction_0; }
		
		//name=PrimeID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_1_0() { return cNamePrimeIDParserRuleCall_1_0; }
		
		//('^' cardinalities+=Expression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_2_0() { return cCircumflexAccentKeyword_2_0; }
		
		//cardinalities+=Expression
		public Assignment getCardinalitiesAssignment_2_1() { return cCardinalitiesAssignment_2_1; }
		
		//Expression
		public RuleCall getCardinalitiesExpressionParserRuleCall_2_1_0() { return cCardinalitiesExpressionParserRuleCall_2_1_0; }
		
		//(':' type=ValueType)
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//type=ValueType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_3_1_0() { return cTypeValueTypeEnumRuleCall_3_1_0; }
		
		//('=' initialValue=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_4_1() { return cInitialValueAssignment_4_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_4_1_0() { return cInitialValueExpressionParserRuleCall_4_1_0; }
	}
	public class NodeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.NodeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsUnsafeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsUnsafeUnsafeKeyword_1_0 = (Keyword)cIsUnsafeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cFunctionKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cHasStateAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cHasStateNodeKeyword_2_1_0 = (Keyword)cHasStateAssignment_2_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuedObjectsNodeValuedObjectParserRuleCall_3_0 = (RuleCall)cValuedObjectsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cInputsAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cInputsVariableDeclarationNoInitParserRuleCall_4_0_1_0 = (RuleCall)cInputsAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_0_2 = (Group)cGroup_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_0_2_0 = (Keyword)cGroup_4_0_2.eContents().get(0);
		private final Assignment cInputsAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final RuleCall cInputsVariableDeclarationNoInitParserRuleCall_4_0_2_1_0 = (RuleCall)cInputsAssignment_4_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_3 = (Keyword)cGroup_4_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cOutputsAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cOutputsVariableDeclarationNoInitParserRuleCall_6_0_1_0 = (RuleCall)cOutputsAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cOutputsAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cOutputsVariableDeclarationNoInitParserRuleCall_6_0_2_1_0 = (RuleCall)cOutputsAssignment_6_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_0_3 = (Keyword)cGroup_6_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cConstKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cConstantsAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cConstantsVariableDeclarationInitParserRuleCall_8_0_1_0 = (RuleCall)cConstantsAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_0_2 = (Group)cGroup_8_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_0_2_0 = (Keyword)cGroup_8_0_2.eContents().get(0);
		private final Assignment cConstantsAssignment_8_0_2_1 = (Assignment)cGroup_8_0_2.eContents().get(1);
		private final RuleCall cConstantsVariableDeclarationInitParserRuleCall_8_0_2_1_0 = (RuleCall)cConstantsAssignment_8_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_0_3 = (Keyword)cGroup_8_0.eContents().get(3);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cVarKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cVariablesAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final Alternatives cVariablesAlternatives_8_1_1_0 = (Alternatives)cVariablesAssignment_8_1_1.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationInitParserRuleCall_8_1_1_0_0 = (RuleCall)cVariablesAlternatives_8_1_1_0.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationNoInitParserRuleCall_8_1_1_0_1 = (RuleCall)cVariablesAlternatives_8_1_1_0.eContents().get(1);
		private final Group cGroup_8_1_2 = (Group)cGroup_8_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_8_1_2_0 = (Keyword)cGroup_8_1_2.eContents().get(0);
		private final Assignment cVariablesAssignment_8_1_2_1 = (Assignment)cGroup_8_1_2.eContents().get(1);
		private final Alternatives cVariablesAlternatives_8_1_2_1_0 = (Alternatives)cVariablesAssignment_8_1_2_1.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationInitParserRuleCall_8_1_2_1_0_0 = (RuleCall)cVariablesAlternatives_8_1_2_1_0.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationNoInitParserRuleCall_8_1_2_1_0_1 = (RuleCall)cVariablesAlternatives_8_1_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_1_3 = (Keyword)cGroup_8_1.eContents().get(3);
		private final Keyword cLetKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cEquationsAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cEquationsEquationParserRuleCall_10_0_0 = (RuleCall)cEquationsAssignment_10_0.eContents().get(0);
		private final Assignment cEmissionsAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cEmissionsEmissionParserRuleCall_10_1_0 = (RuleCall)cEmissionsAssignment_10_1.eContents().get(0);
		private final Assignment cAssertionsAssignment_10_2 = (Assignment)cAlternatives_10.eContents().get(2);
		private final RuleCall cAssertionsAssertionParserRuleCall_10_2_0 = (RuleCall)cAssertionsAssignment_10_2.eContents().get(0);
		private final Assignment cAutomatonsAssignment_10_3 = (Assignment)cAlternatives_10.eContents().get(3);
		private final RuleCall cAutomatonsAutomatonParserRuleCall_10_3_0 = (RuleCall)cAutomatonsAssignment_10_3.eContents().get(0);
		private final Keyword cTelKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Keyword cFullStopKeyword_12_0 = (Keyword)cAlternatives_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1 = (Keyword)cAlternatives_12.eContents().get(1);
		
		//// Node Declaration
		//NodeDeclaration returns kexpressions::Declaration:
		//    {NodeDeclaration}
		//    (isUnsafe?='unsafe')? ('function' | hasState?='node')
		//    valuedObjects+=NodeValuedObject
		//    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
		//    'returns'
		//    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
		//    ';'?
		//    (
		//        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		//        | ('var' variables+=(VariableDeclarationInit|VariableDeclarationNoInit) (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* ';')
		//    )*
		//    'let'
		//    (
		//        equations+=Equation
		//        | emissions+=Emission
		//        | assertions+=Assertion
		//        | automatons+=Automaton
		//    )*
		//    'tel'
		//    ('.' | (';')?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeDeclaration}
		//(isUnsafe?='unsafe')? ('function' | hasState?='node')
		//valuedObjects+=NodeValuedObject
		//('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
		//'returns'
		//('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
		//';'?
		//(
		//    ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		//    | ('var' variables+=(VariableDeclarationInit|VariableDeclarationNoInit) (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* ';')
		//)*
		//'let'
		//(
		//    equations+=Equation
		//    | emissions+=Emission
		//    | assertions+=Assertion
		//    | automatons+=Automaton
		//)*
		//'tel'
		//('.' | (';')?)
		public Group getGroup() { return cGroup; }
		
		//{NodeDeclaration}
		public Action getNodeDeclarationAction_0() { return cNodeDeclarationAction_0; }
		
		//(isUnsafe?='unsafe')?
		public Assignment getIsUnsafeAssignment_1() { return cIsUnsafeAssignment_1; }
		
		//'unsafe'
		public Keyword getIsUnsafeUnsafeKeyword_1_0() { return cIsUnsafeUnsafeKeyword_1_0; }
		
		//('function' | hasState?='node')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'function'
		public Keyword getFunctionKeyword_2_0() { return cFunctionKeyword_2_0; }
		
		//hasState?='node'
		public Assignment getHasStateAssignment_2_1() { return cHasStateAssignment_2_1; }
		
		//'node'
		public Keyword getHasStateNodeKeyword_2_1_0() { return cHasStateNodeKeyword_2_1_0; }
		
		//valuedObjects+=NodeValuedObject
		public Assignment getValuedObjectsAssignment_3() { return cValuedObjectsAssignment_3; }
		
		//NodeValuedObject
		public RuleCall getValuedObjectsNodeValuedObjectParserRuleCall_3_0() { return cValuedObjectsNodeValuedObjectParserRuleCall_3_0; }
		
		//('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }
		
		//inputs+=VariableDeclarationNoInit
		public Assignment getInputsAssignment_4_0_1() { return cInputsAssignment_4_0_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getInputsVariableDeclarationNoInitParserRuleCall_4_0_1_0() { return cInputsVariableDeclarationNoInitParserRuleCall_4_0_1_0; }
		
		//(';' inputs+=VariableDeclarationNoInit)*
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0_2_0() { return cSemicolonKeyword_4_0_2_0; }
		
		//inputs+=VariableDeclarationNoInit
		public Assignment getInputsAssignment_4_0_2_1() { return cInputsAssignment_4_0_2_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getInputsVariableDeclarationNoInitParserRuleCall_4_0_2_1_0() { return cInputsVariableDeclarationNoInitParserRuleCall_4_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_0_3() { return cRightParenthesisKeyword_4_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_4_1() { return cLeftParenthesisRightParenthesisKeyword_4_1; }
		
		//'returns'
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }
		
		//('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')'
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0_0() { return cLeftParenthesisKeyword_6_0_0; }
		
		//outputs+=VariableDeclarationNoInit
		public Assignment getOutputsAssignment_6_0_1() { return cOutputsAssignment_6_0_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getOutputsVariableDeclarationNoInitParserRuleCall_6_0_1_0() { return cOutputsVariableDeclarationNoInitParserRuleCall_6_0_1_0; }
		
		//(';' outputs+=VariableDeclarationNoInit)*
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_6_0_2_0() { return cSemicolonKeyword_6_0_2_0; }
		
		//outputs+=VariableDeclarationNoInit
		public Assignment getOutputsAssignment_6_0_2_1() { return cOutputsAssignment_6_0_2_1; }
		
		//VariableDeclarationNoInit
		public RuleCall getOutputsVariableDeclarationNoInitParserRuleCall_6_0_2_1_0() { return cOutputsVariableDeclarationNoInitParserRuleCall_6_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_0_3() { return cRightParenthesisKeyword_6_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_6_1() { return cLeftParenthesisRightParenthesisKeyword_6_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//(
		//    ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		//    | ('var' variables+=(VariableDeclarationInit|VariableDeclarationNoInit) (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* ';')
		//)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'const'
		public Keyword getConstKeyword_8_0_0() { return cConstKeyword_8_0_0; }
		
		//constants+=VariableDeclarationInit
		public Assignment getConstantsAssignment_8_0_1() { return cConstantsAssignment_8_0_1; }
		
		//VariableDeclarationInit
		public RuleCall getConstantsVariableDeclarationInitParserRuleCall_8_0_1_0() { return cConstantsVariableDeclarationInitParserRuleCall_8_0_1_0; }
		
		//(';' constants+=VariableDeclarationInit)*
		public Group getGroup_8_0_2() { return cGroup_8_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_0_2_0() { return cSemicolonKeyword_8_0_2_0; }
		
		//constants+=VariableDeclarationInit
		public Assignment getConstantsAssignment_8_0_2_1() { return cConstantsAssignment_8_0_2_1; }
		
		//VariableDeclarationInit
		public RuleCall getConstantsVariableDeclarationInitParserRuleCall_8_0_2_1_0() { return cConstantsVariableDeclarationInitParserRuleCall_8_0_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8_0_3() { return cSemicolonKeyword_8_0_3; }
		
		//('var' variables+=(VariableDeclarationInit|VariableDeclarationNoInit) (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* ';')
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'var'
		public Keyword getVarKeyword_8_1_0() { return cVarKeyword_8_1_0; }
		
		//variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		public Assignment getVariablesAssignment_8_1_1() { return cVariablesAssignment_8_1_1; }
		
		//(VariableDeclarationInit|VariableDeclarationNoInit)
		public Alternatives getVariablesAlternatives_8_1_1_0() { return cVariablesAlternatives_8_1_1_0; }
		
		//VariableDeclarationInit
		public RuleCall getVariablesVariableDeclarationInitParserRuleCall_8_1_1_0_0() { return cVariablesVariableDeclarationInitParserRuleCall_8_1_1_0_0; }
		
		//VariableDeclarationNoInit
		public RuleCall getVariablesVariableDeclarationNoInitParserRuleCall_8_1_1_0_1() { return cVariablesVariableDeclarationNoInitParserRuleCall_8_1_1_0_1; }
		
		//(';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
		public Group getGroup_8_1_2() { return cGroup_8_1_2; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1_2_0() { return cSemicolonKeyword_8_1_2_0; }
		
		//variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
		public Assignment getVariablesAssignment_8_1_2_1() { return cVariablesAssignment_8_1_2_1; }
		
		//(VariableDeclarationInit|VariableDeclarationNoInit)
		public Alternatives getVariablesAlternatives_8_1_2_1_0() { return cVariablesAlternatives_8_1_2_1_0; }
		
		//VariableDeclarationInit
		public RuleCall getVariablesVariableDeclarationInitParserRuleCall_8_1_2_1_0_0() { return cVariablesVariableDeclarationInitParserRuleCall_8_1_2_1_0_0; }
		
		//VariableDeclarationNoInit
		public RuleCall getVariablesVariableDeclarationNoInitParserRuleCall_8_1_2_1_0_1() { return cVariablesVariableDeclarationNoInitParserRuleCall_8_1_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1_3() { return cSemicolonKeyword_8_1_3; }
		
		//'let'
		public Keyword getLetKeyword_9() { return cLetKeyword_9; }
		
		//(
		//    equations+=Equation
		//    | emissions+=Emission
		//    | assertions+=Assertion
		//    | automatons+=Automaton
		//)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//equations+=Equation
		public Assignment getEquationsAssignment_10_0() { return cEquationsAssignment_10_0; }
		
		//Equation
		public RuleCall getEquationsEquationParserRuleCall_10_0_0() { return cEquationsEquationParserRuleCall_10_0_0; }
		
		//emissions+=Emission
		public Assignment getEmissionsAssignment_10_1() { return cEmissionsAssignment_10_1; }
		
		//Emission
		public RuleCall getEmissionsEmissionParserRuleCall_10_1_0() { return cEmissionsEmissionParserRuleCall_10_1_0; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_10_2() { return cAssertionsAssignment_10_2; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_10_2_0() { return cAssertionsAssertionParserRuleCall_10_2_0; }
		
		//automatons+=Automaton
		public Assignment getAutomatonsAssignment_10_3() { return cAutomatonsAssignment_10_3; }
		
		//Automaton
		public RuleCall getAutomatonsAutomatonParserRuleCall_10_3_0() { return cAutomatonsAutomatonParserRuleCall_10_3_0; }
		
		//'tel'
		public Keyword getTelKeyword_11() { return cTelKeyword_11; }
		
		//('.' | (';')?)
		public Alternatives getAlternatives_12() { return cAlternatives_12; }
		
		//'.'
		public Keyword getFullStopKeyword_12_0() { return cFullStopKeyword_12_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_12_1() { return cSemicolonKeyword_12_1; }
	}
	public class NodeValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.NodeValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeValuedObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NodeValuedObject returns kexpressions::ValuedObject:
		//    {NodeValuedObject}
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeValuedObject}
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//{NodeValuedObject}
		public Action getNodeValuedObjectAction_0() { return cNodeValuedObjectAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cReferencesAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cReferencesValuedObjectReferenceParserRuleCall_1_0_1_0 = (RuleCall)cReferencesAssignment_1_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cReferencesAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cReferencesValuedObjectReferenceParserRuleCall_1_0_3_0 = (RuleCall)cReferencesAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Keyword cCommaKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Assignment cReferencesAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cReferencesValuedObjectReferenceParserRuleCall_1_0_4_1_0 = (RuleCall)cReferencesAssignment_1_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cReferencesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cReferencesValuedObjectReferenceParserRuleCall_1_1_0_0 = (RuleCall)cReferencesAssignment_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cReferencesAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cReferencesValuedObjectReferenceParserRuleCall_1_1_2_0 = (RuleCall)cReferencesAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cReferencesAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cReferencesValuedObjectReferenceParserRuleCall_1_1_3_1_0 = (RuleCall)cReferencesAssignment_1_1_3_1.eContents().get(0);
		private final Assignment cReferenceAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cReferenceValuedObjectReferenceParserRuleCall_1_2_0 = (RuleCall)cReferenceAssignment_1_2.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorAssignOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equation returns keffects::Assignment:
		//    {Equation}
		//    (
		//        // Left side: (x, y, ...) or x, y, ... or x
		//        ('(' references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)* ')')
		//        | (references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)*)
		//        | reference=ValuedObjectReference
		//    )
		//    operator=AssignOperator
		//    expression=Expression
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Equation}
		//(
		//    // Left side: (x, y, ...) or x, y, ... or x
		//    ('(' references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)* ')')
		//    | (references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)*)
		//    | reference=ValuedObjectReference
		//)
		//operator=AssignOperator
		//expression=Expression
		//';'
		public Group getGroup() { return cGroup; }
		
		//{Equation}
		public Action getEquationAction_0() { return cEquationAction_0; }
		
		//(
		//    // Left side: (x, y, ...) or x, y, ... or x
		//    ('(' references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)* ')')
		//    | (references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)*)
		//    | reference=ValuedObjectReference
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//// Left side: (x, y, ...) or x, y, ... or x
		//('(' references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)* ')')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//references+=ValuedObjectReference
		public Assignment getReferencesAssignment_1_0_1() { return cReferencesAssignment_1_0_1; }
		
		//ValuedObjectReference
		public RuleCall getReferencesValuedObjectReferenceParserRuleCall_1_0_1_0() { return cReferencesValuedObjectReferenceParserRuleCall_1_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_2() { return cCommaKeyword_1_0_2; }
		
		//references+=ValuedObjectReference
		public Assignment getReferencesAssignment_1_0_3() { return cReferencesAssignment_1_0_3; }
		
		//ValuedObjectReference
		public RuleCall getReferencesValuedObjectReferenceParserRuleCall_1_0_3_0() { return cReferencesValuedObjectReferenceParserRuleCall_1_0_3_0; }
		
		//(',' references+=ValuedObjectReference)*
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//','
		public Keyword getCommaKeyword_1_0_4_0() { return cCommaKeyword_1_0_4_0; }
		
		//references+=ValuedObjectReference
		public Assignment getReferencesAssignment_1_0_4_1() { return cReferencesAssignment_1_0_4_1; }
		
		//ValuedObjectReference
		public RuleCall getReferencesValuedObjectReferenceParserRuleCall_1_0_4_1_0() { return cReferencesValuedObjectReferenceParserRuleCall_1_0_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }
		
		//(references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//references+=ValuedObjectReference
		public Assignment getReferencesAssignment_1_1_0() { return cReferencesAssignment_1_1_0; }
		
		//ValuedObjectReference
		public RuleCall getReferencesValuedObjectReferenceParserRuleCall_1_1_0_0() { return cReferencesValuedObjectReferenceParserRuleCall_1_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }
		
		//references+=ValuedObjectReference
		public Assignment getReferencesAssignment_1_1_2() { return cReferencesAssignment_1_1_2; }
		
		//ValuedObjectReference
		public RuleCall getReferencesValuedObjectReferenceParserRuleCall_1_1_2_0() { return cReferencesValuedObjectReferenceParserRuleCall_1_1_2_0; }
		
		//(',' references+=ValuedObjectReference)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_1_3_0() { return cCommaKeyword_1_1_3_0; }
		
		//references+=ValuedObjectReference
		public Assignment getReferencesAssignment_1_1_3_1() { return cReferencesAssignment_1_1_3_1; }
		
		//ValuedObjectReference
		public RuleCall getReferencesValuedObjectReferenceParserRuleCall_1_1_3_1_0() { return cReferencesValuedObjectReferenceParserRuleCall_1_1_3_1_0; }
		
		//reference=ValuedObjectReference
		public Assignment getReferenceAssignment_1_2() { return cReferenceAssignment_1_2; }
		
		//ValuedObjectReference
		public RuleCall getReferenceValuedObjectReferenceParserRuleCall_1_2_0() { return cReferenceValuedObjectReferenceParserRuleCall_1_2_0; }
		
		//operator=AssignOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//AssignOperator
		public RuleCall getOperatorAssignOperatorEnumRuleCall_2_0() { return cOperatorAssignOperatorEnumRuleCall_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class EmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.Emission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cValuedEmissionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPureEmissionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Emission returns keffects::Emission:
		//    'emit' (ValuedEmission | PureEmission) ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'emit' (ValuedEmission | PureEmission) ';'
		public Group getGroup() { return cGroup; }
		
		//'emit'
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }
		
		//(ValuedEmission | PureEmission)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ValuedEmission
		public RuleCall getValuedEmissionParserRuleCall_1_0() { return cValuedEmissionParserRuleCall_1_0; }
		
		//PureEmission
		public RuleCall getPureEmissionParserRuleCall_1_1() { return cPureEmissionParserRuleCall_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assertion returns kexpressions::Expression:
		//    {Assertion}
		//    'assert' expr=Expression ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assertion}
		//'assert' expr=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//{Assertion}
		public Action getAssertionAction_0() { return cAssertionAction_0; }
		
		//'assert'
		public Keyword getAssertKeyword_1() { return cAssertKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AutomatonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.Automaton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutomatonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesAStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesAStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Keyword cReturnsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFullStopFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Automaton:
		//    'automaton' name=ID states+=AState (states+=AState)* 'returns' '..' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'automaton' name=ID states+=AState (states+=AState)* 'returns' '..' ';'
		public Group getGroup() { return cGroup; }
		
		//'automaton'
		public Keyword getAutomatonKeyword_0() { return cAutomatonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//states+=AState
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }
		
		//AState
		public RuleCall getStatesAStateParserRuleCall_2_0() { return cStatesAStateParserRuleCall_2_0; }
		
		//(states+=AState)*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }
		
		//AState
		public RuleCall getStatesAStateParserRuleCall_3_0() { return cStatesAStateParserRuleCall_3_0; }
		
		//'returns'
		public Keyword getReturnsKeyword_4() { return cReturnsKeyword_4; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_5() { return cFullStopFullStopKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class AStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.AState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitialInitialKeyword_0_0 = (Keyword)cInitialAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectStateValuedObjectParserRuleCall_2_0 = (RuleCall)cValuedObjectAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cConstKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cConstantsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cConstantsVariableDeclarationInitParserRuleCall_3_0_1_0 = (RuleCall)cConstantsAssignment_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_0_3 = (Group)cGroup_3_0.eContents().get(3);
		private final Assignment cConstantsAssignment_3_0_3_0 = (Assignment)cGroup_3_0_3.eContents().get(0);
		private final RuleCall cConstantsVariableDeclarationInitParserRuleCall_3_0_3_0_0 = (RuleCall)cConstantsAssignment_3_0_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_3_1 = (Keyword)cGroup_3_0_3.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cVarKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationInitParserRuleCall_3_1_1_0 = (RuleCall)cVariablesAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationInitParserRuleCall_3_1_2_1_0 = (RuleCall)cVariablesAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cEquationsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cEquationsEquationParserRuleCall_4_1_0_0 = (RuleCall)cEquationsAssignment_4_1_0.eContents().get(0);
		private final Assignment cEmissionsAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cEmissionsEmissionParserRuleCall_4_1_1_0 = (RuleCall)cEmissionsAssignment_4_1_1.eContents().get(0);
		private final Assignment cAssertionsAssignment_4_1_2 = (Assignment)cAlternatives_4_1.eContents().get(2);
		private final RuleCall cAssertionsAssertionParserRuleCall_4_1_2_0 = (RuleCall)cAssertionsAssignment_4_1_2.eContents().get(0);
		private final Assignment cAutomatonsAssignment_4_1_3 = (Assignment)cAlternatives_4_1.eContents().get(3);
		private final RuleCall cAutomatonsAutomatonParserRuleCall_4_1_3_0 = (RuleCall)cAutomatonsAssignment_4_1_3.eContents().get(0);
		private final Keyword cTelKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cTransitionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionsATransitionParserRuleCall_6_0 = (RuleCall)cTransitionsAssignment_6.eContents().get(0);
		
		//AState:
		//    (initial?='initial')?
		//    'state'
		//    valuedObject=StateValuedObject
		//    (
		//        ('const' constants+=VariableDeclarationInit ';' (constants+=VariableDeclarationInit ';')* )
		//        | ('var' variables+=VariableDeclarationInit (';' variables+=VariableDeclarationInit)* ';')
		//    )*
		//    // Body
		//    ('let'
		//        (
		//            equations+=Equation
		//            | emissions+=Emission
		//            | assertions+=Assertion
		//            | automatons+=Automaton
		//        )*
		//    'tel')?
		//    ('.' | (';')?)
		//    transitions+=ATransition*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(initial?='initial')?
		//'state'
		//valuedObject=StateValuedObject
		//(
		//    ('const' constants+=VariableDeclarationInit ';' (constants+=VariableDeclarationInit ';')* )
		//    | ('var' variables+=VariableDeclarationInit (';' variables+=VariableDeclarationInit)* ';')
		//)*
		//// Body
		//('let'
		//    (
		//        equations+=Equation
		//        | emissions+=Emission
		//        | assertions+=Assertion
		//        | automatons+=Automaton
		//    )*
		//'tel')?
		//('.' | (';')?)
		//transitions+=ATransition*
		public Group getGroup() { return cGroup; }
		
		//(initial?='initial')?
		public Assignment getInitialAssignment_0() { return cInitialAssignment_0; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_0_0() { return cInitialInitialKeyword_0_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//valuedObject=StateValuedObject
		public Assignment getValuedObjectAssignment_2() { return cValuedObjectAssignment_2; }
		
		//StateValuedObject
		public RuleCall getValuedObjectStateValuedObjectParserRuleCall_2_0() { return cValuedObjectStateValuedObjectParserRuleCall_2_0; }
		
		//(
		//    ('const' constants+=VariableDeclarationInit ';' (constants+=VariableDeclarationInit ';')* )
		//    | ('var' variables+=VariableDeclarationInit (';' variables+=VariableDeclarationInit)* ';')
		//)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//('const' constants+=VariableDeclarationInit ';' (constants+=VariableDeclarationInit ';')* )
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'const'
		public Keyword getConstKeyword_3_0_0() { return cConstKeyword_3_0_0; }
		
		//constants+=VariableDeclarationInit
		public Assignment getConstantsAssignment_3_0_1() { return cConstantsAssignment_3_0_1; }
		
		//VariableDeclarationInit
		public RuleCall getConstantsVariableDeclarationInitParserRuleCall_3_0_1_0() { return cConstantsVariableDeclarationInitParserRuleCall_3_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_2() { return cSemicolonKeyword_3_0_2; }
		
		//(constants+=VariableDeclarationInit ';')*
		public Group getGroup_3_0_3() { return cGroup_3_0_3; }
		
		//constants+=VariableDeclarationInit
		public Assignment getConstantsAssignment_3_0_3_0() { return cConstantsAssignment_3_0_3_0; }
		
		//VariableDeclarationInit
		public RuleCall getConstantsVariableDeclarationInitParserRuleCall_3_0_3_0_0() { return cConstantsVariableDeclarationInitParserRuleCall_3_0_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_3_1() { return cSemicolonKeyword_3_0_3_1; }
		
		//('var' variables+=VariableDeclarationInit (';' variables+=VariableDeclarationInit)* ';')
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'var'
		public Keyword getVarKeyword_3_1_0() { return cVarKeyword_3_1_0; }
		
		//variables+=VariableDeclarationInit
		public Assignment getVariablesAssignment_3_1_1() { return cVariablesAssignment_3_1_1; }
		
		//VariableDeclarationInit
		public RuleCall getVariablesVariableDeclarationInitParserRuleCall_3_1_1_0() { return cVariablesVariableDeclarationInitParserRuleCall_3_1_1_0; }
		
		//(';' variables+=VariableDeclarationInit)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_2_0() { return cSemicolonKeyword_3_1_2_0; }
		
		//variables+=VariableDeclarationInit
		public Assignment getVariablesAssignment_3_1_2_1() { return cVariablesAssignment_3_1_2_1; }
		
		//VariableDeclarationInit
		public RuleCall getVariablesVariableDeclarationInitParserRuleCall_3_1_2_1_0() { return cVariablesVariableDeclarationInitParserRuleCall_3_1_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_3() { return cSemicolonKeyword_3_1_3; }
		
		//// Body
		//('let'
		//    (
		//        equations+=Equation
		//        | emissions+=Emission
		//        | assertions+=Assertion
		//        | automatons+=Automaton
		//    )*
		//'tel')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'let'
		public Keyword getLetKeyword_4_0() { return cLetKeyword_4_0; }
		
		//(
		//    equations+=Equation
		//    | emissions+=Emission
		//    | assertions+=Assertion
		//    | automatons+=Automaton
		//)*
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//equations+=Equation
		public Assignment getEquationsAssignment_4_1_0() { return cEquationsAssignment_4_1_0; }
		
		//Equation
		public RuleCall getEquationsEquationParserRuleCall_4_1_0_0() { return cEquationsEquationParserRuleCall_4_1_0_0; }
		
		//emissions+=Emission
		public Assignment getEmissionsAssignment_4_1_1() { return cEmissionsAssignment_4_1_1; }
		
		//Emission
		public RuleCall getEmissionsEmissionParserRuleCall_4_1_1_0() { return cEmissionsEmissionParserRuleCall_4_1_1_0; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_4_1_2() { return cAssertionsAssignment_4_1_2; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_4_1_2_0() { return cAssertionsAssertionParserRuleCall_4_1_2_0; }
		
		//automatons+=Automaton
		public Assignment getAutomatonsAssignment_4_1_3() { return cAutomatonsAssignment_4_1_3; }
		
		//Automaton
		public RuleCall getAutomatonsAutomatonParserRuleCall_4_1_3_0() { return cAutomatonsAutomatonParserRuleCall_4_1_3_0; }
		
		//'tel'
		public Keyword getTelKeyword_4_2() { return cTelKeyword_4_2; }
		
		//('.' | (';')?)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'.'
		public Keyword getFullStopKeyword_5_0() { return cFullStopKeyword_5_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//transitions+=ATransition*
		public Assignment getTransitionsAssignment_6() { return cTransitionsAssignment_6; }
		
		//ATransition
		public RuleCall getTransitionsATransitionParserRuleCall_6_0() { return cTransitionsATransitionParserRuleCall_6_0; }
	}
	public class StateValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.StateValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateValuedObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StateValuedObject returns kexpressions::ValuedObject:
		//    {StateValuedObject}
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StateValuedObject}
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//{StateValuedObject}
		public Action getStateValuedObjectAction_0() { return cStateValuedObjectAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ATransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ATransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cATransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUntilKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cStrongAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cStrongUnlessKeyword_1_1_0 = (Keyword)cStrongAssignment_1_1.eContents().get(0);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsAnActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		
		//ATransition:
		//    {ATransition}
		//    ('until'|strong?='unless') actions+=AnAction*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ATransition}
		//('until'|strong?='unless') actions+=AnAction*
		public Group getGroup() { return cGroup; }
		
		//{ATransition}
		public Action getATransitionAction_0() { return cATransitionAction_0; }
		
		//('until'|strong?='unless')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'until'
		public Keyword getUntilKeyword_1_0() { return cUntilKeyword_1_0; }
		
		//strong?='unless'
		public Assignment getStrongAssignment_1_1() { return cStrongAssignment_1_1; }
		
		//'unless'
		public Keyword getStrongUnlessKeyword_1_1_0() { return cStrongUnlessKeyword_1_1_0; }
		
		//actions+=AnAction*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//AnAction
		public RuleCall getActionsAnActionParserRuleCall_2_0() { return cActionsAnActionParserRuleCall_2_0; }
	}
	public class AnActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.AnAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConditionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConditionBoolExpressionParserRuleCall_0_1_0 = (RuleCall)cConditionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cEffectsAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cEffectsEquationParserRuleCall_1_1_0_0 = (RuleCall)cEffectsAssignment_1_1_0.eContents().get(0);
		private final Assignment cEffectsAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cEffectsEmissionParserRuleCall_1_1_1_0 = (RuleCall)cEffectsAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cRestartKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cHistoryAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cHistoryResumeKeyword_2_1_0 = (Keyword)cHistoryAssignment_2_1.eContents().get(0);
		private final Assignment cNextStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNextStateStateValuedObjectCrossReference_3_0 = (CrossReference)cNextStateAssignment_3.eContents().get(0);
		private final RuleCall cNextStateStateValuedObjectIDTerminalRuleCall_3_0_1 = (RuleCall)cNextStateStateValuedObjectCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AnAction:
		//    ('if' condition=BoolExpression)? ('do' (effects+=Equation | effects+=Emission)*)? ('restart'|history?='resume') nextState=[StateValuedObject] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('if' condition=BoolExpression)? ('do' (effects+=Equation | effects+=Emission)*)? ('restart'|history?='resume') nextState=[StateValuedObject] ';'
		public Group getGroup() { return cGroup; }
		
		//('if' condition=BoolExpression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//condition=BoolExpression
		public Assignment getConditionAssignment_0_1() { return cConditionAssignment_0_1; }
		
		//BoolExpression
		public RuleCall getConditionBoolExpressionParserRuleCall_0_1_0() { return cConditionBoolExpressionParserRuleCall_0_1_0; }
		
		//('do' (effects+=Equation | effects+=Emission)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'do'
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }
		
		//(effects+=Equation | effects+=Emission)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//effects+=Equation
		public Assignment getEffectsAssignment_1_1_0() { return cEffectsAssignment_1_1_0; }
		
		//Equation
		public RuleCall getEffectsEquationParserRuleCall_1_1_0_0() { return cEffectsEquationParserRuleCall_1_1_0_0; }
		
		//effects+=Emission
		public Assignment getEffectsAssignment_1_1_1() { return cEffectsAssignment_1_1_1; }
		
		//Emission
		public RuleCall getEffectsEmissionParserRuleCall_1_1_1_0() { return cEffectsEmissionParserRuleCall_1_1_1_0; }
		
		//('restart'|history?='resume')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'restart'
		public Keyword getRestartKeyword_2_0() { return cRestartKeyword_2_0; }
		
		//history?='resume'
		public Assignment getHistoryAssignment_2_1() { return cHistoryAssignment_2_1; }
		
		//'resume'
		public Keyword getHistoryResumeKeyword_2_1_0() { return cHistoryResumeKeyword_2_1_0; }
		
		//nextState=[StateValuedObject]
		public Assignment getNextStateAssignment_3() { return cNextStateAssignment_3; }
		
		//[StateValuedObject]
		public CrossReference getNextStateStateValuedObjectCrossReference_3_0() { return cNextStateStateValuedObjectCrossReference_3_0; }
		
		//ID
		public RuleCall getNextStateStateValuedObjectIDTerminalRuleCall_3_0_1() { return cNextStateStateValuedObjectIDTerminalRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ProductExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ProductExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntDivExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOperatorExpressionSubExpressionsAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorMultOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubExpressionsIntDivExpressionParserRuleCall_1_0_2_0 = (RuleCall)cSubExpressionsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cSubExpressionsIntDivExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorDivOperatorEnumRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubExpressionsIntDivExpressionParserRuleCall_1_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cSolidusKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cSubExpressionsIntDivExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cOperatorExpressionSubExpressionsAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperatorModOperatorEnumRuleCall_1_2_1_0 = (RuleCall)cOperatorAssignment_1_2_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cSubExpressionsIntDivExpressionParserRuleCall_1_2_2_0 = (RuleCall)cSubExpressionsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cModKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cSubExpressionsIntDivExpressionParserRuleCall_1_2_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_3_1.eContents().get(0);
		
		///**
		// * -------------------- Expression Adjustments
		// *
		// * The precedence hierarchy is not as follows:
		// *
		// * Expression
		// * + BoolExpression
		// *   + InitExpression
		// *     + TernaryOperation *
		// *       + ImpliesExpression
		// *         + LogicalXorExpression
		// *           + LogicalOrExpression
		// *             + LogicalAndExpression
		// *               + CompareExpression
		// *                 + NotOrValuedExpression
		// *                   + ValuedExpression (see valued expression below)
		// *                   + NotExpression *
		// *                     + AtomicExpression *
		// *                       + BoolValue
		// *                       + ValuedObjectTestExpression
		// *                         + ValuedObjectReference
		// *                       + FunctionCall
		// *                       + TextExpression
		// *                       + NoneOfExpression
		// *                       + NorExpression
		// * + ValuedExpression
		// *   + SumExpression
		// *      + ProductExpression
		// *                  + IntDivExpression
		// *                    + NegExpression *
		// *                      + FbyExpression
		// *                        + WhenExpression
		// *                          + CurrentExpression
		// *                            + PreExpression
		// *                              + AtomicValuedExpression *
		// *                                + IntValue
		// *                                + FloatValue
		// *                                + StringValue
		// *                                + AtomicExpression
		// *
		// */
		//// Needs override because of mod operator is 'mod' not '%' and IntDivExpressin comes next
		//@Override
		//ProductExpression returns kexpressions::Expression:
		//    IntDivExpression
		//    (
		//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=IntDivExpression ('*' subExpressions+=IntDivExpression)*)
		//    |
		//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=IntDivExpression ('/' subExpressions+=IntDivExpression)*)
		//    |
		//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=IntDivExpression ('mod' subExpressions+=IntDivExpression)*)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntDivExpression
		//(
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=IntDivExpression ('*' subExpressions+=IntDivExpression)*)
		//|
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=IntDivExpression ('/' subExpressions+=IntDivExpression)*)
		//|
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=IntDivExpression ('mod' subExpressions+=IntDivExpression)*)
		//)*
		public Group getGroup() { return cGroup; }
		
		//IntDivExpression
		public RuleCall getIntDivExpressionParserRuleCall_0() { return cIntDivExpressionParserRuleCall_0; }
		
		//(
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=IntDivExpression ('*' subExpressions+=IntDivExpression)*)
		//|
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=IntDivExpression ('/' subExpressions+=IntDivExpression)*)
		//|
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=IntDivExpression ('mod' subExpressions+=IntDivExpression)*)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=IntDivExpression ('*' subExpressions+=IntDivExpression)*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0_0() { return cOperatorExpressionSubExpressionsAction_1_0_0; }
		
		//operator=MultOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//MultOperator
		public RuleCall getOperatorMultOperatorEnumRuleCall_1_0_1_0() { return cOperatorMultOperatorEnumRuleCall_1_0_1_0; }
		
		//subExpressions+=IntDivExpression
		public Assignment getSubExpressionsAssignment_1_0_2() { return cSubExpressionsAssignment_1_0_2; }
		
		//IntDivExpression
		public RuleCall getSubExpressionsIntDivExpressionParserRuleCall_1_0_2_0() { return cSubExpressionsIntDivExpressionParserRuleCall_1_0_2_0; }
		
		//('*' subExpressions+=IntDivExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_3_0() { return cAsteriskKeyword_1_0_3_0; }
		
		//subExpressions+=IntDivExpression
		public Assignment getSubExpressionsAssignment_1_0_3_1() { return cSubExpressionsAssignment_1_0_3_1; }
		
		//IntDivExpression
		public RuleCall getSubExpressionsIntDivExpressionParserRuleCall_1_0_3_1_0() { return cSubExpressionsIntDivExpressionParserRuleCall_1_0_3_1_0; }
		
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=IntDivExpression ('/' subExpressions+=IntDivExpression)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_1_0() { return cOperatorExpressionSubExpressionsAction_1_1_0; }
		
		//operator=DivOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//DivOperator
		public RuleCall getOperatorDivOperatorEnumRuleCall_1_1_1_0() { return cOperatorDivOperatorEnumRuleCall_1_1_1_0; }
		
		//subExpressions+=IntDivExpression
		public Assignment getSubExpressionsAssignment_1_1_2() { return cSubExpressionsAssignment_1_1_2; }
		
		//IntDivExpression
		public RuleCall getSubExpressionsIntDivExpressionParserRuleCall_1_1_2_0() { return cSubExpressionsIntDivExpressionParserRuleCall_1_1_2_0; }
		
		//('/' subExpressions+=IntDivExpression)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_3_0() { return cSolidusKeyword_1_1_3_0; }
		
		//subExpressions+=IntDivExpression
		public Assignment getSubExpressionsAssignment_1_1_3_1() { return cSubExpressionsAssignment_1_1_3_1; }
		
		//IntDivExpression
		public RuleCall getSubExpressionsIntDivExpressionParserRuleCall_1_1_3_1_0() { return cSubExpressionsIntDivExpressionParserRuleCall_1_1_3_1_0; }
		
		//({kexpressions::OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=IntDivExpression ('mod' subExpressions+=IntDivExpression)*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_2_0() { return cOperatorExpressionSubExpressionsAction_1_2_0; }
		
		//operator=ModOperator
		public Assignment getOperatorAssignment_1_2_1() { return cOperatorAssignment_1_2_1; }
		
		//ModOperator
		public RuleCall getOperatorModOperatorEnumRuleCall_1_2_1_0() { return cOperatorModOperatorEnumRuleCall_1_2_1_0; }
		
		//subExpressions+=IntDivExpression
		public Assignment getSubExpressionsAssignment_1_2_2() { return cSubExpressionsAssignment_1_2_2; }
		
		//IntDivExpression
		public RuleCall getSubExpressionsIntDivExpressionParserRuleCall_1_2_2_0() { return cSubExpressionsIntDivExpressionParserRuleCall_1_2_2_0; }
		
		//('mod' subExpressions+=IntDivExpression)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//'mod'
		public Keyword getModKeyword_1_2_3_0() { return cModKeyword_1_2_3_0; }
		
		//subExpressions+=IntDivExpression
		public Assignment getSubExpressionsAssignment_1_2_3_1() { return cSubExpressionsAssignment_1_2_3_1; }
		
		//IntDivExpression
		public RuleCall getSubExpressionsIntDivExpressionParserRuleCall_1_2_3_1_0() { return cSubExpressionsIntDivExpressionParserRuleCall_1_2_3_1_0; }
	}
	public class IntDivExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.IntDivExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorIntDivOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cDivKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//IntDivExpression returns kexpressions::Expression:
		//    NegExpression
		//    ({kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=IntDivOperator subExpressions+=NegExpression)
		//        ('div' subExpressions+=AtomicValuedExpression)*
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NegExpression
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=IntDivOperator subExpressions+=NegExpression)
		//    ('div' subExpressions+=AtomicValuedExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_0() { return cNegExpressionParserRuleCall_0; }
		
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=IntDivOperator subExpressions+=NegExpression)
		//    ('div' subExpressions+=AtomicValuedExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=IntDivOperator subExpressions+=NegExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=IntDivOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//IntDivOperator
		public RuleCall getOperatorIntDivOperatorEnumRuleCall_1_1_0_0() { return cOperatorIntDivOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_1_1_0; }
		
		//('div' subExpressions+=AtomicValuedExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'div'
		public Keyword getDivKeyword_1_2_0() { return cDivKeyword_1_2_0; }
		
		//subExpressions+=AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0; }
	}
	public class NegExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.NegExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorSubOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cFbyExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Skip TernaryOperation after NegExpression
		//@Override
		//NegExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=SubOperator subExpressions+=(NegExpression)
		//    | FbyExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=SubOperator subExpressions+=(NegExpression)
		//| FbyExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=SubOperator subExpressions+=(NegExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=SubOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//SubOperator
		public RuleCall getOperatorSubOperatorEnumRuleCall_0_1_0() { return cOperatorSubOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=(NegExpression)
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//(NegExpression)
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_0_2_0() { return cSubExpressionsNegExpressionParserRuleCall_0_2_0; }
		
		//FbyExpression
		public RuleCall getFbyExpressionParserRuleCall_1() { return cFbyExpressionParserRuleCall_1; }
	}
	public class FbyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.FbyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWhenExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorFbyOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsWhenExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFbyKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsWhenExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Force WhenExpression, CurrentExpression and PreExpression inbetween FbyExpression and AtomicValuedExpression
		//@Override
		//FbyExpression returns kexpressions::Expression:
		//    WhenExpression
		//    ({kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=FbyOperator subExpressions+=WhenExpression)
		//        ('fby' subExpressions+=WhenExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//WhenExpression
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=FbyOperator subExpressions+=WhenExpression)
		//    ('fby' subExpressions+=WhenExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//WhenExpression
		public RuleCall getWhenExpressionParserRuleCall_0() { return cWhenExpressionParserRuleCall_0; }
		
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=FbyOperator subExpressions+=WhenExpression)
		//    ('fby' subExpressions+=WhenExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=FbyOperator subExpressions+=WhenExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=FbyOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//FbyOperator
		public RuleCall getOperatorFbyOperatorEnumRuleCall_1_1_0_0() { return cOperatorFbyOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=WhenExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//WhenExpression
		public RuleCall getSubExpressionsWhenExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsWhenExpressionParserRuleCall_1_1_1_0; }
		
		//('fby' subExpressions+=WhenExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'fby'
		public Keyword getFbyKeyword_1_2_0() { return cFbyKeyword_1_2_0; }
		
		//subExpressions+=WhenExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//WhenExpression
		public RuleCall getSubExpressionsWhenExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsWhenExpressionParserRuleCall_1_2_1_0; }
	}
	public class WhenExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.WhenExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0 = (RuleCall)cSubExpressionsAssignment_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperatorWhenOperatorEnumRuleCall_0_2_0 = (RuleCall)cOperatorAssignment_0_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0 = (RuleCall)cSubExpressionsAssignment_0_3.eContents().get(0);
		private final RuleCall cCurrentExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WhenExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    subExpressions += AtomicValuedExpression operator=WhenOperator subExpressions += AtomicValuedExpression
		//    | CurrentExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//subExpressions += AtomicValuedExpression operator=WhenOperator subExpressions += AtomicValuedExpression
		//| CurrentExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//subExpressions += AtomicValuedExpression operator=WhenOperator subExpressions += AtomicValuedExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//subExpressions += AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_0_1() { return cSubExpressionsAssignment_0_1; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0; }
		
		//operator=WhenOperator
		public Assignment getOperatorAssignment_0_2() { return cOperatorAssignment_0_2; }
		
		//WhenOperator
		public RuleCall getOperatorWhenOperatorEnumRuleCall_0_2_0() { return cOperatorWhenOperatorEnumRuleCall_0_2_0; }
		
		//subExpressions += AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_0_3() { return cSubExpressionsAssignment_0_3; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0; }
		
		//CurrentExpression
		public RuleCall getCurrentExpressionParserRuleCall_1() { return cCurrentExpressionParserRuleCall_1; }
	}
	public class CurrentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.CurrentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorCurrentOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cPreExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CurrentExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=CurrentOperator subExpressions += AtomicValuedExpression
		//    | PreExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=CurrentOperator subExpressions += AtomicValuedExpression
		//| PreExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=CurrentOperator subExpressions += AtomicValuedExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=CurrentOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//CurrentOperator
		public RuleCall getOperatorCurrentOperatorEnumRuleCall_0_1_0() { return cOperatorCurrentOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions += AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_0_2_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_0_2_0; }
		
		//PreExpression
		public RuleCall getPreExpressionParserRuleCall_1() { return cPreExpressionParserRuleCall_1; }
	}
	public class PreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.PreExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorPreOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsLastExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cLastExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PreExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=PreOperator subExpressions+=LastExpression
		//    | LastExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=PreOperator subExpressions+=LastExpression
		//| LastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=PreOperator subExpressions+=LastExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=PreOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//PreOperator
		public RuleCall getOperatorPreOperatorEnumRuleCall_0_1_0() { return cOperatorPreOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=LastExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//LastExpression
		public RuleCall getSubExpressionsLastExpressionParserRuleCall_0_2_0() { return cSubExpressionsLastExpressionParserRuleCall_0_2_0; }
		
		//LastExpression
		public RuleCall getLastExpressionParserRuleCall_1() { return cLastExpressionParserRuleCall_1; }
	}
	public class LastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LastExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorLastOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LastExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=LastOperator subExpressions+=AtomicValuedExpression
		//    | AtomicValuedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=LastOperator subExpressions+=AtomicValuedExpression
		//| AtomicValuedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=LastOperator subExpressions+=AtomicValuedExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=LastOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//LastOperator
		public RuleCall getOperatorLastOperatorEnumRuleCall_0_1_0() { return cOperatorLastOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_0_2_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_0_2_0; }
		
		//AtomicValuedExpression
		public RuleCall getAtomicValuedExpressionParserRuleCall_1() { return cAtomicValuedExpressionParserRuleCall_1; }
	}
	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.BoolExpression");
		private final RuleCall cInitExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Force TernaryOperation, InitExpression, ImpliesExpression and LogicalXorExpression inbetween BoolExpression and LogicalOrExpression
		//@Override
		//BoolExpression returns kexpressions::Expression:
		//    InitExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//InitExpression
		public RuleCall getInitExpressionParserRuleCall() { return cInitExpressionParserRuleCall; }
	}
	public class InitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.InitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTernaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorInitOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsTernaryOperationParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsTernaryOperationParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//@Override
		//InitExpression returns kexpressions::Expression:
		//    TernaryOperation
		//    ({kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=InitOperator subExpressions+=TernaryOperation)
		//        ('->' subExpressions+=TernaryOperation)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//TernaryOperation
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=InitOperator subExpressions+=TernaryOperation)
		//    ('->' subExpressions+=TernaryOperation)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//TernaryOperation
		public RuleCall getTernaryOperationParserRuleCall_0() { return cTernaryOperationParserRuleCall_0; }
		
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=InitOperator subExpressions+=TernaryOperation)
		//    ('->' subExpressions+=TernaryOperation)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=InitOperator subExpressions+=TernaryOperation)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=InitOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//InitOperator
		public RuleCall getOperatorInitOperatorEnumRuleCall_1_1_0_0() { return cOperatorInitOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=TernaryOperation
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//TernaryOperation
		public RuleCall getSubExpressionsTernaryOperationParserRuleCall_1_1_1_0() { return cSubExpressionsTernaryOperationParserRuleCall_1_1_1_0; }
		
		//('->' subExpressions+=TernaryOperation)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2_0() { return cHyphenMinusGreaterThanSignKeyword_1_2_0; }
		
		//subExpressions+=TernaryOperation
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//TernaryOperation
		public RuleCall getSubExpressionsTernaryOperationParserRuleCall_1_2_1_0() { return cSubExpressionsTernaryOperationParserRuleCall_1_2_1_0; }
	}
	public class TernaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.TernaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorConditionalOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsTernaryOperationParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final Keyword cThenKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSubExpressionsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSubExpressionsTernaryOperationParserRuleCall_0_4_0 = (RuleCall)cSubExpressionsAssignment_0_4.eContents().get(0);
		private final Keyword cElseKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cSubExpressionsAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cSubExpressionsTernaryOperationParserRuleCall_0_6_0 = (RuleCall)cSubExpressionsAssignment_0_6.eContents().get(0);
		private final RuleCall cImpliesExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Overwide Ternary operator to support if ... then ... else
		//@Override
		//TernaryOperation returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=ConditionalOperator subExpressions += TernaryOperation 'then' subExpressions += TernaryOperation 'else' subExpressions += TernaryOperation
		//    | ImpliesExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=ConditionalOperator subExpressions += TernaryOperation 'then' subExpressions += TernaryOperation 'else' subExpressions += TernaryOperation
		//| ImpliesExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=ConditionalOperator subExpressions += TernaryOperation 'then' subExpressions += TernaryOperation 'else' subExpressions += TernaryOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=ConditionalOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//ConditionalOperator
		public RuleCall getOperatorConditionalOperatorEnumRuleCall_0_1_0() { return cOperatorConditionalOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions += TernaryOperation
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//TernaryOperation
		public RuleCall getSubExpressionsTernaryOperationParserRuleCall_0_2_0() { return cSubExpressionsTernaryOperationParserRuleCall_0_2_0; }
		
		//'then'
		public Keyword getThenKeyword_0_3() { return cThenKeyword_0_3; }
		
		//subExpressions += TernaryOperation
		public Assignment getSubExpressionsAssignment_0_4() { return cSubExpressionsAssignment_0_4; }
		
		//TernaryOperation
		public RuleCall getSubExpressionsTernaryOperationParserRuleCall_0_4_0() { return cSubExpressionsTernaryOperationParserRuleCall_0_4_0; }
		
		//'else'
		public Keyword getElseKeyword_0_5() { return cElseKeyword_0_5; }
		
		//subExpressions += TernaryOperation
		public Assignment getSubExpressionsAssignment_0_6() { return cSubExpressionsAssignment_0_6; }
		
		//TernaryOperation
		public RuleCall getSubExpressionsTernaryOperationParserRuleCall_0_6_0() { return cSubExpressionsTernaryOperationParserRuleCall_0_6_0; }
		
		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_1() { return cImpliesExpressionParserRuleCall_1; }
	}
	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorImpliesOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalXorExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalXorExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//ImpliesExpression returns kexpressions::Expression:
		//    LogicalXorExpression
		//    (
		//        {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=ImpliesOperator subExpressions+=LogicalXorExpression)
		//        ('=>' subExpressions+=LogicalXorExpression)*
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalXorExpression
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=ImpliesOperator subExpressions+=LogicalXorExpression)
		//    ('=>' subExpressions+=LogicalXorExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//LogicalXorExpression
		public RuleCall getLogicalXorExpressionParserRuleCall_0() { return cLogicalXorExpressionParserRuleCall_0; }
		
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=ImpliesOperator subExpressions+=LogicalXorExpression)
		//    ('=>' subExpressions+=LogicalXorExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=ImpliesOperator subExpressions+=LogicalXorExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=ImpliesOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//ImpliesOperator
		public RuleCall getOperatorImpliesOperatorEnumRuleCall_1_1_0_0() { return cOperatorImpliesOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=LogicalXorExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//LogicalXorExpression
		public RuleCall getSubExpressionsLogicalXorExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsLogicalXorExpressionParserRuleCall_1_1_1_0; }
		
		//('=>' subExpressions+=LogicalXorExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_2_0() { return cEqualsSignGreaterThanSignKeyword_1_2_0; }
		
		//subExpressions+=LogicalXorExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//LogicalXorExpression
		public RuleCall getSubExpressionsLogicalXorExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsLogicalXorExpressionParserRuleCall_1_2_1_0; }
	}
	public class LogicalXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LogicalXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorLogicalXorOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalOrExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cXorKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalOrExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//LogicalXorExpression returns kexpressions::Expression:
		//    LogicalOrExpression
		//    (
		//        {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=LogicalXorOperator subExpressions+=LogicalOrExpression)
		//        ('xor' subExpressions+=LogicalOrExpression)*
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=LogicalXorOperator subExpressions+=LogicalOrExpression)
		//    ('xor' subExpressions+=LogicalOrExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }
		
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=LogicalXorOperator subExpressions+=LogicalOrExpression)
		//    ('xor' subExpressions+=LogicalOrExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=LogicalXorOperator subExpressions+=LogicalOrExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=LogicalXorOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//LogicalXorOperator
		public RuleCall getOperatorLogicalXorOperatorEnumRuleCall_1_1_0_0() { return cOperatorLogicalXorOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=LogicalOrExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//LogicalOrExpression
		public RuleCall getSubExpressionsLogicalOrExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsLogicalOrExpressionParserRuleCall_1_1_1_0; }
		
		//('xor' subExpressions+=LogicalOrExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'xor'
		public Keyword getXorKeyword_1_2_0() { return cXorKeyword_1_2_0; }
		
		//subExpressions+=LogicalOrExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//LogicalOrExpression
		public RuleCall getSubExpressionsLogicalOrExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsLogicalOrExpressionParserRuleCall_1_2_1_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cOrKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Override LogicalAndExpresssion and LogicalOrExpression to allow asssociativity
		//@Override
		//LogicalOrExpression returns kexpressions::Expression:
		//    LogicalAndExpression
		//    (
		//        {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		//        ('or' subExpressions+=LogicalAndExpression)*
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		//    ('or' subExpressions+=LogicalAndExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		//    ('or' subExpressions+=LogicalAndExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=LogicalOrOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//LogicalOrOperator
		public RuleCall getOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0() { return cOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=LogicalAndExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//LogicalAndExpression
		public RuleCall getSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0; }
		
		//('or' subExpressions+=LogicalAndExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'or'
		public Keyword getOrKeyword_1_2_0() { return cOrKeyword_1_2_0; }
		
		//subExpressions+=LogicalAndExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//LogicalAndExpression
		public RuleCall getSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsCompareOperationParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsCompareOperationParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Directly redirect to CompareOperation to exclude the bitwise operations
		//@Override
		//LogicalAndExpression returns kexpressions::Expression:
		//    CompareOperation
		//    (
		//        {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=LogicalAndOperator subExpressions+=CompareOperation)
		//        ('and' subExpressions+=CompareOperation)*
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareOperation
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=LogicalAndOperator subExpressions+=CompareOperation)
		//    ('and' subExpressions+=CompareOperation)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_0() { return cCompareOperationParserRuleCall_0; }
		
		//(
		//    {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=LogicalAndOperator subExpressions+=CompareOperation)
		//    ('and' subExpressions+=CompareOperation)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=LogicalAndOperator subExpressions+=CompareOperation)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=LogicalAndOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//LogicalAndOperator
		public RuleCall getOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0() { return cOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=CompareOperation
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//CompareOperation
		public RuleCall getSubExpressionsCompareOperationParserRuleCall_1_1_1_0() { return cSubExpressionsCompareOperationParserRuleCall_1_1_1_0; }
		
		//('and' subExpressions+=CompareOperation)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'and'
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }
		
		//subExpressions+=CompareOperation
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//CompareOperation
		public RuleCall getSubExpressionsCompareOperationParserRuleCall_1_2_1_0() { return cSubExpressionsCompareOperationParserRuleCall_1_2_1_0; }
	}
	public class ValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ValuedExpression");
		private final RuleCall cSumExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Directly redirect to SumExpression to exclude shift operations
		//@Override
		//ValuedExpression returns kexpressions::Expression:
		//    SumExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SumExpression
		public RuleCall getSumExpressionParserRuleCall() { return cSumExpressionParserRuleCall; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBoolExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cReferenceCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValuedObjectTestExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNorAtMostOneExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// Exclude FunctionCall, RandomCall, RandomizeCall and TextExpression
		//@Override
		//AtomicExpression returns kexpressions::Expression:
		//    BoolValue
		//    | '(' BoolExpression ')'
		//    | ReferenceCall
		//    | ValuedObjectTestExpression // Last to allow detection of calls
		//    | NorAtMostOneExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolValue
		//| '(' BoolExpression ')'
		//| ReferenceCall
		//| ValuedObjectTestExpression // Last to allow detection of calls
		//| NorAtMostOneExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolValue
		public RuleCall getBoolValueParserRuleCall_0() { return cBoolValueParserRuleCall_0; }
		
		//'(' BoolExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//BoolExpression
		public RuleCall getBoolExpressionParserRuleCall_1_1() { return cBoolExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//ReferenceCall
		public RuleCall getReferenceCallParserRuleCall_2() { return cReferenceCallParserRuleCall_2; }
		
		//ValuedObjectTestExpression
		public RuleCall getValuedObjectTestExpressionParserRuleCall_3() { return cValuedObjectTestExpressionParserRuleCall_3; }
		
		//NorAtMostOneExpression
		public RuleCall getNorAtMostOneExpressionParserRuleCall_4() { return cNorAtMostOneExpressionParserRuleCall_4; }
	}
	public class NorAtMostOneExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.NorAtMostOneExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperatorExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cOperatorAtMostOneOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOperatorNorOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubExpressionsExpressionParserRuleCall_3_0 = (RuleCall)cSubExpressionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSubExpressionsExpressionParserRuleCall_4_1_0 = (RuleCall)cSubExpressionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NorAtMostOneExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    (operator=AtMostOneOperator | operator=NorOperator)
		//    '('subExpressions+=Expression (',' subExpressions+=Expression)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//(operator=AtMostOneOperator | operator=NorOperator)
		//'('subExpressions+=Expression (',' subExpressions+=Expression)* ')'
		public Group getGroup() { return cGroup; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0() { return cOperatorExpressionAction_0; }
		
		//(operator=AtMostOneOperator | operator=NorOperator)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//operator=AtMostOneOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//AtMostOneOperator
		public RuleCall getOperatorAtMostOneOperatorEnumRuleCall_1_0_0() { return cOperatorAtMostOneOperatorEnumRuleCall_1_0_0; }
		
		//operator=NorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//NorOperator
		public RuleCall getOperatorNorOperatorEnumRuleCall_1_1_0() { return cOperatorNorOperatorEnumRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//subExpressions+=Expression
		public Assignment getSubExpressionsAssignment_3() { return cSubExpressionsAssignment_3; }
		
		//Expression
		public RuleCall getSubExpressionsExpressionParserRuleCall_3_0() { return cSubExpressionsExpressionParserRuleCall_3_0; }
		
		//(',' subExpressions+=Expression)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//subExpressions+=Expression
		public Assignment getSubExpressionsAssignment_4_1() { return cSubExpressionsAssignment_4_1; }
		
		//Expression
		public RuleCall getSubExpressionsExpressionParserRuleCall_4_1_0() { return cSubExpressionsExpressionParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorNotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Exclude BitwiseNotExpression
		//@Override
		//NotExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=NotOperator subExpressions+=(NotExpression)
		//    | AtomicExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=NotOperator subExpressions+=(NotExpression)
		//| AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=NotOperator subExpressions+=(NotExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=NotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//NotOperator
		public RuleCall getOperatorNotOperatorEnumRuleCall_0_1_0() { return cOperatorNotOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=(NotExpression)
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//(NotExpression)
		public RuleCall getSubExpressionsNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsNotExpressionParserRuleCall_0_2_0; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_1() { return cAtomicExpressionParserRuleCall_1; }
	}
	
	public class ValueTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLBoolKeyword_0_0 = (Keyword)cBOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTIntKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLOATRealKeyword_2_0 = (Keyword)cFLOATEnumLiteralDeclaration_2.eContents().get(0);
		
		//@Override
		//enum ValueType returns kexpressions::ValueType:
		//    BOOL="bool"
		//    | INT="int"
		//    | FLOAT="real"
		//;
		public EnumRule getRule() { return rule; }
		
		//BOOL="bool"
		//| INT="int"
		//| FLOAT="real"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_0() { return cBOOLEnumLiteralDeclaration_0; }
		
		//"bool"
		public Keyword getBOOLBoolKeyword_0_0() { return cBOOLBoolKeyword_0_0; }
		
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }
		
		//"int"
		public Keyword getINTIntKeyword_1_0() { return cINTIntKeyword_1_0; }
		
		//FLOAT="real"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_2() { return cFLOATEnumLiteralDeclaration_2; }
		
		//"real"
		public Keyword getFLOATRealKeyword_2_0() { return cFLOATRealKeyword_2_0; }
	}
	public class EnumTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.EnumType");
		private final EnumLiteralDeclaration cENUMEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cENUMEnumKeyword_0 = (Keyword)cENUMEnumLiteralDeclaration.eContents().get(0);
		
		//enum EnumType returns kexpressions::ValueType:
		//    ENUM="enum"
		//;
		public EnumRule getRule() { return rule; }
		
		//ENUM="enum"
		public EnumLiteralDeclaration getENUMEnumLiteralDeclaration() { return cENUMEnumLiteralDeclaration; }
		
		//"enum"
		public Keyword getENUMEnumKeyword_0() { return cENUMEnumKeyword_0; }
	}
	public class AssignOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.AssignOperator");
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cASSIGNEqualsSignKeyword_0 = (Keyword)cASSIGNEnumLiteralDeclaration.eContents().get(0);
		
		///**
		// * -------------------- Operator Adjustments
		// */
		//// Override operators that are different in Lustre
		//@Override
		//enum AssignOperator returns keffects::AssignOperator:
		//    // Reduce possible assignments to only work with '='
		//    ASSIGN="="
		//;
		public EnumRule getRule() { return rule; }
		
		//// Reduce possible assignments to only work with '='
		//ASSIGN="="
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration() { return cASSIGNEnumLiteralDeclaration; }
		
		//"="
		public Keyword getASSIGNEqualsSignKeyword_0() { return cASSIGNEqualsSignKeyword_0; }
	}
	public class CompareOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNELessThanSignGreaterThanSignKeyword_5_0 = (Keyword)cNEEnumLiteralDeclaration_5.eContents().get(0);
		
		//@Override
		//enum CompareOperator returns kexpressions::OperatorType:
		//    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"
		//;
		public EnumRule getRule() { return rule; }
		
		//EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }
		
		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_2() { return cLEQEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_2_0() { return cLEQLessThanSignEqualsSignKeyword_2_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }
		
		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_4() { return cGEQEnumLiteralDeclaration_4; }
		
		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_4_0() { return cGEQGreaterThanSignEqualsSignKeyword_4_0; }
		
		//NE="<>"
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_5() { return cNEEnumLiteralDeclaration_5; }
		
		//"<>"
		public Keyword getNELessThanSignGreaterThanSignKeyword_5_0() { return cNELessThanSignGreaterThanSignKeyword_5_0; }
	}
	public class LogicalOrOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LogicalOrOperator");
		private final EnumLiteralDeclaration cLOGICAL_OREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLOGICAL_OROrKeyword_0 = (Keyword)cLOGICAL_OREnumLiteralDeclaration.eContents().get(0);
		
		//@Override
		//enum LogicalOrOperator returns kexpressions::OperatorType:
		//    LOGICAL_OR="or"
		//;
		public EnumRule getRule() { return rule; }
		
		//LOGICAL_OR="or"
		public EnumLiteralDeclaration getLOGICAL_OREnumLiteralDeclaration() { return cLOGICAL_OREnumLiteralDeclaration; }
		
		//"or"
		public Keyword getLOGICAL_OROrKeyword_0() { return cLOGICAL_OROrKeyword_0; }
	}
	public class LogicalAndOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LogicalAndOperator");
		private final EnumLiteralDeclaration cLOGICAL_ANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLOGICAL_ANDAndKeyword_0 = (Keyword)cLOGICAL_ANDEnumLiteralDeclaration.eContents().get(0);
		
		//@Override
		//enum LogicalAndOperator returns kexpressions::OperatorType:
		//    LOGICAL_AND="and"
		//;
		public EnumRule getRule() { return rule; }
		
		//LOGICAL_AND="and"
		public EnumLiteralDeclaration getLOGICAL_ANDEnumLiteralDeclaration() { return cLOGICAL_ANDEnumLiteralDeclaration; }
		
		//"and"
		public Keyword getLOGICAL_ANDAndKeyword_0() { return cLOGICAL_ANDAndKeyword_0; }
	}
	public class NotOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.NotOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTNotKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//@Override
		//enum NotOperator returns kexpressions::OperatorType:
		//    NOT="not"
		//;
		public EnumRule getRule() { return rule; }
		
		//NOT="not"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }
		
		//"not"
		public Keyword getNOTNotKeyword_0() { return cNOTNotKeyword_0; }
	}
	public class FbyOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.FbyOperator");
		private final EnumLiteralDeclaration cFBYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFBYFbyKeyword_0 = (Keyword)cFBYEnumLiteralDeclaration.eContents().get(0);
		
		//@Override
		//enum FbyOperator returns kexpressions::OperatorType:
		//    FBY="fby"
		//;
		public EnumRule getRule() { return rule; }
		
		//FBY="fby"
		public EnumLiteralDeclaration getFBYEnumLiteralDeclaration() { return cFBYEnumLiteralDeclaration; }
		
		//"fby"
		public Keyword getFBYFbyKeyword_0() { return cFBYFbyKeyword_0; }
	}
	public class ModOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ModOperator");
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMODModKeyword_0 = (Keyword)cMODEnumLiteralDeclaration.eContents().get(0);
		
		//@Override
		//enum ModOperator returns kexpressions::OperatorType:
		//    MOD="mod"
		//;
		public EnumRule getRule() { return rule; }
		
		//MOD="mod"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration() { return cMODEnumLiteralDeclaration; }
		
		//"mod"
		public Keyword getMODModKeyword_0() { return cMODModKeyword_0; }
	}
	public class CurrentOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.CurrentOperator");
		private final EnumLiteralDeclaration cCURRENTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCURRENTCurrentKeyword_0 = (Keyword)cCURRENTEnumLiteralDeclaration.eContents().get(0);
		
		//// Define operators that are Lustre specific
		//enum CurrentOperator returns kexpressions::OperatorType:
		//    CURRENT="current"
		//;
		public EnumRule getRule() { return rule; }
		
		//CURRENT="current"
		public EnumLiteralDeclaration getCURRENTEnumLiteralDeclaration() { return cCURRENTEnumLiteralDeclaration; }
		
		//"current"
		public Keyword getCURRENTCurrentKeyword_0() { return cCURRENTCurrentKeyword_0; }
	}
	public class WhenOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.WhenOperator");
		private final EnumLiteralDeclaration cWHENEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cWHENWhenKeyword_0 = (Keyword)cWHENEnumLiteralDeclaration.eContents().get(0);
		
		//enum WhenOperator returns kexpressions::OperatorType:
		//    WHEN="when"
		//;
		public EnumRule getRule() { return rule; }
		
		//WHEN="when"
		public EnumLiteralDeclaration getWHENEnumLiteralDeclaration() { return cWHENEnumLiteralDeclaration; }
		
		//"when"
		public Keyword getWHENWhenKeyword_0() { return cWHENWhenKeyword_0; }
	}
	public class InitOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.InitOperator");
		private final EnumLiteralDeclaration cINITEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINITHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cINITEnumLiteralDeclaration.eContents().get(0);
		
		//@Override
		//enum InitOperator returns kexpressions::OperatorType:
		//    INIT="->"
		//;
		public EnumRule getRule() { return rule; }
		
		//INIT="->"
		public EnumLiteralDeclaration getINITEnumLiteralDeclaration() { return cINITEnumLiteralDeclaration; }
		
		//"->"
		public Keyword getINITHyphenMinusGreaterThanSignKeyword_0() { return cINITHyphenMinusGreaterThanSignKeyword_0; }
	}
	public class LogicalXorOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LogicalXorOperator");
		private final EnumLiteralDeclaration cBITWISE_XOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBITWISE_XORXorKeyword_0 = (Keyword)cBITWISE_XOREnumLiteralDeclaration.eContents().get(0);
		
		//enum LogicalXorOperator returns kexpressions::OperatorType:
		//    BITWISE_XOR="xor"
		//;
		public EnumRule getRule() { return rule; }
		
		//BITWISE_XOR="xor"
		public EnumLiteralDeclaration getBITWISE_XOREnumLiteralDeclaration() { return cBITWISE_XOREnumLiteralDeclaration; }
		
		//"xor"
		public Keyword getBITWISE_XORXorKeyword_0() { return cBITWISE_XORXorKeyword_0; }
	}
	public class ImpliesOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ImpliesOperator");
		private final EnumLiteralDeclaration cIMPLIESEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cIMPLIESEqualsSignGreaterThanSignKeyword_0 = (Keyword)cIMPLIESEnumLiteralDeclaration.eContents().get(0);
		
		//enum ImpliesOperator returns kexpressions::OperatorType:
		//    IMPLIES="=>"
		//;
		public EnumRule getRule() { return rule; }
		
		//IMPLIES="=>"
		public EnumLiteralDeclaration getIMPLIESEnumLiteralDeclaration() { return cIMPLIESEnumLiteralDeclaration; }
		
		//"=>"
		public Keyword getIMPLIESEqualsSignGreaterThanSignKeyword_0() { return cIMPLIESEqualsSignGreaterThanSignKeyword_0; }
	}
	public class IntDivOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.IntDivOperator");
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDIVDivKeyword_0 = (Keyword)cDIVEnumLiteralDeclaration.eContents().get(0);
		
		//enum IntDivOperator returns kexpressions::OperatorType:
		//    DIV = "div"
		//;
		public EnumRule getRule() { return rule; }
		
		//DIV = "div"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration() { return cDIVEnumLiteralDeclaration; }
		
		//"div"
		public Keyword getDIVDivKeyword_0() { return cDIVDivKeyword_0; }
	}
	public class ConditionalOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ConditionalOperator");
		private final EnumLiteralDeclaration cCONDITIONALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCONDITIONALIfKeyword_0 = (Keyword)cCONDITIONALEnumLiteralDeclaration.eContents().get(0);
		
		//@Override
		//enum ConditionalOperator returns kexpressions::OperatorType:
		//    CONDITIONAL = "if"
		//;
		public EnumRule getRule() { return rule; }
		
		//CONDITIONAL = "if"
		public EnumLiteralDeclaration getCONDITIONALEnumLiteralDeclaration() { return cCONDITIONALEnumLiteralDeclaration; }
		
		//"if"
		public Keyword getCONDITIONALIfKeyword_0() { return cCONDITIONALIfKeyword_0; }
	}
	public class AtMostOneOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.AtMostOneOperator");
		private final EnumLiteralDeclaration cATMOSTONEOFEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cATMOSTONEOFNumberSignKeyword_0 = (Keyword)cATMOSTONEOFEnumLiteralDeclaration.eContents().get(0);
		
		//enum AtMostOneOperator returns kexpressions::OperatorType:
		//    ATMOSTONEOF="#"
		//;
		public EnumRule getRule() { return rule; }
		
		//ATMOSTONEOF="#"
		public EnumLiteralDeclaration getATMOSTONEOFEnumLiteralDeclaration() { return cATMOSTONEOFEnumLiteralDeclaration; }
		
		//"#"
		public Keyword getATMOSTONEOFNumberSignKeyword_0() { return cATMOSTONEOFNumberSignKeyword_0; }
	}
	public class NorOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.NorOperator");
		private final EnumLiteralDeclaration cNOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNORNorKeyword_0 = (Keyword)cNOREnumLiteralDeclaration.eContents().get(0);
		
		//enum NorOperator returns kexpressions::OperatorType:
		//    NOR="nor"
		//;
		public EnumRule getRule() { return rule; }
		
		//NOR="nor"
		public EnumLiteralDeclaration getNOREnumLiteralDeclaration() { return cNOREnumLiteralDeclaration; }
		
		//"nor"
		public Keyword getNORNorKeyword_0() { return cNORNorKeyword_0; }
	}
	public class LastOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.LastOperator");
		private final EnumLiteralDeclaration cLASTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLASTLastKeyword_0 = (Keyword)cLASTEnumLiteralDeclaration.eContents().get(0);
		
		//enum LastOperator returns kexpressions::OperatorType:
		//    LAST="last"
		//;
		public EnumRule getRule() { return rule; }
		
		//LAST="last"
		public EnumLiteralDeclaration getLASTEnumLiteralDeclaration() { return cLASTEnumLiteralDeclaration; }
		
		//"last"
		public Keyword getLASTLastKeyword_0() { return cLASTLastKeyword_0; }
	}
	
	private final LustreProgramElements pLustreProgram;
	private final ValueTypeElements eValueType;
	private final EnumTypeElements eEnumType;
	private final TypeDeclarationElements pTypeDeclaration;
	private final ExternalNodeDeclarationElements pExternalNodeDeclaration;
	private final VariableDeclarationNoInitElements pVariableDeclarationNoInit;
	private final VariableDeclarationInitElements pVariableDeclarationInit;
	private final ValuedObjectNoInitElements pValuedObjectNoInit;
	private final ValuedObjectInitElements pValuedObjectInit;
	private final NodeDeclarationElements pNodeDeclaration;
	private final NodeValuedObjectElements pNodeValuedObject;
	private final EquationElements pEquation;
	private final EmissionElements pEmission;
	private final AssertionElements pAssertion;
	private final AutomatonElements pAutomaton;
	private final AStateElements pAState;
	private final StateValuedObjectElements pStateValuedObject;
	private final ATransitionElements pATransition;
	private final AnActionElements pAnAction;
	private final ProductExpressionElements pProductExpression;
	private final IntDivExpressionElements pIntDivExpression;
	private final NegExpressionElements pNegExpression;
	private final FbyExpressionElements pFbyExpression;
	private final WhenExpressionElements pWhenExpression;
	private final CurrentExpressionElements pCurrentExpression;
	private final PreExpressionElements pPreExpression;
	private final LastExpressionElements pLastExpression;
	private final BoolExpressionElements pBoolExpression;
	private final InitExpressionElements pInitExpression;
	private final TernaryOperationElements pTernaryOperation;
	private final ImpliesExpressionElements pImpliesExpression;
	private final LogicalXorExpressionElements pLogicalXorExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final ValuedExpressionElements pValuedExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final NorAtMostOneExpressionElements pNorAtMostOneExpression;
	private final NotExpressionElements pNotExpression;
	private final AssignOperatorElements eAssignOperator;
	private final CompareOperatorElements eCompareOperator;
	private final LogicalOrOperatorElements eLogicalOrOperator;
	private final LogicalAndOperatorElements eLogicalAndOperator;
	private final NotOperatorElements eNotOperator;
	private final FbyOperatorElements eFbyOperator;
	private final ModOperatorElements eModOperator;
	private final CurrentOperatorElements eCurrentOperator;
	private final WhenOperatorElements eWhenOperator;
	private final InitOperatorElements eInitOperator;
	private final LogicalXorOperatorElements eLogicalXorOperator;
	private final ImpliesOperatorElements eImpliesOperator;
	private final IntDivOperatorElements eIntDivOperator;
	private final ConditionalOperatorElements eConditionalOperator;
	private final AtMostOneOperatorElements eAtMostOneOperator;
	private final NorOperatorElements eNorOperator;
	private final LastOperatorElements eLastOperator;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LustreGrammarAccess(GrammarProvider grammarProvider,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pLustreProgram = new LustreProgramElements();
		this.eValueType = new ValueTypeElements();
		this.eEnumType = new EnumTypeElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pExternalNodeDeclaration = new ExternalNodeDeclarationElements();
		this.pVariableDeclarationNoInit = new VariableDeclarationNoInitElements();
		this.pVariableDeclarationInit = new VariableDeclarationInitElements();
		this.pValuedObjectNoInit = new ValuedObjectNoInitElements();
		this.pValuedObjectInit = new ValuedObjectInitElements();
		this.pNodeDeclaration = new NodeDeclarationElements();
		this.pNodeValuedObject = new NodeValuedObjectElements();
		this.pEquation = new EquationElements();
		this.pEmission = new EmissionElements();
		this.pAssertion = new AssertionElements();
		this.pAutomaton = new AutomatonElements();
		this.pAState = new AStateElements();
		this.pStateValuedObject = new StateValuedObjectElements();
		this.pATransition = new ATransitionElements();
		this.pAnAction = new AnActionElements();
		this.pProductExpression = new ProductExpressionElements();
		this.pIntDivExpression = new IntDivExpressionElements();
		this.pNegExpression = new NegExpressionElements();
		this.pFbyExpression = new FbyExpressionElements();
		this.pWhenExpression = new WhenExpressionElements();
		this.pCurrentExpression = new CurrentExpressionElements();
		this.pPreExpression = new PreExpressionElements();
		this.pLastExpression = new LastExpressionElements();
		this.pBoolExpression = new BoolExpressionElements();
		this.pInitExpression = new InitExpressionElements();
		this.pTernaryOperation = new TernaryOperationElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pLogicalXorExpression = new LogicalXorExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pValuedExpression = new ValuedExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pNorAtMostOneExpression = new NorAtMostOneExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.eAssignOperator = new AssignOperatorElements();
		this.eCompareOperator = new CompareOperatorElements();
		this.eLogicalOrOperator = new LogicalOrOperatorElements();
		this.eLogicalAndOperator = new LogicalAndOperatorElements();
		this.eNotOperator = new NotOperatorElements();
		this.eFbyOperator = new FbyOperatorElements();
		this.eModOperator = new ModOperatorElements();
		this.eCurrentOperator = new CurrentOperatorElements();
		this.eWhenOperator = new WhenOperatorElements();
		this.eInitOperator = new InitOperatorElements();
		this.eLogicalXorOperator = new LogicalXorOperatorElements();
		this.eImpliesOperator = new ImpliesOperatorElements();
		this.eIntDivOperator = new IntDivOperatorElements();
		this.eConditionalOperator = new ConditionalOperatorElements();
		this.eAtMostOneOperator = new AtMostOneOperatorElements();
		this.eNorOperator = new NorOperatorElements();
		this.eLastOperator = new LastOperatorElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.Lustre.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.lustre.Lustre".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * The syntax for this grammar is extracted from the Lustre V6 reference manual.
	// * http://www-verimag.imag.fr/DIST-TOOLS/SYNCHRONE/lustre-v6/doc/lv6-ref-man.pdf
	// *
	// * @author lgr
	// */
	//LustreProgram hidden(WS, SL_COMMENT, ML_COMMENT):
	//    ('include' (includes+=STRING | includes+=STRING))*
	//    (
	//        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
	//        | ('type' types+=TypeDeclaration (';' types+=TypeDeclaration)* ';')
	//        | externals+=ExternalNodeDeclaration
	//        | nodes+=NodeDeclaration
	//    )*
	//;
	public LustreProgramElements getLustreProgramAccess() {
		return pLustreProgram;
	}
	
	public ParserRule getLustreProgramRule() {
		return getLustreProgramAccess().getRule();
	}
	
	//@Override
	//enum ValueType returns kexpressions::ValueType:
	//    BOOL="bool"
	//    | INT="int"
	//    | FLOAT="real"
	//;
	public ValueTypeElements getValueTypeAccess() {
		return eValueType;
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum EnumType returns kexpressions::ValueType:
	//    ENUM="enum"
	//;
	public EnumTypeElements getEnumTypeAccess() {
		return eEnumType;
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//// Type Declaration
	//// TODO: Does not work: this should be a VariableDeclaration too, since it can be a node parameter and thus must be scoped
	//TypeDeclaration:
	//    {TypeDeclaration}
	//    name=ID
	//    ('='
	//        (
	//            type=ValueType
	//            | (type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
	//            // TODO: StructType may also be left empty
	//            | (
	//                type=StructType
	//                '{'
	//                variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
	//                (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
	//                (';')?
	//                '}'
	//            )
	//        )
	//    )?
	//;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//// External Node Declaration
	//ExternalNodeDeclaration returns kexpressions::Declaration:
	//    {ExternalNodeDeclaration}
	//    (isUnsafe?='unsafe')? 'extern' ('function' | hasState?='node')
	//    valuedObjects+=NodeValuedObject
	//    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
	//    'returns'
	//    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
	//    (';')?
	//;
	public ExternalNodeDeclarationElements getExternalNodeDeclarationAccess() {
		return pExternalNodeDeclaration;
	}
	
	public ParserRule getExternalNodeDeclarationRule() {
		return getExternalNodeDeclarationAccess().getRule();
	}
	
	//VariableDeclarationNoInit returns kexpressions::VariableDeclaration:
	//    {LustreVariableDeclaration}
	//    valuedObjects+=ValuedObjectNoInit (',' valuedObjects+=ValuedObjectNoInit)* ':' type=ValueType ('when' clockExpr=BoolExpression)?
	//;
	public VariableDeclarationNoInitElements getVariableDeclarationNoInitAccess() {
		return pVariableDeclarationNoInit;
	}
	
	public ParserRule getVariableDeclarationNoInitRule() {
		return getVariableDeclarationNoInitAccess().getRule();
	}
	
	//VariableDeclarationInit returns kexpressions::VariableDeclaration:
	//    {LustreVariableDeclaration}
	//    valuedObjects+=ValuedObjectInit ('when' clockExpr=BoolExpression)?
	//;
	public VariableDeclarationInitElements getVariableDeclarationInitAccess() {
		return pVariableDeclarationInit;
	}
	
	public ParserRule getVariableDeclarationInitRule() {
		return getVariableDeclarationInitAccess().getRule();
	}
	
	//ValuedObjectNoInit returns kexpressions::ValuedObject:
	//    name=PrimeID
	//    ('^' cardinalities+=Expression)*
	//;
	public ValuedObjectNoInitElements getValuedObjectNoInitAccess() {
		return pValuedObjectNoInit;
	}
	
	public ParserRule getValuedObjectNoInitRule() {
		return getValuedObjectNoInitAccess().getRule();
	}
	
	//ValuedObjectInit returns kexpressions::ValuedObject:
	//    {LustreValuedObject}
	//    name=PrimeID
	//    ('^' cardinalities+=Expression)*
	//    (':' type=ValueType)
	//    ('=' initialValue=Expression)?
	//;
	public ValuedObjectInitElements getValuedObjectInitAccess() {
		return pValuedObjectInit;
	}
	
	public ParserRule getValuedObjectInitRule() {
		return getValuedObjectInitAccess().getRule();
	}
	
	//// Node Declaration
	//NodeDeclaration returns kexpressions::Declaration:
	//    {NodeDeclaration}
	//    (isUnsafe?='unsafe')? ('function' | hasState?='node')
	//    valuedObjects+=NodeValuedObject
	//    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
	//    'returns'
	//    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
	//    ';'?
	//    (
	//        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
	//        | ('var' variables+=(VariableDeclarationInit|VariableDeclarationNoInit) (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* ';')
	//    )*
	//    'let'
	//    (
	//        equations+=Equation
	//        | emissions+=Emission
	//        | assertions+=Assertion
	//        | automatons+=Automaton
	//    )*
	//    'tel'
	//    ('.' | (';')?)
	//;
	public NodeDeclarationElements getNodeDeclarationAccess() {
		return pNodeDeclaration;
	}
	
	public ParserRule getNodeDeclarationRule() {
		return getNodeDeclarationAccess().getRule();
	}
	
	//NodeValuedObject returns kexpressions::ValuedObject:
	//    {NodeValuedObject}
	//    name=ID
	//;
	public NodeValuedObjectElements getNodeValuedObjectAccess() {
		return pNodeValuedObject;
	}
	
	public ParserRule getNodeValuedObjectRule() {
		return getNodeValuedObjectAccess().getRule();
	}
	
	//Equation returns keffects::Assignment:
	//    {Equation}
	//    (
	//        // Left side: (x, y, ...) or x, y, ... or x
	//        ('(' references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)* ')')
	//        | (references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)*)
	//        | reference=ValuedObjectReference
	//    )
	//    operator=AssignOperator
	//    expression=Expression
	//    ';'
	//;
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}
	
	//Emission returns keffects::Emission:
	//    'emit' (ValuedEmission | PureEmission) ';'
	//;
	public EmissionElements getEmissionAccess() {
		return pEmission;
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}
	
	//Assertion returns kexpressions::Expression:
	//    {Assertion}
	//    'assert' expr=Expression ';'
	//;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//Automaton:
	//    'automaton' name=ID states+=AState (states+=AState)* 'returns' '..' ';'
	//;
	public AutomatonElements getAutomatonAccess() {
		return pAutomaton;
	}
	
	public ParserRule getAutomatonRule() {
		return getAutomatonAccess().getRule();
	}
	
	//AState:
	//    (initial?='initial')?
	//    'state'
	//    valuedObject=StateValuedObject
	//    (
	//        ('const' constants+=VariableDeclarationInit ';' (constants+=VariableDeclarationInit ';')* )
	//        | ('var' variables+=VariableDeclarationInit (';' variables+=VariableDeclarationInit)* ';')
	//    )*
	//    // Body
	//    ('let'
	//        (
	//            equations+=Equation
	//            | emissions+=Emission
	//            | assertions+=Assertion
	//            | automatons+=Automaton
	//        )*
	//    'tel')?
	//    ('.' | (';')?)
	//    transitions+=ATransition*
	//;
	public AStateElements getAStateAccess() {
		return pAState;
	}
	
	public ParserRule getAStateRule() {
		return getAStateAccess().getRule();
	}
	
	//StateValuedObject returns kexpressions::ValuedObject:
	//    {StateValuedObject}
	//    name=ID
	//;
	public StateValuedObjectElements getStateValuedObjectAccess() {
		return pStateValuedObject;
	}
	
	public ParserRule getStateValuedObjectRule() {
		return getStateValuedObjectAccess().getRule();
	}
	
	//ATransition:
	//    {ATransition}
	//    ('until'|strong?='unless') actions+=AnAction*
	//;
	public ATransitionElements getATransitionAccess() {
		return pATransition;
	}
	
	public ParserRule getATransitionRule() {
		return getATransitionAccess().getRule();
	}
	
	//AnAction:
	//    ('if' condition=BoolExpression)? ('do' (effects+=Equation | effects+=Emission)*)? ('restart'|history?='resume') nextState=[StateValuedObject] ';'
	//;
	public AnActionElements getAnActionAccess() {
		return pAnAction;
	}
	
	public ParserRule getAnActionRule() {
		return getAnActionAccess().getRule();
	}
	
	///**
	// * -------------------- Expression Adjustments
	// *
	// * The precedence hierarchy is not as follows:
	// *
	// * Expression
	// * + BoolExpression
	// *   + InitExpression
	// *     + TernaryOperation *
	// *       + ImpliesExpression
	// *         + LogicalXorExpression
	// *           + LogicalOrExpression
	// *             + LogicalAndExpression
	// *               + CompareExpression
	// *                 + NotOrValuedExpression
	// *                   + ValuedExpression (see valued expression below)
	// *                   + NotExpression *
	// *                     + AtomicExpression *
	// *                       + BoolValue
	// *                       + ValuedObjectTestExpression
	// *                         + ValuedObjectReference
	// *                       + FunctionCall
	// *                       + TextExpression
	// *                       + NoneOfExpression
	// *                       + NorExpression
	// * + ValuedExpression
	// *   + SumExpression
	// *      + ProductExpression
	// *                  + IntDivExpression
	// *                    + NegExpression *
	// *                      + FbyExpression
	// *                        + WhenExpression
	// *                          + CurrentExpression
	// *                            + PreExpression
	// *                              + AtomicValuedExpression *
	// *                                + IntValue
	// *                                + FloatValue
	// *                                + StringValue
	// *                                + AtomicExpression
	// *
	// */
	//// Needs override because of mod operator is 'mod' not '%' and IntDivExpressin comes next
	//@Override
	//ProductExpression returns kexpressions::Expression:
	//    IntDivExpression
	//    (
	//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=IntDivExpression ('*' subExpressions+=IntDivExpression)*)
	//    |
	//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=IntDivExpression ('/' subExpressions+=IntDivExpression)*)
	//    |
	//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=IntDivExpression ('mod' subExpressions+=IntDivExpression)*)
	//    )*
	//;
	public ProductExpressionElements getProductExpressionAccess() {
		return pProductExpression;
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//IntDivExpression returns kexpressions::Expression:
	//    NegExpression
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=IntDivOperator subExpressions+=NegExpression)
	//        ('div' subExpressions+=AtomicValuedExpression)*
	//    )?
	//;
	public IntDivExpressionElements getIntDivExpressionAccess() {
		return pIntDivExpression;
	}
	
	public ParserRule getIntDivExpressionRule() {
		return getIntDivExpressionAccess().getRule();
	}
	
	//// Skip TernaryOperation after NegExpression
	//@Override
	//NegExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=SubOperator subExpressions+=(NegExpression)
	//    | FbyExpression
	//;
	public NegExpressionElements getNegExpressionAccess() {
		return pNegExpression;
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//// Force WhenExpression, CurrentExpression and PreExpression inbetween FbyExpression and AtomicValuedExpression
	//@Override
	//FbyExpression returns kexpressions::Expression:
	//    WhenExpression
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=FbyOperator subExpressions+=WhenExpression)
	//        ('fby' subExpressions+=WhenExpression)*
	//    )?;
	public FbyExpressionElements getFbyExpressionAccess() {
		return pFbyExpression;
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//WhenExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    subExpressions += AtomicValuedExpression operator=WhenOperator subExpressions += AtomicValuedExpression
	//    | CurrentExpression
	//;
	public WhenExpressionElements getWhenExpressionAccess() {
		return pWhenExpression;
	}
	
	public ParserRule getWhenExpressionRule() {
		return getWhenExpressionAccess().getRule();
	}
	
	//CurrentExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=CurrentOperator subExpressions += AtomicValuedExpression
	//    | PreExpression
	//;
	public CurrentExpressionElements getCurrentExpressionAccess() {
		return pCurrentExpression;
	}
	
	public ParserRule getCurrentExpressionRule() {
		return getCurrentExpressionAccess().getRule();
	}
	
	//PreExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=PreOperator subExpressions+=LastExpression
	//    | LastExpression
	//;
	public PreExpressionElements getPreExpressionAccess() {
		return pPreExpression;
	}
	
	public ParserRule getPreExpressionRule() {
		return getPreExpressionAccess().getRule();
	}
	
	//LastExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=LastOperator subExpressions+=AtomicValuedExpression
	//    | AtomicValuedExpression
	//;
	public LastExpressionElements getLastExpressionAccess() {
		return pLastExpression;
	}
	
	public ParserRule getLastExpressionRule() {
		return getLastExpressionAccess().getRule();
	}
	
	//// Force TernaryOperation, InitExpression, ImpliesExpression and LogicalXorExpression inbetween BoolExpression and LogicalOrExpression
	//@Override
	//BoolExpression returns kexpressions::Expression:
	//    InitExpression
	//;
	public BoolExpressionElements getBoolExpressionAccess() {
		return pBoolExpression;
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//@Override
	//InitExpression returns kexpressions::Expression:
	//    TernaryOperation
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=InitOperator subExpressions+=TernaryOperation)
	//        ('->' subExpressions+=TernaryOperation)*
	//    )?;
	public InitExpressionElements getInitExpressionAccess() {
		return pInitExpression;
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//// Overwide Ternary operator to support if ... then ... else
	//@Override
	//TernaryOperation returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=ConditionalOperator subExpressions += TernaryOperation 'then' subExpressions += TernaryOperation 'else' subExpressions += TernaryOperation
	//    | ImpliesExpression
	//;
	public TernaryOperationElements getTernaryOperationAccess() {
		return pTernaryOperation;
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//ImpliesExpression returns kexpressions::Expression:
	//    LogicalXorExpression
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=ImpliesOperator subExpressions+=LogicalXorExpression)
	//        ('=>' subExpressions+=LogicalXorExpression)*
	//    )?
	//;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//LogicalXorExpression returns kexpressions::Expression:
	//    LogicalOrExpression
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=LogicalXorOperator subExpressions+=LogicalOrExpression)
	//        ('xor' subExpressions+=LogicalOrExpression)*
	//    )?
	//;
	public LogicalXorExpressionElements getLogicalXorExpressionAccess() {
		return pLogicalXorExpression;
	}
	
	public ParserRule getLogicalXorExpressionRule() {
		return getLogicalXorExpressionAccess().getRule();
	}
	
	//// Override LogicalAndExpresssion and LogicalOrExpression to allow asssociativity
	//@Override
	//LogicalOrExpression returns kexpressions::Expression:
	//    LogicalAndExpression
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
	//        ('or' subExpressions+=LogicalAndExpression)*
	//    )?
	//;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Directly redirect to CompareOperation to exclude the bitwise operations
	//@Override
	//LogicalAndExpression returns kexpressions::Expression:
	//    CompareOperation
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=LogicalAndOperator subExpressions+=CompareOperation)
	//        ('and' subExpressions+=CompareOperation)*
	//    )?
	//;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Directly redirect to SumExpression to exclude shift operations
	//@Override
	//ValuedExpression returns kexpressions::Expression:
	//    SumExpression
	//;
	public ValuedExpressionElements getValuedExpressionAccess() {
		return pValuedExpression;
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//// Exclude FunctionCall, RandomCall, RandomizeCall and TextExpression
	//@Override
	//AtomicExpression returns kexpressions::Expression:
	//    BoolValue
	//    | '(' BoolExpression ')'
	//    | ReferenceCall
	//    | ValuedObjectTestExpression // Last to allow detection of calls
	//    | NorAtMostOneExpression
	//;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//NorAtMostOneExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    (operator=AtMostOneOperator | operator=NorOperator)
	//    '('subExpressions+=Expression (',' subExpressions+=Expression)* ')'
	//;
	public NorAtMostOneExpressionElements getNorAtMostOneExpressionAccess() {
		return pNorAtMostOneExpression;
	}
	
	public ParserRule getNorAtMostOneExpressionRule() {
		return getNorAtMostOneExpressionAccess().getRule();
	}
	
	//// Exclude BitwiseNotExpression
	//@Override
	//NotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=NotOperator subExpressions+=(NotExpression)
	//    | AtomicExpression
	//;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	///**
	// * -------------------- Operator Adjustments
	// */
	//// Override operators that are different in Lustre
	//@Override
	//enum AssignOperator returns keffects::AssignOperator:
	//    // Reduce possible assignments to only work with '='
	//    ASSIGN="="
	//;
	public AssignOperatorElements getAssignOperatorAccess() {
		return eAssignOperator;
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//@Override
	//enum CompareOperator returns kexpressions::OperatorType:
	//    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"
	//;
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//@Override
	//enum LogicalOrOperator returns kexpressions::OperatorType:
	//    LOGICAL_OR="or"
	//;
	public LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return eLogicalOrOperator;
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//@Override
	//enum LogicalAndOperator returns kexpressions::OperatorType:
	//    LOGICAL_AND="and"
	//;
	public LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return eLogicalAndOperator;
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//@Override
	//enum NotOperator returns kexpressions::OperatorType:
	//    NOT="not"
	//;
	public NotOperatorElements getNotOperatorAccess() {
		return eNotOperator;
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//@Override
	//enum FbyOperator returns kexpressions::OperatorType:
	//    FBY="fby"
	//;
	public FbyOperatorElements getFbyOperatorAccess() {
		return eFbyOperator;
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//@Override
	//enum ModOperator returns kexpressions::OperatorType:
	//    MOD="mod"
	//;
	public ModOperatorElements getModOperatorAccess() {
		return eModOperator;
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//// Define operators that are Lustre specific
	//enum CurrentOperator returns kexpressions::OperatorType:
	//    CURRENT="current"
	//;
	public CurrentOperatorElements getCurrentOperatorAccess() {
		return eCurrentOperator;
	}
	
	public EnumRule getCurrentOperatorRule() {
		return getCurrentOperatorAccess().getRule();
	}
	
	//enum WhenOperator returns kexpressions::OperatorType:
	//    WHEN="when"
	//;
	public WhenOperatorElements getWhenOperatorAccess() {
		return eWhenOperator;
	}
	
	public EnumRule getWhenOperatorRule() {
		return getWhenOperatorAccess().getRule();
	}
	
	//@Override
	//enum InitOperator returns kexpressions::OperatorType:
	//    INIT="->"
	//;
	public InitOperatorElements getInitOperatorAccess() {
		return eInitOperator;
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum LogicalXorOperator returns kexpressions::OperatorType:
	//    BITWISE_XOR="xor"
	//;
	public LogicalXorOperatorElements getLogicalXorOperatorAccess() {
		return eLogicalXorOperator;
	}
	
	public EnumRule getLogicalXorOperatorRule() {
		return getLogicalXorOperatorAccess().getRule();
	}
	
	//enum ImpliesOperator returns kexpressions::OperatorType:
	//    IMPLIES="=>"
	//;
	public ImpliesOperatorElements getImpliesOperatorAccess() {
		return eImpliesOperator;
	}
	
	public EnumRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}
	
	//enum IntDivOperator returns kexpressions::OperatorType:
	//    DIV = "div"
	//;
	public IntDivOperatorElements getIntDivOperatorAccess() {
		return eIntDivOperator;
	}
	
	public EnumRule getIntDivOperatorRule() {
		return getIntDivOperatorAccess().getRule();
	}
	
	//@Override
	//enum ConditionalOperator returns kexpressions::OperatorType:
	//    CONDITIONAL = "if"
	//;
	public ConditionalOperatorElements getConditionalOperatorAccess() {
		return eConditionalOperator;
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum AtMostOneOperator returns kexpressions::OperatorType:
	//    ATMOSTONEOF="#"
	//;
	public AtMostOneOperatorElements getAtMostOneOperatorAccess() {
		return eAtMostOneOperator;
	}
	
	public EnumRule getAtMostOneOperatorRule() {
		return getAtMostOneOperatorAccess().getRule();
	}
	
	//enum NorOperator returns kexpressions::OperatorType:
	//    NOR="nor"
	//;
	public NorOperatorElements getNorOperatorAccess() {
		return eNorOperator;
	}
	
	public EnumRule getNorOperatorRule() {
		return getNorOperatorAccess().getRule();
	}
	
	//enum LastOperator returns kexpressions::OperatorType:
	//    LAST="last"
	//;
	public LastOperatorElements getLastOperatorAccess() {
		return eLastOperator;
	}
	
	public EnumRule getLastOperatorRule() {
		return getLastOperatorAccess().getRule();
	}
	
	///*
	// * -------------------- Lexical tokens
	// */
	//@Override
	//terminal ML_COMMENT:
	//    '(*' -> '*)'
	//;
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '--' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language
	// * that is used for testing kexpressions and keffects.
	// */
	//// ------------ //
	////  KEXT Rules  //
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of
	//// test entities may follow.
	//Kext returns kext::Kext:
	//    scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    (name=ID)? '{'
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//    expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'expression'
	//    expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'json'
	//    expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z
	//Declaration returns kexpressions::Declaration:
	//    VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon returns kexpressions::Declaration:
	//    VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    const?='const'?
	//    input?='input'?
	//    output?='output'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        |
	//        signal?='signal'
	//        |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    input?='input'?
	//    output?='output'?
	//    const?='const'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        | signal?='signal'
	//        | (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethod*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=Declaration*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod returns kexpressions::Declaration:
	//    Declaration | EnumDeclaration | MethodDeclaration
	//;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethodWOSemicolon*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationWOSemicolon*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return gaKExt.getClassDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon returns kexpressions::Declaration:
	//    DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
	//;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//EnumDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType=STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//        ';'
	//    '}'
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationElements getEnumDeclarationAccess() {
		return gaKExt.getEnumDeclarationAccess();
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumMemberDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return gaKExt.getEnumMemberDeclarationAccess();
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}
	
	//EnumDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType = STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//    '}'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationWOSemicolonElements getEnumDeclarationWOSemicolonAccess() {
		return gaKExt.getEnumDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getEnumDeclarationWOSemicolonRule() {
		return getEnumDeclarationWOSemicolonAccess().getRule();
	}
	
	//MethodDeclaration returns kexpressions::MethodDeclaration:
	//    {kexpressions::MethodDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.MethodDeclarationElements getMethodDeclarationAccess() {
		return gaKExt.getMethodDeclarationAccess();
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//MethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
	//    {kexpressions::MethodDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return gaKExt.getMethodDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString returns kexpressions::ExternString:
	//    annotations+=TagAnnotation*
	//    code = STRING
	//;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//// ---
	////  Generics
	//// ---
	//GenericParameterDeclaration returns kexpressions::GenericParameterDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject
	//    (
	//        ('is' valueType = ValueType)
	//        |
	//        ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
	//    )?
	//;
	public KExtGrammarAccess.GenericParameterDeclarationElements getGenericParameterDeclarationAccess() {
		return gaKExt.getGenericParameterDeclarationAccess();
	}
	
	public ParserRule getGenericParameterDeclarationRule() {
		return getGenericParameterDeclarationAccess().getRule();
	}
	
	//GenericParameter returns kexpressions::Parameter:
	//    // Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
	//    // Here GenericTypeReference has precedence and has to cover certain
	//    // references to VOs. This needs to be specifically handled in the scoper and in the resource
	//    // by using the KExtGenericParamterConverter.
	//    // Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
	//    // index or sub reference specified, this is why there are special non-optional rules.
	//    expression = (ValueTypeReference
	//                 | AnyValue
	//                 | GenericParameter_GenericTypeReference_Parameterized
	//                 | GenericParameter_ValuedObjectReference_Array
	//                 | GenericParameter_ValuedObjectReference_Sub
	//                 | GenericTypeReference
	//                 | ValuedObjectReference)
	//;
	public KExtGrammarAccess.GenericParameterElements getGenericParameterAccess() {
		return gaKExt.getGenericParameterAccess();
	}
	
	public ParserRule getGenericParameterRule() {
		return getGenericParameterAccess().getRule();
	}
	
	//ValueTypeReference returns kexpressions::ValueTypeReference:
	//    valueType = ValueType
	//;
	public KExtGrammarAccess.ValueTypeReferenceElements getValueTypeReferenceAccess() {
		return gaKExt.getValueTypeReferenceAccess();
	}
	
	public ParserRule getValueTypeReferenceRule() {
		return getValueTypeReferenceAccess().getRule();
	}
	
	//GenericTypeReference returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//;
	public KExtGrammarAccess.GenericTypeReferenceElements getGenericTypeReferenceAccess() {
		return gaKExt.getGenericTypeReferenceAccess();
	}
	
	public ParserRule getGenericTypeReferenceRule() {
		return getGenericTypeReferenceAccess().getRule();
	}
	
	//// Special rules for GenericParameter parsing
	//GenericParameter_GenericTypeReference_Parameterized returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    '<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>' // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_GenericTypeReference_ParameterizedElements getGenericParameter_GenericTypeReference_ParameterizedAccess() {
		return gaKExt.getGenericParameter_GenericTypeReference_ParameterizedAccess();
	}
	
	public ParserRule getGenericParameter_GenericTypeReference_ParameterizedRule() {
		return getGenericParameter_GenericTypeReference_ParameterizedAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Array returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')+ // mandatory
	//    ('.' subReference=ValuedObjectReference)?
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_ArrayElements getGenericParameter_ValuedObjectReference_ArrayAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_ArrayAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_ArrayRule() {
		return getGenericParameter_ValuedObjectReference_ArrayAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Sub returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference) // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_SubElements getGenericParameter_ValuedObjectReference_SubAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_SubAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_SubRule() {
		return getGenericParameter_ValuedObjectReference_SubAccess().getRule();
	}
	
	//// ---
	////  Scheduling Directives
	//// ---
	//ScheduleDeclaration returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//    CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part.
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('=' initialValue=Expression)?
	//    ( 'combine'
	//      (combineOperator = CombineOperator)
	//    )?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//ReferenceValuedObject returns kexpressions::ValuedObject:
	//    {kexpressions::ValuedObject}
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
	//    ('=' initialValue=Expression)?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ReferenceValuedObjectElements getReferenceValuedObjectAccess() {
		return gaKExt.getReferenceValuedObjectAccess();
	}
	
	public ParserRule getReferenceValuedObjectRule() {
		return getReferenceValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	//NamespaceID returns ecore::EString:
	//  ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */
	//// ---------------- //
	////  KEffects Rules  //
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect returns keffects::Effect:
	//    Assignment |
	//    PostfixEffect |
	//    ValuedEmission | // Will consume some ReferenceCallEffects
	//    HostcodeEffect |
	//    ReferenceCallEffect |
	//    FunctionCallEffect |
	//    PrintCallEffect |
	//    RandomizeCallEffect |
	//    PureEmission;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals.
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted
	//// annotations defined in the annotations grammar.
	//PureEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    "(" newValue = Expression ")"
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission returns keffects::Emission:
	//    ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1
	//Assignment returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=AssignOperator expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I--
	//PostfixEffect returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//    (annotations+=Annotation)*
	//     text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect returns keffects::ReferenceCallEffect:
	//    super?='super.'?
	//    (annotations+=Annotation)*
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//    (annotations+=Annotation)*
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.
	//PrintCallEffect returns keffects::PrintCallEffect:
	//    (annotations+=Annotation)*
	//    'print'
	//    ('(' parameters += Parameter (',' parameters += Parameter)* ')')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect returns keffects::RandomizeCallEffect:
	//    {keffects::RandomizeCallEffect}
	//    (annotations+=Annotation)*
	//    'randomize'
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//// Postfix Operator Enum
	//enum PostfixOperator returns keffects::AssignOperator:
	//    POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// -------------------- //
	////  KExpressions Rules  //
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */
	//// Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//    Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression returns Expression:
	//     (BoolExpression | ValuedExpression);
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//    BitwiseXOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
	//        ('|' subExpressions+=BitwiseXOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression returns Expression:
	//    BitwiseAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
	//        ('^' subExpressions+=BitwiseAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//    CompareOperation
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
	//        ('&' subExpressions+=CompareOperation)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares.
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//    NotOrValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        operator=CompareOperator subExpressions+=NotOrValuedExpression
	//    )?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression returns Expression:
	//    ValuedExpression
	//    | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression returns Expression:
	//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//ShiftExpressions returns Expression:
	//    SumExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
	//        ('<<' subExpressions+=ShiftRightExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
	//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
	//        ('>>>' subExpressions+=SumExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression returns Expression:
	//    ProductExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=MultOperator subExpressions+=NegExpression)
	//        ('*' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=DivOperator subExpressions+=NegExpression)
	//        ('/' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ModOperator subExpressions+=NegExpression)
	//        ('%' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//SfbyExpression returns Expression:
	//    AtomicValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
	//        ('sfby' subExpressions+=AtomicValuedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicValuedExpression returns Expression:
	//    IntValue
	//    | FloatValue
	//    | StringValue
	//    | VectorValue
	//    | NullValue
	//    | '(' ValuedExpression ')'
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.
	//BoolScheduleExpression returns Expression:
	//    LogicalOrExpression
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
	//    | ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// Accesses a arbitrary target in a static way (needs to be adjusted in the scoper of the deriving language)
	//// Example: static(Constants).MAX
	//SpecialAccessExpression returns SpecialAccessExpression:
	//    access='static' '('
	//    (container=[annotations::NamedObject|PrimeID] '.')?
	//    target=[annotations::NamedObject|PrimeID]
	//    ')' '.' subReference=ValuedObjectReference;
	public KExpressionsGrammarAccess.SpecialAccessExpressionElements getSpecialAccessExpressionAccess() {
		return gaKExpressions.getSpecialAccessExpressionAccess();
	}
	
	public ParserRule getSpecialAccessExpressionRule() {
		return getSpecialAccessExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID returns ecore::EString:
	//  ID ("'")*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference returns ValuedObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference returns ScheduleObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('.' subReference=ValuedObjectReference)?
	//    priority=INT
	//    ('annotated(' (annotations += QuotedStringAnnotation)+ ')')?
	//    ;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list.
	//ReferenceCall returns ReferenceCall:
	//    super?='super.'?
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (
	//        ('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()'
	//    );
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomCall returns RandomCall:
	//    {RandomCall}
	//    'random' ('()')?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomizeCall returns RandomizeCall:
	//    {RandomizeCall}
	//    'randomize' ('()')?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list.
	//FunctionCall returns FunctionCall:
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall returns PrintCall:
	//    {PrintCall}
	//    'print'
	//    (
	//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
	//    |
	//        '()'
	//    );
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter returns Parameter:
	//    (accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression returns TextExpression:
	//    (annotations += Annotation)*
	//    text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue returns IntValue:
	//    value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue returns FloatValue:
	//    value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue returns BoolValue:
	//    value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue returns VectorValue:
	//    '{' (
	//        values+=VectorValueMember (',' values+=VectorValueMember)*
	//        |
	//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
	//    ) '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember returns Expression:
	//    BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue returns IgnoreValue:
	//    {IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext.
	//AnyType returns ecore::EString:
	//    BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue returns Value:
	//    IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//    PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//    BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//    BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//    BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//    BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//    ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//    SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//    MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//    DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//    VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//    SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//    SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//    SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//    POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//    POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//    SFBY = "sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//    HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//    STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//    CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum CombineOperator returns CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier returns AccessModifier:
	//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//    VOID="void" |
	//    BOOL="bool" | INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType returns ParameterAccessType:
	//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
	//;
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                //
	//// -------------------- //
	//JsonObjectValue returns JsonObjectValue:
	//    {JsonObjectValue}
	//    '{'
	//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
	//    '}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember returns JsonObjectMember:
	//    key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue returns JsonArrayValue:
	//    {JsonArrayValue}
	//    '['
	//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
	//    ']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue returns Value:
	//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue returns NullValue:
	//    {NullValue}
	//    'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma returns JsonPragma:
	//    '#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation returns JsonAnnotation:
	//    '@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma returns annotations::Pragma:
	//    super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// OO
	//ThisExpression returns ThisExpression:
	//    {ThisExpression}
	//    'this';
	public KExpressionsGrammarAccess.ThisExpressionElements getThisExpressionAccess() {
		return gaKExpressions.getThisExpressionAccess();
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//// ------------------------ //
	////  KExpressions Terminals  //
	//// ------------------------ //
	//// Hostcode Terminals
	//// Custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE returns ecore::EString:
	//    "`" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"`") )* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// ------------------ //
	////  Annotation Rules  //
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters!
	//Annotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.
	//Pragma returns Pragma:
	//    StringPragma |
	//    PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations.
	//// You can use this rule in derived grammars if you don't want to permit typed strings.
	//RestrictedTypeAnnotation returns Annotation:
	//    CommentAnnotation |
	//    RestrictedKeyStringValueAnnotation |
	//    RestrictedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in
	//// derived grammars if you don't want to permit unquoted strings.
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)
	//QuotedStringAnnotation returns Annotation:
	//    CommentAnnotation |
	//    QuotedKeyStringValueAnnotation |
	//    QuotedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation returns CommentAnnotation:
	//    values += COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL returns CommentAnnotation:
	//    values += SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation returns TagAnnotation:
	//    '@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag returns Pragma:
	//    '#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.
	//KeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma returns StringPragma:
	//    '#' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString returns ecore::EString:
	//    STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID returns ecore::EString:
	//  ID (('.'|'-') ID)* (('#') INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID returns ecore::EString:
	//  ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer returns ecore::EInt:
	//    '-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger returns ecore::EDouble:
	//    '-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//// ---------------------- //
	////  Annotation Terminals  //
	//// ---------------------- //
	//// Comment Annotation Terminal
	//// Custom terminal rule introducing semantic comments.
	//terminal COMMENT_ANNOTATION returns ecore::EString:
	//    '/**' -> '*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION returns ecore::EString:
	//    '//*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//// Number Terminal
	//terminal fragment NUMBER :
	//    '0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//// Integer Terminal
	//// An INT is a list of numbers.
	//@Override
	//terminal INT returns ecore::EInt:
	//    NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//// Float Terminal (internal precision: double!)
	//// Make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EDouble:
	//    NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
	//    NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//// Boolean Terminal
	//// Introduce boolean values.
	//terminal BOOLEAN returns ecore::EBooleanObject :
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//// String Terminal
	//// Custom terminal rule for strings, only use double quotes.
	//@Override
	//terminal STRING returns ecore::EString:
	//    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?(('_'?'a'..'z'|'_'?'A'..'Z')|'_''0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
