/*
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.scade.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ScadeEquationsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ScadeProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.scade.ScadeEquations.ScadeProgram");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEquationsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEquationsScadeEquationParserRuleCall_0_0 = (RuleCall)cEquationsAssignment_0.eContents().get(0);
		private final Assignment cAssertionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAssertionsAssertionParserRuleCall_1_0 = (RuleCall)cAssertionsAssignment_1.eContents().get(0);
		private final Assignment cAutomatonsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAutomatonsAutomatonParserRuleCall_2_0 = (RuleCall)cAutomatonsAssignment_2.eContents().get(0);
		
		///**
		// * This grammar represents the Lustre equations that can be extracted in SCADE Suite.
		// */
		//ScadeProgram hidden (WS, SL_COMMENT, ML_COMMENT):
		//    (
		//        equations+=ScadeEquation
		////        | emissions+=ScadeEmission
		//        | assertions+=Assertion
		//        | automatons+=Automaton
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    (
		//        equations+=ScadeEquation
		////        | emissions+=ScadeEmission
		//        | assertions+=Assertion
		//        | automatons+=Automaton
		//    )*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equations+=ScadeEquation
		public Assignment getEquationsAssignment_0() { return cEquationsAssignment_0; }
		
		//ScadeEquation
		public RuleCall getEquationsScadeEquationParserRuleCall_0_0() { return cEquationsScadeEquationParserRuleCall_0_0; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_1() { return cAssertionsAssignment_1; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_1_0() { return cAssertionsAssertionParserRuleCall_1_0; }
		
		//automatons+=Automaton
		public Assignment getAutomatonsAssignment_2() { return cAutomatonsAssignment_2; }
		
		//Automaton
		public RuleCall getAutomatonsAutomatonParserRuleCall_2_0() { return cAutomatonsAutomatonParserRuleCall_2_0; }
	}
	public class ScadeEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.scade.ScadeEquations.ScadeEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cReferencesAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cReferencesValuedObjectStringParserRuleCall_0_0_1_0 = (RuleCall)cReferencesAssignment_0_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cReferencesAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cReferencesValuedObjectStringParserRuleCall_0_0_3_0 = (RuleCall)cReferencesAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_0_4 = (Group)cGroup_0_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_0_4_0 = (Keyword)cGroup_0_0_4.eContents().get(0);
		private final Assignment cReferencesAssignment_0_0_4_1 = (Assignment)cGroup_0_0_4.eContents().get(1);
		private final RuleCall cReferencesValuedObjectStringParserRuleCall_0_0_4_1_0 = (RuleCall)cReferencesAssignment_0_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_5 = (Keyword)cGroup_0_0.eContents().get(5);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cReferencesAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cReferencesValuedObjectStringParserRuleCall_0_1_0_0 = (RuleCall)cReferencesAssignment_0_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cReferencesAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cReferencesValuedObjectStringParserRuleCall_0_1_2_0 = (RuleCall)cReferencesAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Keyword cCommaKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cReferencesAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cReferencesValuedObjectStringParserRuleCall_0_1_3_1_0 = (RuleCall)cReferencesAssignment_0_1_3_1.eContents().get(0);
		private final Assignment cReferencesAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cReferencesValuedObjectStringParserRuleCall_0_2_0 = (RuleCall)cReferencesAssignment_0_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAssignOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ScadeEquation:
		//    (
		//        // Left side: (x, y, ...) or x, y, ... or x
		//        ('(' references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)* ')')
		//        | (references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)*)
		//        | references+=ValuedObjectString
		//    )
		//    operator=AssignOperator
		//    expression=Expression
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    // Left side: (x, y, ...) or x, y, ... or x
		//    ('(' references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)* ')')
		//    | (references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)*)
		//    | references+=ValuedObjectString
		//)
		//operator=AssignOperator
		//expression=Expression
		//';'
		public Group getGroup() { return cGroup; }
		
		//(
		//    // Left side: (x, y, ...) or x, y, ... or x
		//    ('(' references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)* ')')
		//    | (references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)*)
		//    | references+=ValuedObjectString
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//// Left side: (x, y, ...) or x, y, ... or x
		//('(' references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)* ')')
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_0() { return cLeftParenthesisKeyword_0_0_0; }
		
		//references+=ValuedObjectString
		public Assignment getReferencesAssignment_0_0_1() { return cReferencesAssignment_0_0_1; }
		
		//ValuedObjectString
		public RuleCall getReferencesValuedObjectStringParserRuleCall_0_0_1_0() { return cReferencesValuedObjectStringParserRuleCall_0_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_0_0_2() { return cCommaKeyword_0_0_2; }
		
		//references+=ValuedObjectString
		public Assignment getReferencesAssignment_0_0_3() { return cReferencesAssignment_0_0_3; }
		
		//ValuedObjectString
		public RuleCall getReferencesValuedObjectStringParserRuleCall_0_0_3_0() { return cReferencesValuedObjectStringParserRuleCall_0_0_3_0; }
		
		//(',' references+=ValuedObjectString)*
		public Group getGroup_0_0_4() { return cGroup_0_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_0_4_0() { return cCommaKeyword_0_0_4_0; }
		
		//references+=ValuedObjectString
		public Assignment getReferencesAssignment_0_0_4_1() { return cReferencesAssignment_0_0_4_1; }
		
		//ValuedObjectString
		public RuleCall getReferencesValuedObjectStringParserRuleCall_0_0_4_1_0() { return cReferencesValuedObjectStringParserRuleCall_0_0_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_5() { return cRightParenthesisKeyword_0_0_5; }
		
		//(references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)*)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//references+=ValuedObjectString
		public Assignment getReferencesAssignment_0_1_0() { return cReferencesAssignment_0_1_0; }
		
		//ValuedObjectString
		public RuleCall getReferencesValuedObjectStringParserRuleCall_0_1_0_0() { return cReferencesValuedObjectStringParserRuleCall_0_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1_1() { return cCommaKeyword_0_1_1; }
		
		//references+=ValuedObjectString
		public Assignment getReferencesAssignment_0_1_2() { return cReferencesAssignment_0_1_2; }
		
		//ValuedObjectString
		public RuleCall getReferencesValuedObjectStringParserRuleCall_0_1_2_0() { return cReferencesValuedObjectStringParserRuleCall_0_1_2_0; }
		
		//(',' references+=ValuedObjectString)*
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//','
		public Keyword getCommaKeyword_0_1_3_0() { return cCommaKeyword_0_1_3_0; }
		
		//references+=ValuedObjectString
		public Assignment getReferencesAssignment_0_1_3_1() { return cReferencesAssignment_0_1_3_1; }
		
		//ValuedObjectString
		public RuleCall getReferencesValuedObjectStringParserRuleCall_0_1_3_1_0() { return cReferencesValuedObjectStringParserRuleCall_0_1_3_1_0; }
		
		//references+=ValuedObjectString
		public Assignment getReferencesAssignment_0_2() { return cReferencesAssignment_0_2; }
		
		//ValuedObjectString
		public RuleCall getReferencesValuedObjectStringParserRuleCall_0_2_0() { return cReferencesValuedObjectStringParserRuleCall_0_2_0; }
		
		//operator=AssignOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//AssignOperator
		public RuleCall getOperatorAssignOperatorEnumRuleCall_1_0() { return cOperatorAssignOperatorEnumRuleCall_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ValuedObjectStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.scade.ScadeEquations.ValuedObjectString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValuedObjectStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrimeIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ValuedObjectString returns kexpressions::Expression:
		//    {ValuedObjectString}
		//    name=PrimeID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ValuedObjectString}
		//name=PrimeID
		public Group getGroup() { return cGroup; }
		
		//{ValuedObjectString}
		public Action getValuedObjectStringAction_0() { return cValuedObjectStringAction_0; }
		
		//name=PrimeID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_1_0() { return cNamePrimeIDParserRuleCall_1_0; }
	}
	public class ValuedObjectTestExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.scade.ScadeEquations.ValuedObjectTestExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOperatorAlternatives_0_1_0 = (Alternatives)cOperatorAssignment_0_1.eContents().get(0);
		private final RuleCall cOperatorPreOperatorEnumRuleCall_0_1_0_0 = (RuleCall)cOperatorAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cOperatorValOperatorEnumRuleCall_0_1_0_1 = (RuleCall)cOperatorAlternatives_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0 = (RuleCall)cSubExpressionsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cSubExpressionsValuedObjectReferenceParserRuleCall_0_4_1_0 = (RuleCall)cSubExpressionsAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cValuedObjectStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ValuedObjectReferences are not supported, instead just plain strings are used
		//@Override
		//ValuedObjectTestExpression returns kexpressions::Expression:
		//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
		//    | ValuedObjectString;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
		//| ValuedObjectString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=(PreOperator|ValOperator)
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//(PreOperator|ValOperator)
		public Alternatives getOperatorAlternatives_0_1_0() { return cOperatorAlternatives_0_1_0; }
		
		//PreOperator
		public RuleCall getOperatorPreOperatorEnumRuleCall_0_1_0_0() { return cOperatorPreOperatorEnumRuleCall_0_1_0_0; }
		
		//ValOperator
		public RuleCall getOperatorValOperatorEnumRuleCall_0_1_0_1() { return cOperatorValOperatorEnumRuleCall_0_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//subExpressions+=ValuedObjectTestExpression
		public Assignment getSubExpressionsAssignment_0_3() { return cSubExpressionsAssignment_0_3; }
		
		//ValuedObjectTestExpression
		public RuleCall getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0() { return cSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0; }
		
		//(',' subExpressions+=ValuedObjectReference)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }
		
		//subExpressions+=ValuedObjectReference
		public Assignment getSubExpressionsAssignment_0_4_1() { return cSubExpressionsAssignment_0_4_1; }
		
		//ValuedObjectReference
		public RuleCall getSubExpressionsValuedObjectReferenceParserRuleCall_0_4_1_0() { return cSubExpressionsValuedObjectReferenceParserRuleCall_0_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//ValuedObjectString
		public RuleCall getValuedObjectStringParserRuleCall_1() { return cValuedObjectStringParserRuleCall_1; }
	}
	
	
	private final ScadeProgramElements pScadeProgram;
	private final ScadeEquationElements pScadeEquation;
	private final ValuedObjectStringElements pValuedObjectString;
	private final ValuedObjectTestExpressionElements pValuedObjectTestExpression;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final LustreGrammarAccess gaLustre;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScadeEquationsGrammarAccess(GrammarProvider grammarProvider,
			LustreGrammarAccess gaLustre,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaLustre = gaLustre;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pScadeProgram = new ScadeProgramElements();
		this.pScadeEquation = new ScadeEquationElements();
		this.pValuedObjectString = new ValuedObjectStringElements();
		this.pValuedObjectTestExpression = new ValuedObjectTestExpressionElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.scade.ScadeEquations.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.lustre.scade.ScadeEquations.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.lustre.scade.ScadeEquations".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public LustreGrammarAccess getLustreGrammarAccess() {
		return gaLustre;
	}
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * This grammar represents the Lustre equations that can be extracted in SCADE Suite.
	// */
	//ScadeProgram hidden (WS, SL_COMMENT, ML_COMMENT):
	//    (
	//        equations+=ScadeEquation
	////        | emissions+=ScadeEmission
	//        | assertions+=Assertion
	//        | automatons+=Automaton
	//    )*
	//;
	public ScadeProgramElements getScadeProgramAccess() {
		return pScadeProgram;
	}
	
	public ParserRule getScadeProgramRule() {
		return getScadeProgramAccess().getRule();
	}
	
	//ScadeEquation:
	//    (
	//        // Left side: (x, y, ...) or x, y, ... or x
	//        ('(' references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)* ')')
	//        | (references+=ValuedObjectString ',' references+=ValuedObjectString (',' references+=ValuedObjectString)*)
	//        | references+=ValuedObjectString
	//    )
	//    operator=AssignOperator
	//    expression=Expression
	//    ';'
	//;
	public ScadeEquationElements getScadeEquationAccess() {
		return pScadeEquation;
	}
	
	public ParserRule getScadeEquationRule() {
		return getScadeEquationAccess().getRule();
	}
	
	//ValuedObjectString returns kexpressions::Expression:
	//    {ValuedObjectString}
	//    name=PrimeID
	//;
	public ValuedObjectStringElements getValuedObjectStringAccess() {
		return pValuedObjectString;
	}
	
	public ParserRule getValuedObjectStringRule() {
		return getValuedObjectStringAccess().getRule();
	}
	
	//// ValuedObjectReferences are not supported, instead just plain strings are used
	//@Override
	//ValuedObjectTestExpression returns kexpressions::Expression:
	//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
	//    | ValuedObjectString;
	public ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return pValuedObjectTestExpression;
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	///*
	// * -------------------- Lexical tokens
	// */
	//@Override
	//terminal ML_COMMENT:
	//    '(*' -> '*)'
	//;
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '--' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	///**
	// * The syntax for this grammar is extracted from the Lustre V6 reference manual.
	// * http://www-verimag.imag.fr/DIST-TOOLS/SYNCHRONE/lustre-v6/doc/lv6-ref-man.pdf
	// *
	// * @author lgr
	// */
	//LustreProgram hidden(WS, SL_COMMENT, ML_COMMENT):
	//    ('include' (includes+=STRING | includes+=STRING))*
	//    (
	//        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
	//        | ('type' types+=TypeDeclaration (';' types+=TypeDeclaration)* ';')
	//        | externals+=ExternalNodeDeclaration
	//        | nodes+=NodeDeclaration
	//    )*
	//;
	public LustreGrammarAccess.LustreProgramElements getLustreProgramAccess() {
		return gaLustre.getLustreProgramAccess();
	}
	
	public ParserRule getLustreProgramRule() {
		return getLustreProgramAccess().getRule();
	}
	
	//@Override
	//enum ValueType returns kexpressions::ValueType:
	//    BOOL="bool"
	//    | INT="int"
	//    | FLOAT="real"
	//;
	public LustreGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaLustre.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum EnumType returns kexpressions::ValueType:
	//    ENUM="enum"
	//;
	public LustreGrammarAccess.EnumTypeElements getEnumTypeAccess() {
		return gaLustre.getEnumTypeAccess();
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//// Type Declaration
	//// TODO: Does not work: this should be a VariableDeclaration too, since it can be a node parameter and thus must be scoped
	//TypeDeclaration:
	//    {TypeDeclaration}
	//    name=ID
	//    ('='
	//        (
	//            type=ValueType
	//            | (type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
	//            // TODO: StructType may also be left empty
	//            | (
	//                type=StructType
	//                '{'
	//                variables+=(VariableDeclarationInit|VariableDeclarationNoInit)
	//                (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))*
	//                (';')?
	//                '}'
	//            )
	//        )
	//    )?
	//;
	public LustreGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaLustre.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//// External Node Declaration
	//ExternalNodeDeclaration returns kexpressions::Declaration:
	//    {ExternalNodeDeclaration}
	//    (isUnsafe?='unsafe')? 'extern' ('function' | hasState?='node')
	//    valuedObjects+=NodeValuedObject
	//    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
	//    'returns'
	//    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
	//    (';')?
	//;
	public LustreGrammarAccess.ExternalNodeDeclarationElements getExternalNodeDeclarationAccess() {
		return gaLustre.getExternalNodeDeclarationAccess();
	}
	
	public ParserRule getExternalNodeDeclarationRule() {
		return getExternalNodeDeclarationAccess().getRule();
	}
	
	//VariableDeclarationNoInit returns kexpressions::VariableDeclaration:
	//    {LustreVariableDeclaration}
	//    valuedObjects+=ValuedObjectNoInit (',' valuedObjects+=ValuedObjectNoInit)* ':' type=ValueType ('when' clockExpr=BoolExpression)?
	//;
	public LustreGrammarAccess.VariableDeclarationNoInitElements getVariableDeclarationNoInitAccess() {
		return gaLustre.getVariableDeclarationNoInitAccess();
	}
	
	public ParserRule getVariableDeclarationNoInitRule() {
		return getVariableDeclarationNoInitAccess().getRule();
	}
	
	//VariableDeclarationInit returns kexpressions::VariableDeclaration:
	//    {LustreVariableDeclaration}
	//    valuedObjects+=ValuedObjectInit ('when' clockExpr=BoolExpression)?
	//;
	public LustreGrammarAccess.VariableDeclarationInitElements getVariableDeclarationInitAccess() {
		return gaLustre.getVariableDeclarationInitAccess();
	}
	
	public ParserRule getVariableDeclarationInitRule() {
		return getVariableDeclarationInitAccess().getRule();
	}
	
	//ValuedObjectNoInit returns kexpressions::ValuedObject:
	//    name=PrimeID
	//    ('^' cardinalities+=Expression)*
	//;
	public LustreGrammarAccess.ValuedObjectNoInitElements getValuedObjectNoInitAccess() {
		return gaLustre.getValuedObjectNoInitAccess();
	}
	
	public ParserRule getValuedObjectNoInitRule() {
		return getValuedObjectNoInitAccess().getRule();
	}
	
	//ValuedObjectInit returns kexpressions::ValuedObject:
	//    {LustreValuedObject}
	//    name=PrimeID
	//    ('^' cardinalities+=Expression)*
	//    (':' type=ValueType)
	//    ('=' initialValue=Expression)?
	//;
	public LustreGrammarAccess.ValuedObjectInitElements getValuedObjectInitAccess() {
		return gaLustre.getValuedObjectInitAccess();
	}
	
	public ParserRule getValuedObjectInitRule() {
		return getValuedObjectInitAccess().getRule();
	}
	
	//// Node Declaration
	//NodeDeclaration returns kexpressions::Declaration:
	//    {NodeDeclaration}
	//    (isUnsafe?='unsafe')? ('function' | hasState?='node')
	//    valuedObjects+=NodeValuedObject
	//    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
	//    'returns'
	//    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
	//    ';'?
	//    (
	//        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
	//        | ('var' variables+=(VariableDeclarationInit|VariableDeclarationNoInit) (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* ';')
	//    )*
	//    'let'
	//    (
	//        equations+=Equation
	//        | emissions+=Emission
	//        | assertions+=Assertion
	//        | automatons+=Automaton
	//    )*
	//    'tel'
	//    ('.' | (';')?)
	//;
	public LustreGrammarAccess.NodeDeclarationElements getNodeDeclarationAccess() {
		return gaLustre.getNodeDeclarationAccess();
	}
	
	public ParserRule getNodeDeclarationRule() {
		return getNodeDeclarationAccess().getRule();
	}
	
	//NodeValuedObject returns kexpressions::ValuedObject:
	//    {NodeValuedObject}
	//    name=ID
	//;
	public LustreGrammarAccess.NodeValuedObjectElements getNodeValuedObjectAccess() {
		return gaLustre.getNodeValuedObjectAccess();
	}
	
	public ParserRule getNodeValuedObjectRule() {
		return getNodeValuedObjectAccess().getRule();
	}
	
	//Equation returns keffects::Assignment:
	//    {Equation}
	//    (
	//        // Left side: (x, y, ...) or x, y, ... or x
	//        ('(' references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)* ')')
	//        | (references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)*)
	//        | reference=ValuedObjectReference
	//    )
	//    operator=AssignOperator
	//    expression=Expression
	//    ';'
	//;
	public LustreGrammarAccess.EquationElements getEquationAccess() {
		return gaLustre.getEquationAccess();
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}
	
	//Emission returns keffects::Emission:
	//    'emit' (ValuedEmission | PureEmission) ';'
	//;
	public LustreGrammarAccess.EmissionElements getEmissionAccess() {
		return gaLustre.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}
	
	//Assertion returns kexpressions::Expression:
	//    {Assertion}
	//    'assert' expr=Expression ';'
	//;
	public LustreGrammarAccess.AssertionElements getAssertionAccess() {
		return gaLustre.getAssertionAccess();
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//Automaton:
	//    'automaton' name=ID states+=AState (states+=AState)* 'returns' '..' ';'
	//;
	public LustreGrammarAccess.AutomatonElements getAutomatonAccess() {
		return gaLustre.getAutomatonAccess();
	}
	
	public ParserRule getAutomatonRule() {
		return getAutomatonAccess().getRule();
	}
	
	//AState:
	//    (initial?='initial')?
	//    'state'
	//    valuedObject=StateValuedObject
	//    (
	//        ('const' constants+=VariableDeclarationInit ';' (constants+=VariableDeclarationInit ';')* )
	//        | ('var' variables+=VariableDeclarationInit (';' variables+=VariableDeclarationInit)* ';')
	//    )*
	//    // Body
	//    ('let'
	//        (
	//            equations+=Equation
	//            | emissions+=Emission
	//            | assertions+=Assertion
	//            | automatons+=Automaton
	//        )*
	//    'tel')?
	//    ('.' | (';')?)
	//    transitions+=ATransition*
	//;
	public LustreGrammarAccess.AStateElements getAStateAccess() {
		return gaLustre.getAStateAccess();
	}
	
	public ParserRule getAStateRule() {
		return getAStateAccess().getRule();
	}
	
	//StateValuedObject returns kexpressions::ValuedObject:
	//    {StateValuedObject}
	//    name=ID
	//;
	public LustreGrammarAccess.StateValuedObjectElements getStateValuedObjectAccess() {
		return gaLustre.getStateValuedObjectAccess();
	}
	
	public ParserRule getStateValuedObjectRule() {
		return getStateValuedObjectAccess().getRule();
	}
	
	//ATransition:
	//    {ATransition}
	//    ('until'|strong?='unless') actions+=AnAction*
	//;
	public LustreGrammarAccess.ATransitionElements getATransitionAccess() {
		return gaLustre.getATransitionAccess();
	}
	
	public ParserRule getATransitionRule() {
		return getATransitionAccess().getRule();
	}
	
	//AnAction:
	//    ('if' condition=BoolExpression)? ('do' (effects+=Equation | effects+=Emission)*)? ('restart'|history?='resume') nextState=[StateValuedObject] ';'
	//;
	public LustreGrammarAccess.AnActionElements getAnActionAccess() {
		return gaLustre.getAnActionAccess();
	}
	
	public ParserRule getAnActionRule() {
		return getAnActionAccess().getRule();
	}
	
	///**
	// * -------------------- Expression Adjustments
	// *
	// * The precedence hierarchy is not as follows:
	// *
	// * Expression
	// * + BoolExpression
	// *   + InitExpression
	// *     + TernaryOperation *
	// *       + ImpliesExpression
	// *         + LogicalXorExpression
	// *           + LogicalOrExpression
	// *             + LogicalAndExpression
	// *               + CompareExpression
	// *                 + NotOrValuedExpression
	// *                   + ValuedExpression (see valued expression below)
	// *                   + NotExpression *
	// *                     + AtomicExpression *
	// *                       + BoolValue
	// *                       + ValuedObjectTestExpression
	// *                         + ValuedObjectReference
	// *                       + FunctionCall
	// *                       + TextExpression
	// *                       + NoneOfExpression
	// *                       + NorExpression
	// * + ValuedExpression
	// *   + SumExpression
	// *      + ProductExpression
	// *                  + IntDivExpression
	// *                    + NegExpression *
	// *                      + FbyExpression
	// *                        + WhenExpression
	// *                          + CurrentExpression
	// *                            + PreExpression
	// *                              + AtomicValuedExpression *
	// *                                + IntValue
	// *                                + FloatValue
	// *                                + StringValue
	// *                                + AtomicExpression
	// *
	// */
	//// Needs override because of mod operator is 'mod' not '%' and IntDivExpressin comes next
	//@Override
	//ProductExpression returns kexpressions::Expression:
	//    IntDivExpression
	//    (
	//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=IntDivExpression ('*' subExpressions+=IntDivExpression)*)
	//    |
	//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=IntDivExpression ('/' subExpressions+=IntDivExpression)*)
	//    |
	//    ({kexpressions::OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=IntDivExpression ('mod' subExpressions+=IntDivExpression)*)
	//    )*
	//;
	public LustreGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaLustre.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//IntDivExpression returns kexpressions::Expression:
	//    NegExpression
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=IntDivOperator subExpressions+=NegExpression)
	//        ('div' subExpressions+=AtomicValuedExpression)*
	//    )?
	//;
	public LustreGrammarAccess.IntDivExpressionElements getIntDivExpressionAccess() {
		return gaLustre.getIntDivExpressionAccess();
	}
	
	public ParserRule getIntDivExpressionRule() {
		return getIntDivExpressionAccess().getRule();
	}
	
	//// Skip TernaryOperation after NegExpression
	//@Override
	//NegExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=SubOperator subExpressions+=(NegExpression)
	//    | FbyExpression
	//;
	public LustreGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaLustre.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//// Force WhenExpression, CurrentExpression and PreExpression inbetween FbyExpression and AtomicValuedExpression
	//@Override
	//FbyExpression returns kexpressions::Expression:
	//    WhenExpression
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=FbyOperator subExpressions+=WhenExpression)
	//        ('fby' subExpressions+=WhenExpression)*
	//    )?;
	public LustreGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaLustre.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//WhenExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    subExpressions += AtomicValuedExpression operator=WhenOperator subExpressions += AtomicValuedExpression
	//    | CurrentExpression
	//;
	public LustreGrammarAccess.WhenExpressionElements getWhenExpressionAccess() {
		return gaLustre.getWhenExpressionAccess();
	}
	
	public ParserRule getWhenExpressionRule() {
		return getWhenExpressionAccess().getRule();
	}
	
	//CurrentExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=CurrentOperator subExpressions += AtomicValuedExpression
	//    | PreExpression
	//;
	public LustreGrammarAccess.CurrentExpressionElements getCurrentExpressionAccess() {
		return gaLustre.getCurrentExpressionAccess();
	}
	
	public ParserRule getCurrentExpressionRule() {
		return getCurrentExpressionAccess().getRule();
	}
	
	//PreExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=PreOperator subExpressions+=LastExpression
	//    | LastExpression
	//;
	public LustreGrammarAccess.PreExpressionElements getPreExpressionAccess() {
		return gaLustre.getPreExpressionAccess();
	}
	
	public ParserRule getPreExpressionRule() {
		return getPreExpressionAccess().getRule();
	}
	
	//LastExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=LastOperator subExpressions+=AtomicValuedExpression
	//    | AtomicValuedExpression
	//;
	public LustreGrammarAccess.LastExpressionElements getLastExpressionAccess() {
		return gaLustre.getLastExpressionAccess();
	}
	
	public ParserRule getLastExpressionRule() {
		return getLastExpressionAccess().getRule();
	}
	
	//// Force TernaryOperation, InitExpression, ImpliesExpression and LogicalXorExpression inbetween BoolExpression and LogicalOrExpression
	//@Override
	//BoolExpression returns kexpressions::Expression:
	//    InitExpression
	//;
	public LustreGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaLustre.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//@Override
	//InitExpression returns kexpressions::Expression:
	//    TernaryOperation
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=InitOperator subExpressions+=TernaryOperation)
	//        ('->' subExpressions+=TernaryOperation)*
	//    )?;
	public LustreGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaLustre.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//// Overwide Ternary operator to support if ... then ... else
	//@Override
	//TernaryOperation returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=ConditionalOperator subExpressions += TernaryOperation 'then' subExpressions += TernaryOperation 'else' subExpressions += TernaryOperation
	//    | ImpliesExpression
	//;
	public LustreGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaLustre.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//ImpliesExpression returns kexpressions::Expression:
	//    LogicalXorExpression
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=ImpliesOperator subExpressions+=LogicalXorExpression)
	//        ('=>' subExpressions+=LogicalXorExpression)*
	//    )?
	//;
	public LustreGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaLustre.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//LogicalXorExpression returns kexpressions::Expression:
	//    LogicalOrExpression
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=LogicalXorOperator subExpressions+=LogicalOrExpression)
	//        ('xor' subExpressions+=LogicalOrExpression)*
	//    )?
	//;
	public LustreGrammarAccess.LogicalXorExpressionElements getLogicalXorExpressionAccess() {
		return gaLustre.getLogicalXorExpressionAccess();
	}
	
	public ParserRule getLogicalXorExpressionRule() {
		return getLogicalXorExpressionAccess().getRule();
	}
	
	//// Override LogicalAndExpresssion and LogicalOrExpression to allow asssociativity
	//@Override
	//LogicalOrExpression returns kexpressions::Expression:
	//    LogicalAndExpression
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
	//        ('or' subExpressions+=LogicalAndExpression)*
	//    )?
	//;
	public LustreGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaLustre.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Directly redirect to CompareOperation to exclude the bitwise operations
	//@Override
	//LogicalAndExpression returns kexpressions::Expression:
	//    CompareOperation
	//    (
	//        {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=LogicalAndOperator subExpressions+=CompareOperation)
	//        ('and' subExpressions+=CompareOperation)*
	//    )?
	//;
	public LustreGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaLustre.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Directly redirect to SumExpression to exclude shift operations
	//@Override
	//ValuedExpression returns kexpressions::Expression:
	//    SumExpression
	//;
	public LustreGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaLustre.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//// Exclude FunctionCall, RandomCall, RandomizeCall and TextExpression
	//@Override
	//AtomicExpression returns kexpressions::Expression:
	//    BoolValue
	//    | '(' BoolExpression ')'
	//    | ReferenceCall
	//    | ValuedObjectTestExpression // Last to allow detection of calls
	//    | NorAtMostOneExpression
	//;
	public LustreGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaLustre.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//NorAtMostOneExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    (operator=AtMostOneOperator | operator=NorOperator)
	//    '('subExpressions+=Expression (',' subExpressions+=Expression)* ')'
	//;
	public LustreGrammarAccess.NorAtMostOneExpressionElements getNorAtMostOneExpressionAccess() {
		return gaLustre.getNorAtMostOneExpressionAccess();
	}
	
	public ParserRule getNorAtMostOneExpressionRule() {
		return getNorAtMostOneExpressionAccess().getRule();
	}
	
	//// Exclude BitwiseNotExpression
	//@Override
	//NotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=NotOperator subExpressions+=(NotExpression)
	//    | AtomicExpression
	//;
	public LustreGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaLustre.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	///**
	// * -------------------- Operator Adjustments
	// */
	//// Override operators that are different in Lustre
	//@Override
	//enum AssignOperator returns keffects::AssignOperator:
	//    // Reduce possible assignments to only work with '='
	//    ASSIGN="="
	//;
	public LustreGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaLustre.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//@Override
	//enum CompareOperator returns kexpressions::OperatorType:
	//    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"
	//;
	public LustreGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaLustre.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//@Override
	//enum LogicalOrOperator returns kexpressions::OperatorType:
	//    LOGICAL_OR="or"
	//;
	public LustreGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaLustre.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//@Override
	//enum LogicalAndOperator returns kexpressions::OperatorType:
	//    LOGICAL_AND="and"
	//;
	public LustreGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaLustre.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//@Override
	//enum NotOperator returns kexpressions::OperatorType:
	//    NOT="not"
	//;
	public LustreGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaLustre.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//@Override
	//enum FbyOperator returns kexpressions::OperatorType:
	//    FBY="fby"
	//;
	public LustreGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaLustre.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//@Override
	//enum ModOperator returns kexpressions::OperatorType:
	//    MOD="mod"
	//;
	public LustreGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaLustre.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//// Define operators that are Lustre specific
	//enum CurrentOperator returns kexpressions::OperatorType:
	//    CURRENT="current"
	//;
	public LustreGrammarAccess.CurrentOperatorElements getCurrentOperatorAccess() {
		return gaLustre.getCurrentOperatorAccess();
	}
	
	public EnumRule getCurrentOperatorRule() {
		return getCurrentOperatorAccess().getRule();
	}
	
	//enum WhenOperator returns kexpressions::OperatorType:
	//    WHEN="when"
	//;
	public LustreGrammarAccess.WhenOperatorElements getWhenOperatorAccess() {
		return gaLustre.getWhenOperatorAccess();
	}
	
	public EnumRule getWhenOperatorRule() {
		return getWhenOperatorAccess().getRule();
	}
	
	//@Override
	//enum InitOperator returns kexpressions::OperatorType:
	//    INIT="->"
	//;
	public LustreGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaLustre.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum LogicalXorOperator returns kexpressions::OperatorType:
	//    BITWISE_XOR="xor"
	//;
	public LustreGrammarAccess.LogicalXorOperatorElements getLogicalXorOperatorAccess() {
		return gaLustre.getLogicalXorOperatorAccess();
	}
	
	public EnumRule getLogicalXorOperatorRule() {
		return getLogicalXorOperatorAccess().getRule();
	}
	
	//enum ImpliesOperator returns kexpressions::OperatorType:
	//    IMPLIES="=>"
	//;
	public LustreGrammarAccess.ImpliesOperatorElements getImpliesOperatorAccess() {
		return gaLustre.getImpliesOperatorAccess();
	}
	
	public EnumRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}
	
	//enum IntDivOperator returns kexpressions::OperatorType:
	//    DIV = "div"
	//;
	public LustreGrammarAccess.IntDivOperatorElements getIntDivOperatorAccess() {
		return gaLustre.getIntDivOperatorAccess();
	}
	
	public EnumRule getIntDivOperatorRule() {
		return getIntDivOperatorAccess().getRule();
	}
	
	//@Override
	//enum ConditionalOperator returns kexpressions::OperatorType:
	//    CONDITIONAL = "if"
	//;
	public LustreGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaLustre.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum AtMostOneOperator returns kexpressions::OperatorType:
	//    ATMOSTONEOF="#"
	//;
	public LustreGrammarAccess.AtMostOneOperatorElements getAtMostOneOperatorAccess() {
		return gaLustre.getAtMostOneOperatorAccess();
	}
	
	public EnumRule getAtMostOneOperatorRule() {
		return getAtMostOneOperatorAccess().getRule();
	}
	
	//enum NorOperator returns kexpressions::OperatorType:
	//    NOR="nor"
	//;
	public LustreGrammarAccess.NorOperatorElements getNorOperatorAccess() {
		return gaLustre.getNorOperatorAccess();
	}
	
	public EnumRule getNorOperatorRule() {
		return getNorOperatorAccess().getRule();
	}
	
	//enum LastOperator returns kexpressions::OperatorType:
	//    LAST="last"
	//;
	public LustreGrammarAccess.LastOperatorElements getLastOperatorAccess() {
		return gaLustre.getLastOperatorAccess();
	}
	
	public EnumRule getLastOperatorRule() {
		return getLastOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language
	// * that is used for testing kexpressions and keffects.
	// */
	//// ------------ //
	////  KEXT Rules  //
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of
	//// test entities may follow.
	//Kext returns kext::Kext:
	//    scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    (name=ID)? '{'
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//    expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'expression'
	//    expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'json'
	//    expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z
	//Declaration returns kexpressions::Declaration:
	//    VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon returns kexpressions::Declaration:
	//    VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    const?='const'?
	//    input?='input'?
	//    output?='output'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        |
	//        signal?='signal'
	//        |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    input?='input'?
	//    output?='output'?
	//    const?='const'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        | signal?='signal'
	//        | (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethod*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=Declaration*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod returns kexpressions::Declaration:
	//    Declaration | EnumDeclaration | MethodDeclaration
	//;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethodWOSemicolon*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationWOSemicolon*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return gaKExt.getClassDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon returns kexpressions::Declaration:
	//    DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
	//;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//EnumDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType=STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//        ';'
	//    '}'
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationElements getEnumDeclarationAccess() {
		return gaKExt.getEnumDeclarationAccess();
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumMemberDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return gaKExt.getEnumMemberDeclarationAccess();
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}
	
	//EnumDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType = STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//    '}'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationWOSemicolonElements getEnumDeclarationWOSemicolonAccess() {
		return gaKExt.getEnumDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getEnumDeclarationWOSemicolonRule() {
		return getEnumDeclarationWOSemicolonAccess().getRule();
	}
	
	//MethodDeclaration returns kexpressions::MethodDeclaration:
	//    {kexpressions::MethodDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.MethodDeclarationElements getMethodDeclarationAccess() {
		return gaKExt.getMethodDeclarationAccess();
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//MethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
	//    {kexpressions::MethodDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return gaKExt.getMethodDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString returns kexpressions::ExternString:
	//    annotations+=TagAnnotation*
	//    code = STRING
	//;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//// ---
	////  Generics
	//// ---
	//GenericParameterDeclaration returns kexpressions::GenericParameterDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject
	//    (
	//        ('is' valueType = ValueType)
	//        |
	//        ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
	//    )?
	//;
	public KExtGrammarAccess.GenericParameterDeclarationElements getGenericParameterDeclarationAccess() {
		return gaKExt.getGenericParameterDeclarationAccess();
	}
	
	public ParserRule getGenericParameterDeclarationRule() {
		return getGenericParameterDeclarationAccess().getRule();
	}
	
	//GenericParameter returns kexpressions::Parameter:
	//    // Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
	//    // Here GenericTypeReference has precedence and has to cover certain
	//    // references to VOs. This needs to be specifically handled in the scoper and in the resource
	//    // by using the KExtGenericParamterConverter.
	//    // Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
	//    // index or sub reference specified, this is why there are special non-optional rules.
	//    expression = (ValueTypeReference
	//                 | AnyValue
	//                 | GenericParameter_GenericTypeReference_Parameterized
	//                 | GenericParameter_ValuedObjectReference_Array
	//                 | GenericParameter_ValuedObjectReference_Sub
	//                 | GenericTypeReference
	//                 | ValuedObjectReference)
	//;
	public KExtGrammarAccess.GenericParameterElements getGenericParameterAccess() {
		return gaKExt.getGenericParameterAccess();
	}
	
	public ParserRule getGenericParameterRule() {
		return getGenericParameterAccess().getRule();
	}
	
	//ValueTypeReference returns kexpressions::ValueTypeReference:
	//    valueType = ValueType
	//;
	public KExtGrammarAccess.ValueTypeReferenceElements getValueTypeReferenceAccess() {
		return gaKExt.getValueTypeReferenceAccess();
	}
	
	public ParserRule getValueTypeReferenceRule() {
		return getValueTypeReferenceAccess().getRule();
	}
	
	//GenericTypeReference returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//;
	public KExtGrammarAccess.GenericTypeReferenceElements getGenericTypeReferenceAccess() {
		return gaKExt.getGenericTypeReferenceAccess();
	}
	
	public ParserRule getGenericTypeReferenceRule() {
		return getGenericTypeReferenceAccess().getRule();
	}
	
	//// Special rules for GenericParameter parsing
	//GenericParameter_GenericTypeReference_Parameterized returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    '<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>' // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_GenericTypeReference_ParameterizedElements getGenericParameter_GenericTypeReference_ParameterizedAccess() {
		return gaKExt.getGenericParameter_GenericTypeReference_ParameterizedAccess();
	}
	
	public ParserRule getGenericParameter_GenericTypeReference_ParameterizedRule() {
		return getGenericParameter_GenericTypeReference_ParameterizedAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Array returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')+ // mandatory
	//    ('.' subReference=ValuedObjectReference)?
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_ArrayElements getGenericParameter_ValuedObjectReference_ArrayAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_ArrayAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_ArrayRule() {
		return getGenericParameter_ValuedObjectReference_ArrayAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Sub returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference) // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_SubElements getGenericParameter_ValuedObjectReference_SubAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_SubAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_SubRule() {
		return getGenericParameter_ValuedObjectReference_SubAccess().getRule();
	}
	
	//// ---
	////  Scheduling Directives
	//// ---
	//ScheduleDeclaration returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//    CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part.
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('=' initialValue=Expression)?
	//    ( 'combine'
	//      (combineOperator = CombineOperator)
	//    )?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//ReferenceValuedObject returns kexpressions::ValuedObject:
	//    {kexpressions::ValuedObject}
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
	//    ('=' initialValue=Expression)?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ReferenceValuedObjectElements getReferenceValuedObjectAccess() {
		return gaKExt.getReferenceValuedObjectAccess();
	}
	
	public ParserRule getReferenceValuedObjectRule() {
		return getReferenceValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	//NamespaceID returns ecore::EString:
	//  ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */
	//// ---------------- //
	////  KEffects Rules  //
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect returns keffects::Effect:
	//    Assignment |
	//    PostfixEffect |
	//    ValuedEmission | // Will consume some ReferenceCallEffects
	//    HostcodeEffect |
	//    ReferenceCallEffect |
	//    FunctionCallEffect |
	//    PrintCallEffect |
	//    RandomizeCallEffect |
	//    PureEmission;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals.
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted
	//// annotations defined in the annotations grammar.
	//PureEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    "(" newValue = Expression ")"
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission returns keffects::Emission:
	//    ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1
	//Assignment returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=AssignOperator expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I--
	//PostfixEffect returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//    (annotations+=Annotation)*
	//     text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect returns keffects::ReferenceCallEffect:
	//    super?='super.'?
	//    (annotations+=Annotation)*
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//    (annotations+=Annotation)*
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.
	//PrintCallEffect returns keffects::PrintCallEffect:
	//    (annotations+=Annotation)*
	//    'print'
	//    ('(' parameters += Parameter (',' parameters += Parameter)* ')')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect returns keffects::RandomizeCallEffect:
	//    {keffects::RandomizeCallEffect}
	//    (annotations+=Annotation)*
	//    'randomize'
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//// Postfix Operator Enum
	//enum PostfixOperator returns keffects::AssignOperator:
	//    POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// -------------------- //
	////  KExpressions Rules  //
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */
	//// Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//    Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression returns Expression:
	//     (BoolExpression | ValuedExpression);
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//    BitwiseXOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
	//        ('|' subExpressions+=BitwiseXOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression returns Expression:
	//    BitwiseAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
	//        ('^' subExpressions+=BitwiseAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//    CompareOperation
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
	//        ('&' subExpressions+=CompareOperation)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares.
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//    NotOrValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        operator=CompareOperator subExpressions+=NotOrValuedExpression
	//    )?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression returns Expression:
	//    ValuedExpression
	//    | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression returns Expression:
	//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//ShiftExpressions returns Expression:
	//    SumExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
	//        ('<<' subExpressions+=ShiftRightExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
	//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
	//        ('>>>' subExpressions+=SumExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression returns Expression:
	//    ProductExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=MultOperator subExpressions+=NegExpression)
	//        ('*' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=DivOperator subExpressions+=NegExpression)
	//        ('/' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ModOperator subExpressions+=NegExpression)
	//        ('%' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//SfbyExpression returns Expression:
	//    AtomicValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
	//        ('sfby' subExpressions+=AtomicValuedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicValuedExpression returns Expression:
	//    IntValue
	//    | FloatValue
	//    | StringValue
	//    | VectorValue
	//    | NullValue
	//    | '(' ValuedExpression ')'
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.
	//BoolScheduleExpression returns Expression:
	//    LogicalOrExpression
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Accesses a arbitrary target in a static way (needs to be adjusted in the scoper of the deriving language)
	//// Example: static(Constants).MAX
	//SpecialAccessExpression returns SpecialAccessExpression:
	//    access='static' '('
	//    (container=[annotations::NamedObject|PrimeID] '.')?
	//    target=[annotations::NamedObject|PrimeID]
	//    ')' '.' subReference=ValuedObjectReference;
	public KExpressionsGrammarAccess.SpecialAccessExpressionElements getSpecialAccessExpressionAccess() {
		return gaKExpressions.getSpecialAccessExpressionAccess();
	}
	
	public ParserRule getSpecialAccessExpressionRule() {
		return getSpecialAccessExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID returns ecore::EString:
	//  ID ("'")*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference returns ValuedObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference returns ScheduleObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list.
	//ReferenceCall returns ReferenceCall:
	//    super?='super.'?
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (
	//        ('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()'
	//    );
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomCall returns RandomCall:
	//    {RandomCall}
	//    'random' ('()')?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomizeCall returns RandomizeCall:
	//    {RandomizeCall}
	//    'randomize' ('()')?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list.
	//FunctionCall returns FunctionCall:
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall returns PrintCall:
	//    {PrintCall}
	//    'print'
	//    (
	//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
	//    |
	//        '()'
	//    );
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter returns Parameter:
	//    (accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression returns TextExpression:
	//    (annotations += Annotation)*
	//    text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue returns IntValue:
	//    value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue returns FloatValue:
	//    value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue returns BoolValue:
	//    value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue returns VectorValue:
	//    '{' (
	//        values+=VectorValueMember (',' values+=VectorValueMember)*
	//        |
	//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference)
	//    ) '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember returns Expression:
	//    BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue returns IgnoreValue:
	//    {IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext.
	//AnyType returns ecore::EString:
	//    BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue returns Value:
	//    IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//    PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//    BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//    BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//    BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//    BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//    ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//    SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//    MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//    DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//    VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//    SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//    SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//    SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//    POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//    POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//    SFBY = "sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//    HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//    STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//    CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum CombineOperator returns CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier returns AccessModifier:
	//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//    VOID="void" |
	//    BOOL="bool" | INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType returns ParameterAccessType:
	//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
	//;
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                //
	//// -------------------- //
	//JsonObjectValue returns JsonObjectValue:
	//    {JsonObjectValue}
	//    '{'
	//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
	//    '}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember returns JsonObjectMember:
	//    key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue returns JsonArrayValue:
	//    {JsonArrayValue}
	//    '['
	//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
	//    ']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue returns Value:
	//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue returns NullValue:
	//    {NullValue}
	//    'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma returns JsonPragma:
	//    '#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation returns JsonAnnotation:
	//    '@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma returns annotations::Pragma:
	//    super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// OO
	//ThisExpression returns ThisExpression:
	//    {ThisExpression}
	//    'this';
	public KExpressionsGrammarAccess.ThisExpressionElements getThisExpressionAccess() {
		return gaKExpressions.getThisExpressionAccess();
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//// ------------------------ //
	////  KExpressions Terminals  //
	//// ------------------------ //
	//// Hostcode Terminals
	//// Custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE returns ecore::EString:
	//    "`" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"`") )* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// ------------------ //
	////  Annotation Rules  //
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters!
	//Annotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.
	//Pragma returns Pragma:
	//    StringPragma |
	//    PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations.
	//// You can use this rule in derived grammars if you don't want to permit typed strings.
	//RestrictedTypeAnnotation returns Annotation:
	//    CommentAnnotation |
	//    RestrictedKeyStringValueAnnotation |
	//    RestrictedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in
	//// derived grammars if you don't want to permit unquoted strings.
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)
	//QuotedStringAnnotation returns Annotation:
	//    CommentAnnotation |
	//    QuotedKeyStringValueAnnotation |
	//    QuotedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation returns CommentAnnotation:
	//    values += COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL returns CommentAnnotation:
	//    values += SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation returns TagAnnotation:
	//    '@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag returns Pragma:
	//    '#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.
	//KeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma returns StringPragma:
	//    '#' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString returns ecore::EString:
	//    STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID returns ecore::EString:
	//  ID (('.'|'-') ID)* (('#') INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID returns ecore::EString:
	//  ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer returns ecore::EInt:
	//    '-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger returns ecore::EDouble:
	//    '-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//// ---------------------- //
	////  Annotation Terminals  //
	//// ---------------------- //
	//// Comment Annotation Terminal
	//// Custom terminal rule introducing semantic comments.
	//terminal COMMENT_ANNOTATION returns ecore::EString:
	//    '/**' -> '*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION returns ecore::EString:
	//    '//*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//// Number Terminal
	//terminal fragment NUMBER :
	//    '0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//// Integer Terminal
	//// An INT is a list of numbers.
	//@Override
	//terminal INT returns ecore::EInt:
	//    NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//// Float Terminal (internal precision: double!)
	//// Make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EDouble:
	//    NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
	//    NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//// Boolean Terminal
	//// Introduce boolean values.
	//terminal BOOLEAN returns ecore::EBooleanObject :
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//// String Terminal
	//// Custom terminal rule for strings, only use double quotes.
	//@Override
	//terminal STRING returns ecore::EString:
	//    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?(('_'?'a'..'z'|'_'?'A'..'Z')|'_''0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
