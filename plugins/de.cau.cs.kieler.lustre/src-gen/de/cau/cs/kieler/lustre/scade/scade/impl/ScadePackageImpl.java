/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.scade.scade.impl;

import de.cau.cs.kieler.annotations.AnnotationsPackage;

import de.cau.cs.kieler.kexpressions.KExpressionsPackage;

import de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage;

import de.cau.cs.kieler.lustre.lustre.LustrePackage;

import de.cau.cs.kieler.lustre.scade.scade.OperatorExpression;
import de.cau.cs.kieler.lustre.scade.scade.ScadeEquation;
import de.cau.cs.kieler.lustre.scade.scade.ScadeFactory;
import de.cau.cs.kieler.lustre.scade.scade.ScadePackage;
import de.cau.cs.kieler.lustre.scade.scade.ScadeProgram;
import de.cau.cs.kieler.lustre.scade.scade.ValuedObjectString;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ScadePackageImpl extends EPackageImpl implements ScadePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scadeProgramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scadeEquationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valuedObjectStringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operatorExpressionEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see de.cau.cs.kieler.lustre.scade.scade.ScadePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private ScadePackageImpl()
  {
    super(eNS_URI, ScadeFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link ScadePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static ScadePackage init()
  {
    if (isInited) return (ScadePackage)EPackage.Registry.INSTANCE.getEPackage(ScadePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredScadePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    ScadePackageImpl theScadePackage = registeredScadePackage instanceof ScadePackageImpl ? (ScadePackageImpl)registeredScadePackage : new ScadePackageImpl();

    isInited = true;

    // Initialize simple dependencies
    KEffectsPackage.eINSTANCE.eClass();
    KExpressionsPackage.eINSTANCE.eClass();
    LustrePackage.eINSTANCE.eClass();
    AnnotationsPackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theScadePackage.createPackageContents();

    // Initialize created meta-data
    theScadePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theScadePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(ScadePackage.eNS_URI, theScadePackage);
    return theScadePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScadeProgram()
  {
    return scadeProgramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getScadeProgram_Equations()
  {
    return (EReference)scadeProgramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getScadeProgram_Assertions()
  {
    return (EReference)scadeProgramEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getScadeProgram_Automatons()
  {
    return (EReference)scadeProgramEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScadeEquation()
  {
    return scadeEquationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getScadeEquation_References()
  {
    return (EReference)scadeEquationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getScadeEquation_Operator()
  {
    return (EAttribute)scadeEquationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getScadeEquation_Expression()
  {
    return (EReference)scadeEquationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValuedObjectString()
  {
    return valuedObjectStringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValuedObjectString_Name()
  {
    return (EAttribute)valuedObjectStringEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperatorExpression()
  {
    return operatorExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperatorExpression_Operator()
  {
    return (EAttribute)operatorExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperatorExpression_SubExpressions()
  {
    return (EReference)operatorExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScadeFactory getScadeFactory()
  {
    return (ScadeFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    scadeProgramEClass = createEClass(SCADE_PROGRAM);
    createEReference(scadeProgramEClass, SCADE_PROGRAM__EQUATIONS);
    createEReference(scadeProgramEClass, SCADE_PROGRAM__ASSERTIONS);
    createEReference(scadeProgramEClass, SCADE_PROGRAM__AUTOMATONS);

    scadeEquationEClass = createEClass(SCADE_EQUATION);
    createEReference(scadeEquationEClass, SCADE_EQUATION__REFERENCES);
    createEAttribute(scadeEquationEClass, SCADE_EQUATION__OPERATOR);
    createEReference(scadeEquationEClass, SCADE_EQUATION__EXPRESSION);

    valuedObjectStringEClass = createEClass(VALUED_OBJECT_STRING);
    createEAttribute(valuedObjectStringEClass, VALUED_OBJECT_STRING__NAME);

    operatorExpressionEClass = createEClass(OPERATOR_EXPRESSION);
    createEAttribute(operatorExpressionEClass, OPERATOR_EXPRESSION__OPERATOR);
    createEReference(operatorExpressionEClass, OPERATOR_EXPRESSION__SUB_EXPRESSIONS);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    KExpressionsPackage theKExpressionsPackage = (KExpressionsPackage)EPackage.Registry.INSTANCE.getEPackage(KExpressionsPackage.eNS_URI);
    LustrePackage theLustrePackage = (LustrePackage)EPackage.Registry.INSTANCE.getEPackage(LustrePackage.eNS_URI);
    KEffectsPackage theKEffectsPackage = (KEffectsPackage)EPackage.Registry.INSTANCE.getEPackage(KEffectsPackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    valuedObjectStringEClass.getESuperTypes().add(theKExpressionsPackage.getExpression());
    operatorExpressionEClass.getESuperTypes().add(theKExpressionsPackage.getExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(scadeProgramEClass, ScadeProgram.class, "ScadeProgram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getScadeProgram_Equations(), this.getScadeEquation(), null, "equations", null, 0, -1, ScadeProgram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getScadeProgram_Assertions(), theKExpressionsPackage.getExpression(), null, "assertions", null, 0, -1, ScadeProgram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getScadeProgram_Automatons(), theLustrePackage.getAutomaton(), null, "automatons", null, 0, -1, ScadeProgram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scadeEquationEClass, ScadeEquation.class, "ScadeEquation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getScadeEquation_References(), theKExpressionsPackage.getExpression(), null, "references", null, 0, -1, ScadeEquation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getScadeEquation_Operator(), theKEffectsPackage.getAssignOperator(), "operator", null, 0, 1, ScadeEquation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getScadeEquation_Expression(), theKExpressionsPackage.getExpression(), null, "expression", null, 0, 1, ScadeEquation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valuedObjectStringEClass, ValuedObjectString.class, "ValuedObjectString", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getValuedObjectString_Name(), ecorePackage.getEString(), "name", null, 0, 1, ValuedObjectString.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(operatorExpressionEClass, OperatorExpression.class, "OperatorExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOperatorExpression_Operator(), theKExpressionsPackage.getOperatorType(), "operator", null, 0, 1, OperatorExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperatorExpression_SubExpressions(), theKExpressionsPackage.getExpression(), null, "subExpressions", null, 0, -1, OperatorExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //ScadePackageImpl
