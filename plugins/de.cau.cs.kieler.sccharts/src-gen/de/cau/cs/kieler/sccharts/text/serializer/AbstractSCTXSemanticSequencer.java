/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.Pragma;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.StringPragma;
import de.cau.cs.kieler.annotations.TagAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.ExternString;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.GenericParameterDeclaration;
import de.cau.cs.kieler.kexpressions.GenericTypeReference;
import de.cau.cs.kieler.kexpressions.IgnoreValue;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.JsonAnnotation;
import de.cau.cs.kieler.kexpressions.JsonArrayValue;
import de.cau.cs.kieler.kexpressions.JsonObjectMember;
import de.cau.cs.kieler.kexpressions.JsonObjectValue;
import de.cau.cs.kieler.kexpressions.JsonPragma;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.NullValue;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.PrintCall;
import de.cau.cs.kieler.kexpressions.RandomCall;
import de.cau.cs.kieler.kexpressions.RandomizeCall;
import de.cau.cs.kieler.kexpressions.ReferenceCall;
import de.cau.cs.kieler.kexpressions.ReferenceDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleObjectReference;
import de.cau.cs.kieler.kexpressions.SpecialAccessExpression;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ThisExpression;
import de.cau.cs.kieler.kexpressions.ValueTypeReference;
import de.cau.cs.kieler.kexpressions.ValuedObject;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;
import de.cau.cs.kieler.kexpressions.VectorValue;
import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.kexpressions.keffects.PrintCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.RandomizeCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.ReferenceCallEffect;
import de.cau.cs.kieler.kexpressions.kext.AnnotatedExpression;
import de.cau.cs.kieler.kexpressions.kext.ClassDeclaration;
import de.cau.cs.kieler.kexpressions.kext.KExtPackage;
import de.cau.cs.kieler.kexpressions.kext.KExtScope;
import de.cau.cs.kieler.kexpressions.kext.Kext;
import de.cau.cs.kieler.kexpressions.kext.TestEntity;
import de.cau.cs.kieler.sccharts.BaseStateReference;
import de.cau.cs.kieler.sccharts.CodeEffect;
import de.cau.cs.kieler.sccharts.ControlflowRegion;
import de.cau.cs.kieler.sccharts.DataflowAssignment;
import de.cau.cs.kieler.sccharts.DataflowRegion;
import de.cau.cs.kieler.sccharts.DuringAction;
import de.cau.cs.kieler.sccharts.EntryAction;
import de.cau.cs.kieler.sccharts.ExitAction;
import de.cau.cs.kieler.sccharts.ModuleScopeCall;
import de.cau.cs.kieler.sccharts.OdeAction;
import de.cau.cs.kieler.sccharts.PeriodAction;
import de.cau.cs.kieler.sccharts.PolicyClassDeclaration;
import de.cau.cs.kieler.sccharts.PolicyRegion;
import de.cau.cs.kieler.sccharts.SCCharts;
import de.cau.cs.kieler.sccharts.SCChartsPackage;
import de.cau.cs.kieler.sccharts.ScopeCall;
import de.cau.cs.kieler.sccharts.State;
import de.cau.cs.kieler.sccharts.SuspendAction;
import de.cau.cs.kieler.sccharts.Transition;
import de.cau.cs.kieler.sccharts.text.services.SCTXGrammarAccess;
import de.cau.cs.kieler.scl.Conditional;
import de.cau.cs.kieler.scl.ElseScope;
import de.cau.cs.kieler.scl.Goto;
import de.cau.cs.kieler.scl.Label;
import de.cau.cs.kieler.scl.Loop;
import de.cau.cs.kieler.scl.MethodImplementationDeclaration;
import de.cau.cs.kieler.scl.ModuleCall;
import de.cau.cs.kieler.scl.Parallel;
import de.cau.cs.kieler.scl.Pause;
import de.cau.cs.kieler.scl.Return;
import de.cau.cs.kieler.scl.SCLPackage;
import de.cau.cs.kieler.scl.SCLProgram;
import de.cau.cs.kieler.scl.ScopeStatement;
import de.cau.cs.kieler.scl.serializer.SCLSemanticSequencer;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractSCTXSemanticSequencer extends SCLSemanticSequencer {

	@Inject
	private SCTXGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.COMMENT_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getCommentAnnotationRule()) {
					sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommentAnnotatonSLRule()) {
					sequence_CommentAnnotatonSL(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.PRAGMA:
				sequence_PragmaTag(context, (Pragma) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedKeyStringValueAnnotationRule()) {
					sequence_RestrictedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.STRING_PRAGMA:
				sequence_StringPragma(context, (StringPragma) semanticObject); 
				return; 
			case AnnotationsPackage.TAG_ANNOTATION:
				sequence_TagAnnotation(context, (TagAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()) {
					sequence_RestrictedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KEffectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				if (rule == grammarAccess.getAssignmentRule()) {
					sequence_Assignment(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEffectRule()
						|| rule == grammarAccess.getKEffectsEffectRule()) {
					sequence_Assignment_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEffectOrAssignmentRule()) {
					sequence_EffectOrAssignment(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPostfixEffectRule()) {
					sequence_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else break;
			case KEffectsPackage.EMISSION:
				if (rule == grammarAccess.getPureEmissionRule()) {
					sequence_PureEmission(context, (Emission) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEffectRule()
						|| rule == grammarAccess.getKEffectsEffectRule()
						|| rule == grammarAccess.getPureOrValuedEmissionRule()) {
					sequence_PureEmission_ValuedEmission(context, (Emission) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedEmissionRule()) {
					sequence_ValuedEmission(context, (Emission) semanticObject); 
					return; 
				}
				else break;
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			case KEffectsPackage.PRINT_CALL_EFFECT:
				sequence_PrintCallEffect(context, (PrintCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.RANDOMIZE_CALL_EFFECT:
				sequence_RandomizeCallEffect(context, (RandomizeCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.REFERENCE_CALL_EFFECT:
				sequence_ReferenceCallEffect(context, (ReferenceCallEffect) semanticObject); 
				return; 
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_BoolValue(context, (BoolValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getBoolValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_BoolValue(context, (BoolValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.EXTERN_STRING:
				sequence_ExternString(context, (ExternString) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_FloatValue(context, (FloatValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getFloatValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_FloatValue(context, (FloatValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.FUNCTION_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_FunctionCall(context, (FunctionCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getFunctionCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_FunctionCall(context, (FunctionCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.GENERIC_PARAMETER_DECLARATION:
				sequence_GenericParameterDeclaration(context, (GenericParameterDeclaration) semanticObject); 
				return; 
			case KExpressionsPackage.GENERIC_TYPE_REFERENCE:
				if (rule == grammarAccess.getGenericParameter_GenericTypeReference_ParameterizedRule()) {
					sequence_GenericParameter_GenericTypeReference_Parameterized(context, (GenericTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericTypeReferenceRule()) {
					sequence_GenericTypeReference(context, (GenericTypeReference) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.IGNORE_VALUE:
				sequence_IgnoreValue(context, (IgnoreValue) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_IntValue(context, (IntValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIntOrReferenceRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getIntValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_IntValue(context, (IntValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.JSON_ANNOTATION:
				sequence_JsonAnnotation(context, (JsonAnnotation) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_ARRAY_VALUE:
				sequence_JsonArrayValue(context, (JsonArrayValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_MEMBER:
				sequence_JsonObjectMember(context, (JsonObjectMember) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_VALUE:
				sequence_JsonObjectValue(context, (JsonObjectValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_PRAGMA:
				sequence_JsonPragma(context, (JsonPragma) semanticObject); 
				return; 
			case KExpressionsPackage.NULL_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_NullValue(context, (NullValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getJsonValueRule()
						|| rule == grammarAccess.getNullValueRule()) {
					sequence_NullValue(context, (NullValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_BoolScheduleExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDivExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_MultExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftLeftExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftLeftExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftRightExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftRightExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftRightUnsignedExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftRightUnsignedExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SubExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				if (rule == grammarAccess.getGenericParameterRule()) {
					sequence_GenericParameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModuleCallParameterRule()) {
					sequence_ModuleCallParameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParameterRule()) {
					sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getScopeParameterRule()) {
					sequence_ScopeParameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PRINT_CALL:
				sequence_PrintCall(context, (PrintCall) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOM_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_RandomCall(context, (RandomCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getRandomCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_RandomCall(context, (RandomCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.RANDOMIZE_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_RandomizeCall(context, (RandomizeCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getRandomizeCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_RandomizeCall(context, (RandomizeCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.REFERENCE_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_ReferenceCall(context, (ReferenceCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getReferenceCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_ReferenceCall(context, (ReferenceCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.REFERENCE_DECLARATION:
				if (rule == grammarAccess.getDeclarationOrMethodWithKeywordWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()
						|| rule == grammarAccess.getReferenceDeclarationWOSemicolonRule()) {
					sequence_ReferenceDeclarationWOSemicolon(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getKExtDeclarationRule()
						|| rule == grammarAccess.getReferenceDeclarationRule()) {
					sequence_ReferenceDeclaration(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getDeclarationOrMethodRule()) {
					sequence_ReferenceDeclaration_ReferenceDeclarationWOSemicolon(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_DECLARATION:
				if (rule == grammarAccess.getDeclarationOrMethodWithKeywordWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()
						|| rule == grammarAccess.getScheduleDeclarationWOSemicolonRule()) {
					sequence_ScheduleDeclarationWOSemicolon(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getKExtDeclarationRule()
						|| rule == grammarAccess.getScheduleDeclarationRule()) {
					sequence_ScheduleDeclaration(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getDeclarationOrMethodRule()) {
					sequence_ScheduleDeclaration_ScheduleDeclarationWOSemicolon(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_OBJECT_REFERENCE:
				sequence_ScheduleObjectReference(context, (ScheduleObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.SPECIAL_ACCESS_EXPRESSION:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_SCChartAccessExpression_StateAccessExpression(context, (SpecialAccessExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSCChartAccessExpressionRule()) {
					sequence_SCChartAccessExpression(context, (SpecialAccessExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSpecialAccessExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_SCChartAccessExpression_StateAccessExpression(context, (SpecialAccessExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateAccessExpressionRule()) {
					sequence_StateAccessExpression(context, (SpecialAccessExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.STRING_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_StringValue(context, (StringValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getStringValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_StringValue(context, (StringValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.TEXT_EXPRESSION:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_TextExpression(context, (TextExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getTextExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_TextExpression(context, (TextExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.THIS_EXPRESSION:
				sequence_ThisExpression(context, (ThisExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUE_TYPE_REFERENCE:
				sequence_ValueTypeReference(context, (ValueTypeReference) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				if (rule == grammarAccess.getCounterVariableRule()) {
					sequence_CounterVariable(context, (ValuedObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceValuedObjectRule()) {
					sequence_ReferenceValuedObject(context, (ValuedObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSimpleValuedObjectRule()) {
					sequence_SimpleValuedObject(context, (ValuedObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectRule()) {
					sequence_ValuedObject(context, (ValuedObject) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericParameter_ValuedObjectReference_ArrayRule()) {
					sequence_GenericParameter_ValuedObjectReference_Array(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getGenericParameter_ValuedObjectReference_SubRule()) {
					sequence_GenericParameter_ValuedObjectReference_Sub(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIntOrReferenceRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getValuedObjectTestExpressionRule()
						|| rule == grammarAccess.getValuedObjectReferenceRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VARIABLE_DECLARATION:
				if (rule == grammarAccess.getEnumMemberDeclarationRule()) {
					sequence_EnumMemberDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLoopDeclarationRule()) {
					sequence_LoopDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationOrMethodWithKeywordWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getVariableDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()) {
					sequence_VariableDeclarationWOSemicolon(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getKExtDeclarationRule()
						|| rule == grammarAccess.getVariableDeclarationRule()) {
					sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getDeclarationOrMethodRule()) {
					sequence_VariableDeclaration_VariableDeclarationWOSemicolon(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VECTOR_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_VectorValue(context, (VectorValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_VectorValue(context, (VectorValue) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KExtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExtPackage.ANNOTATED_EXPRESSION:
				if (rule == grammarAccess.getAnnotatedExpressionRule()) {
					sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotatedJsonExpressionRule()) {
					sequence_AnnotatedJsonExpression(context, (AnnotatedExpression) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.CLASS_DECLARATION:
				if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getKExtDeclarationRule()
						|| rule == grammarAccess.getClassDeclarationRule()) {
					sequence_ClassDeclaration(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationOrMethodRule()) {
					sequence_ClassDeclaration_EnumDeclaration(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationOrMethodWithKeywordWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()
						|| rule == grammarAccess.getEnumDeclarationWOSemicolonRule()) {
					sequence_EnumDeclarationWOSemicolon(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEnumDeclarationRule()) {
					sequence_EnumDeclaration(context, (ClassDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.KEXT_SCOPE:
				if (rule == grammarAccess.getRootScopeRule()) {
					sequence_RootScope(context, (KExtScope) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getScopeRule()) {
					sequence_Scope(context, (KExtScope) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KExtPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if (epackage == SCChartsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SCChartsPackage.BASE_STATE_REFERENCE:
				sequence_BaseStateReference(context, (BaseStateReference) semanticObject); 
				return; 
			case SCChartsPackage.CODE_EFFECT:
				sequence_CodeEffect(context, (CodeEffect) semanticObject); 
				return; 
			case SCChartsPackage.CONTROLFLOW_REGION:
				if (rule == grammarAccess.getRegionRule()
						|| rule == grammarAccess.getControlflowRegionRule()) {
					sequence_ControlflowRegion(context, (ControlflowRegion) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getImplicitControlflowRegionRule()) {
					sequence_ImplicitControlflowRegion(context, (ControlflowRegion) semanticObject); 
					return; 
				}
				else break;
			case SCChartsPackage.DATAFLOW_ASSIGNMENT:
				sequence_DataflowAssignment(context, (DataflowAssignment) semanticObject); 
				return; 
			case SCChartsPackage.DATAFLOW_REGION:
				sequence_DataflowRegion(context, (DataflowRegion) semanticObject); 
				return; 
			case SCChartsPackage.DURING_ACTION:
				sequence_DuringAction(context, (DuringAction) semanticObject); 
				return; 
			case SCChartsPackage.ENTRY_ACTION:
				sequence_EntryAction(context, (EntryAction) semanticObject); 
				return; 
			case SCChartsPackage.EXIT_ACTION:
				sequence_ExitAction(context, (ExitAction) semanticObject); 
				return; 
			case SCChartsPackage.MODULE_SCOPE_CALL:
				sequence_ModuleScopeCall(context, (ModuleScopeCall) semanticObject); 
				return; 
			case SCChartsPackage.ODE_ACTION:
				sequence_OdeAction(context, (OdeAction) semanticObject); 
				return; 
			case SCChartsPackage.PERIOD_ACTION:
				sequence_PeriodAction(context, (PeriodAction) semanticObject); 
				return; 
			case SCChartsPackage.POLICY_CLASS_DECLARATION:
				sequence_ClassDeclarationWOSemicolon(context, (PolicyClassDeclaration) semanticObject); 
				return; 
			case SCChartsPackage.POLICY_REGION:
				sequence_PolicyRegion(context, (PolicyRegion) semanticObject); 
				return; 
			case SCChartsPackage.SC_CHARTS:
				sequence_SCCharts(context, (SCCharts) semanticObject); 
				return; 
			case SCChartsPackage.SCOPE_CALL:
				sequence_ScopeCall(context, (ScopeCall) semanticObject); 
				return; 
			case SCChartsPackage.STATE:
				if (rule == grammarAccess.getImplicitStateRule()) {
					sequence_ImplicitState(context, (State) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPolicyStateRule()) {
					sequence_PolicyState(context, (State) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootStateRule()) {
					sequence_RootState(context, (State) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStateRule()) {
					sequence_State(context, (State) semanticObject); 
					return; 
				}
				else break;
			case SCChartsPackage.SUSPEND_ACTION:
				sequence_SuspendAction(context, (SuspendAction) semanticObject); 
				return; 
			case SCChartsPackage.TRANSITION:
				if (rule == grammarAccess.getPolicyTransitionRule()) {
					sequence_PolicyTransition(context, (Transition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionRule()) {
					sequence_Transition(context, (Transition) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == SCLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SCLPackage.ASSIGNMENT:
				if (rule == grammarAccess.getSclAssignmentRule()) {
					sequence_SclAssignment(context, (de.cau.cs.kieler.scl.Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStatementRule()) {
					sequence_SclAssignment_SclEffectAssignment_SclPostfixAssignment(context, (de.cau.cs.kieler.scl.Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSclEffectAssignmentRule()) {
					sequence_SclEffectAssignment(context, (de.cau.cs.kieler.scl.Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSclPostfixAssignmentRule()) {
					sequence_SclPostfixAssignment(context, (de.cau.cs.kieler.scl.Assignment) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.CONDITIONAL:
				if (rule == grammarAccess.getStatementRule()
						|| rule == grammarAccess.getConditionalRule()) {
					sequence_Conditional(context, (Conditional) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLegacyConditionalRule()) {
					sequence_LegacyConditional(context, (Conditional) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.ELSE_SCOPE:
				if (rule == grammarAccess.getElseScopeRule()) {
					sequence_ElseScope(context, (ElseScope) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLegacyElseScopeRule()) {
					sequence_LegacyElseScope(context, (ElseScope) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case SCLPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case SCLPackage.LOOP:
				if (rule == grammarAccess.getForLoopRule()) {
					sequence_ForLoop(context, (Loop) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStatementRule()) {
					sequence_ForLoop_WhileLoop(context, (Loop) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getWhileLoopRule()) {
					sequence_WhileLoop(context, (Loop) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.METHOD_IMPLEMENTATION_DECLARATION:
				if (rule == grammarAccess.getDeclarationOrMethodWithKeywordWOSemicolonRule()
						|| rule == grammarAccess.getKeywordMethodDeclarationWOSemicolonRule()) {
					sequence_KeywordMethodDeclarationWOSemicolon(context, (MethodImplementationDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMethodDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getDeclarationOrMethodWOSemicolonRule()) {
					sequence_MethodDeclarationWOSemicolon(context, (MethodImplementationDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMethodDeclarationRule()
						|| rule == grammarAccess.getDeclarationOrMethodRule()) {
					sequence_MethodDeclaration(context, (MethodImplementationDeclaration) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.MODULE:
				sequence_Module(context, (de.cau.cs.kieler.scl.Module) semanticObject); 
				return; 
			case SCLPackage.MODULE_CALL:
				sequence_ModuleCall(context, (ModuleCall) semanticObject); 
				return; 
			case SCLPackage.PARALLEL:
				sequence_Parallel(context, (Parallel) semanticObject); 
				return; 
			case SCLPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case SCLPackage.RETURN:
				sequence_Return(context, (Return) semanticObject); 
				return; 
			case SCLPackage.SCL_PROGRAM:
				sequence_SCLProgram(context, (SCLProgram) semanticObject); 
				return; 
			case SCLPackage.SCOPE_STATEMENT:
				sequence_ScopeStatement(context, (ScopeStatement) semanticObject); 
				return; 
			case SCLPackage.THREAD:
				sequence_Thread(context, (de.cau.cs.kieler.scl.Thread) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BaseStateReference returns BaseStateReference
	 *
	 * Constraint:
	 *     (
	 *         target=[State|ID] 
	 *         (genericParameters+=GenericParameter genericParameters+=GenericParameter*)? 
	 *         (parameters+=ScopeParameter parameters+=ScopeParameter*)?
	 *     )
	 */
	protected void sequence_BaseStateReference(ISerializationContext context, BaseStateReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BoolScheduleExpression returns SpecialAccessExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (access='scchart' target=[NamedObject|PrimeID] subReference=ValuedObjectReference) | 
	 *             (access='state' (container=[ControlflowRegion|ID] | container=[DataflowRegion|ID])? target=[State|ID] schedule+=ScheduleObjectReference?)
	 *         ) 
	 *         schedule+=ScheduleObjectReference?
	 *     )
	 */
	protected void sequence_BoolScheduleExpression_SCChartAccessExpression_StateAccessExpression(ISerializationContext context, SpecialAccessExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns PolicyClassDeclaration
	 *     ClassDeclarationWOSemicolon returns PolicyClassDeclaration
	 *     DeclarationOrMethodWithKeywordWOSemicolon returns PolicyClassDeclaration
	 *     DeclarationWOSemicolon returns PolicyClassDeclaration
	 *     DeclarationOrMethod returns PolicyClassDeclaration
	 *     DeclarationOrMethodWOSemicolon returns PolicyClassDeclaration
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         access=AccessModifier? 
	 *         host?='host'? 
	 *         (
	 *             (type=ClassType name=EString? policy=PolicyRegion? declarations+=DeclarationOrMethodWOSemicolon*) | 
	 *             (type=StructType name=EString? declarations+=DeclarationWOSemicolon*)
	 *         ) 
	 *         (valuedObjects+=ValuedObject valuedObjects+=ValuedObject*)? 
	 *         annotations+=CommentAnnotatonSL?
	 *     )
	 */
	protected void sequence_ClassDeclarationWOSemicolon(ISerializationContext context, PolicyClassDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Effect returns CodeEffect
	 *     CodeEffect returns CodeEffect
	 *
	 * Constraint:
	 *     (annotations+=Annotation* declarations+=Declaration* statements+=Statement*)
	 */
	protected void sequence_CodeEffect(ISerializationContext context, CodeEffect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Region returns ControlflowRegion
	 *     ControlflowRegion returns ControlflowRegion
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (abort?='abort' | (override?='override'? final?='final'?))? 
	 *         name=ExtendedID? 
	 *         label=STRING? 
	 *         (
	 *             (reference=ScopeCall (counterVariable=CounterVariable forStart=IntOrReference forEnd=IntOrReference?)? schedule+=ScheduleObjectReference*) | 
	 *             (
	 *                 (counterVariable=CounterVariable forStart=IntOrReference forEnd=IntOrReference?)? 
	 *                 schedule+=ScheduleObjectReference* 
	 *                 (
	 *                     (declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* (states+=ImplicitState | states+=State+)) | 
	 *                     (declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* states+=State*)
	 *                 )
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_ControlflowRegion(ISerializationContext context, ControlflowRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CounterVariable returns ValuedObject
	 *
	 * Constraint:
	 *     name=PrimeID
	 */
	protected void sequence_CounterVariable(ISerializationContext context, ValuedObject semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCounterVariableAccess().getNamePrimeIDParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataflowAssignment returns DataflowAssignment
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         reference=ValuedObjectReference 
	 *         operator=AssignOperator 
	 *         expression=Expression 
	 *         schedule+=ScheduleObjectReference* 
	 *         (sequential?=';' | sequential?='seq')?
	 *     )
	 */
	protected void sequence_DataflowAssignment(ISerializationContext context, DataflowAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Region returns DataflowRegion
	 *     DataflowRegion returns DataflowRegion
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         override?='override'? 
	 *         name=ExtendedID? 
	 *         label=STRING? 
	 *         (counterVariable=CounterVariable forStart=IntOrReference forEnd=IntOrReference?)? 
	 *         schedule+=ScheduleObjectReference* 
	 *         once?='once'? 
	 *         (
	 *             (declarations+=DeclarationWOSemicolon* (equations+=DataflowAssignment | equations+=Assignment)*) | 
	 *             (declarations+=DeclarationWOSemicolon* (equations+=DataflowAssignment | equations+=Assignment)*)
	 *         )
	 *     )
	 */
	protected void sequence_DataflowRegion(ISerializationContext context, DataflowRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LocalAction returns DuringAction
	 *     DuringAction returns DuringAction
	 *
	 * Constraint:
	 *     (
	 *         annotations+=RestrictedTypeAnnotation* 
	 *         delay=DelayType? 
	 *         (triggerDelay=INT? trigger=BoolScheduleExpression triggerProbability=FLOAT?)? 
	 *         (effects+=Effect effects+=Effect*)? 
	 *         label=STRING?
	 *     )
	 */
	protected void sequence_DuringAction(ISerializationContext context, DuringAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LocalAction returns EntryAction
	 *     EntryAction returns EntryAction
	 *
	 * Constraint:
	 *     (
	 *         annotations+=RestrictedTypeAnnotation* 
	 *         preemption=PreemptionActionType? 
	 *         (trigger=BoolScheduleExpression triggerProbability=FLOAT?)? 
	 *         (effects+=Effect effects+=Effect*)? 
	 *         label=STRING?
	 *     )
	 */
	protected void sequence_EntryAction(ISerializationContext context, EntryAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LocalAction returns ExitAction
	 *     ExitAction returns ExitAction
	 *
	 * Constraint:
	 *     (
	 *         annotations+=RestrictedTypeAnnotation* 
	 *         preemption=PreemptionActionType? 
	 *         (trigger=BoolScheduleExpression triggerProbability=FLOAT?)? 
	 *         (effects+=Effect effects+=Effect*)? 
	 *         label=STRING?
	 *     )
	 */
	protected void sequence_ExitAction(ISerializationContext context, ExitAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplicitControlflowRegion returns ControlflowRegion
	 *
	 * Constraint:
	 *     states+=State+
	 */
	protected void sequence_ImplicitControlflowRegion(ISerializationContext context, ControlflowRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImplicitState returns State
	 *
	 * Constraint:
	 *     regions+=Region+
	 */
	protected void sequence_ImplicitState(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeclarationOrMethodWithKeywordWOSemicolon returns MethodImplementationDeclaration
	 *     KeywordMethodDeclarationWOSemicolon returns MethodImplementationDeclaration
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (access=AccessModifier | override?='override')? 
	 *         returnType=MethodReturnType? 
	 *         valuedObjects+=SimpleValuedObject 
	 *         (parameterDeclarations+=VariableDeclarationWOSemicolon parameterDeclarations+=VariableDeclarationWOSemicolon*)? 
	 *         schedule+=ScheduleObjectReference* 
	 *         annotations+=CommentAnnotatonSL? 
	 *         declarations+=Declaration* 
	 *         statements+=Statement*
	 *     )
	 */
	protected void sequence_KeywordMethodDeclarationWOSemicolon(ISerializationContext context, MethodImplementationDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleScopeCall returns ModuleScopeCall
	 *
	 * Constraint:
	 *     (target=[NamedObject|ID] (parameters+=ScopeParameter parameters+=ScopeParameter*)?)
	 */
	protected void sequence_ModuleScopeCall(ISerializationContext context, ModuleScopeCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LocalAction returns OdeAction
	 *     OdeAction returns OdeAction
	 *
	 * Constraint:
	 *     (annotations+=RestrictedTypeAnnotation* effects+=Effect label=STRING?)
	 */
	protected void sequence_OdeAction(ISerializationContext context, OdeAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LocalAction returns PeriodAction
	 *     PeriodAction returns PeriodAction
	 *
	 * Constraint:
	 *     (annotations+=RestrictedTypeAnnotation* delay=DelayType? trigger=ValuedExpression label=STRING?)
	 */
	protected void sequence_PeriodAction(ISerializationContext context, PeriodAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PolicyRegion returns PolicyRegion
	 *
	 * Constraint:
	 *     (name=ID label=STRING? declarations+=DeclarationWOSemicolon* states+=PolicyState+)
	 */
	protected void sequence_PolicyRegion(ISerializationContext context, PolicyRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PolicyState returns State
	 *
	 * Constraint:
	 *     (annotations+=Annotation* initial?='initial'? name=ID label=STRING? outgoingTransitions+=PolicyTransition*)
	 */
	protected void sequence_PolicyState(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PolicyTransition returns Transition
	 *
	 * Constraint:
	 *     (
	 *         annotations+=RestrictedTypeAnnotation* 
	 *         ((trigger=LogicalOrExpression | trigger=ValuedObjectReference) (effects+=PureEmission effects+=PureEmission*)?)? 
	 *         targetState=[State|ID] 
	 *         label=STRING?
	 *     )
	 */
	protected void sequence_PolicyTransition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns ReferenceDeclaration
	 *     DeclarationOrMethod returns ReferenceDeclaration
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             annotations+=Annotation* 
	 *             access=AccessModifier? 
	 *             (
	 *                 (
	 *                     input?='input'? 
	 *                     referenceContainer=[NamedObject|PrimeID]? 
	 *                     reference=[NamedObject|PrimeID] 
	 *                     (genericParameters+=GenericParameter genericParameters+=GenericParameter*)? 
	 *                     valuedObjects+=ReferenceValuedObject 
	 *                     valuedObjects+=ReferenceValuedObject*
	 *                 ) | 
	 *                 (extern+=ExternString extern+=ExternString* valuedObjects+=ValuedObject valuedObjects+=ValuedObject*)
	 *             ) 
	 *             annotations+=CommentAnnotatonSL?
	 *         ) | 
	 *         (
	 *             annotations+=Annotation* 
	 *             access=AccessModifier? 
	 *             (
	 *                 (
	 *                     input?='input'? 
	 *                     referenceContainer=[NamedObject|PrimeID]? 
	 *                     reference=[NamedObject|PrimeID] 
	 *                     (genericParameters+=GenericParameter genericParameters+=GenericParameter*)? 
	 *                     valuedObjects+=ReferenceValuedObject 
	 *                     valuedObjects+=ReferenceValuedObject*
	 *                 ) | 
	 *                 (extern+=ExternString extern+=ExternString* valuedObjects+=ValuedObject valuedObjects+=ValuedObject*)
	 *             ) 
	 *             annotations+=CommentAnnotatonSL?
	 *         )
	 *     )
	 */
	protected void sequence_ReferenceDeclaration_ReferenceDeclarationWOSemicolon(ISerializationContext context, ReferenceDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceValuedObject returns ValuedObject
	 *
	 * Constraint:
	 *     (
	 *         annotations+=QuotedStringAnnotation* 
	 *         name=PrimeID 
	 *         cardinalities+=Expression* 
	 *         (genericParameters+=GenericParameter genericParameters+=GenericParameter*)? 
	 *         (parameters+=ScopeParameter parameters+=ScopeParameter*)? 
	 *         initialValue=Expression? 
	 *         label=STRING?
	 *     )
	 */
	protected void sequence_ReferenceValuedObject(ISerializationContext context, ValuedObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RootState returns State
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         name=ExtendedID 
	 *         label=STRING? 
	 *         (genericParameterDeclarations+=GenericParameterDeclaration genericParameterDeclarations+=GenericParameterDeclaration*)? 
	 *         (baseStateReferences+=BaseStateReference baseStateReferences+=BaseStateReference*)? 
	 *         declarations+=DeclarationOrMethodWithKeywordWOSemicolon* 
	 *         actions+=LocalAction* 
	 *         (regions+=ImplicitControlflowRegion | regions+=Region+)?
	 *     )
	 */
	protected void sequence_RootState(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCChartAccessExpression returns SpecialAccessExpression
	 *
	 * Constraint:
	 *     (access='scchart' target=[NamedObject|PrimeID] subReference=ValuedObjectReference)
	 */
	protected void sequence_SCChartAccessExpression(ISerializationContext context, SpecialAccessExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.SPECIAL_ACCESS_EXPRESSION__ACCESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.SPECIAL_ACCESS_EXPRESSION__ACCESS));
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.SPECIAL_ACCESS_EXPRESSION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.SPECIAL_ACCESS_EXPRESSION__TARGET));
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.SPECIAL_ACCESS_EXPRESSION__SUB_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.SPECIAL_ACCESS_EXPRESSION__SUB_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSCChartAccessExpressionAccess().getAccessScchartKeyword_0_0(), semanticObject.getAccess());
		feeder.accept(grammarAccess.getSCChartAccessExpressionAccess().getTargetNamedObjectPrimeIDParserRuleCall_2_0_1(), semanticObject.eGet(KExpressionsPackage.Literals.SPECIAL_ACCESS_EXPRESSION__TARGET, false));
		feeder.accept(grammarAccess.getSCChartAccessExpressionAccess().getSubReferenceValuedObjectReferenceParserRuleCall_5_0(), semanticObject.getSubReference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpecialAccessExpression returns SpecialAccessExpression
	 *     Root returns SpecialAccessExpression
	 *     Expression returns SpecialAccessExpression
	 *     BoolExpression returns SpecialAccessExpression
	 *     LogicalOrExpression returns SpecialAccessExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     LogicalAndExpression returns SpecialAccessExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     BitwiseOrExpression returns SpecialAccessExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     BitwiseXOrExpression returns SpecialAccessExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     BitwiseAndExpression returns SpecialAccessExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     CompareOperation returns SpecialAccessExpression
	 *     CompareOperation.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     NotOrValuedExpression returns SpecialAccessExpression
	 *     BitwiseNotExpression returns SpecialAccessExpression
	 *     NotExpression returns SpecialAccessExpression
	 *     ValuedExpression returns SpecialAccessExpression
	 *     ShiftExpressions returns SpecialAccessExpression
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns SpecialAccessExpression
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns SpecialAccessExpression
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns SpecialAccessExpression
	 *     ShiftLeftExpression returns SpecialAccessExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ShiftRightExpression returns SpecialAccessExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ShiftRightUnsignedExpression returns SpecialAccessExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     SumExpression returns SpecialAccessExpression
	 *     SumExpression.OperatorExpression_1_0_0 returns SpecialAccessExpression
	 *     SumExpression.OperatorExpression_1_1_0 returns SpecialAccessExpression
	 *     AddExpression returns SpecialAccessExpression
	 *     AddExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     SubExpression returns SpecialAccessExpression
	 *     SubExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ProductExpression returns SpecialAccessExpression
	 *     ProductExpression.OperatorExpression_1_0_0 returns SpecialAccessExpression
	 *     ProductExpression.OperatorExpression_1_1_0 returns SpecialAccessExpression
	 *     ProductExpression.OperatorExpression_1_2_0 returns SpecialAccessExpression
	 *     MultExpression returns SpecialAccessExpression
	 *     MultExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     DivExpression returns SpecialAccessExpression
	 *     DivExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ModExpression returns SpecialAccessExpression
	 *     ModExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     NegExpression returns SpecialAccessExpression
	 *     TernaryOperation returns SpecialAccessExpression
	 *     InitExpression returns SpecialAccessExpression
	 *     InitExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     FbyExpression returns SpecialAccessExpression
	 *     FbyExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     SfbyExpression returns SpecialAccessExpression
	 *     SfbyExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     AtomicExpression returns SpecialAccessExpression
	 *     AtomicValuedExpression returns SpecialAccessExpression
	 *     VectorValueMember returns SpecialAccessExpression
	 *
	 * Constraint:
	 *     (
	 *         (access='scchart' target=[NamedObject|PrimeID] subReference=ValuedObjectReference) | 
	 *         (access='state' (container=[ControlflowRegion|ID] | container=[DataflowRegion|ID])? target=[State|ID] schedule+=ScheduleObjectReference?)
	 *     )
	 */
	protected void sequence_SCChartAccessExpression_StateAccessExpression(ISerializationContext context, SpecialAccessExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCCharts returns SCCharts
	 *
	 * Constraint:
	 *     (((pragmas+=Pragma | imports+=EString)+ rootStates+=RootState+) | rootStates+=RootState+)?
	 */
	protected void sequence_SCCharts(ISerializationContext context, SCCharts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns ScheduleDeclaration
	 *     DeclarationOrMethod returns ScheduleDeclaration
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             annotations+=Annotation* 
	 *             access=AccessModifier? 
	 *             name=STRING? 
	 *             global=PriorityProtocol? 
	 *             (priorities+=PriorityProtocol priorities+=PriorityProtocol*)? 
	 *             valuedObjects+=ValuedObject 
	 *             valuedObjects+=ValuedObject* 
	 *             annotations+=CommentAnnotatonSL?
	 *         ) | 
	 *         (
	 *             annotations+=Annotation* 
	 *             access=AccessModifier? 
	 *             name=STRING? 
	 *             global=PriorityProtocol? 
	 *             (priorities+=PriorityProtocol priorities+=PriorityProtocol*)? 
	 *             valuedObjects+=ValuedObject 
	 *             valuedObjects+=ValuedObject* 
	 *             annotations+=CommentAnnotatonSL?
	 *         )
	 *     )
	 */
	protected void sequence_ScheduleDeclaration_ScheduleDeclarationWOSemicolon(ISerializationContext context, ScheduleDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ScopeCall returns ScopeCall
	 *
	 * Constraint:
	 *     (
	 *         super?='super.'? 
	 *         target=[NamedObject|ID] 
	 *         (genericParameters+=GenericParameter genericParameters+=GenericParameter*)? 
	 *         (parameters+=ScopeParameter parameters+=ScopeParameter*)?
	 *     )
	 */
	protected void sequence_ScopeCall(ISerializationContext context, ScopeCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ScopeParameter returns Parameter
	 *
	 * Constraint:
	 *     (
	 *         ((accessType=ParameterAccessType expression=ValuedObjectReference) | expression=ThisExpression | expression=Expression) 
	 *         (explicitBinding=[ValuedObject|ID] explicitBindingIndices+=Expression*)?
	 *     )
	 */
	protected void sequence_ScopeParameter(ISerializationContext context, de.cau.cs.kieler.kexpressions.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAccessExpression returns SpecialAccessExpression
	 *
	 * Constraint:
	 *     (access='state' (container=[ControlflowRegion|ID] | container=[DataflowRegion|ID])? target=[State|ID] schedule+=ScheduleObjectReference?)
	 */
	protected void sequence_StateAccessExpression(ISerializationContext context, SpecialAccessExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         initial?='initial'? 
	 *         final?='final'? 
	 *         violation?='violation'? 
	 *         connector?='connector'? 
	 *         name=ID 
	 *         label=STRING? 
	 *         (
	 *             (reference=ScopeCall schedule+=ScheduleObjectReference*) | 
	 *             (reference=ModuleScopeCall schedule+=ScheduleObjectReference*) | 
	 *             (
	 *                 (baseStateReferences+=BaseStateReference baseStateReferences+=BaseStateReference*)? 
	 *                 schedule+=ScheduleObjectReference* 
	 *                 declarations+=DeclarationOrMethodWithKeywordWOSemicolon* 
	 *                 actions+=LocalAction* 
	 *                 (regions+=ImplicitControlflowRegion | regions+=Region+)?
	 *             )
	 *         ) 
	 *         outgoingTransitions+=Transition*
	 *     )
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LocalAction returns SuspendAction
	 *     SuspendAction returns SuspendAction
	 *
	 * Constraint:
	 *     (
	 *         annotations+=RestrictedTypeAnnotation* 
	 *         delay=DelayType? 
	 *         weak?='weak'? 
	 *         (triggerDelay=INT? trigger=BoolScheduleExpression triggerProbability=FLOAT?)? 
	 *         label=STRING?
	 *     )
	 */
	protected void sequence_SuspendAction(ISerializationContext context, SuspendAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (
	 *         annotations+=RestrictedTypeAnnotation* 
	 *         delay=DelayType? 
	 *         (triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression) triggerProbability=FLOAT? nondeterministic?='nondeterministic'?)? 
	 *         (effects+=Effect effects+=Effect*)? 
	 *         preemption=PreemptionType 
	 *         targetState=[State|ID] 
	 *         deferred=DeferredType? 
	 *         history=HistoryType? 
	 *         label=STRING?
	 *     )
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns VariableDeclaration
	 *     DeclarationOrMethod returns VariableDeclaration
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             annotations+=Annotation* 
	 *             access=AccessModifier? 
	 *             const?='const'? 
	 *             input?='input'? 
	 *             output?='output'? 
	 *             global?='global'? 
	 *             static?='static'? 
	 *             ((signal?='signal'? type=ValueType) | signal?='signal' | (type=HostType hostType=STRING)) 
	 *             valuedObjects+=ValuedObject 
	 *             valuedObjects+=ValuedObject* 
	 *             annotations+=CommentAnnotatonSL?
	 *         ) | 
	 *         (
	 *             annotations+=Annotation* 
	 *             access=AccessModifier? 
	 *             const?='const'? 
	 *             input?='input'? 
	 *             output?='output'? 
	 *             global?='global'? 
	 *             static?='static'? 
	 *             ((signal?='signal'? type=ValueType) | signal?='signal' | (type=HostType hostType=STRING)) 
	 *             valuedObjects+=ValuedObject 
	 *             valuedObjects+=ValuedObject* 
	 *             annotations+=CommentAnnotatonSL?
	 *         )
	 *     )
	 */
	protected void sequence_VariableDeclaration_VariableDeclarationWOSemicolon(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
