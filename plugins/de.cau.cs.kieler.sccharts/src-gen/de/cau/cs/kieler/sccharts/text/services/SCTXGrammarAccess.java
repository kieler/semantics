/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SCTXGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SCChartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.SCCharts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPragmasAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0_0 = (RuleCall)cPragmasAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cImportKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cImportsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cImportsEStringParserRuleCall_0_1_1_0 = (RuleCall)cImportsAssignment_0_1_1.eContents().get(0);
		private final Assignment cRootStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootStatesRootStateParserRuleCall_1_0 = (RuleCall)cRootStatesAssignment_1.eContents().get(0);
		
		//// ---------------- //
		////  SCCharts Rules  //
		//// ---------------- //
		//SCCharts returns sccharts::SCCharts:
		//    (
		//        pragmas+=Pragma
		//    |
		//        'import' imports+=EString
		//    )*
		//    rootStates+=RootState*;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    pragmas+=Pragma
		//|
		//    'import' imports+=EString
		//)*
		//rootStates+=RootState*
		public Group getGroup() { return cGroup; }
		
		//(
		//    pragmas+=Pragma
		//|
		//    'import' imports+=EString
		//)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//pragmas+=Pragma
		public Assignment getPragmasAssignment_0_0() { return cPragmasAssignment_0_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0_0() { return cPragmasPragmaParserRuleCall_0_0_0; }
		
		//'import' imports+=EString
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'import'
		public Keyword getImportKeyword_0_1_0() { return cImportKeyword_0_1_0; }
		
		//imports+=EString
		public Assignment getImportsAssignment_0_1_1() { return cImportsAssignment_0_1_1; }
		
		//EString
		public RuleCall getImportsEStringParserRuleCall_0_1_1_0() { return cImportsEStringParserRuleCall_0_1_1_0; }
		
		//rootStates+=RootState*
		public Assignment getRootStatesAssignment_1() { return cRootStatesAssignment_1; }
		
		//RootState
		public RuleCall getRootStatesRootStateParserRuleCall_1_0() { return cRootStatesRootStateParserRuleCall_1_0; }
	}
	public class RootStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.RootState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cScchartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameExtendedIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGenericParameterDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGenericParameterDeclarationsGenericParameterDeclarationParserRuleCall_4_1_0 = (RuleCall)cGenericParameterDeclarationsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cGenericParameterDeclarationsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cGenericParameterDeclarationsGenericParameterDeclarationParserRuleCall_4_2_1_0 = (RuleCall)cGenericParameterDeclarationsAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBaseStateReferencesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBaseStateReferencesBaseStateReferenceParserRuleCall_5_1_0 = (RuleCall)cBaseStateReferencesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cBaseStateReferencesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cBaseStateReferencesBaseStateReferenceParserRuleCall_5_2_1_0 = (RuleCall)cBaseStateReferencesAssignment_5_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDeclarationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_0 = (RuleCall)cDeclarationsAssignment_7.eContents().get(0);
		private final Assignment cActionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionsLocalActionParserRuleCall_8_0 = (RuleCall)cActionsAssignment_8.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cRegionsAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cRegionsImplicitControlflowRegionParserRuleCall_9_0_0 = (RuleCall)cRegionsAssignment_9_0.eContents().get(0);
		private final Assignment cRegionsAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_9_1_0 = (RuleCall)cRegionsAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// ------------- //
		////  State Rules  //
		//// ------------- //
		//RootState returns sccharts::State:
		//    annotations+=Annotation*
		//    'scchart' name=ExtendedID label=STRING?
		//    ('<' genericParameterDeclarations += GenericParameterDeclaration (',' genericParameterDeclarations += GenericParameterDeclaration)* '>')?
		//    ('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		//    '{'
		//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//        actions+=LocalAction*
		//        (regions+=ImplicitControlflowRegion | regions+=Region*)
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//'scchart' name=ExtendedID label=STRING?
		//('<' genericParameterDeclarations += GenericParameterDeclaration (',' genericParameterDeclarations += GenericParameterDeclaration)* '>')?
		//('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		//'{'
		//    declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//    actions+=LocalAction*
		//    (regions+=ImplicitControlflowRegion | regions+=Region*)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'scchart'
		public Keyword getScchartKeyword_1() { return cScchartKeyword_1; }
		
		//name=ExtendedID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_2_0() { return cNameExtendedIDParserRuleCall_2_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }
		
		//('<' genericParameterDeclarations += GenericParameterDeclaration (',' genericParameterDeclarations += GenericParameterDeclaration)* '>')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }
		
		//genericParameterDeclarations += GenericParameterDeclaration
		public Assignment getGenericParameterDeclarationsAssignment_4_1() { return cGenericParameterDeclarationsAssignment_4_1; }
		
		//GenericParameterDeclaration
		public RuleCall getGenericParameterDeclarationsGenericParameterDeclarationParserRuleCall_4_1_0() { return cGenericParameterDeclarationsGenericParameterDeclarationParserRuleCall_4_1_0; }
		
		//(',' genericParameterDeclarations += GenericParameterDeclaration)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//genericParameterDeclarations += GenericParameterDeclaration
		public Assignment getGenericParameterDeclarationsAssignment_4_2_1() { return cGenericParameterDeclarationsAssignment_4_2_1; }
		
		//GenericParameterDeclaration
		public RuleCall getGenericParameterDeclarationsGenericParameterDeclarationParserRuleCall_4_2_1_0() { return cGenericParameterDeclarationsGenericParameterDeclarationParserRuleCall_4_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }
		
		//('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'extends'
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }
		
		//baseStateReferences += BaseStateReference
		public Assignment getBaseStateReferencesAssignment_5_1() { return cBaseStateReferencesAssignment_5_1; }
		
		//BaseStateReference
		public RuleCall getBaseStateReferencesBaseStateReferenceParserRuleCall_5_1_0() { return cBaseStateReferencesBaseStateReferenceParserRuleCall_5_1_0; }
		
		//(',' baseStateReferences += BaseStateReference)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//baseStateReferences += BaseStateReference
		public Assignment getBaseStateReferencesAssignment_5_2_1() { return cBaseStateReferencesAssignment_5_2_1; }
		
		//BaseStateReference
		public RuleCall getBaseStateReferencesBaseStateReferenceParserRuleCall_5_2_1_0() { return cBaseStateReferencesBaseStateReferenceParserRuleCall_5_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_7() { return cDeclarationsAssignment_7; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_8() { return cActionsAssignment_8; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_8_0() { return cActionsLocalActionParserRuleCall_8_0; }
		
		//(regions+=ImplicitControlflowRegion | regions+=Region*)
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//regions+=ImplicitControlflowRegion
		public Assignment getRegionsAssignment_9_0() { return cRegionsAssignment_9_0; }
		
		//ImplicitControlflowRegion
		public RuleCall getRegionsImplicitControlflowRegionParserRuleCall_9_0_0() { return cRegionsImplicitControlflowRegionParserRuleCall_9_0_0; }
		
		//regions+=Region*
		public Assignment getRegionsAssignment_9_1() { return cRegionsAssignment_9_1; }
		
		//Region
		public RuleCall getRegionsRegionParserRuleCall_9_1_0() { return cRegionsRegionParserRuleCall_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_0 = (Keyword)cInitialAssignment_1.eContents().get(0);
		private final Assignment cFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFinalFinalKeyword_2_0 = (Keyword)cFinalAssignment_2.eContents().get(0);
		private final Assignment cViolationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cViolationViolationKeyword_3_0 = (Keyword)cViolationAssignment_3.eContents().get(0);
		private final Assignment cConnectorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cConnectorConnectorKeyword_4_0 = (Keyword)cConnectorAssignment_4.eContents().get(0);
		private final Keyword cStateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cLabelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLabelSTRINGTerminalRuleCall_7_0 = (RuleCall)cLabelAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cIsKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cReferenceAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cReferenceScopeCallParserRuleCall_8_0_1_0 = (RuleCall)cReferenceAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_0_2 = (Group)cGroup_8_0.eContents().get(2);
		private final Keyword cScheduleKeyword_8_0_2_0 = (Keyword)cGroup_8_0_2.eContents().get(0);
		private final Assignment cScheduleAssignment_8_0_2_1 = (Assignment)cGroup_8_0_2.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_8_0_2_1_0 = (RuleCall)cScheduleAssignment_8_0_2_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cCallsKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cReferenceAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cReferenceModuleScopeCallParserRuleCall_8_1_1_0 = (RuleCall)cReferenceAssignment_8_1_1.eContents().get(0);
		private final Group cGroup_8_1_2 = (Group)cGroup_8_1.eContents().get(2);
		private final Keyword cScheduleKeyword_8_1_2_0 = (Keyword)cGroup_8_1_2.eContents().get(0);
		private final Assignment cScheduleAssignment_8_1_2_1 = (Assignment)cGroup_8_1_2.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_8_1_2_1_0 = (RuleCall)cScheduleAssignment_8_1_2_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cAlternatives_8.eContents().get(2);
		private final Group cGroup_8_2_0 = (Group)cGroup_8_2.eContents().get(0);
		private final Keyword cExtendsKeyword_8_2_0_0 = (Keyword)cGroup_8_2_0.eContents().get(0);
		private final Assignment cBaseStateReferencesAssignment_8_2_0_1 = (Assignment)cGroup_8_2_0.eContents().get(1);
		private final RuleCall cBaseStateReferencesBaseStateReferenceParserRuleCall_8_2_0_1_0 = (RuleCall)cBaseStateReferencesAssignment_8_2_0_1.eContents().get(0);
		private final Group cGroup_8_2_0_2 = (Group)cGroup_8_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0_2_0 = (Keyword)cGroup_8_2_0_2.eContents().get(0);
		private final Assignment cBaseStateReferencesAssignment_8_2_0_2_1 = (Assignment)cGroup_8_2_0_2.eContents().get(1);
		private final RuleCall cBaseStateReferencesBaseStateReferenceParserRuleCall_8_2_0_2_1_0 = (RuleCall)cBaseStateReferencesAssignment_8_2_0_2_1.eContents().get(0);
		private final Group cGroup_8_2_1 = (Group)cGroup_8_2.eContents().get(1);
		private final Keyword cScheduleKeyword_8_2_1_0 = (Keyword)cGroup_8_2_1.eContents().get(0);
		private final Assignment cScheduleAssignment_8_2_1_1 = (Assignment)cGroup_8_2_1.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_8_2_1_1_0 = (RuleCall)cScheduleAssignment_8_2_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_2_2 = (Keyword)cGroup_8_2.eContents().get(2);
		private final Assignment cDeclarationsAssignment_8_2_3 = (Assignment)cGroup_8_2.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_8_2_3_0 = (RuleCall)cDeclarationsAssignment_8_2_3.eContents().get(0);
		private final Assignment cActionsAssignment_8_2_4 = (Assignment)cGroup_8_2.eContents().get(4);
		private final RuleCall cActionsLocalActionParserRuleCall_8_2_4_0 = (RuleCall)cActionsAssignment_8_2_4.eContents().get(0);
		private final Alternatives cAlternatives_8_2_5 = (Alternatives)cGroup_8_2.eContents().get(5);
		private final Assignment cRegionsAssignment_8_2_5_0 = (Assignment)cAlternatives_8_2_5.eContents().get(0);
		private final RuleCall cRegionsImplicitControlflowRegionParserRuleCall_8_2_5_0_0 = (RuleCall)cRegionsAssignment_8_2_5_0.eContents().get(0);
		private final Assignment cRegionsAssignment_8_2_5_1 = (Assignment)cAlternatives_8_2_5.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_8_2_5_1_0 = (RuleCall)cRegionsAssignment_8_2_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_2_6 = (Keyword)cGroup_8_2.eContents().get(6);
		private final Assignment cOutgoingTransitionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_9_0 = (RuleCall)cOutgoingTransitionsAssignment_9.eContents().get(0);
		
		//State returns sccharts::State:
		//    annotations+=Annotation*
		//    initial?='initial'?
		//    final?='final'?
		//    violation?='violation'?
		//    connector?='connector'?
		//    =>'state' name=ID label=STRING?
		//    ((
		//        'is' reference = ScopeCall
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//    )|(
		//        'calls' reference = ModuleScopeCall
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//    )|(
		//        ('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//       '{'
		//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//        actions+=LocalAction*
		//        (regions+=ImplicitControlflowRegion | regions+=Region*)
		//       '}')
		//    )?
		//    outgoingTransitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//initial?='initial'?
		//final?='final'?
		//violation?='violation'?
		//connector?='connector'?
		//=>'state' name=ID label=STRING?
		//((
		//    'is' reference = ScopeCall
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//)|(
		//    'calls' reference = ModuleScopeCall
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//)|(
		//    ('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//   '{'
		//    declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//    actions+=LocalAction*
		//    (regions+=ImplicitControlflowRegion | regions+=Region*)
		//   '}')
		//)?
		//outgoingTransitions+=Transition*
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_1_0() { return cInitialInitialKeyword_1_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_2() { return cFinalAssignment_2; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0() { return cFinalFinalKeyword_2_0; }
		
		//violation?='violation'?
		public Assignment getViolationAssignment_3() { return cViolationAssignment_3; }
		
		//'violation'
		public Keyword getViolationViolationKeyword_3_0() { return cViolationViolationKeyword_3_0; }
		
		//connector?='connector'?
		public Assignment getConnectorAssignment_4() { return cConnectorAssignment_4; }
		
		//'connector'
		public Keyword getConnectorConnectorKeyword_4_0() { return cConnectorConnectorKeyword_4_0; }
		
		//=>'state'
		public Keyword getStateKeyword_5() { return cStateKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_7() { return cLabelAssignment_7; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_7_0() { return cLabelSTRINGTerminalRuleCall_7_0; }
		
		//((
		//    'is' reference = ScopeCall
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//)|(
		//    'calls' reference = ModuleScopeCall
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//)|(
		//    ('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//   '{'
		//    declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//    actions+=LocalAction*
		//    (regions+=ImplicitControlflowRegion | regions+=Region*)
		//   '}')
		//)?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//(
		//        'is' reference = ScopeCall
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//    )
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'is'
		public Keyword getIsKeyword_8_0_0() { return cIsKeyword_8_0_0; }
		
		//reference = ScopeCall
		public Assignment getReferenceAssignment_8_0_1() { return cReferenceAssignment_8_0_1; }
		
		//ScopeCall
		public RuleCall getReferenceScopeCallParserRuleCall_8_0_1_0() { return cReferenceScopeCallParserRuleCall_8_0_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_8_0_2() { return cGroup_8_0_2; }
		
		//'schedule'
		public Keyword getScheduleKeyword_8_0_2_0() { return cScheduleKeyword_8_0_2_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_8_0_2_1() { return cScheduleAssignment_8_0_2_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_8_0_2_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_8_0_2_1_0; }
		
		//(
		//        'calls' reference = ModuleScopeCall
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//    )
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//'calls'
		public Keyword getCallsKeyword_8_1_0() { return cCallsKeyword_8_1_0; }
		
		//reference = ModuleScopeCall
		public Assignment getReferenceAssignment_8_1_1() { return cReferenceAssignment_8_1_1; }
		
		//ModuleScopeCall
		public RuleCall getReferenceModuleScopeCallParserRuleCall_8_1_1_0() { return cReferenceModuleScopeCallParserRuleCall_8_1_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_8_1_2() { return cGroup_8_1_2; }
		
		//'schedule'
		public Keyword getScheduleKeyword_8_1_2_0() { return cScheduleKeyword_8_1_2_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_8_1_2_1() { return cScheduleAssignment_8_1_2_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_8_1_2_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_8_1_2_1_0; }
		
		//(
		//        ('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//       '{'
		//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//        actions+=LocalAction*
		//        (regions+=ImplicitControlflowRegion | regions+=Region*)
		//       '}')
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
		public Group getGroup_8_2_0() { return cGroup_8_2_0; }
		
		//'extends'
		public Keyword getExtendsKeyword_8_2_0_0() { return cExtendsKeyword_8_2_0_0; }
		
		//baseStateReferences += BaseStateReference
		public Assignment getBaseStateReferencesAssignment_8_2_0_1() { return cBaseStateReferencesAssignment_8_2_0_1; }
		
		//BaseStateReference
		public RuleCall getBaseStateReferencesBaseStateReferenceParserRuleCall_8_2_0_1_0() { return cBaseStateReferencesBaseStateReferenceParserRuleCall_8_2_0_1_0; }
		
		//(',' baseStateReferences += BaseStateReference)*
		public Group getGroup_8_2_0_2() { return cGroup_8_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_8_2_0_2_0() { return cCommaKeyword_8_2_0_2_0; }
		
		//baseStateReferences += BaseStateReference
		public Assignment getBaseStateReferencesAssignment_8_2_0_2_1() { return cBaseStateReferencesAssignment_8_2_0_2_1; }
		
		//BaseStateReference
		public RuleCall getBaseStateReferencesBaseStateReferenceParserRuleCall_8_2_0_2_1_0() { return cBaseStateReferencesBaseStateReferenceParserRuleCall_8_2_0_2_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_8_2_1() { return cGroup_8_2_1; }
		
		//'schedule'
		public Keyword getScheduleKeyword_8_2_1_0() { return cScheduleKeyword_8_2_1_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_8_2_1_1() { return cScheduleAssignment_8_2_1_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_8_2_1_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_8_2_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_2_2() { return cLeftCurlyBracketKeyword_8_2_2; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_8_2_3() { return cDeclarationsAssignment_8_2_3; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_8_2_3_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_8_2_3_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_8_2_4() { return cActionsAssignment_8_2_4; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_8_2_4_0() { return cActionsLocalActionParserRuleCall_8_2_4_0; }
		
		//(regions+=ImplicitControlflowRegion | regions+=Region*)
		public Alternatives getAlternatives_8_2_5() { return cAlternatives_8_2_5; }
		
		//regions+=ImplicitControlflowRegion
		public Assignment getRegionsAssignment_8_2_5_0() { return cRegionsAssignment_8_2_5_0; }
		
		//ImplicitControlflowRegion
		public RuleCall getRegionsImplicitControlflowRegionParserRuleCall_8_2_5_0_0() { return cRegionsImplicitControlflowRegionParserRuleCall_8_2_5_0_0; }
		
		//regions+=Region*
		public Assignment getRegionsAssignment_8_2_5_1() { return cRegionsAssignment_8_2_5_1; }
		
		//Region
		public RuleCall getRegionsRegionParserRuleCall_8_2_5_1_0() { return cRegionsRegionParserRuleCall_8_2_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_2_6() { return cRightCurlyBracketKeyword_8_2_6; }
		
		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_9() { return cOutgoingTransitionsAssignment_9; }
		
		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_9_0() { return cOutgoingTransitionsTransitionParserRuleCall_9_0; }
	}
	public class ImplicitStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ImplicitState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRegionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_1_0 = (RuleCall)cRegionsAssignment_1.eContents().get(0);
		
		//ImplicitState returns sccharts::State:
		//    {sccharts::State}
		//    (regions+=Region+);
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::State}
		//(regions+=Region+)
		public Group getGroup() { return cGroup; }
		
		//{sccharts::State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//(regions+=Region+)
		public Assignment getRegionsAssignment_1() { return cRegionsAssignment_1; }
		
		//Region
		public RuleCall getRegionsRegionParserRuleCall_1_0() { return cRegionsRegionParserRuleCall_1_0; }
	}
	public class ScopeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ScopeCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSuperSuperKeyword_0_0 = (Keyword)cSuperAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetNamedObjectCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetNamedObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetNamedObjectCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_2_1_0 = (RuleCall)cGenericParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_2_2_1_0 = (RuleCall)cGenericParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_3_0_1_0 = (RuleCall)cParametersAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_3_0_2_1_0 = (RuleCall)cParametersAssignment_3_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//ScopeCall returns sccharts::ScopeCall:
		//    super?='super.'?
		//    target = [annotations::NamedObject|ID]
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?;
		@Override public ParserRule getRule() { return rule; }
		
		//super?='super.'?
		//target = [annotations::NamedObject|ID]
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?
		public Group getGroup() { return cGroup; }
		
		//super?='super.'?
		public Assignment getSuperAssignment_0() { return cSuperAssignment_0; }
		
		//'super.'
		public Keyword getSuperSuperKeyword_0_0() { return cSuperSuperKeyword_0_0; }
		
		//target = [annotations::NamedObject|ID]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[annotations::NamedObject|ID]
		public CrossReference getTargetNamedObjectCrossReference_1_0() { return cTargetNamedObjectCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetNamedObjectIDTerminalRuleCall_1_0_1() { return cTargetNamedObjectIDTerminalRuleCall_1_0_1; }
		
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_2_1() { return cGenericParametersAssignment_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_2_1_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_2_2_1() { return cGenericParametersAssignment_2_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_2_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_2_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
		
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')')
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_3_0_1() { return cParametersAssignment_3_0_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_3_0_1_0() { return cParametersScopeParameterParserRuleCall_3_0_1_0; }
		
		//(',' parameters += ScopeParameter)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_3_0_2_1() { return cParametersAssignment_3_0_2_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_3_0_2_1_0() { return cParametersScopeParameterParserRuleCall_3_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0_3() { return cRightParenthesisKeyword_3_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3_1() { return cLeftParenthesisRightParenthesisKeyword_3_1; }
	}
	public class ModuleScopeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ModuleScopeCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleScopeCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetNamedObjectCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetNamedObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetNamedObjectCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_2_0_2_1_0 = (RuleCall)cParametersAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//ModuleScopeCall returns sccharts::ScopeCall:
		//    {sccharts::ModuleScopeCall}
		//    target = [annotations::NamedObject|ID]
		//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::ModuleScopeCall}
		//target = [annotations::NamedObject|ID]
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::ModuleScopeCall}
		public Action getModuleScopeCallAction_0() { return cModuleScopeCallAction_0; }
		
		//target = [annotations::NamedObject|ID]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[annotations::NamedObject|ID]
		public CrossReference getTargetNamedObjectCrossReference_1_0() { return cTargetNamedObjectCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetNamedObjectIDTerminalRuleCall_1_0_1() { return cTargetNamedObjectIDTerminalRuleCall_1_0_1; }
		
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')')
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_2_0_1_0() { return cParametersScopeParameterParserRuleCall_2_0_1_0; }
		
		//(',' parameters += ScopeParameter)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_2_0_2_1() { return cParametersAssignment_2_0_2_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_2_0_2_1_0() { return cParametersScopeParameterParserRuleCall_2_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
	}
	public class ScopeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ScopeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cAccessTypeAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cAccessTypeParameterAccessTypeEnumRuleCall_0_0_0_0 = (RuleCall)cAccessTypeAssignment_0_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cExpressionValuedObjectReferenceParserRuleCall_0_0_1_0 = (RuleCall)cExpressionAssignment_0_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Alternatives cExpressionAlternatives_0_1_0 = (Alternatives)cExpressionAssignment_0_1.eContents().get(0);
		private final RuleCall cExpressionThisExpressionParserRuleCall_0_1_0_0 = (RuleCall)cExpressionAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0_1 = (RuleCall)cExpressionAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExplicitBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cExplicitBindingValuedObjectCrossReference_1_1_0 = (CrossReference)cExplicitBindingAssignment_1_1.eContents().get(0);
		private final RuleCall cExplicitBindingValuedObjectIDTerminalRuleCall_1_1_0_1 = (RuleCall)cExplicitBindingValuedObjectCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExplicitBindingIndicesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExplicitBindingIndicesExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExplicitBindingIndicesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//ScopeParameter returns kexpressions::Parameter:
		//    (
		//        (accessType = ParameterAccessType expression = ValuedObjectReference)
		//    |
		//        expression = (ThisExpression | Expression)
		//    )
		//    ('to' explicitBinding = [kexpressions::ValuedObject|ID] ('[' explicitBindingIndices+=Expression ']')*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    (accessType = ParameterAccessType expression = ValuedObjectReference)
		//|
		//    expression = (ThisExpression | Expression)
		//)
		//('to' explicitBinding = [kexpressions::ValuedObject|ID] ('[' explicitBindingIndices+=Expression ']')*)?
		public Group getGroup() { return cGroup; }
		
		//(
		//    (accessType = ParameterAccessType expression = ValuedObjectReference)
		//|
		//    expression = (ThisExpression | Expression)
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(accessType = ParameterAccessType expression = ValuedObjectReference)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//accessType = ParameterAccessType
		public Assignment getAccessTypeAssignment_0_0_0() { return cAccessTypeAssignment_0_0_0; }
		
		//ParameterAccessType
		public RuleCall getAccessTypeParameterAccessTypeEnumRuleCall_0_0_0_0() { return cAccessTypeParameterAccessTypeEnumRuleCall_0_0_0_0; }
		
		//expression = ValuedObjectReference
		public Assignment getExpressionAssignment_0_0_1() { return cExpressionAssignment_0_0_1; }
		
		//ValuedObjectReference
		public RuleCall getExpressionValuedObjectReferenceParserRuleCall_0_0_1_0() { return cExpressionValuedObjectReferenceParserRuleCall_0_0_1_0; }
		
		//expression = (ThisExpression | Expression)
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//(ThisExpression | Expression)
		public Alternatives getExpressionAlternatives_0_1_0() { return cExpressionAlternatives_0_1_0; }
		
		//ThisExpression
		public RuleCall getExpressionThisExpressionParserRuleCall_0_1_0_0() { return cExpressionThisExpressionParserRuleCall_0_1_0_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0_1() { return cExpressionExpressionParserRuleCall_0_1_0_1; }
		
		//('to' explicitBinding = [kexpressions::ValuedObject|ID] ('[' explicitBindingIndices+=Expression ']')*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'to'
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }
		
		//explicitBinding = [kexpressions::ValuedObject|ID]
		public Assignment getExplicitBindingAssignment_1_1() { return cExplicitBindingAssignment_1_1; }
		
		//[kexpressions::ValuedObject|ID]
		public CrossReference getExplicitBindingValuedObjectCrossReference_1_1_0() { return cExplicitBindingValuedObjectCrossReference_1_1_0; }
		
		//ID
		public RuleCall getExplicitBindingValuedObjectIDTerminalRuleCall_1_1_0_1() { return cExplicitBindingValuedObjectIDTerminalRuleCall_1_1_0_1; }
		
		//('[' explicitBindingIndices+=Expression ']')*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//explicitBindingIndices+=Expression
		public Assignment getExplicitBindingIndicesAssignment_1_2_1() { return cExplicitBindingIndicesAssignment_1_2_1; }
		
		//Expression
		public RuleCall getExplicitBindingIndicesExpressionParserRuleCall_1_2_1_0() { return cExplicitBindingIndicesExpressionParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}
	public class BaseStateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.BaseStateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetStateCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetStateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGenericParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_1_1_0 = (RuleCall)cGenericParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_1_2_1_0 = (RuleCall)cGenericParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_2_0_2_1_0 = (RuleCall)cParametersAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//BaseStateReference returns sccharts::BaseStateReference:
		//    target = [sccharts::State|ID]
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?;
		@Override public ParserRule getRule() { return rule; }
		
		//target = [sccharts::State|ID]
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?
		public Group getGroup() { return cGroup; }
		
		//target = [sccharts::State|ID]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[sccharts::State|ID]
		public CrossReference getTargetStateCrossReference_0_0() { return cTargetStateCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_0_0_1() { return cTargetStateIDTerminalRuleCall_0_0_1; }
		
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_1_1() { return cGenericParametersAssignment_1_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_1_1_0() { return cGenericParametersGenericParameterParserRuleCall_1_1_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_1_2_1() { return cGenericParametersAssignment_1_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_1_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
		
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')')
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_2_0_1_0() { return cParametersScopeParameterParserRuleCall_2_0_1_0; }
		
		//(',' parameters += ScopeParameter)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_2_0_2_1() { return cParametersAssignment_2_0_2_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_2_0_2_1_0() { return cParametersScopeParameterParserRuleCall_2_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayTypeEnumRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTriggerDelayAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTriggerDelayINTTerminalRuleCall_3_1_0 = (RuleCall)cTriggerDelayAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cTriggerAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_3_2_0_0 = (RuleCall)cTriggerAssignment_3_2_0.eContents().get(0);
		private final Assignment cTriggerAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cTriggerAtomicExpressionParserRuleCall_3_2_1_0 = (RuleCall)cTriggerAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cPrKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0 = (RuleCall)cTriggerProbabilityAssignment_3_3_1.eContents().get(0);
		private final Assignment cNondeterministicAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final Keyword cNondeterministicNondeterministicKeyword_3_4_0 = (Keyword)cNondeterministicAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_2_1_0 = (RuleCall)cEffectsAssignment_4_2_1.eContents().get(0);
		private final Assignment cPreemptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPreemptionPreemptionTypeEnumRuleCall_5_0 = (RuleCall)cPreemptionAssignment_5.eContents().get(0);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetStateStateCrossReference_7_0 = (CrossReference)cTargetStateAssignment_7.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_7_0_1 = (RuleCall)cTargetStateStateCrossReference_7_0.eContents().get(1);
		private final Assignment cDeferredAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDeferredDeferredTypeEnumRuleCall_8_0 = (RuleCall)cDeferredAssignment_8.eContents().get(0);
		private final Assignment cHistoryAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cHistoryHistoryTypeEnumRuleCall_9_0 = (RuleCall)cHistoryAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLabelKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cLabelAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cLabelAssignment_10_1.eContents().get(0);
		
		//// ------------------ //
		////  Transition Rules  //
		//// ------------------ //
		//Transition returns sccharts::Transition:
		//    {sccharts::Transition}
		//    annotations+=RestrictedTypeAnnotation*
		//    /*
		//     * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
		//     * go to A
		//     *  if I
		//     *  do O
		//     * go to B
		//     */
		//    delay=DelayType?
		//    ('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression)
		//        ('Pr=' triggerProbability=FLOAT)? nondeterministic?='nondeterministic'?
		//    )?
		//    ('do' effects+=Effect (';' effects+=Effect)*)?
		//    preemption=PreemptionType
		//    'to' targetState=[sccharts::State|ID]
		//    deferred=DeferredType?
		//    history=HistoryType?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::Transition}
		//annotations+=RestrictedTypeAnnotation*
		///*
		// * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
		// * go to A
		// *  if I
		// *  do O
		// * go to B
		// */
		//delay=DelayType?
		//('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression)
		//    ('Pr=' triggerProbability=FLOAT)? nondeterministic?='nondeterministic'?
		//)?
		//('do' effects+=Effect (';' effects+=Effect)*)?
		//preemption=PreemptionType
		//'to' targetState=[sccharts::State|ID]
		//deferred=DeferredType?
		//history=HistoryType?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		///*
		// * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
		// * go to A
		// *  if I
		// *  do O
		// * go to B
		// */
		//delay=DelayType?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_2_0() { return cDelayDelayTypeEnumRuleCall_2_0; }
		
		//('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression)
		//    ('Pr=' triggerProbability=FLOAT)? nondeterministic?='nondeterministic'?
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//triggerDelay=INT?
		public Assignment getTriggerDelayAssignment_3_1() { return cTriggerDelayAssignment_3_1; }
		
		//INT
		public RuleCall getTriggerDelayINTTerminalRuleCall_3_1_0() { return cTriggerDelayINTTerminalRuleCall_3_1_0; }
		
		//(trigger=BoolScheduleExpression | trigger=AtomicExpression)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_3_2_0() { return cTriggerAssignment_3_2_0; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_3_2_0_0() { return cTriggerBoolScheduleExpressionParserRuleCall_3_2_0_0; }
		
		//trigger=AtomicExpression
		public Assignment getTriggerAssignment_3_2_1() { return cTriggerAssignment_3_2_1; }
		
		//AtomicExpression
		public RuleCall getTriggerAtomicExpressionParserRuleCall_3_2_1_0() { return cTriggerAtomicExpressionParserRuleCall_3_2_1_0; }
		
		//('Pr=' triggerProbability=FLOAT)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'Pr='
		public Keyword getPrKeyword_3_3_0() { return cPrKeyword_3_3_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_3_3_1() { return cTriggerProbabilityAssignment_3_3_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0; }
		
		//nondeterministic?='nondeterministic'?
		public Assignment getNondeterministicAssignment_3_4() { return cNondeterministicAssignment_3_4; }
		
		//'nondeterministic'
		public Keyword getNondeterministicNondeterministicKeyword_3_4_0() { return cNondeterministicNondeterministicKeyword_3_4_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'do'
		public Keyword getDoKeyword_4_0() { return cDoKeyword_4_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0() { return cEffectsEffectParserRuleCall_4_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_4_2_1() { return cEffectsAssignment_4_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_2_1_0() { return cEffectsEffectParserRuleCall_4_2_1_0; }
		
		//preemption=PreemptionType
		public Assignment getPreemptionAssignment_5() { return cPreemptionAssignment_5; }
		
		//PreemptionType
		public RuleCall getPreemptionPreemptionTypeEnumRuleCall_5_0() { return cPreemptionPreemptionTypeEnumRuleCall_5_0; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//targetState=[sccharts::State|ID]
		public Assignment getTargetStateAssignment_7() { return cTargetStateAssignment_7; }
		
		//[sccharts::State|ID]
		public CrossReference getTargetStateStateCrossReference_7_0() { return cTargetStateStateCrossReference_7_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_7_0_1() { return cTargetStateStateIDTerminalRuleCall_7_0_1; }
		
		//deferred=DeferredType?
		public Assignment getDeferredAssignment_8() { return cDeferredAssignment_8; }
		
		//DeferredType
		public RuleCall getDeferredDeferredTypeEnumRuleCall_8_0() { return cDeferredDeferredTypeEnumRuleCall_8_0; }
		
		//history=HistoryType?
		public Assignment getHistoryAssignment_9() { return cHistoryAssignment_9; }
		
		//HistoryType
		public RuleCall getHistoryHistoryTypeEnumRuleCall_9_0() { return cHistoryHistoryTypeEnumRuleCall_9_0; }
		
		//('label' label=STRING)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'label'
		public Keyword getLabelKeyword_10_0() { return cLabelKeyword_10_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_10_1() { return cLabelAssignment_10_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_10_1_0() { return cLabelSTRINGTerminalRuleCall_10_1_0; }
	}
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Region");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cControlflowRegionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataflowRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -------------- //
		////  Region Rules  //
		//// -------------- //
		//Region returns sccharts::Region:
		//    ControlflowRegion | DataflowRegion;
		@Override public ParserRule getRule() { return rule; }
		
		//ControlflowRegion | DataflowRegion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ControlflowRegion
		public RuleCall getControlflowRegionParserRuleCall_0() { return cControlflowRegionParserRuleCall_0; }
		
		//DataflowRegion
		public RuleCall getDataflowRegionParserRuleCall_1() { return cDataflowRegionParserRuleCall_1; }
	}
	public class ImplicitControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ImplicitControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//ImplicitControlflowRegion returns sccharts::ControlflowRegion:
		//    {sccharts::ControlflowRegion}
		//    states+=State+;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::ControlflowRegion}
		//states+=State+
		public Group getGroup() { return cGroup; }
		
		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }
		
		//states+=State+
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_1_0() { return cStatesStateParserRuleCall_1_0; }
	}
	public class ControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAbortAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cAbortAbortKeyword_2_0_0 = (Keyword)cAbortAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOverrideAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_2_1_0_0 = (Keyword)cOverrideAssignment_2_1_0.eContents().get(0);
		private final Assignment cFinalAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cFinalFinalKeyword_2_1_1_0 = (Keyword)cFinalAssignment_2_1_1.eContents().get(0);
		private final Keyword cRegionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameExtendedIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cIsKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cReferenceAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cReferenceScopeCallParserRuleCall_6_0_1_0 = (RuleCall)cReferenceAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cForKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cCounterVariableAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cCounterVariableCounterVariableParserRuleCall_6_0_2_1_0 = (RuleCall)cCounterVariableAssignment_6_0_2_1.eContents().get(0);
		private final Keyword cColonKeyword_6_0_2_2 = (Keyword)cGroup_6_0_2.eContents().get(2);
		private final Assignment cForStartAssignment_6_0_2_3 = (Assignment)cGroup_6_0_2.eContents().get(3);
		private final RuleCall cForStartIntOrReferenceParserRuleCall_6_0_2_3_0 = (RuleCall)cForStartAssignment_6_0_2_3.eContents().get(0);
		private final Group cGroup_6_0_2_4 = (Group)cGroup_6_0_2.eContents().get(4);
		private final Keyword cToKeyword_6_0_2_4_0 = (Keyword)cGroup_6_0_2_4.eContents().get(0);
		private final Assignment cForEndAssignment_6_0_2_4_1 = (Assignment)cGroup_6_0_2_4.eContents().get(1);
		private final RuleCall cForEndIntOrReferenceParserRuleCall_6_0_2_4_1_0 = (RuleCall)cForEndAssignment_6_0_2_4_1.eContents().get(0);
		private final Group cGroup_6_0_3 = (Group)cGroup_6_0.eContents().get(3);
		private final Keyword cScheduleKeyword_6_0_3_0 = (Keyword)cGroup_6_0_3.eContents().get(0);
		private final Assignment cScheduleAssignment_6_0_3_1 = (Assignment)cGroup_6_0_3.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_6_0_3_1_0 = (RuleCall)cScheduleAssignment_6_0_3_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cGroup_6_1.eContents().get(0);
		private final Keyword cForKeyword_6_1_0_0 = (Keyword)cGroup_6_1_0.eContents().get(0);
		private final Assignment cCounterVariableAssignment_6_1_0_1 = (Assignment)cGroup_6_1_0.eContents().get(1);
		private final RuleCall cCounterVariableCounterVariableParserRuleCall_6_1_0_1_0 = (RuleCall)cCounterVariableAssignment_6_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_6_1_0_2 = (Keyword)cGroup_6_1_0.eContents().get(2);
		private final Assignment cForStartAssignment_6_1_0_3 = (Assignment)cGroup_6_1_0.eContents().get(3);
		private final RuleCall cForStartIntOrReferenceParserRuleCall_6_1_0_3_0 = (RuleCall)cForStartAssignment_6_1_0_3.eContents().get(0);
		private final Group cGroup_6_1_0_4 = (Group)cGroup_6_1_0.eContents().get(4);
		private final Keyword cToKeyword_6_1_0_4_0 = (Keyword)cGroup_6_1_0_4.eContents().get(0);
		private final Assignment cForEndAssignment_6_1_0_4_1 = (Assignment)cGroup_6_1_0_4.eContents().get(1);
		private final RuleCall cForEndIntOrReferenceParserRuleCall_6_1_0_4_1_0 = (RuleCall)cForEndAssignment_6_1_0_4_1.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Keyword cScheduleKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cScheduleAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_6_1_1_1_0 = (RuleCall)cScheduleAssignment_6_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_6_1_2 = (Alternatives)cGroup_6_1.eContents().get(2);
		private final Group cGroup_6_1_2_0 = (Group)cAlternatives_6_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1_2_0_0 = (Keyword)cGroup_6_1_2_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_6_1_2_0_1 = (Assignment)cGroup_6_1_2_0.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_1_2_0_1_0 = (RuleCall)cDeclarationsAssignment_6_1_2_0_1.eContents().get(0);
		private final Assignment cActionsAssignment_6_1_2_0_2 = (Assignment)cGroup_6_1_2_0.eContents().get(2);
		private final RuleCall cActionsLocalActionParserRuleCall_6_1_2_0_2_0 = (RuleCall)cActionsAssignment_6_1_2_0_2.eContents().get(0);
		private final Alternatives cAlternatives_6_1_2_0_3 = (Alternatives)cGroup_6_1_2_0.eContents().get(3);
		private final Assignment cStatesAssignment_6_1_2_0_3_0 = (Assignment)cAlternatives_6_1_2_0_3.eContents().get(0);
		private final RuleCall cStatesImplicitStateParserRuleCall_6_1_2_0_3_0_0 = (RuleCall)cStatesAssignment_6_1_2_0_3_0.eContents().get(0);
		private final Assignment cStatesAssignment_6_1_2_0_3_1 = (Assignment)cAlternatives_6_1_2_0_3.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_6_1_2_0_3_1_0 = (RuleCall)cStatesAssignment_6_1_2_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_1_2_0_4 = (Keyword)cGroup_6_1_2_0.eContents().get(4);
		private final Group cGroup_6_1_2_1 = (Group)cAlternatives_6_1_2.eContents().get(1);
		private final Keyword cColonKeyword_6_1_2_1_0 = (Keyword)cGroup_6_1_2_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_6_1_2_1_1 = (Assignment)cGroup_6_1_2_1.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_1_2_1_1_0 = (RuleCall)cDeclarationsAssignment_6_1_2_1_1.eContents().get(0);
		private final Assignment cActionsAssignment_6_1_2_1_2 = (Assignment)cGroup_6_1_2_1.eContents().get(2);
		private final RuleCall cActionsLocalActionParserRuleCall_6_1_2_1_2_0 = (RuleCall)cActionsAssignment_6_1_2_1_2.eContents().get(0);
		private final Assignment cStatesAssignment_6_1_2_1_3 = (Assignment)cGroup_6_1_2_1.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_6_1_2_1_3_0 = (RuleCall)cStatesAssignment_6_1_2_1_3.eContents().get(0);
		
		//ControlflowRegion returns sccharts::ControlflowRegion:
		//    {sccharts::ControlflowRegion}
		//    annotations+=Annotation*
		//    (
		//        abort?='abort' // only works if preemtion does not have 'abort to' keyword, otherwise 'abort' cannot be detected since ' to' is missing
		//        |
		//        override?='override'?
		//        final?='final'?
		//    )?
		//    'region' name=ExtendedID? label=STRING?
		//    ((
		//        'is' reference = ScopeCall
		//        ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//    )|(
		//        ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//        ((
		//            '{'
		//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//            actions+=LocalAction*
		//            (states+=ImplicitState | states+=State+)
		//            '}'
		//        )|(
		//            ':'
		//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//            actions+=LocalAction*
		//            states+=State*
		//        ))
		//    ));
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::ControlflowRegion}
		//annotations+=Annotation*
		//(
		//    abort?='abort' // only works if preemtion does not have 'abort to' keyword, otherwise 'abort' cannot be detected since ' to' is missing
		//    |
		//    override?='override'?
		//    final?='final'?
		//)?
		//'region' name=ExtendedID? label=STRING?
		//((
		//    'is' reference = ScopeCall
		//    ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//)|(
		//    ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//    ((
		//        '{'
		//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//        actions+=LocalAction*
		//        (states+=ImplicitState | states+=State+)
		//        '}'
		//    )|(
		//        ':'
		//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//        actions+=LocalAction*
		//        states+=State*
		//    ))
		//))
		public Group getGroup() { return cGroup; }
		
		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//(
		//    abort?='abort' // only works if preemtion does not have 'abort to' keyword, otherwise 'abort' cannot be detected since ' to' is missing
		//    |
		//    override?='override'?
		//    final?='final'?
		//)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//abort?='abort'
		public Assignment getAbortAssignment_2_0() { return cAbortAssignment_2_0; }
		
		//'abort'
		public Keyword getAbortAbortKeyword_2_0_0() { return cAbortAbortKeyword_2_0_0; }
		
		//override?='override'?
		//final?='final'?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_2_1_0() { return cOverrideAssignment_2_1_0; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_2_1_0_0() { return cOverrideOverrideKeyword_2_1_0_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_2_1_1() { return cFinalAssignment_2_1_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_1_1_0() { return cFinalFinalKeyword_2_1_1_0; }
		
		//'region'
		public Keyword getRegionKeyword_3() { return cRegionKeyword_3; }
		
		//name=ExtendedID?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_4_0() { return cNameExtendedIDParserRuleCall_4_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }
		
		//((
		//    'is' reference = ScopeCall
		//    ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//)|(
		//    ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//    ((
		//        '{'
		//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//        actions+=LocalAction*
		//        (states+=ImplicitState | states+=State+)
		//        '}'
		//    )|(
		//        ':'
		//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//        actions+=LocalAction*
		//        states+=State*
		//    ))
		//))
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//(
		//        'is' reference = ScopeCall
		//        ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//    )
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'is'
		public Keyword getIsKeyword_6_0_0() { return cIsKeyword_6_0_0; }
		
		//reference = ScopeCall
		public Assignment getReferenceAssignment_6_0_1() { return cReferenceAssignment_6_0_1; }
		
		//ScopeCall
		public RuleCall getReferenceScopeCallParserRuleCall_6_0_1_0() { return cReferenceScopeCallParserRuleCall_6_0_1_0; }
		
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }
		
		//'for'
		public Keyword getForKeyword_6_0_2_0() { return cForKeyword_6_0_2_0; }
		
		//counterVariable=CounterVariable
		public Assignment getCounterVariableAssignment_6_0_2_1() { return cCounterVariableAssignment_6_0_2_1; }
		
		//CounterVariable
		public RuleCall getCounterVariableCounterVariableParserRuleCall_6_0_2_1_0() { return cCounterVariableCounterVariableParserRuleCall_6_0_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_6_0_2_2() { return cColonKeyword_6_0_2_2; }
		
		//forStart=IntOrReference
		public Assignment getForStartAssignment_6_0_2_3() { return cForStartAssignment_6_0_2_3; }
		
		//IntOrReference
		public RuleCall getForStartIntOrReferenceParserRuleCall_6_0_2_3_0() { return cForStartIntOrReferenceParserRuleCall_6_0_2_3_0; }
		
		//('to' forEnd=IntOrReference)?
		public Group getGroup_6_0_2_4() { return cGroup_6_0_2_4; }
		
		//'to'
		public Keyword getToKeyword_6_0_2_4_0() { return cToKeyword_6_0_2_4_0; }
		
		//forEnd=IntOrReference
		public Assignment getForEndAssignment_6_0_2_4_1() { return cForEndAssignment_6_0_2_4_1; }
		
		//IntOrReference
		public RuleCall getForEndIntOrReferenceParserRuleCall_6_0_2_4_1_0() { return cForEndIntOrReferenceParserRuleCall_6_0_2_4_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_6_0_3() { return cGroup_6_0_3; }
		
		//'schedule'
		public Keyword getScheduleKeyword_6_0_3_0() { return cScheduleKeyword_6_0_3_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_6_0_3_1() { return cScheduleAssignment_6_0_3_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_6_0_3_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_6_0_3_1_0; }
		
		//(
		//        ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//        ('schedule' schedule+=ScheduleObjectReference+)?
		//        ((
		//            '{'
		//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//            actions+=LocalAction*
		//            (states+=ImplicitState | states+=State+)
		//            '}'
		//        )|(
		//            ':'
		//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//            actions+=LocalAction*
		//            states+=State*
		//        ))
		//    )
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }
		
		//'for'
		public Keyword getForKeyword_6_1_0_0() { return cForKeyword_6_1_0_0; }
		
		//counterVariable=CounterVariable
		public Assignment getCounterVariableAssignment_6_1_0_1() { return cCounterVariableAssignment_6_1_0_1; }
		
		//CounterVariable
		public RuleCall getCounterVariableCounterVariableParserRuleCall_6_1_0_1_0() { return cCounterVariableCounterVariableParserRuleCall_6_1_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_6_1_0_2() { return cColonKeyword_6_1_0_2; }
		
		//forStart=IntOrReference
		public Assignment getForStartAssignment_6_1_0_3() { return cForStartAssignment_6_1_0_3; }
		
		//IntOrReference
		public RuleCall getForStartIntOrReferenceParserRuleCall_6_1_0_3_0() { return cForStartIntOrReferenceParserRuleCall_6_1_0_3_0; }
		
		//('to' forEnd=IntOrReference)?
		public Group getGroup_6_1_0_4() { return cGroup_6_1_0_4; }
		
		//'to'
		public Keyword getToKeyword_6_1_0_4_0() { return cToKeyword_6_1_0_4_0; }
		
		//forEnd=IntOrReference
		public Assignment getForEndAssignment_6_1_0_4_1() { return cForEndAssignment_6_1_0_4_1; }
		
		//IntOrReference
		public RuleCall getForEndIntOrReferenceParserRuleCall_6_1_0_4_1_0() { return cForEndIntOrReferenceParserRuleCall_6_1_0_4_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }
		
		//'schedule'
		public Keyword getScheduleKeyword_6_1_1_0() { return cScheduleKeyword_6_1_1_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_6_1_1_1() { return cScheduleAssignment_6_1_1_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_6_1_1_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_6_1_1_1_0; }
		
		//((
		//    '{'
		//    declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//    actions+=LocalAction*
		//    (states+=ImplicitState | states+=State+)
		//    '}'
		//)|(
		//    ':'
		//    declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//    actions+=LocalAction*
		//    states+=State*
		//))
		public Alternatives getAlternatives_6_1_2() { return cAlternatives_6_1_2; }
		
		//(
		//            '{'
		//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//            actions+=LocalAction*
		//            (states+=ImplicitState | states+=State+)
		//            '}'
		//        )
		public Group getGroup_6_1_2_0() { return cGroup_6_1_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1_2_0_0() { return cLeftCurlyBracketKeyword_6_1_2_0_0; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_6_1_2_0_1() { return cDeclarationsAssignment_6_1_2_0_1; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_1_2_0_1_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_1_2_0_1_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_6_1_2_0_2() { return cActionsAssignment_6_1_2_0_2; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_6_1_2_0_2_0() { return cActionsLocalActionParserRuleCall_6_1_2_0_2_0; }
		
		//(states+=ImplicitState | states+=State+)
		public Alternatives getAlternatives_6_1_2_0_3() { return cAlternatives_6_1_2_0_3; }
		
		//states+=ImplicitState
		public Assignment getStatesAssignment_6_1_2_0_3_0() { return cStatesAssignment_6_1_2_0_3_0; }
		
		//ImplicitState
		public RuleCall getStatesImplicitStateParserRuleCall_6_1_2_0_3_0_0() { return cStatesImplicitStateParserRuleCall_6_1_2_0_3_0_0; }
		
		//states+=State+
		public Assignment getStatesAssignment_6_1_2_0_3_1() { return cStatesAssignment_6_1_2_0_3_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_1_2_0_3_1_0() { return cStatesStateParserRuleCall_6_1_2_0_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_1_2_0_4() { return cRightCurlyBracketKeyword_6_1_2_0_4; }
		
		//(
		//            ':'
		//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//            actions+=LocalAction*
		//            states+=State*
		//        )
		public Group getGroup_6_1_2_1() { return cGroup_6_1_2_1; }
		
		//':'
		public Keyword getColonKeyword_6_1_2_1_0() { return cColonKeyword_6_1_2_1_0; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_6_1_2_1_1() { return cDeclarationsAssignment_6_1_2_1_1; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_1_2_1_1_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_1_2_1_1_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_6_1_2_1_2() { return cActionsAssignment_6_1_2_1_2; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_6_1_2_1_2_0() { return cActionsLocalActionParserRuleCall_6_1_2_1_2_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_6_1_2_1_3() { return cStatesAssignment_6_1_2_1_3; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_1_2_1_3_0() { return cStatesStateParserRuleCall_6_1_2_1_3_0; }
	}
	public class DataflowAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DataflowAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceValuedObjectReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorAssignOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScheduleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cScheduleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_4_1_0 = (RuleCall)cScheduleAssignment_4_1.eContents().get(0);
		private final Assignment cSequentialAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cSequentialAlternatives_5_0 = (Alternatives)cSequentialAssignment_5.eContents().get(0);
		private final Keyword cSequentialSemicolonKeyword_5_0_0 = (Keyword)cSequentialAlternatives_5_0.eContents().get(0);
		private final Keyword cSequentialSeqKeyword_5_0_1 = (Keyword)cSequentialAlternatives_5_0.eContents().get(1);
		
		//DataflowAssignment returns sccharts::DataflowAssignment:
		//    (annotations+=Annotation)*
		//    reference=ValuedObjectReference
		//    operator=AssignOperator expression = Expression
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//    sequential?=(';'|'seq')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations+=Annotation)*
		//reference=ValuedObjectReference
		//operator=AssignOperator expression = Expression
		//('schedule' schedule+=ScheduleObjectReference+)?
		//sequential?=(';'|'seq')?
		public Group getGroup() { return cGroup; }
		
		//(annotations+=Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//reference=ValuedObjectReference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//ValuedObjectReference
		public RuleCall getReferenceValuedObjectReferenceParserRuleCall_1_0() { return cReferenceValuedObjectReferenceParserRuleCall_1_0; }
		
		//operator=AssignOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//AssignOperator
		public RuleCall getOperatorAssignOperatorEnumRuleCall_2_0() { return cOperatorAssignOperatorEnumRuleCall_2_0; }
		
		//expression = Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'schedule'
		public Keyword getScheduleKeyword_4_0() { return cScheduleKeyword_4_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_4_1() { return cScheduleAssignment_4_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_4_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_4_1_0; }
		
		//sequential?=(';'|'seq')?
		public Assignment getSequentialAssignment_5() { return cSequentialAssignment_5; }
		
		//(';'|'seq')
		public Alternatives getSequentialAlternatives_5_0() { return cSequentialAlternatives_5_0; }
		
		//';'
		public Keyword getSequentialSemicolonKeyword_5_0_0() { return cSequentialSemicolonKeyword_5_0_0; }
		
		//'seq'
		public Keyword getSequentialSeqKeyword_5_0_1() { return cSequentialSeqKeyword_5_0_1; }
	}
	public class DataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cOverrideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOverrideOverrideKeyword_2_0 = (Keyword)cOverrideAssignment_2.eContents().get(0);
		private final Keyword cDataflowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameExtendedIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cForKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCounterVariableAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCounterVariableCounterVariableParserRuleCall_6_1_0 = (RuleCall)cCounterVariableAssignment_6_1.eContents().get(0);
		private final Keyword cColonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cForStartAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cForStartIntOrReferenceParserRuleCall_6_3_0 = (RuleCall)cForStartAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cToKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cForEndAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cForEndIntOrReferenceParserRuleCall_6_4_1_0 = (RuleCall)cForEndAssignment_6_4_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cScheduleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cScheduleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_7_1_0 = (RuleCall)cScheduleAssignment_7_1.eContents().get(0);
		private final Assignment cOnceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cOnceOnceKeyword_8_0 = (Keyword)cOnceAssignment_8.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_0_0 = (Keyword)cGroup_9_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_9_0_1 = (Assignment)cGroup_9_0.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_9_0_1_0 = (RuleCall)cDeclarationsAssignment_9_0_1.eContents().get(0);
		private final Assignment cEquationsAssignment_9_0_2 = (Assignment)cGroup_9_0.eContents().get(2);
		private final Alternatives cEquationsAlternatives_9_0_2_0 = (Alternatives)cEquationsAssignment_9_0_2.eContents().get(0);
		private final RuleCall cEquationsDataflowAssignmentParserRuleCall_9_0_2_0_0 = (RuleCall)cEquationsAlternatives_9_0_2_0.eContents().get(0);
		private final RuleCall cEquationsAssignmentParserRuleCall_9_0_2_0_1 = (RuleCall)cEquationsAlternatives_9_0_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9_0_3 = (Keyword)cGroup_9_0.eContents().get(3);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Keyword cColonKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_1_0 = (RuleCall)cDeclarationsAssignment_9_1_1.eContents().get(0);
		private final Assignment cEquationsAssignment_9_1_2 = (Assignment)cGroup_9_1.eContents().get(2);
		private final Alternatives cEquationsAlternatives_9_1_2_0 = (Alternatives)cEquationsAssignment_9_1_2.eContents().get(0);
		private final RuleCall cEquationsDataflowAssignmentParserRuleCall_9_1_2_0_0 = (RuleCall)cEquationsAlternatives_9_1_2_0.eContents().get(0);
		private final RuleCall cEquationsAssignmentParserRuleCall_9_1_2_0_1 = (RuleCall)cEquationsAlternatives_9_1_2_0.eContents().get(1);
		
		//DataflowRegion returns sccharts::DataflowRegion:
		//    {sccharts::DataflowRegion}
		//    annotations+=Annotation*
		//    override?='override'?
		//    'dataflow' name=ExtendedID? label=STRING?
		//    ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//    once?='once'?
		//    ((
		//        '{'
		//        declarations+=DeclarationWOSemicolon*
		//        equations+=(DataflowAssignment|Assignment)*
		//        '}'
		//    )|(
		//        ':'
		//        declarations+=DeclarationWOSemicolon*
		//        equations+=(DataflowAssignment|Assignment)*
		//    ));
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::DataflowRegion}
		//annotations+=Annotation*
		//override?='override'?
		//'dataflow' name=ExtendedID? label=STRING?
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//('schedule' schedule+=ScheduleObjectReference+)?
		//once?='once'?
		//((
		//    '{'
		//    declarations+=DeclarationWOSemicolon*
		//    equations+=(DataflowAssignment|Assignment)*
		//    '}'
		//)|(
		//    ':'
		//    declarations+=DeclarationWOSemicolon*
		//    equations+=(DataflowAssignment|Assignment)*
		//))
		public Group getGroup() { return cGroup; }
		
		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_2() { return cOverrideAssignment_2; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_2_0() { return cOverrideOverrideKeyword_2_0; }
		
		//'dataflow'
		public Keyword getDataflowKeyword_3() { return cDataflowKeyword_3; }
		
		//name=ExtendedID?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_4_0() { return cNameExtendedIDParserRuleCall_4_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }
		
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'for'
		public Keyword getForKeyword_6_0() { return cForKeyword_6_0; }
		
		//counterVariable=CounterVariable
		public Assignment getCounterVariableAssignment_6_1() { return cCounterVariableAssignment_6_1; }
		
		//CounterVariable
		public RuleCall getCounterVariableCounterVariableParserRuleCall_6_1_0() { return cCounterVariableCounterVariableParserRuleCall_6_1_0; }
		
		//':'
		public Keyword getColonKeyword_6_2() { return cColonKeyword_6_2; }
		
		//forStart=IntOrReference
		public Assignment getForStartAssignment_6_3() { return cForStartAssignment_6_3; }
		
		//IntOrReference
		public RuleCall getForStartIntOrReferenceParserRuleCall_6_3_0() { return cForStartIntOrReferenceParserRuleCall_6_3_0; }
		
		//('to' forEnd=IntOrReference)?
		public Group getGroup_6_4() { return cGroup_6_4; }
		
		//'to'
		public Keyword getToKeyword_6_4_0() { return cToKeyword_6_4_0; }
		
		//forEnd=IntOrReference
		public Assignment getForEndAssignment_6_4_1() { return cForEndAssignment_6_4_1; }
		
		//IntOrReference
		public RuleCall getForEndIntOrReferenceParserRuleCall_6_4_1_0() { return cForEndIntOrReferenceParserRuleCall_6_4_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'schedule'
		public Keyword getScheduleKeyword_7_0() { return cScheduleKeyword_7_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_7_1() { return cScheduleAssignment_7_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_7_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_7_1_0; }
		
		//once?='once'?
		public Assignment getOnceAssignment_8() { return cOnceAssignment_8; }
		
		//'once'
		public Keyword getOnceOnceKeyword_8_0() { return cOnceOnceKeyword_8_0; }
		
		//((
		//    '{'
		//    declarations+=DeclarationWOSemicolon*
		//    equations+=(DataflowAssignment|Assignment)*
		//    '}'
		//)|(
		//    ':'
		//    declarations+=DeclarationWOSemicolon*
		//    equations+=(DataflowAssignment|Assignment)*
		//))
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//(
		//        '{'
		//        declarations+=DeclarationWOSemicolon*
		//        equations+=(DataflowAssignment|Assignment)*
		//        '}'
		//    )
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_0_0() { return cLeftCurlyBracketKeyword_9_0_0; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_9_0_1() { return cDeclarationsAssignment_9_0_1; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_9_0_1_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_9_0_1_0; }
		
		//equations+=(DataflowAssignment|Assignment)*
		public Assignment getEquationsAssignment_9_0_2() { return cEquationsAssignment_9_0_2; }
		
		//(DataflowAssignment|Assignment)
		public Alternatives getEquationsAlternatives_9_0_2_0() { return cEquationsAlternatives_9_0_2_0; }
		
		//DataflowAssignment
		public RuleCall getEquationsDataflowAssignmentParserRuleCall_9_0_2_0_0() { return cEquationsDataflowAssignmentParserRuleCall_9_0_2_0_0; }
		
		//Assignment
		public RuleCall getEquationsAssignmentParserRuleCall_9_0_2_0_1() { return cEquationsAssignmentParserRuleCall_9_0_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_0_3() { return cRightCurlyBracketKeyword_9_0_3; }
		
		//(
		//        ':'
		//        declarations+=DeclarationWOSemicolon*
		//        equations+=(DataflowAssignment|Assignment)*
		//    )
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//':'
		public Keyword getColonKeyword_9_1_0() { return cColonKeyword_9_1_0; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_9_1_1() { return cDeclarationsAssignment_9_1_1; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_1_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_1_0; }
		
		//equations+=(DataflowAssignment|Assignment)*
		public Assignment getEquationsAssignment_9_1_2() { return cEquationsAssignment_9_1_2; }
		
		//(DataflowAssignment|Assignment)
		public Alternatives getEquationsAlternatives_9_1_2_0() { return cEquationsAlternatives_9_1_2_0; }
		
		//DataflowAssignment
		public RuleCall getEquationsDataflowAssignmentParserRuleCall_9_1_2_0_0() { return cEquationsDataflowAssignmentParserRuleCall_9_1_2_0_0; }
		
		//Assignment
		public RuleCall getEquationsAssignmentParserRuleCall_9_1_2_0_1() { return cEquationsAssignmentParserRuleCall_9_1_2_0_1; }
	}
	public class IntOrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.IntOrReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedObjectReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntOrReference returns kexpressions::Expression:
		//    IntValue | ValuedObjectReference;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | ValuedObjectReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//ValuedObjectReference
		public RuleCall getValuedObjectReferenceParserRuleCall_1() { return cValuedObjectReferenceParserRuleCall_1; }
	}
	public class CounterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.CounterVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrimeIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CounterVariable returns kexpressions::ValuedObject:
		//    name=PrimeID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrimeID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_0() { return cNamePrimeIDParserRuleCall_0; }
	}
	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.LocalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDuringActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSuspendActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPeriodActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOdeActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// -------------- //
		////  Action Rules  //
		//// -------------- //
		//LocalAction returns sccharts::LocalAction:
		//    EntryAction | DuringAction | ExitAction | SuspendAction | PeriodAction | OdeAction;
		@Override public ParserRule getRule() { return rule; }
		
		//EntryAction | DuringAction | ExitAction | SuspendAction | PeriodAction | OdeAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntryAction
		public RuleCall getEntryActionParserRuleCall_0() { return cEntryActionParserRuleCall_0; }
		
		//DuringAction
		public RuleCall getDuringActionParserRuleCall_1() { return cDuringActionParserRuleCall_1; }
		
		//ExitAction
		public RuleCall getExitActionParserRuleCall_2() { return cExitActionParserRuleCall_2; }
		
		//SuspendAction
		public RuleCall getSuspendActionParserRuleCall_3() { return cSuspendActionParserRuleCall_3; }
		
		//PeriodAction
		public RuleCall getPeriodActionParserRuleCall_4() { return cPeriodActionParserRuleCall_4; }
		
		//OdeAction
		public RuleCall getOdeActionParserRuleCall_5() { return cOdeActionParserRuleCall_5; }
	}
	public class EntryActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.EntryAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cPreemptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPreemptionPreemptionActionTypeEnumRuleCall_2_0 = (RuleCall)cPreemptionAssignment_2.eContents().get(0);
		private final Keyword cEntryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_4_1_0 = (RuleCall)cTriggerAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cPrKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_4_2_1_0 = (RuleCall)cTriggerProbabilityAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDoKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEffectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_5_1_0 = (RuleCall)cEffectsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cEffectsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_5_2_1_0 = (RuleCall)cEffectsAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLabelAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cLabelAssignment_6_1.eContents().get(0);
		
		//EntryAction returns sccharts::EntryAction:
		//    {sccharts::EntryAction}
		//    annotations+=RestrictedTypeAnnotation*
		//    preemption = PreemptionActionType?
		//    'entry' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::EntryAction}
		//annotations+=RestrictedTypeAnnotation*
		//preemption = PreemptionActionType?
		//'entry' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::EntryAction}
		public Action getEntryActionAction_0() { return cEntryActionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//preemption = PreemptionActionType?
		public Assignment getPreemptionAssignment_2() { return cPreemptionAssignment_2; }
		
		//PreemptionActionType
		public RuleCall getPreemptionPreemptionActionTypeEnumRuleCall_2_0() { return cPreemptionPreemptionActionTypeEnumRuleCall_2_0; }
		
		//'entry'
		public Keyword getEntryKeyword_3() { return cEntryKeyword_3; }
		
		//('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_4_1() { return cTriggerAssignment_4_1; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_4_1_0() { return cTriggerBoolScheduleExpressionParserRuleCall_4_1_0; }
		
		//('Pr' triggerProbability=FLOAT)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'Pr'
		public Keyword getPrKeyword_4_2_0() { return cPrKeyword_4_2_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_4_2_1() { return cTriggerProbabilityAssignment_4_2_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_4_2_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_4_2_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'do'
		public Keyword getDoKeyword_5_0() { return cDoKeyword_5_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_5_1() { return cEffectsAssignment_5_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_5_1_0() { return cEffectsEffectParserRuleCall_5_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2_0() { return cSemicolonKeyword_5_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_5_2_1() { return cEffectsAssignment_5_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_5_2_1_0() { return cEffectsEffectParserRuleCall_5_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_6_1() { return cLabelAssignment_6_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_0; }
	}
	public class DuringActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DuringAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDuringActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayTypeEnumRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Keyword cDuringKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerDelayAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriggerDelayINTTerminalRuleCall_4_1_0 = (RuleCall)cTriggerDelayAssignment_4_1.eContents().get(0);
		private final Assignment cTriggerAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_4_2_0 = (RuleCall)cTriggerAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cPrKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_4_3_1_0 = (RuleCall)cTriggerProbabilityAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDoKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEffectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_5_1_0 = (RuleCall)cEffectsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cEffectsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_5_2_1_0 = (RuleCall)cEffectsAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLabelAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cLabelAssignment_6_1.eContents().get(0);
		
		//DuringAction returns sccharts::DuringAction:
		//    {sccharts::DuringAction}
		//    annotations+=RestrictedTypeAnnotation*
		//    delay=DelayType?
		//    'during' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::DuringAction}
		//annotations+=RestrictedTypeAnnotation*
		//delay=DelayType?
		//'during' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::DuringAction}
		public Action getDuringActionAction_0() { return cDuringActionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//delay=DelayType?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_2_0() { return cDelayDelayTypeEnumRuleCall_2_0; }
		
		//'during'
		public Keyword getDuringKeyword_3() { return cDuringKeyword_3; }
		
		//('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }
		
		//triggerDelay=INT?
		public Assignment getTriggerDelayAssignment_4_1() { return cTriggerDelayAssignment_4_1; }
		
		//INT
		public RuleCall getTriggerDelayINTTerminalRuleCall_4_1_0() { return cTriggerDelayINTTerminalRuleCall_4_1_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_4_2() { return cTriggerAssignment_4_2; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_4_2_0() { return cTriggerBoolScheduleExpressionParserRuleCall_4_2_0; }
		
		//('Pr=' triggerProbability=FLOAT)?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'Pr='
		public Keyword getPrKeyword_4_3_0() { return cPrKeyword_4_3_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_4_3_1() { return cTriggerProbabilityAssignment_4_3_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_4_3_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_4_3_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'do'
		public Keyword getDoKeyword_5_0() { return cDoKeyword_5_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_5_1() { return cEffectsAssignment_5_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_5_1_0() { return cEffectsEffectParserRuleCall_5_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2_0() { return cSemicolonKeyword_5_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_5_2_1() { return cEffectsAssignment_5_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_5_2_1_0() { return cEffectsEffectParserRuleCall_5_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_6_1() { return cLabelAssignment_6_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_0; }
	}
	public class ExitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ExitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cPreemptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPreemptionPreemptionActionTypeEnumRuleCall_2_0 = (RuleCall)cPreemptionAssignment_2.eContents().get(0);
		private final Keyword cExitKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_4_1_0 = (RuleCall)cTriggerAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cPrKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_4_2_1_0 = (RuleCall)cTriggerProbabilityAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDoKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEffectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_5_1_0 = (RuleCall)cEffectsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cEffectsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_5_2_1_0 = (RuleCall)cEffectsAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLabelAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cLabelAssignment_6_1.eContents().get(0);
		
		//ExitAction returns sccharts::ExitAction:
		//    {sccharts::ExitAction}
		//    annotations+=RestrictedTypeAnnotation*
		//    preemption = PreemptionActionType?
		//    'exit' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::ExitAction}
		//annotations+=RestrictedTypeAnnotation*
		//preemption = PreemptionActionType?
		//'exit' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::ExitAction}
		public Action getExitActionAction_0() { return cExitActionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//preemption = PreemptionActionType?
		public Assignment getPreemptionAssignment_2() { return cPreemptionAssignment_2; }
		
		//PreemptionActionType
		public RuleCall getPreemptionPreemptionActionTypeEnumRuleCall_2_0() { return cPreemptionPreemptionActionTypeEnumRuleCall_2_0; }
		
		//'exit'
		public Keyword getExitKeyword_3() { return cExitKeyword_3; }
		
		//('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_4_1() { return cTriggerAssignment_4_1; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_4_1_0() { return cTriggerBoolScheduleExpressionParserRuleCall_4_1_0; }
		
		//('Pr' triggerProbability=FLOAT)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'Pr'
		public Keyword getPrKeyword_4_2_0() { return cPrKeyword_4_2_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_4_2_1() { return cTriggerProbabilityAssignment_4_2_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_4_2_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_4_2_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'do'
		public Keyword getDoKeyword_5_0() { return cDoKeyword_5_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_5_1() { return cEffectsAssignment_5_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_5_1_0() { return cEffectsEffectParserRuleCall_5_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2_0() { return cSemicolonKeyword_5_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_5_2_1() { return cEffectsAssignment_5_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_5_2_1_0() { return cEffectsEffectParserRuleCall_5_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_6_1() { return cLabelAssignment_6_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_0; }
	}
	public class SuspendActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.SuspendAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuspendActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayTypeEnumRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Assignment cWeakAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cWeakWeakKeyword_3_0 = (Keyword)cWeakAssignment_3.eContents().get(0);
		private final Keyword cSuspendKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIfKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTriggerDelayAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTriggerDelayINTTerminalRuleCall_5_1_0 = (RuleCall)cTriggerDelayAssignment_5_1.eContents().get(0);
		private final Assignment cTriggerAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_5_2_0 = (RuleCall)cTriggerAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cPrKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_5_3_1_0 = (RuleCall)cTriggerProbabilityAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLabelAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cLabelAssignment_6_1.eContents().get(0);
		
		//SuspendAction returns sccharts::SuspendAction:
		//    {sccharts::SuspendAction}
		//    annotations+=RestrictedTypeAnnotation*
		//    delay=DelayType? weak?='weak'? 'suspend' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::SuspendAction}
		//annotations+=RestrictedTypeAnnotation*
		//delay=DelayType? weak?='weak'? 'suspend' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::SuspendAction}
		public Action getSuspendActionAction_0() { return cSuspendActionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//delay=DelayType?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_2_0() { return cDelayDelayTypeEnumRuleCall_2_0; }
		
		//weak?='weak'?
		public Assignment getWeakAssignment_3() { return cWeakAssignment_3; }
		
		//'weak'
		public Keyword getWeakWeakKeyword_3_0() { return cWeakWeakKeyword_3_0; }
		
		//'suspend'
		public Keyword getSuspendKeyword_4() { return cSuspendKeyword_4; }
		
		//('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'if'
		public Keyword getIfKeyword_5_0() { return cIfKeyword_5_0; }
		
		//triggerDelay=INT?
		public Assignment getTriggerDelayAssignment_5_1() { return cTriggerDelayAssignment_5_1; }
		
		//INT
		public RuleCall getTriggerDelayINTTerminalRuleCall_5_1_0() { return cTriggerDelayINTTerminalRuleCall_5_1_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_5_2() { return cTriggerAssignment_5_2; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_5_2_0() { return cTriggerBoolScheduleExpressionParserRuleCall_5_2_0; }
		
		//('Pr=' triggerProbability=FLOAT)?
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//'Pr='
		public Keyword getPrKeyword_5_3_0() { return cPrKeyword_5_3_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_5_3_1() { return cTriggerProbabilityAssignment_5_3_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_5_3_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_5_3_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_6_1() { return cLabelAssignment_6_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_0; }
	}
	public class PeriodActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PeriodAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPeriodActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayTypeEnumRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Keyword cPeriodKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerValuedExpressionParserRuleCall_4_0 = (RuleCall)cTriggerAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		
		//PeriodAction returns sccharts::PeriodAction:
		//    {sccharts::PeriodAction}
		//    annotations+=RestrictedTypeAnnotation*
		//    delay=DelayType? 'period' trigger=ValuedExpression
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::PeriodAction}
		//annotations+=RestrictedTypeAnnotation*
		//delay=DelayType? 'period' trigger=ValuedExpression
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::PeriodAction}
		public Action getPeriodActionAction_0() { return cPeriodActionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//delay=DelayType?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_2_0() { return cDelayDelayTypeEnumRuleCall_2_0; }
		
		//'period'
		public Keyword getPeriodKeyword_3() { return cPeriodKeyword_3; }
		
		//trigger=ValuedExpression
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }
		
		//ValuedExpression
		public RuleCall getTriggerValuedExpressionParserRuleCall_4_0() { return cTriggerValuedExpressionParserRuleCall_4_0; }
		
		//('label' label=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }
	}
	public class OdeActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.OdeAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOdeActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cOdeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEffectsEffectParserRuleCall_3_0 = (RuleCall)cEffectsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLabelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cLabelAssignment_4_1.eContents().get(0);
		
		//OdeAction returns sccharts::OdeAction:
		//    {sccharts::OdeAction}
		//    annotations+=RestrictedTypeAnnotation*
		//    'ode' effects+=Effect
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::OdeAction}
		//annotations+=RestrictedTypeAnnotation*
		//'ode' effects+=Effect
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::OdeAction}
		public Action getOdeActionAction_0() { return cOdeActionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//'ode'
		public Keyword getOdeKeyword_2() { return cOdeKeyword_2; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3() { return cEffectsAssignment_3; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_0() { return cEffectsEffectParserRuleCall_3_0; }
		
		//('label' label=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'label'
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_4_1() { return cLabelAssignment_4_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_1_0() { return cLabelSTRINGTerminalRuleCall_4_1_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationWOSemicolonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ----- //
		////  SCL  //
		//// ----- //
		//// SCL has uses declarations with semicolon -> make it optional
		//@Override
		//Declaration returns kexpressions::Declaration:
		//    super | DeclarationWOSemicolon
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//super | DeclarationWOSemicolon
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationWOSemicolonParserRuleCall_1() { return cDeclarationWOSemicolonParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSclAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSclPostfixAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSclEffectAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConditionalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGotoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cScopeStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cForLoopParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cWhileLoopParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//@Override
		//Statement returns scl::Statement:
		//    // Only allow restricted set of SCL statements
		//    SclAssignment | SclPostfixAssignment | Label | SclEffectAssignment | Conditional | Goto | ScopeStatement | Return | ForLoop | WhileLoop
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Only allow restricted set of SCL statements
		//SclAssignment | SclPostfixAssignment | Label | SclEffectAssignment | Conditional | Goto | ScopeStatement | Return | ForLoop | WhileLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// Only allow restricted set of SCL statements
		//SclAssignment
		public RuleCall getSclAssignmentParserRuleCall_0() { return cSclAssignmentParserRuleCall_0; }
		
		//SclPostfixAssignment
		public RuleCall getSclPostfixAssignmentParserRuleCall_1() { return cSclPostfixAssignmentParserRuleCall_1; }
		
		//Label
		public RuleCall getLabelParserRuleCall_2() { return cLabelParserRuleCall_2; }
		
		//SclEffectAssignment
		public RuleCall getSclEffectAssignmentParserRuleCall_3() { return cSclEffectAssignmentParserRuleCall_3; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_4() { return cConditionalParserRuleCall_4; }
		
		//Goto
		public RuleCall getGotoParserRuleCall_5() { return cGotoParserRuleCall_5; }
		
		//ScopeStatement
		public RuleCall getScopeStatementParserRuleCall_6() { return cScopeStatementParserRuleCall_6; }
		
		//Return
		public RuleCall getReturnParserRuleCall_7() { return cReturnParserRuleCall_7; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_8() { return cForLoopParserRuleCall_8; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_9() { return cWhileLoopParserRuleCall_9; }
	}
	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCodeEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//Effect returns keffects::Effect:
		//    super |
		//    CodeEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//super |
		//CodeEffect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getEffectParserRuleCall_0() { return cEffectParserRuleCall_0; }
		
		//CodeEffect
		public RuleCall getCodeEffectParserRuleCall_1() { return cCodeEffectParserRuleCall_1; }
	}
	public class CodeEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.CodeEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CodeEffect returns sccharts::CodeEffect:
		//    {sccharts::CodeEffect}
		//    (annotations += Annotation)*
		//    '{'
		//        (declarations+=Declaration)*
		//        (statements += Statement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::CodeEffect}
		//(annotations += Annotation)*
		//'{'
		//    (declarations+=Declaration)*
		//    (statements += Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{sccharts::CodeEffect}
		public Action getCodeEffectAction_0() { return cCodeEffectAction_0; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(declarations+=Declaration)*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//(statements += Statement)*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ClassDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ClassDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolicyClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHostHostKeyword_3_0 = (Keyword)cHostAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cTypeClassTypeEnumRuleCall_4_0_0_0 = (RuleCall)cTypeAssignment_4_0_0.eContents().get(0);
		private final Assignment cNameAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_4_0_1_0 = (RuleCall)cNameAssignment_4_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Assignment cPolicyAssignment_4_0_3 = (Assignment)cGroup_4_0.eContents().get(3);
		private final RuleCall cPolicyPolicyRegionParserRuleCall_4_0_3_0 = (RuleCall)cPolicyAssignment_4_0_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_0_4 = (Assignment)cGroup_4_0.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_4_0_4_0 = (RuleCall)cDeclarationsAssignment_4_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_5 = (Keyword)cGroup_4_0.eContents().get(5);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cTypeAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTypeStructTypeEnumRuleCall_4_1_0_0 = (RuleCall)cTypeAssignment_4_1_0.eContents().get(0);
		private final Assignment cNameAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_4_1_1_0 = (RuleCall)cNameAssignment_4_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cDeclarationsAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_3_0 = (RuleCall)cDeclarationsAssignment_4_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_4 = (Keyword)cGroup_4_1.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cValuedObjectsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_5_0_0 = (RuleCall)cValuedObjectsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_5_1_1_0 = (RuleCall)cValuedObjectsAssignment_5_1_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_6_0 = (RuleCall)cAnnotationsAssignment_6.eContents().get(0);
		
		//// --------------- //
		////  Class/ Method  //
		//// --------------- //
		//@Override
		//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
		//    {sccharts::PolicyClassDeclaration}
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    host?='host'?
		//    ((
		//        type = ClassType
		//        (name = EString)?
		//        '{'
		//            policy=PolicyRegion?
		//            declarations+=DeclarationOrMethodWOSemicolon*
		//        '}'
		//    )|(
		//        type = StructType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationWOSemicolon*
		//        '}'
		//    ))
		//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::PolicyClassDeclaration}
		//annotations+=Annotation*
		//access=AccessModifier?
		//host?='host'?
		//((
		//    type = ClassType
		//    (name = EString)?
		//    '{'
		//        policy=PolicyRegion?
		//        declarations+=DeclarationOrMethodWOSemicolon*
		//    '}'
		//)|(
		//    type = StructType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationWOSemicolon*
		//    '}'
		//))
		//(valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::PolicyClassDeclaration}
		public Action getPolicyClassDeclarationAction_0() { return cPolicyClassDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//host?='host'?
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//'host'
		public Keyword getHostHostKeyword_3_0() { return cHostHostKeyword_3_0; }
		
		//((
		//    type = ClassType
		//    (name = EString)?
		//    '{'
		//        policy=PolicyRegion?
		//        declarations+=DeclarationOrMethodWOSemicolon*
		//    '}'
		//)|(
		//    type = StructType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationWOSemicolon*
		//    '}'
		//))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(
		//        type = ClassType
		//        (name = EString)?
		//        '{'
		//            policy=PolicyRegion?
		//            declarations+=DeclarationOrMethodWOSemicolon*
		//        '}'
		//    )
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//type = ClassType
		public Assignment getTypeAssignment_4_0_0() { return cTypeAssignment_4_0_0; }
		
		//ClassType
		public RuleCall getTypeClassTypeEnumRuleCall_4_0_0_0() { return cTypeClassTypeEnumRuleCall_4_0_0_0; }
		
		//(name = EString)?
		public Assignment getNameAssignment_4_0_1() { return cNameAssignment_4_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0_1_0() { return cNameEStringParserRuleCall_4_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0_2() { return cLeftCurlyBracketKeyword_4_0_2; }
		
		//policy=PolicyRegion?
		public Assignment getPolicyAssignment_4_0_3() { return cPolicyAssignment_4_0_3; }
		
		//PolicyRegion
		public RuleCall getPolicyPolicyRegionParserRuleCall_4_0_3_0() { return cPolicyPolicyRegionParserRuleCall_4_0_3_0; }
		
		//declarations+=DeclarationOrMethodWOSemicolon*
		public Assignment getDeclarationsAssignment_4_0_4() { return cDeclarationsAssignment_4_0_4; }
		
		//DeclarationOrMethodWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_4_0_4_0() { return cDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_4_0_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_5() { return cRightCurlyBracketKeyword_4_0_5; }
		
		//(
		//        type = StructType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationWOSemicolon*
		//        '}'
		//    )
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//type = StructType
		public Assignment getTypeAssignment_4_1_0() { return cTypeAssignment_4_1_0; }
		
		//StructType
		public RuleCall getTypeStructTypeEnumRuleCall_4_1_0_0() { return cTypeStructTypeEnumRuleCall_4_1_0_0; }
		
		//(name = EString)?
		public Assignment getNameAssignment_4_1_1() { return cNameAssignment_4_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_1_1_0() { return cNameEStringParserRuleCall_4_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_2() { return cLeftCurlyBracketKeyword_4_1_2; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_4_1_3() { return cDeclarationsAssignment_4_1_3; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_3_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_4() { return cRightCurlyBracketKeyword_4_1_4; }
		
		//(valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_5_0() { return cValuedObjectsAssignment_5_0; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_5_0_0() { return cValuedObjectsValuedObjectParserRuleCall_5_0_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_5_1_1() { return cValuedObjectsAssignment_5_1_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_5_1_1_0() { return cValuedObjectsValuedObjectParserRuleCall_5_1_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_6() { return cAnnotationsAssignment_6; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_6_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_6_0; }
	}
	public class PolicyRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PolicyRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesPolicyStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PolicyRegion returns sccharts::PolicyRegion:
		//    'policy' name=ID label=STRING?
		//    '{'
		//    declarations+=DeclarationWOSemicolon*
		//    states+=PolicyState+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'policy' name=ID label=STRING?
		//'{'
		//declarations+=DeclarationWOSemicolon*
		//states+=PolicyState+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'policy'
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_4_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_4_0; }
		
		//states+=PolicyState+
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }
		
		//PolicyState
		public RuleCall getStatesPolicyStateParserRuleCall_5_0() { return cStatesPolicyStateParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PolicyStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PolicyState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_0 = (Keyword)cInitialAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Assignment cOutgoingTransitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutgoingTransitionsPolicyTransitionParserRuleCall_5_0 = (RuleCall)cOutgoingTransitionsAssignment_5.eContents().get(0);
		
		//PolicyState returns sccharts::State:
		//    annotations+=Annotation*
		//    initial?='initial'?
		//    'state' name=ID label=STRING?
		//    outgoingTransitions+=PolicyTransition*;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//initial?='initial'?
		//'state' name=ID label=STRING?
		//outgoingTransitions+=PolicyTransition*
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_1_0() { return cInitialInitialKeyword_1_0; }
		
		//'state'
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }
		
		//outgoingTransitions+=PolicyTransition*
		public Assignment getOutgoingTransitionsAssignment_5() { return cOutgoingTransitionsAssignment_5; }
		
		//PolicyTransition
		public RuleCall getOutgoingTransitionsPolicyTransitionParserRuleCall_5_0() { return cOutgoingTransitionsPolicyTransitionParserRuleCall_5_0; }
	}
	public class PolicyTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PolicyTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cTriggerAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cTriggerLogicalOrExpressionParserRuleCall_2_1_0_0 = (RuleCall)cTriggerAssignment_2_1_0.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cTriggerValuedObjectReferenceParserRuleCall_2_1_1_0 = (RuleCall)cTriggerAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cEffectsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cEffectsPureEmissionParserRuleCall_2_2_1_0 = (RuleCall)cEffectsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cEffectsAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cEffectsPureEmissionParserRuleCall_2_2_2_1_0 = (RuleCall)cEffectsAssignment_2_2_2_1.eContents().get(0);
		private final Keyword cGoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetStateStateCrossReference_5_0 = (CrossReference)cTargetStateAssignment_5.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetStateStateCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLabelAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cLabelAssignment_6_1.eContents().get(0);
		
		//PolicyTransition returns sccharts::Transition:
		//    {sccharts::Transition}
		//    annotations+=RestrictedTypeAnnotation*
		//    ('if' (trigger=LogicalOrExpression | trigger=ValuedObjectReference)
		//     (':' effects+=PureEmission (',' effects+=PureEmission)*)?
		//    )?
		//    'go' 'to'
		//    targetState=[sccharts::State|ID]
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::Transition}
		//annotations+=RestrictedTypeAnnotation*
		//('if' (trigger=LogicalOrExpression | trigger=ValuedObjectReference)
		// (':' effects+=PureEmission (',' effects+=PureEmission)*)?
		//)?
		//'go' 'to'
		//targetState=[sccharts::State|ID]
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//('if' (trigger=LogicalOrExpression | trigger=ValuedObjectReference)
		// (':' effects+=PureEmission (',' effects+=PureEmission)*)?
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//(trigger=LogicalOrExpression | trigger=ValuedObjectReference)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//trigger=LogicalOrExpression
		public Assignment getTriggerAssignment_2_1_0() { return cTriggerAssignment_2_1_0; }
		
		//LogicalOrExpression
		public RuleCall getTriggerLogicalOrExpressionParserRuleCall_2_1_0_0() { return cTriggerLogicalOrExpressionParserRuleCall_2_1_0_0; }
		
		//trigger=ValuedObjectReference
		public Assignment getTriggerAssignment_2_1_1() { return cTriggerAssignment_2_1_1; }
		
		//ValuedObjectReference
		public RuleCall getTriggerValuedObjectReferenceParserRuleCall_2_1_1_0() { return cTriggerValuedObjectReferenceParserRuleCall_2_1_1_0; }
		
		//(':' effects+=PureEmission (',' effects+=PureEmission)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//':'
		public Keyword getColonKeyword_2_2_0() { return cColonKeyword_2_2_0; }
		
		//effects+=PureEmission
		public Assignment getEffectsAssignment_2_2_1() { return cEffectsAssignment_2_2_1; }
		
		//PureEmission
		public RuleCall getEffectsPureEmissionParserRuleCall_2_2_1_0() { return cEffectsPureEmissionParserRuleCall_2_2_1_0; }
		
		//(',' effects+=PureEmission)*
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_2_0() { return cCommaKeyword_2_2_2_0; }
		
		//effects+=PureEmission
		public Assignment getEffectsAssignment_2_2_2_1() { return cEffectsAssignment_2_2_2_1; }
		
		//PureEmission
		public RuleCall getEffectsPureEmissionParserRuleCall_2_2_2_1_0() { return cEffectsPureEmissionParserRuleCall_2_2_2_1_0; }
		
		//'go'
		public Keyword getGoKeyword_3() { return cGoKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//targetState=[sccharts::State|ID]
		public Assignment getTargetStateAssignment_5() { return cTargetStateAssignment_5; }
		
		//[sccharts::State|ID]
		public CrossReference getTargetStateStateCrossReference_5_0() { return cTargetStateStateCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_5_0_1() { return cTargetStateStateIDTerminalRuleCall_5_0_1; }
		
		//('label' label=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_6_1() { return cLabelAssignment_6_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_0; }
	}
	public class DeclarationOrMethodWithKeywordWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DeclarationOrMethodWithKeywordWOSemicolon");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationWOSemicolonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordMethodDeclarationWOSemicolonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumDeclarationWOSemicolonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DeclarationOrMethodWithKeywordWOSemicolon returns kexpressions::Declaration:
		//    DeclarationWOSemicolon | KeywordMethodDeclarationWOSemicolon | EnumDeclarationWOSemicolon
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarationWOSemicolon | KeywordMethodDeclarationWOSemicolon | EnumDeclarationWOSemicolon
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationWOSemicolonParserRuleCall_0() { return cDeclarationWOSemicolonParserRuleCall_0; }
		
		//KeywordMethodDeclarationWOSemicolon
		public RuleCall getKeywordMethodDeclarationWOSemicolonParserRuleCall_1() { return cKeywordMethodDeclarationWOSemicolonParserRuleCall_1; }
		
		//EnumDeclarationWOSemicolon
		public RuleCall getEnumDeclarationWOSemicolonParserRuleCall_2() { return cEnumDeclarationWOSemicolonParserRuleCall_2; }
	}
	public class KeywordMethodDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.KeywordMethodDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodImplementationDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAccessAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0_0 = (RuleCall)cAccessAssignment_2_0.eContents().get(0);
		private final Assignment cOverrideAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_2_1_0 = (Keyword)cOverrideAssignment_2_1.eContents().get(0);
		private final Keyword cMethodKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeMethodReturnTypeEnumRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_5_0 = (RuleCall)cValuedObjectsAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_1_0 = (RuleCall)cParameterDeclarationsAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cCommaKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_6_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_0_3 = (Keyword)cGroup_6_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cScheduleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cScheduleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_7_1_0 = (RuleCall)cScheduleAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAnnotationsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_8_1_0 = (RuleCall)cAnnotationsAssignment_8_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_8_2_0 = (RuleCall)cDeclarationsAssignment_8_2.eContents().get(0);
		private final Assignment cStatementsAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_8_3_0 = (RuleCall)cStatementsAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		//KeywordMethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
		//    {scl::MethodImplementationDeclaration}
		//    annotations+=Annotation*
		//    ( access=AccessModifier? | override?='override' )
		//    'method'
		//    returnType=MethodReturnType?
		//    valuedObjects+=SimpleValuedObject
		//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//    ('{'
		//        annotations+=CommentAnnotatonSL?
		//        declarations+=Declaration*
		//        statements+=Statement*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{scl::MethodImplementationDeclaration}
		//annotations+=Annotation*
		//( access=AccessModifier? | override?='override' )
		//'method'
		//returnType=MethodReturnType?
		//valuedObjects+=SimpleValuedObject
		//(('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		//('schedule' schedule+=ScheduleObjectReference+)?
		//('{'
		//    annotations+=CommentAnnotatonSL?
		//    declarations+=Declaration*
		//    statements+=Statement*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{scl::MethodImplementationDeclaration}
		public Action getMethodImplementationDeclarationAction_0() { return cMethodImplementationDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//( access=AccessModifier? | override?='override' )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2_0() { return cAccessAssignment_2_0; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0_0() { return cAccessAccessModifierEnumRuleCall_2_0_0; }
		
		//override?='override'
		public Assignment getOverrideAssignment_2_1() { return cOverrideAssignment_2_1; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_2_1_0() { return cOverrideOverrideKeyword_2_1_0; }
		
		//'method'
		public Keyword getMethodKeyword_3() { return cMethodKeyword_3; }
		
		//returnType=MethodReturnType?
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//MethodReturnType
		public RuleCall getReturnTypeMethodReturnTypeEnumRuleCall_4_0() { return cReturnTypeMethodReturnTypeEnumRuleCall_4_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_5() { return cValuedObjectsAssignment_5; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_5_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_5_0; }
		
		//(('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')')
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0_0() { return cLeftParenthesisKeyword_6_0_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_6_0_1() { return cParameterDeclarationsAssignment_6_0_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_1_0; }
		
		//(',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }
		
		//','
		public Keyword getCommaKeyword_6_0_2_0() { return cCommaKeyword_6_0_2_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_6_0_2_1() { return cParameterDeclarationsAssignment_6_0_2_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_2_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_0_3() { return cRightParenthesisKeyword_6_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_6_1() { return cLeftParenthesisRightParenthesisKeyword_6_1; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'schedule'
		public Keyword getScheduleKeyword_7_0() { return cScheduleKeyword_7_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_7_1() { return cScheduleAssignment_7_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_7_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_7_1_0; }
		
		//('{'
		//    annotations+=CommentAnnotatonSL?
		//    declarations+=Declaration*
		//    statements+=Statement*
		//'}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_8_1() { return cAnnotationsAssignment_8_1; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_8_1_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_8_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_8_2() { return cDeclarationsAssignment_8_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_8_2_0() { return cDeclarationsDeclarationParserRuleCall_8_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_8_3() { return cStatementsAssignment_8_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_3_0() { return cStatementsStatementParserRuleCall_8_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
	}
	public class ReferenceValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ReferenceValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsQuotedStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrimeIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalitiesExpressionParserRuleCall_2_1_0 = (RuleCall)cCardinalitiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGenericParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_3_1_0 = (RuleCall)cGenericParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_3_2_1_0 = (RuleCall)cGenericParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cParametersAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_4_0_1_0 = (RuleCall)cParametersAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_0_2 = (Group)cGroup_4_0.eContents().get(2);
		private final Keyword cCommaKeyword_4_0_2_0 = (Keyword)cGroup_4_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_4_0_2_1_0 = (RuleCall)cParametersAssignment_4_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_3 = (Keyword)cGroup_4_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitialValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_5_1_0 = (RuleCall)cInitialValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLabelKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLabelAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cLabelAssignment_6_1.eContents().get(0);
		
		//@Override
		//ReferenceValuedObject returns kexpressions::ValuedObject:
		//    annotations+=QuotedStringAnnotation*
		//    name=PrimeID
		//    ('[' cardinalities+=Expression ']')*
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')? // This is the important difference to the original definition!
		//    ('=' initialValue=Expression)?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=QuotedStringAnnotation*
		//name=PrimeID
		//('[' cardinalities+=Expression ']')*
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')? // This is the important difference to the original definition!
		//('=' initialValue=Expression)?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//annotations+=QuotedStringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//QuotedStringAnnotation
		public RuleCall getAnnotationsQuotedStringAnnotationParserRuleCall_0_0() { return cAnnotationsQuotedStringAnnotationParserRuleCall_0_0; }
		
		//name=PrimeID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_1_0() { return cNamePrimeIDParserRuleCall_1_0; }
		
		//('[' cardinalities+=Expression ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cardinalities+=Expression
		public Assignment getCardinalitiesAssignment_2_1() { return cCardinalitiesAssignment_2_1; }
		
		//Expression
		public RuleCall getCardinalitiesExpressionParserRuleCall_2_1_0() { return cCardinalitiesExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_3_1() { return cGenericParametersAssignment_3_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_3_1_0() { return cGenericParametersGenericParameterParserRuleCall_3_1_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_3_2_1() { return cGenericParametersAssignment_3_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_3_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_3_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }
		
		//(('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')')
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_4_0_1() { return cParametersAssignment_4_0_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_4_0_1_0() { return cParametersScopeParameterParserRuleCall_4_0_1_0; }
		
		//(',' parameters += ScopeParameter)*
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }
		
		//','
		public Keyword getCommaKeyword_4_0_2_0() { return cCommaKeyword_4_0_2_0; }
		
		//parameters += ScopeParameter
		public Assignment getParametersAssignment_4_0_2_1() { return cParametersAssignment_4_0_2_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_4_0_2_1_0() { return cParametersScopeParameterParserRuleCall_4_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_0_3() { return cRightParenthesisKeyword_4_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_4_1() { return cLeftParenthesisRightParenthesisKeyword_4_1; }
		
		//// This is the important difference to the original definition!
		//   ('=' initialValue=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_5_1() { return cInitialValueAssignment_5_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_5_1_0() { return cInitialValueExpressionParserRuleCall_5_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'label'
		public Keyword getLabelKeyword_6_0() { return cLabelKeyword_6_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_6_1() { return cLabelAssignment_6_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_0; }
	}
	public class SpecialAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.SpecialAccessExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSCChartAccessExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateAccessExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//SpecialAccessExpression returns kexpressions::SpecialAccessExpression:
		//    SCChartAccessExpression | StateAccessExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SCChartAccessExpression | StateAccessExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SCChartAccessExpression
		public RuleCall getSCChartAccessExpressionParserRuleCall_0() { return cSCChartAccessExpressionParserRuleCall_0; }
		
		//StateAccessExpression
		public RuleCall getStateAccessExpressionParserRuleCall_1() { return cStateAccessExpressionParserRuleCall_1; }
	}
	public class SCChartAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.SCChartAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAccessScchartKeyword_0_0 = (Keyword)cAccessAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetNamedObjectCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetNamedObjectPrimeIDParserRuleCall_2_0_1 = (RuleCall)cTargetNamedObjectCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSubReferenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubReferenceValuedObjectReferenceParserRuleCall_5_0 = (RuleCall)cSubReferenceAssignment_5.eContents().get(0);
		
		//SCChartAccessExpression returns kexpressions::SpecialAccessExpression:
		//    access='scchart' '('
		//    target=[annotations::NamedObject|PrimeID]
		//    ')' '.' subReference=ValuedObjectReference;
		@Override public ParserRule getRule() { return rule; }
		
		//access='scchart' '('
		//target=[annotations::NamedObject|PrimeID]
		//')' '.' subReference=ValuedObjectReference
		public Group getGroup() { return cGroup; }
		
		//access='scchart'
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//'scchart'
		public Keyword getAccessScchartKeyword_0_0() { return cAccessScchartKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//target=[annotations::NamedObject|PrimeID]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getTargetNamedObjectCrossReference_2_0() { return cTargetNamedObjectCrossReference_2_0; }
		
		//PrimeID
		public RuleCall getTargetNamedObjectPrimeIDParserRuleCall_2_0_1() { return cTargetNamedObjectPrimeIDParserRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//subReference=ValuedObjectReference
		public Assignment getSubReferenceAssignment_5() { return cSubReferenceAssignment_5; }
		
		//ValuedObjectReference
		public RuleCall getSubReferenceValuedObjectReferenceParserRuleCall_5_0() { return cSubReferenceValuedObjectReferenceParserRuleCall_5_0; }
	}
	public class StateAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.StateAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAccessStateKeyword_0_0 = (Keyword)cAccessAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cContainerAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final CrossReference cContainerControlflowRegionCrossReference_2_0_0_0 = (CrossReference)cContainerAssignment_2_0_0.eContents().get(0);
		private final RuleCall cContainerControlflowRegionIDTerminalRuleCall_2_0_0_0_1 = (RuleCall)cContainerControlflowRegionCrossReference_2_0_0_0.eContents().get(1);
		private final Assignment cContainerAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final CrossReference cContainerDataflowRegionCrossReference_2_0_1_0 = (CrossReference)cContainerAssignment_2_0_1.eContents().get(0);
		private final RuleCall cContainerDataflowRegionIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cContainerDataflowRegionCrossReference_2_0_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cScheduleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cScheduleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_5_1_0 = (RuleCall)cScheduleAssignment_5_1.eContents().get(0);
		
		//StateAccessExpression returns kexpressions::SpecialAccessExpression:
		//    access='state' '('
		//    ( (container=[sccharts::ControlflowRegion] | container=[sccharts::DataflowRegion]) '.')? target=[sccharts::State]
		//    ')'
		//    ('schedule' schedule += ScheduleObjectReference)?;
		@Override public ParserRule getRule() { return rule; }
		
		//access='state' '('
		//( (container=[sccharts::ControlflowRegion] | container=[sccharts::DataflowRegion]) '.')? target=[sccharts::State]
		//')'
		//('schedule' schedule += ScheduleObjectReference)?
		public Group getGroup() { return cGroup; }
		
		//access='state'
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//'state'
		public Keyword getAccessStateKeyword_0_0() { return cAccessStateKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//( (container=[sccharts::ControlflowRegion] | container=[sccharts::DataflowRegion]) '.')?
		public Group getGroup_2() { return cGroup_2; }
		
		//(container=[sccharts::ControlflowRegion] | container=[sccharts::DataflowRegion])
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//container=[sccharts::ControlflowRegion]
		public Assignment getContainerAssignment_2_0_0() { return cContainerAssignment_2_0_0; }
		
		//[sccharts::ControlflowRegion]
		public CrossReference getContainerControlflowRegionCrossReference_2_0_0_0() { return cContainerControlflowRegionCrossReference_2_0_0_0; }
		
		//ID
		public RuleCall getContainerControlflowRegionIDTerminalRuleCall_2_0_0_0_1() { return cContainerControlflowRegionIDTerminalRuleCall_2_0_0_0_1; }
		
		//container=[sccharts::DataflowRegion]
		public Assignment getContainerAssignment_2_0_1() { return cContainerAssignment_2_0_1; }
		
		//[sccharts::DataflowRegion]
		public CrossReference getContainerDataflowRegionCrossReference_2_0_1_0() { return cContainerDataflowRegionCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getContainerDataflowRegionIDTerminalRuleCall_2_0_1_0_1() { return cContainerDataflowRegionIDTerminalRuleCall_2_0_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//target=[sccharts::State]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[sccharts::State]
		public CrossReference getTargetStateCrossReference_3_0() { return cTargetStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_3_0_1() { return cTargetStateIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('schedule' schedule += ScheduleObjectReference)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'schedule'
		public Keyword getScheduleKeyword_5_0() { return cScheduleKeyword_5_0; }
		
		//schedule += ScheduleObjectReference
		public Assignment getScheduleAssignment_5_1() { return cScheduleAssignment_5_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_5_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_5_1_0; }
	}
	public class HiddenKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.HiddenKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAbortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJoinKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShallowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		// // als: added clock for timed automata
		//// -------------- //
		////  Helper Rules  //
		//// -------------- //
		//// These are implicit keywords due to rules such as 'go to'
		//HiddenKeywords: 'go' | 'abort' | 'join' | 'shallow';
		@Override public ParserRule getRule() { return rule; }
		
		//'go' | 'abort' | 'join' | 'shallow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//'abort'
		public Keyword getAbortKeyword_1() { return cAbortKeyword_1; }
		
		//'join'
		public Keyword getJoinKeyword_2() { return cJoinKeyword_2; }
		
		//'shallow'
		public Keyword getShallowKeyword_3() { return cShallowKeyword_3; }
	}
	
	public class PreemptionTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PreemptionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKGoKeyword_0_0 = (Keyword)cWEAKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGAbortKeyword_1_0 = (Keyword)cSTRONGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTERMINATIONJoinKeyword_2_0 = (Keyword)cTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//// ------------ //
		////  Enum Rules  //
		//// ------------ //
		//enum PreemptionType returns sccharts::PreemptionType:
		//    WEAK = 'go' | STRONG = 'abort' | TERMINATION = 'join';
		public EnumRule getRule() { return rule; }
		
		//WEAK = 'go' | STRONG = 'abort' | TERMINATION = 'join'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WEAK = 'go'
		public EnumLiteralDeclaration getWEAKEnumLiteralDeclaration_0() { return cWEAKEnumLiteralDeclaration_0; }
		
		//'go'
		public Keyword getWEAKGoKeyword_0_0() { return cWEAKGoKeyword_0_0; }
		
		//STRONG = 'abort'
		public EnumLiteralDeclaration getSTRONGEnumLiteralDeclaration_1() { return cSTRONGEnumLiteralDeclaration_1; }
		
		//'abort'
		public Keyword getSTRONGAbortKeyword_1_0() { return cSTRONGAbortKeyword_1_0; }
		
		//TERMINATION = 'join'
		public EnumLiteralDeclaration getTERMINATIONEnumLiteralDeclaration_2() { return cTERMINATIONEnumLiteralDeclaration_2; }
		
		//'join'
		public Keyword getTERMINATIONJoinKeyword_2_0() { return cTERMINATIONJoinKeyword_2_0; }
	}
	public class PreemptionActionTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PreemptionActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKWeakKeyword_0_0 = (Keyword)cWEAKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGStrongKeyword_1_0 = (Keyword)cSTRONGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PreemptionActionType returns sccharts::PreemptionType:
		//    WEAK = 'weak' | STRONG = 'strong';
		public EnumRule getRule() { return rule; }
		
		//WEAK = 'weak' | STRONG = 'strong'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WEAK = 'weak'
		public EnumLiteralDeclaration getWEAKEnumLiteralDeclaration_0() { return cWEAKEnumLiteralDeclaration_0; }
		
		//'weak'
		public Keyword getWEAKWeakKeyword_0_0() { return cWEAKWeakKeyword_0_0; }
		
		//STRONG = 'strong'
		public EnumLiteralDeclaration getSTRONGEnumLiteralDeclaration_1() { return cSTRONGEnumLiteralDeclaration_1; }
		
		//'strong'
		public Keyword getSTRONGStrongKeyword_1_0() { return cSTRONGStrongKeyword_1_0; }
	}
	public class DelayTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DelayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNDEFINEDUndefinedKeyword_0_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDELAYEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDELAYEDDelayedKeyword_1_0 = (Keyword)cDELAYEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIMMEDIATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIMMEDIATEImmediateKeyword_2_0 = (Keyword)cIMMEDIATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAUTOMATICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAUTOMATICAutoKeyword_3_0 = (Keyword)cAUTOMATICEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DelayType returns sccharts::DelayType:
		//    UNDEFINED = 'undefined' | DELAYED = 'delayed' | IMMEDIATE = 'immediate' | AUTOMATIC = 'auto';
		public EnumRule getRule() { return rule; }
		
		//UNDEFINED = 'undefined' | DELAYED = 'delayed' | IMMEDIATE = 'immediate' | AUTOMATIC = 'auto'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNDEFINED = 'undefined'
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_0() { return cUNDEFINEDEnumLiteralDeclaration_0; }
		
		//'undefined'
		public Keyword getUNDEFINEDUndefinedKeyword_0_0() { return cUNDEFINEDUndefinedKeyword_0_0; }
		
		//DELAYED = 'delayed'
		public EnumLiteralDeclaration getDELAYEDEnumLiteralDeclaration_1() { return cDELAYEDEnumLiteralDeclaration_1; }
		
		//'delayed'
		public Keyword getDELAYEDDelayedKeyword_1_0() { return cDELAYEDDelayedKeyword_1_0; }
		
		//IMMEDIATE = 'immediate'
		public EnumLiteralDeclaration getIMMEDIATEEnumLiteralDeclaration_2() { return cIMMEDIATEEnumLiteralDeclaration_2; }
		
		//'immediate'
		public Keyword getIMMEDIATEImmediateKeyword_2_0() { return cIMMEDIATEImmediateKeyword_2_0; }
		
		//AUTOMATIC = 'auto'
		public EnumLiteralDeclaration getAUTOMATICEnumLiteralDeclaration_3() { return cAUTOMATICEnumLiteralDeclaration_3; }
		
		//'auto'
		public Keyword getAUTOMATICAutoKeyword_3_0() { return cAUTOMATICAutoKeyword_3_0; }
	}
	public class HistoryTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.HistoryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRESETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRESETResetKeyword_0_0 = (Keyword)cRESETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHALLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHALLOWShallowHistoryKeyword_1_0 = (Keyword)cSHALLOWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDEEPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDEEPHistoryKeyword_2_0 = (Keyword)cDEEPEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum HistoryType returns sccharts::HistoryType:
		//    RESET = 'reset' | SHALLOW = 'shallow history' | DEEP = 'history';
		public EnumRule getRule() { return rule; }
		
		//RESET = 'reset' | SHALLOW = 'shallow history' | DEEP = 'history'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RESET = 'reset'
		public EnumLiteralDeclaration getRESETEnumLiteralDeclaration_0() { return cRESETEnumLiteralDeclaration_0; }
		
		//'reset'
		public Keyword getRESETResetKeyword_0_0() { return cRESETResetKeyword_0_0; }
		
		//SHALLOW = 'shallow history'
		public EnumLiteralDeclaration getSHALLOWEnumLiteralDeclaration_1() { return cSHALLOWEnumLiteralDeclaration_1; }
		
		//'shallow history'
		public Keyword getSHALLOWShallowHistoryKeyword_1_0() { return cSHALLOWShallowHistoryKeyword_1_0; }
		
		//DEEP = 'history'
		public EnumLiteralDeclaration getDEEPEnumLiteralDeclaration_2() { return cDEEPEnumLiteralDeclaration_2; }
		
		//'history'
		public Keyword getDEEPHistoryKeyword_2_0() { return cDEEPHistoryKeyword_2_0; }
	}
	public class DeferredTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DeferredType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSHALLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSHALLOWDeferredKeyword_0_0 = (Keyword)cSHALLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEEPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEEPDeepDeferredKeyword_1_0 = (Keyword)cDEEPEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DeferredType returns sccharts::DeferredType:
		//    SHALLOW = 'deferred' | DEEP = 'deep deferred';
		public EnumRule getRule() { return rule; }
		
		//SHALLOW = 'deferred' | DEEP = 'deep deferred'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SHALLOW = 'deferred'
		public EnumLiteralDeclaration getSHALLOWEnumLiteralDeclaration_0() { return cSHALLOWEnumLiteralDeclaration_0; }
		
		//'deferred'
		public Keyword getSHALLOWDeferredKeyword_0_0() { return cSHALLOWDeferredKeyword_0_0; }
		
		//DEEP = 'deep deferred'
		public EnumLiteralDeclaration getDEEPEnumLiteralDeclaration_1() { return cDEEPEnumLiteralDeclaration_1; }
		
		//'deep deferred'
		public Keyword getDEEPDeepDeferredKeyword_1_0() { return cDEEPDeepDeferredKeyword_1_0; }
	}
	public class ValueTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPureKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBoolKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTIntKeyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFLOATFloatKeyword_3_0 = (Keyword)cFLOATEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGStringKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCLOCKEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCLOCKClockKeyword_5_0 = (Keyword)cCLOCKEnumLiteralDeclaration_5.eContents().get(0);
		
		//@Override
		//enum ValueType returns kexpressions::ValueType:
		//    PURE="pure" | BOOL="bool" |
		//    INT="int" | FLOAT="float" |
		//    STRING="string" |
		//    CLOCK="clock";
		public EnumRule getRule() { return rule; }
		
		//PURE="pure" | BOOL="bool" |
		//INT="int" | FLOAT="float" |
		//STRING="string" |
		//CLOCK="clock"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PURE="pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }
		
		//"pure"
		public Keyword getPUREPureKeyword_0_0() { return cPUREPureKeyword_0_0; }
		
		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }
		
		//"bool"
		public Keyword getBOOLBoolKeyword_1_0() { return cBOOLBoolKeyword_1_0; }
		
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }
		
		//"int"
		public Keyword getINTIntKeyword_2_0() { return cINTIntKeyword_2_0; }
		
		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_3() { return cFLOATEnumLiteralDeclaration_3; }
		
		//"float"
		public Keyword getFLOATFloatKeyword_3_0() { return cFLOATFloatKeyword_3_0; }
		
		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }
		
		//"string"
		public Keyword getSTRINGStringKeyword_4_0() { return cSTRINGStringKeyword_4_0; }
		
		//CLOCK="clock"
		public EnumLiteralDeclaration getCLOCKEnumLiteralDeclaration_5() { return cCLOCKEnumLiteralDeclaration_5; }
		
		//"clock"
		public Keyword getCLOCKClockKeyword_5_0() { return cCLOCKClockKeyword_5_0; }
	}
	
	private final SCChartsElements pSCCharts;
	private final RootStateElements pRootState;
	private final StateElements pState;
	private final ImplicitStateElements pImplicitState;
	private final ScopeCallElements pScopeCall;
	private final ModuleScopeCallElements pModuleScopeCall;
	private final ScopeParameterElements pScopeParameter;
	private final BaseStateReferenceElements pBaseStateReference;
	private final TransitionElements pTransition;
	private final RegionElements pRegion;
	private final ImplicitControlflowRegionElements pImplicitControlflowRegion;
	private final ControlflowRegionElements pControlflowRegion;
	private final DataflowAssignmentElements pDataflowAssignment;
	private final DataflowRegionElements pDataflowRegion;
	private final IntOrReferenceElements pIntOrReference;
	private final CounterVariableElements pCounterVariable;
	private final LocalActionElements pLocalAction;
	private final EntryActionElements pEntryAction;
	private final DuringActionElements pDuringAction;
	private final ExitActionElements pExitAction;
	private final SuspendActionElements pSuspendAction;
	private final PeriodActionElements pPeriodAction;
	private final OdeActionElements pOdeAction;
	private final DeclarationElements pDeclaration;
	private final StatementElements pStatement;
	private final EffectElements pEffect;
	private final CodeEffectElements pCodeEffect;
	private final ClassDeclarationWOSemicolonElements pClassDeclarationWOSemicolon;
	private final PolicyRegionElements pPolicyRegion;
	private final PolicyStateElements pPolicyState;
	private final PolicyTransitionElements pPolicyTransition;
	private final DeclarationOrMethodWithKeywordWOSemicolonElements pDeclarationOrMethodWithKeywordWOSemicolon;
	private final KeywordMethodDeclarationWOSemicolonElements pKeywordMethodDeclarationWOSemicolon;
	private final ReferenceValuedObjectElements pReferenceValuedObject;
	private final SpecialAccessExpressionElements pSpecialAccessExpression;
	private final SCChartAccessExpressionElements pSCChartAccessExpression;
	private final StateAccessExpressionElements pStateAccessExpression;
	private final PreemptionTypeElements ePreemptionType;
	private final PreemptionActionTypeElements ePreemptionActionType;
	private final DelayTypeElements eDelayType;
	private final HistoryTypeElements eHistoryType;
	private final DeferredTypeElements eDeferredType;
	private final ValueTypeElements eValueType;
	private final HiddenKeywordsElements pHiddenKeywords;
	
	private final Grammar grammar;
	
	private final SCLGrammarAccess gaSCL;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCTXGrammarAccess(GrammarProvider grammarProvider,
			SCLGrammarAccess gaSCL,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSCL = gaSCL;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSCCharts = new SCChartsElements();
		this.pRootState = new RootStateElements();
		this.pState = new StateElements();
		this.pImplicitState = new ImplicitStateElements();
		this.pScopeCall = new ScopeCallElements();
		this.pModuleScopeCall = new ModuleScopeCallElements();
		this.pScopeParameter = new ScopeParameterElements();
		this.pBaseStateReference = new BaseStateReferenceElements();
		this.pTransition = new TransitionElements();
		this.pRegion = new RegionElements();
		this.pImplicitControlflowRegion = new ImplicitControlflowRegionElements();
		this.pControlflowRegion = new ControlflowRegionElements();
		this.pDataflowAssignment = new DataflowAssignmentElements();
		this.pDataflowRegion = new DataflowRegionElements();
		this.pIntOrReference = new IntOrReferenceElements();
		this.pCounterVariable = new CounterVariableElements();
		this.pLocalAction = new LocalActionElements();
		this.pEntryAction = new EntryActionElements();
		this.pDuringAction = new DuringActionElements();
		this.pExitAction = new ExitActionElements();
		this.pSuspendAction = new SuspendActionElements();
		this.pPeriodAction = new PeriodActionElements();
		this.pOdeAction = new OdeActionElements();
		this.pDeclaration = new DeclarationElements();
		this.pStatement = new StatementElements();
		this.pEffect = new EffectElements();
		this.pCodeEffect = new CodeEffectElements();
		this.pClassDeclarationWOSemicolon = new ClassDeclarationWOSemicolonElements();
		this.pPolicyRegion = new PolicyRegionElements();
		this.pPolicyState = new PolicyStateElements();
		this.pPolicyTransition = new PolicyTransitionElements();
		this.pDeclarationOrMethodWithKeywordWOSemicolon = new DeclarationOrMethodWithKeywordWOSemicolonElements();
		this.pKeywordMethodDeclarationWOSemicolon = new KeywordMethodDeclarationWOSemicolonElements();
		this.pReferenceValuedObject = new ReferenceValuedObjectElements();
		this.pSpecialAccessExpression = new SpecialAccessExpressionElements();
		this.pSCChartAccessExpression = new SCChartAccessExpressionElements();
		this.pStateAccessExpression = new StateAccessExpressionElements();
		this.ePreemptionType = new PreemptionTypeElements();
		this.ePreemptionActionType = new PreemptionActionTypeElements();
		this.eDelayType = new DelayTypeElements();
		this.eHistoryType = new HistoryTypeElements();
		this.eDeferredType = new DeferredTypeElements();
		this.eValueType = new ValueTypeElements();
		this.pHiddenKeywords = new HiddenKeywordsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.text.SCTX".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// ---------------- //
	////  SCCharts Rules  //
	//// ---------------- //
	//SCCharts returns sccharts::SCCharts:
	//    (
	//        pragmas+=Pragma
	//    |
	//        'import' imports+=EString
	//    )*
	//    rootStates+=RootState*;
	public SCChartsElements getSCChartsAccess() {
		return pSCCharts;
	}
	
	public ParserRule getSCChartsRule() {
		return getSCChartsAccess().getRule();
	}
	
	//// ------------- //
	////  State Rules  //
	//// ------------- //
	//RootState returns sccharts::State:
	//    annotations+=Annotation*
	//    'scchart' name=ExtendedID label=STRING?
	//    ('<' genericParameterDeclarations += GenericParameterDeclaration (',' genericParameterDeclarations += GenericParameterDeclaration)* '>')?
	//    ('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
	//    '{'
	//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//        actions+=LocalAction*
	//        (regions+=ImplicitControlflowRegion | regions+=Region*)
	//    '}';
	public RootStateElements getRootStateAccess() {
		return pRootState;
	}
	
	public ParserRule getRootStateRule() {
		return getRootStateAccess().getRule();
	}
	
	//State returns sccharts::State:
	//    annotations+=Annotation*
	//    initial?='initial'?
	//    final?='final'?
	//    violation?='violation'?
	//    connector?='connector'?
	//    =>'state' name=ID label=STRING?
	//    ((
	//        'is' reference = ScopeCall
	//        ('schedule' schedule+=ScheduleObjectReference+)?
	//    )|(
	//        'calls' reference = ModuleScopeCall
	//        ('schedule' schedule+=ScheduleObjectReference+)?
	//    )|(
	//        ('extends' baseStateReferences += BaseStateReference (',' baseStateReferences += BaseStateReference)*)?
	//        ('schedule' schedule+=ScheduleObjectReference+)?
	//       '{'
	//        declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//        actions+=LocalAction*
	//        (regions+=ImplicitControlflowRegion | regions+=Region*)
	//       '}')
	//    )?
	//    outgoingTransitions+=Transition*;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//ImplicitState returns sccharts::State:
	//    {sccharts::State}
	//    (regions+=Region+);
	public ImplicitStateElements getImplicitStateAccess() {
		return pImplicitState;
	}
	
	public ParserRule getImplicitStateRule() {
		return getImplicitStateAccess().getRule();
	}
	
	//ScopeCall returns sccharts::ScopeCall:
	//    super?='super.'?
	//    target = [annotations::NamedObject|ID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?;
	public ScopeCallElements getScopeCallAccess() {
		return pScopeCall;
	}
	
	public ParserRule getScopeCallRule() {
		return getScopeCallAccess().getRule();
	}
	
	//ModuleScopeCall returns sccharts::ScopeCall:
	//    {sccharts::ModuleScopeCall}
	//    target = [annotations::NamedObject|ID]
	//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?;
	public ModuleScopeCallElements getModuleScopeCallAccess() {
		return pModuleScopeCall;
	}
	
	public ParserRule getModuleScopeCallRule() {
		return getModuleScopeCallAccess().getRule();
	}
	
	//ScopeParameter returns kexpressions::Parameter:
	//    (
	//        (accessType = ParameterAccessType expression = ValuedObjectReference)
	//    |
	//        expression = (ThisExpression | Expression)
	//    )
	//    ('to' explicitBinding = [kexpressions::ValuedObject|ID] ('[' explicitBindingIndices+=Expression ']')*)?;
	public ScopeParameterElements getScopeParameterAccess() {
		return pScopeParameter;
	}
	
	public ParserRule getScopeParameterRule() {
		return getScopeParameterAccess().getRule();
	}
	
	//BaseStateReference returns sccharts::BaseStateReference:
	//    target = [sccharts::State|ID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')?;
	public BaseStateReferenceElements getBaseStateReferenceAccess() {
		return pBaseStateReference;
	}
	
	public ParserRule getBaseStateReferenceRule() {
		return getBaseStateReferenceAccess().getRule();
	}
	
	//// ------------------ //
	////  Transition Rules  //
	//// ------------------ //
	//Transition returns sccharts::Transition:
	//    {sccharts::Transition}
	//    annotations+=RestrictedTypeAnnotation*
	//    /*
	//     * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
	//     * go to A
	//     *  if I
	//     *  do O
	//     * go to B
	//     */
	//    delay=DelayType?
	//    ('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression)
	//        ('Pr=' triggerProbability=FLOAT)? nondeterministic?='nondeterministic'?
	//    )?
	//    ('do' effects+=Effect (';' effects+=Effect)*)?
	//    preemption=PreemptionType
	//    'to' targetState=[sccharts::State|ID]
	//    deferred=DeferredType?
	//    history=HistoryType?
	//    ('label' label=STRING)?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//// -------------- //
	////  Region Rules  //
	//// -------------- //
	//Region returns sccharts::Region:
	//    ControlflowRegion | DataflowRegion;
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//ImplicitControlflowRegion returns sccharts::ControlflowRegion:
	//    {sccharts::ControlflowRegion}
	//    states+=State+;
	public ImplicitControlflowRegionElements getImplicitControlflowRegionAccess() {
		return pImplicitControlflowRegion;
	}
	
	public ParserRule getImplicitControlflowRegionRule() {
		return getImplicitControlflowRegionAccess().getRule();
	}
	
	//ControlflowRegion returns sccharts::ControlflowRegion:
	//    {sccharts::ControlflowRegion}
	//    annotations+=Annotation*
	//    (
	//        abort?='abort' // only works if preemtion does not have 'abort to' keyword, otherwise 'abort' cannot be detected since ' to' is missing
	//        |
	//        override?='override'?
	//        final?='final'?
	//    )?
	//    'region' name=ExtendedID? label=STRING?
	//    ((
	//        'is' reference = ScopeCall
	//        ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
	//        ('schedule' schedule+=ScheduleObjectReference+)?
	//    )|(
	//        ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
	//        ('schedule' schedule+=ScheduleObjectReference+)?
	//        ((
	//            '{'
	//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//            actions+=LocalAction*
	//            (states+=ImplicitState | states+=State+)
	//            '}'
	//        )|(
	//            ':'
	//            declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//            actions+=LocalAction*
	//            states+=State*
	//        ))
	//    ));
	public ControlflowRegionElements getControlflowRegionAccess() {
		return pControlflowRegion;
	}
	
	public ParserRule getControlflowRegionRule() {
		return getControlflowRegionAccess().getRule();
	}
	
	//DataflowAssignment returns sccharts::DataflowAssignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=AssignOperator expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    sequential?=(';'|'seq')?;
	public DataflowAssignmentElements getDataflowAssignmentAccess() {
		return pDataflowAssignment;
	}
	
	public ParserRule getDataflowAssignmentRule() {
		return getDataflowAssignmentAccess().getRule();
	}
	
	//DataflowRegion returns sccharts::DataflowRegion:
	//    {sccharts::DataflowRegion}
	//    annotations+=Annotation*
	//    override?='override'?
	//    'dataflow' name=ExtendedID? label=STRING?
	//    ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    once?='once'?
	//    ((
	//        '{'
	//        declarations+=DeclarationWOSemicolon*
	//        equations+=(DataflowAssignment|Assignment)*
	//        '}'
	//    )|(
	//        ':'
	//        declarations+=DeclarationWOSemicolon*
	//        equations+=(DataflowAssignment|Assignment)*
	//    ));
	public DataflowRegionElements getDataflowRegionAccess() {
		return pDataflowRegion;
	}
	
	public ParserRule getDataflowRegionRule() {
		return getDataflowRegionAccess().getRule();
	}
	
	//IntOrReference returns kexpressions::Expression:
	//    IntValue | ValuedObjectReference;
	public IntOrReferenceElements getIntOrReferenceAccess() {
		return pIntOrReference;
	}
	
	public ParserRule getIntOrReferenceRule() {
		return getIntOrReferenceAccess().getRule();
	}
	
	//CounterVariable returns kexpressions::ValuedObject:
	//    name=PrimeID;
	public CounterVariableElements getCounterVariableAccess() {
		return pCounterVariable;
	}
	
	public ParserRule getCounterVariableRule() {
		return getCounterVariableAccess().getRule();
	}
	
	//// -------------- //
	////  Action Rules  //
	//// -------------- //
	//LocalAction returns sccharts::LocalAction:
	//    EntryAction | DuringAction | ExitAction | SuspendAction | PeriodAction | OdeAction;
	public LocalActionElements getLocalActionAccess() {
		return pLocalAction;
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}
	
	//EntryAction returns sccharts::EntryAction:
	//    {sccharts::EntryAction}
	//    annotations+=RestrictedTypeAnnotation*
	//    preemption = PreemptionActionType?
	//    'entry' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
	//    ('label' label=STRING)?;
	public EntryActionElements getEntryActionAccess() {
		return pEntryAction;
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}
	
	//DuringAction returns sccharts::DuringAction:
	//    {sccharts::DuringAction}
	//    annotations+=RestrictedTypeAnnotation*
	//    delay=DelayType?
	//    'during' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
	//    ('label' label=STRING)?;
	public DuringActionElements getDuringActionAccess() {
		return pDuringAction;
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}
	
	//ExitAction returns sccharts::ExitAction:
	//    {sccharts::ExitAction}
	//    annotations+=RestrictedTypeAnnotation*
	//    preemption = PreemptionActionType?
	//    'exit' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)?
	//    ('label' label=STRING)?;
	public ExitActionElements getExitActionAccess() {
		return pExitAction;
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}
	
	//SuspendAction returns sccharts::SuspendAction:
	//    {sccharts::SuspendAction}
	//    annotations+=RestrictedTypeAnnotation*
	//    delay=DelayType? weak?='weak'? 'suspend' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)?
	//    ('label' label=STRING)?;
	public SuspendActionElements getSuspendActionAccess() {
		return pSuspendAction;
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}
	
	//PeriodAction returns sccharts::PeriodAction:
	//    {sccharts::PeriodAction}
	//    annotations+=RestrictedTypeAnnotation*
	//    delay=DelayType? 'period' trigger=ValuedExpression
	//    ('label' label=STRING)?;
	public PeriodActionElements getPeriodActionAccess() {
		return pPeriodAction;
	}
	
	public ParserRule getPeriodActionRule() {
		return getPeriodActionAccess().getRule();
	}
	
	//OdeAction returns sccharts::OdeAction:
	//    {sccharts::OdeAction}
	//    annotations+=RestrictedTypeAnnotation*
	//    'ode' effects+=Effect
	//    ('label' label=STRING)?;
	public OdeActionElements getOdeActionAccess() {
		return pOdeAction;
	}
	
	public ParserRule getOdeActionRule() {
		return getOdeActionAccess().getRule();
	}
	
	//// ----- //
	////  SCL  //
	//// ----- //
	//// SCL has uses declarations with semicolon -> make it optional
	//@Override
	//Declaration returns kexpressions::Declaration:
	//    super | DeclarationWOSemicolon
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//@Override
	//Statement returns scl::Statement:
	//    // Only allow restricted set of SCL statements
	//    SclAssignment | SclPostfixAssignment | Label | SclEffectAssignment | Conditional | Goto | ScopeStatement | Return | ForLoop | WhileLoop
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//@Override
	//Effect returns keffects::Effect:
	//    super |
	//    CodeEffect;
	public EffectElements getEffectAccess() {
		return pEffect;
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//CodeEffect returns sccharts::CodeEffect:
	//    {sccharts::CodeEffect}
	//    (annotations += Annotation)*
	//    '{'
	//        (declarations+=Declaration)*
	//        (statements += Statement)*
	//    '}'
	//;
	public CodeEffectElements getCodeEffectAccess() {
		return pCodeEffect;
	}
	
	public ParserRule getCodeEffectRule() {
		return getCodeEffectAccess().getRule();
	}
	
	//// --------------- //
	////  Class/ Method  //
	//// --------------- //
	//@Override
	//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {sccharts::PolicyClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            policy=PolicyRegion?
	//            declarations+=DeclarationOrMethodWOSemicolon*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationWOSemicolon*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return pClassDeclarationWOSemicolon;
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//PolicyRegion returns sccharts::PolicyRegion:
	//    'policy' name=ID label=STRING?
	//    '{'
	//    declarations+=DeclarationWOSemicolon*
	//    states+=PolicyState+
	//    '}';
	public PolicyRegionElements getPolicyRegionAccess() {
		return pPolicyRegion;
	}
	
	public ParserRule getPolicyRegionRule() {
		return getPolicyRegionAccess().getRule();
	}
	
	//PolicyState returns sccharts::State:
	//    annotations+=Annotation*
	//    initial?='initial'?
	//    'state' name=ID label=STRING?
	//    outgoingTransitions+=PolicyTransition*;
	public PolicyStateElements getPolicyStateAccess() {
		return pPolicyState;
	}
	
	public ParserRule getPolicyStateRule() {
		return getPolicyStateAccess().getRule();
	}
	
	//PolicyTransition returns sccharts::Transition:
	//    {sccharts::Transition}
	//    annotations+=RestrictedTypeAnnotation*
	//    ('if' (trigger=LogicalOrExpression | trigger=ValuedObjectReference)
	//     (':' effects+=PureEmission (',' effects+=PureEmission)*)?
	//    )?
	//    'go' 'to'
	//    targetState=[sccharts::State|ID]
	//    ('label' label=STRING)?;
	public PolicyTransitionElements getPolicyTransitionAccess() {
		return pPolicyTransition;
	}
	
	public ParserRule getPolicyTransitionRule() {
		return getPolicyTransitionAccess().getRule();
	}
	
	//DeclarationOrMethodWithKeywordWOSemicolon returns kexpressions::Declaration:
	//    DeclarationWOSemicolon | KeywordMethodDeclarationWOSemicolon | EnumDeclarationWOSemicolon
	//;
	public DeclarationOrMethodWithKeywordWOSemicolonElements getDeclarationOrMethodWithKeywordWOSemicolonAccess() {
		return pDeclarationOrMethodWithKeywordWOSemicolon;
	}
	
	public ParserRule getDeclarationOrMethodWithKeywordWOSemicolonRule() {
		return getDeclarationOrMethodWithKeywordWOSemicolonAccess().getRule();
	}
	
	//KeywordMethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
	//    {scl::MethodImplementationDeclaration}
	//    annotations+=Annotation*
	//    ( access=AccessModifier? | override?='override' )
	//    'method'
	//    returnType=MethodReturnType?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    ('{'
	//        annotations+=CommentAnnotatonSL?
	//        declarations+=Declaration*
	//        statements+=Statement*
	//    '}')?
	//;
	public KeywordMethodDeclarationWOSemicolonElements getKeywordMethodDeclarationWOSemicolonAccess() {
		return pKeywordMethodDeclarationWOSemicolon;
	}
	
	public ParserRule getKeywordMethodDeclarationWOSemicolonRule() {
		return getKeywordMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	//@Override
	//ReferenceValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += ScopeParameter (',' parameters += ScopeParameter)* ')') | '()')? // This is the important difference to the original definition!
	//    ('=' initialValue=Expression)?
	//    ('label' label=STRING)?;
	public ReferenceValuedObjectElements getReferenceValuedObjectAccess() {
		return pReferenceValuedObject;
	}
	
	public ParserRule getReferenceValuedObjectRule() {
		return getReferenceValuedObjectAccess().getRule();
	}
	
	//@Override
	//SpecialAccessExpression returns kexpressions::SpecialAccessExpression:
	//    SCChartAccessExpression | StateAccessExpression;
	public SpecialAccessExpressionElements getSpecialAccessExpressionAccess() {
		return pSpecialAccessExpression;
	}
	
	public ParserRule getSpecialAccessExpressionRule() {
		return getSpecialAccessExpressionAccess().getRule();
	}
	
	//SCChartAccessExpression returns kexpressions::SpecialAccessExpression:
	//    access='scchart' '('
	//    target=[annotations::NamedObject|PrimeID]
	//    ')' '.' subReference=ValuedObjectReference;
	public SCChartAccessExpressionElements getSCChartAccessExpressionAccess() {
		return pSCChartAccessExpression;
	}
	
	public ParserRule getSCChartAccessExpressionRule() {
		return getSCChartAccessExpressionAccess().getRule();
	}
	
	//StateAccessExpression returns kexpressions::SpecialAccessExpression:
	//    access='state' '('
	//    ( (container=[sccharts::ControlflowRegion] | container=[sccharts::DataflowRegion]) '.')? target=[sccharts::State]
	//    ')'
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public StateAccessExpressionElements getStateAccessExpressionAccess() {
		return pStateAccessExpression;
	}
	
	public ParserRule getStateAccessExpressionRule() {
		return getStateAccessExpressionAccess().getRule();
	}
	
	//// ------------ //
	////  Enum Rules  //
	//// ------------ //
	//enum PreemptionType returns sccharts::PreemptionType:
	//    WEAK = 'go' | STRONG = 'abort' | TERMINATION = 'join';
	public PreemptionTypeElements getPreemptionTypeAccess() {
		return ePreemptionType;
	}
	
	public EnumRule getPreemptionTypeRule() {
		return getPreemptionTypeAccess().getRule();
	}
	
	//enum PreemptionActionType returns sccharts::PreemptionType:
	//    WEAK = 'weak' | STRONG = 'strong';
	public PreemptionActionTypeElements getPreemptionActionTypeAccess() {
		return ePreemptionActionType;
	}
	
	public EnumRule getPreemptionActionTypeRule() {
		return getPreemptionActionTypeAccess().getRule();
	}
	
	//enum DelayType returns sccharts::DelayType:
	//    UNDEFINED = 'undefined' | DELAYED = 'delayed' | IMMEDIATE = 'immediate' | AUTOMATIC = 'auto';
	public DelayTypeElements getDelayTypeAccess() {
		return eDelayType;
	}
	
	public EnumRule getDelayTypeRule() {
		return getDelayTypeAccess().getRule();
	}
	
	//enum HistoryType returns sccharts::HistoryType:
	//    RESET = 'reset' | SHALLOW = 'shallow history' | DEEP = 'history';
	public HistoryTypeElements getHistoryTypeAccess() {
		return eHistoryType;
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}
	
	//enum DeferredType returns sccharts::DeferredType:
	//    SHALLOW = 'deferred' | DEEP = 'deep deferred';
	public DeferredTypeElements getDeferredTypeAccess() {
		return eDeferredType;
	}
	
	public EnumRule getDeferredTypeRule() {
		return getDeferredTypeAccess().getRule();
	}
	
	//@Override
	//enum ValueType returns kexpressions::ValueType:
	//    PURE="pure" | BOOL="bool" |
	//    INT="int" | FLOAT="float" |
	//    STRING="string" |
	//    CLOCK="clock";
	public ValueTypeElements getValueTypeAccess() {
		return eValueType;
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	// // als: added clock for timed automata
	//// -------------- //
	////  Helper Rules  //
	//// -------------- //
	//// These are implicit keywords due to rules such as 'go to'
	//HiddenKeywords: 'go' | 'abort' | 'join' | 'shallow';
	public HiddenKeywordsElements getHiddenKeywordsAccess() {
		return pHiddenKeywords;
	}
	
	public ParserRule getHiddenKeywordsRule() {
		return getHiddenKeywordsAccess().getRule();
	}
	
	//SCLProgram returns SCLProgram:
	//    pragmas+=Pragma*
	//    modules+=Module*
	//;
	public SCLGrammarAccess.SCLProgramElements getSCLProgramAccess() {
		return gaSCL.getSCLProgramAccess();
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}
	
	//Module returns Module:
	//    (annotations += Annotation)*
	//    'module' name = ID ':'?
	//    (declarations += Declaration)*
	//    (statements += Statement)*
	//;
	public SCLGrammarAccess.ModuleElements getModuleAccess() {
		return gaSCL.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Pause returns Pause:
	//    {Pause}
	//    (annotations += Annotation)*
	//    'pause'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//Label returns Label:
	//    (annotations += Annotation)*
	//    name = ID ':'
	//;
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Goto returns Goto:
	//    (annotations += Annotation)*
	//    'goto' target = [Label|ID]
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//SclAssignment returns Assignment:
	//    (annotations += Annotation)*
	//    reference = ValuedObjectReference
	//    operator = AssignOperator
	//    expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclAssignmentElements getSclAssignmentAccess() {
		return gaSCL.getSclAssignmentAccess();
	}
	
	public ParserRule getSclAssignmentRule() {
		return getSclAssignmentAccess().getRule();
	}
	
	//SclPostfixAssignment returns Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclPostfixAssignmentElements getSclPostfixAssignmentAccess() {
		return gaSCL.getSclPostfixAssignmentAccess();
	}
	
	public ParserRule getSclPostfixAssignmentRule() {
		return getSclPostfixAssignmentAccess().getRule();
	}
	
	//SclEffectAssignment returns Assignment:
	//    (annotations += Annotation)*
	//    expression = (
	//        ReferenceCall
	//    |
	//        TextExpression
	//    |
	//        PrintCall
	//    |
	//        RandomizeCall
	//    |
	//        FunctionCall
	//    )
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclEffectAssignmentElements getSclEffectAssignmentAccess() {
		return gaSCL.getSclEffectAssignmentAccess();
	}
	
	public ParserRule getSclEffectAssignmentRule() {
		return getSclEffectAssignmentAccess().getRule();
	}
	
	//Return returns Return:
	//    (annotations += Annotation)*
	//    'return'
	//    expression = Expression
	//;
	public SCLGrammarAccess.ReturnElements getReturnAccess() {
		return gaSCL.getReturnAccess();
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Conditional returns Conditional:
	//    (annotations += Annotation)*
	//    'if' expression = (BoolScheduleExpression | AtomicExpression)
	//    '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    (else = ElseScope | semicolon?=';')?
	//;
	public SCLGrammarAccess.ConditionalElements getConditionalAccess() {
		return gaSCL.getConditionalAccess();
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//ElseScope returns ElseScope:
	//    {ElseScope}
	//    (annotations += Annotation)*
	//    'else' '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ElseScopeElements getElseScopeAccess() {
		return gaSCL.getElseScopeAccess();
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}
	
	//LegacyConditional returns Conditional:
	//    (annotations += Annotation)*
	//    'if' expression = BoolExpression
	//    'then'
	//    (statements += Statement)*
	//    (else = LegacyElseScope)?
	//    'end'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.LegacyConditionalElements getLegacyConditionalAccess() {
		return gaSCL.getLegacyConditionalAccess();
	}
	
	public ParserRule getLegacyConditionalRule() {
		return getLegacyConditionalAccess().getRule();
	}
	
	//LegacyElseScope returns ElseScope:
	//    {ElseScope}
	//    (annotations += Annotation)*
	//    'else'
	//    (statements += Statement)*
	//;
	public SCLGrammarAccess.LegacyElseScopeElements getLegacyElseScopeAccess() {
		return gaSCL.getLegacyElseScopeAccess();
	}
	
	public ParserRule getLegacyElseScopeRule() {
		return getLegacyElseScopeAccess().getRule();
	}
	
	//Thread returns Thread:
	//    {Thread}
	//    (
	//        (
	//            (annotations += Annotation)*
	//            '{'
	//            (declarations+=Declaration)*
	//            (statements += Statement)*
	//            '}'
	//        ) | (
	//            (statements += Statement)*
	//        )
	//    )
	//;
	public SCLGrammarAccess.ThreadElements getThreadAccess() {
		return gaSCL.getThreadAccess();
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}
	
	//Parallel returns Parallel:
	//    'fork'
	//    //(forkType=ForkType)?
	//    (
	//        threads += Thread
	//        (
	//            'par'
	//            threads += Thread
	//        )*
	//    )
	//    'join'
	//    //joinAny?='any'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ParallelElements getParallelAccess() {
		return gaSCL.getParallelAccess();
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	////enum ForkType returns ForkType:
	////    SEQUENTIAL = 'seq' | SEQUENTIAL_PREEMPTIVE = 'seq-abort';
	//ScopeStatement returns ScopeStatement:
	//    {ScopeStatement}
	//    (annotations += Annotation)*
	//    '{'
	//        (declarations+=Declaration)*
	//        (statements += Statement)*
	//    '}'
	//;
	public SCLGrammarAccess.ScopeStatementElements getScopeStatementAccess() {
		return gaSCL.getScopeStatementAccess();
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}
	
	//ForLoop returns Loop:
	//    'for' '('
	//    (initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)?
	//    ';'
	//    condition=BoolExpression
	//    ';'
	//    afterthought=EffectOrAssignment?
	//    ')' '{'
	//    (declarations += Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ForLoopElements getForLoopAccess() {
		return gaSCL.getForLoopAccess();
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//LoopDeclaration returns kexpressions::VariableDeclaration:
	//    annotations += Annotation*
	//    (
	//        (type = ValueType)
	//    |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects += ValuedObject
	//;
	public SCLGrammarAccess.LoopDeclarationElements getLoopDeclarationAccess() {
		return gaSCL.getLoopDeclarationAccess();
	}
	
	public ParserRule getLoopDeclarationRule() {
		return getLoopDeclarationAccess().getRule();
	}
	
	//EffectOrAssignment returns keffects::Assignment:
	//    (annotations += Annotation)*
	//    (
	//        reference = ValuedObjectReference
	//        operator = PostfixOperator
	//    |
	//        reference = ValuedObjectReference
	//        operator = AssignOperator
	//        expression = Expression
	//    |
	//        expression = Expression
	//    )
	//;
	public SCLGrammarAccess.EffectOrAssignmentElements getEffectOrAssignmentAccess() {
		return gaSCL.getEffectOrAssignmentAccess();
	}
	
	public ParserRule getEffectOrAssignmentRule() {
		return getEffectOrAssignmentAccess().getRule();
	}
	
	//WhileLoop returns Loop:
	//    'while' '('
	//    condition=BoolExpression
	//    ')' '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.WhileLoopElements getWhileLoopAccess() {
		return gaSCL.getWhileLoopAccess();
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ModuleCall returns ModuleCall:
	//    (annotations += Annotation)*
	//    'run'
	//    module = [Module|ID]
	//    ('(' parameters += ModuleCallParameter (',' parameters += ModuleCallParameter)* ')' | '()')?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ModuleCallElements getModuleCallAccess() {
		return gaSCL.getModuleCallAccess();
	}
	
	public ParserRule getModuleCallRule() {
		return getModuleCallAccess().getRule();
	}
	
	//ModuleCallParameter returns kexpressions::Parameter:
	//    ((accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression)
	//    ('to' explicitBinding = [kexpressions::ValuedObject|ID] ('[' explicitBindingIndices+=Expression ']')*)?
	//;
	public SCLGrammarAccess.ModuleCallParameterElements getModuleCallParameterAccess() {
		return gaSCL.getModuleCallParameterAccess();
	}
	
	public ParserRule getModuleCallParameterRule() {
		return getModuleCallParameterAccess().getRule();
	}
	
	//@Override
	//MethodDeclaration returns kexpressions::MethodDeclaration:
	//    {MethodImplementationDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    returnType=MethodReturnType?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    (
	//        ';'
	//        |
	//        '{'
	//        annotations+=CommentAnnotatonSL?
	//        declarations+=Declaration*
	//        statements+=Statement*
	//        '}'
	//    )
	//    annotations+=CommentAnnotatonSL?
	//;
	public SCLGrammarAccess.MethodDeclarationElements getMethodDeclarationAccess() {
		return gaSCL.getMethodDeclarationAccess();
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//@Override
	//MethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
	//    {MethodImplementationDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    returnType=MethodReturnType?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    ('{'
	//        annotations+=CommentAnnotatonSL?
	//        declarations+=Declaration*
	//        statements+=Statement*
	//    '}')?
	//;
	public SCLGrammarAccess.MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return gaSCL.getMethodDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language
	// * that is used for testing kexpressions and keffects.
	// */
	//// ------------ //
	////  KEXT Rules  //
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of
	//// test entities may follow.
	//Kext returns kext::Kext:
	//    scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    (name=ID)? '{'
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//    expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'expression'
	//    expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'json'
	//    expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z
	//Declaration returns kexpressions::Declaration:
	//    VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getKExtDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getKExtDeclarationRule() {
		return getKExtDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon returns kexpressions::Declaration:
	//    VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    const?='const'?
	//    input?='input'?
	//    output?='output'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        |
	//        signal?='signal'
	//        |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    const?='const'?
	//    input?='input'?
	//    output?='output'?
	//    global?='global'?
	//    static?='static'?
	//    ((signal?='signal'? type = ValueType) |
	//        signal?='signal' |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethod*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=Declaration*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod returns kexpressions::Declaration:
	//    Declaration | EnumDeclaration | MethodDeclaration
	//;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon returns kexpressions::Declaration:
	//    DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
	//;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//EnumDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType=STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//        ';'
	//    '}'
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationElements getEnumDeclarationAccess() {
		return gaKExt.getEnumDeclarationAccess();
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumMemberDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return gaKExt.getEnumMemberDeclarationAccess();
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}
	
	//EnumDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType = STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//    '}'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationWOSemicolonElements getEnumDeclarationWOSemicolonAccess() {
		return gaKExt.getEnumDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getEnumDeclarationWOSemicolonRule() {
		return getEnumDeclarationWOSemicolonAccess().getRule();
	}
	
	//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString returns kexpressions::ExternString:
	//    annotations+=TagAnnotation*
	//    code = STRING
	//;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//// ---
	////  Generics
	//// ---
	//GenericParameterDeclaration returns kexpressions::GenericParameterDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject
	//    (
	//        ('is' valueType = ValueType)
	//        |
	//        ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
	//    )?
	//;
	public KExtGrammarAccess.GenericParameterDeclarationElements getGenericParameterDeclarationAccess() {
		return gaKExt.getGenericParameterDeclarationAccess();
	}
	
	public ParserRule getGenericParameterDeclarationRule() {
		return getGenericParameterDeclarationAccess().getRule();
	}
	
	//GenericParameter returns kexpressions::Parameter:
	//    // Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
	//    // Here GenericTypeReference has precedence and has to cover certain
	//    // references to VOs. This needs to be specifically handled in the scoper and in the resource
	//    // by using the KExtGenericParamterConverter.
	//    // Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
	//    // index or sub reference specified, this is why there are special non-optional rules.
	//    expression = (ValueTypeReference
	//                 | AnyValue
	//                 | GenericParameter_GenericTypeReference_Parameterized
	//                 | GenericParameter_ValuedObjectReference_Array
	//                 | GenericParameter_ValuedObjectReference_Sub
	//                 | GenericTypeReference
	//                 | ValuedObjectReference)
	//;
	public KExtGrammarAccess.GenericParameterElements getGenericParameterAccess() {
		return gaKExt.getGenericParameterAccess();
	}
	
	public ParserRule getGenericParameterRule() {
		return getGenericParameterAccess().getRule();
	}
	
	//ValueTypeReference returns kexpressions::ValueTypeReference:
	//    valueType = ValueType
	//;
	public KExtGrammarAccess.ValueTypeReferenceElements getValueTypeReferenceAccess() {
		return gaKExt.getValueTypeReferenceAccess();
	}
	
	public ParserRule getValueTypeReferenceRule() {
		return getValueTypeReferenceAccess().getRule();
	}
	
	//GenericTypeReference returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//;
	public KExtGrammarAccess.GenericTypeReferenceElements getGenericTypeReferenceAccess() {
		return gaKExt.getGenericTypeReferenceAccess();
	}
	
	public ParserRule getGenericTypeReferenceRule() {
		return getGenericTypeReferenceAccess().getRule();
	}
	
	//// Special rules for GenericParameter parsing
	//GenericParameter_GenericTypeReference_Parameterized returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    '<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>' // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_GenericTypeReference_ParameterizedElements getGenericParameter_GenericTypeReference_ParameterizedAccess() {
		return gaKExt.getGenericParameter_GenericTypeReference_ParameterizedAccess();
	}
	
	public ParserRule getGenericParameter_GenericTypeReference_ParameterizedRule() {
		return getGenericParameter_GenericTypeReference_ParameterizedAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Array returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')+ // mandatory
	//    ('.' subReference=ValuedObjectReference)?
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_ArrayElements getGenericParameter_ValuedObjectReference_ArrayAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_ArrayAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_ArrayRule() {
		return getGenericParameter_ValuedObjectReference_ArrayAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Sub returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference) // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_SubElements getGenericParameter_ValuedObjectReference_SubAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_SubAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_SubRule() {
		return getGenericParameter_ValuedObjectReference_SubAccess().getRule();
	}
	
	//// ---
	////  Scheduling Directives
	//// ---
	//ScheduleDeclaration returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//    CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part.
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('=' initialValue=Expression)?
	//    ( 'combine'
	//      (combineOperator = CombineOperator)
	//    )?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	//NamespaceID returns ecore::EString:
	//  ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */
	//// ---------------- //
	////  KEffects Rules  //
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect returns keffects::Effect:
	//    Assignment |
	//    PostfixEffect |
	//    ValuedEmission | // Will consume some ReferenceCallEffects
	//    HostcodeEffect |
	//    ReferenceCallEffect |
	//    FunctionCallEffect |
	//    PrintCallEffect |
	//    RandomizeCallEffect |
	//    PureEmission;
	public KEffectsGrammarAccess.EffectElements getKEffectsEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getKEffectsEffectRule() {
		return getKEffectsEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals.
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted
	//// annotations defined in the annotations grammar.
	//PureEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    "(" newValue = Expression ")"
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission returns keffects::Emission:
	//    ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1
	//Assignment returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=AssignOperator expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I--
	//PostfixEffect returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//    (annotations+=Annotation)*
	//     text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect returns keffects::ReferenceCallEffect:
	//    (annotations+=Annotation)*
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//    (annotations+=Annotation)*
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.
	//PrintCallEffect returns keffects::PrintCallEffect:
	//    (annotations+=Annotation)*
	//    'print'
	//    ('(' parameters += Parameter (',' parameters += Parameter)* ')')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect returns keffects::RandomizeCallEffect:
	//    {keffects::RandomizeCallEffect}
	//    (annotations+=Annotation)*
	//    'randomize'
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//// ---------------- //
	////  KEffects Enums  //
	//// ---------------- //
	//// Assign Operator Enum
	//enum AssignOperator returns keffects::AssignOperator:
	//    ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//    ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//    ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//    ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//// Postfix Operator Enum
	//enum PostfixOperator returns keffects::AssignOperator:
	//    POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// -------------------- //
	////  KExpressions Rules  //
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */
	//// Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//    Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression returns Expression:
	//     (BoolExpression | ValuedExpression);
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason.
	//// One could skip directly to the next rule.
	//BoolExpression returns Expression:
	//    LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression returns Expression:
	//    LogicalAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
	//        ('||' subExpressions+=LogicalAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression returns Expression:
	//    BitwiseOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
	//        ('&&' subExpressions+=BitwiseOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//    BitwiseXOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
	//        ('|' subExpressions+=BitwiseXOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression returns Expression:
	//    BitwiseAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
	//        ('^' subExpressions+=BitwiseAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//    CompareOperation
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
	//        ('&' subExpressions+=CompareOperation)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares.
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//    NotOrValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        operator=CompareOperator subExpressions+=NotOrValuedExpression
	//    )?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression returns Expression:
	//    ValuedExpression
	//    | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression returns Expression:
	//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression returns Expression:
	//    {OperatorExpression} operator=NotOperator subExpressions+=(NotExpression)
	//    | BitwiseNotExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// Valued Expression Rule
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression returns Expression:
	//    ShiftExpressions;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//ShiftExpressions returns Expression:
	//    SumExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
	//        ('<<' subExpressions+=ShiftRightExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
	//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
	//        ('>>>' subExpressions+=SumExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression returns Expression:
	//    ProductExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//ProductExpression returns Expression:
	//    NegExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaKExpressions.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=MultOperator subExpressions+=NegExpression)
	//        ('*' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=DivOperator subExpressions+=NegExpression)
	//        ('/' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ModOperator subExpressions+=NegExpression)
	//        ('%' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary.
	//// Example: -i, -2
	//NegExpression returns Expression:
	//    {OperatorExpression} operator=SubOperator subExpressions+=(NegExpression)
	//    | TernaryOperation;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//TernaryOperation returns Expression:
	//    {OperatorExpression}
	//    subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
	//    | InitExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression returns Expression:
	//    FbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=InitOperator subExpressions+=FbyExpression)
	//        ('->' subExpressions+=FbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaKExpressions.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression returns Expression:
	//    SfbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=FbyOperator subExpressions+=SfbyExpression)
	//        ('fby' subExpressions+=SfbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaKExpressions.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression returns Expression:
	//    AtomicValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
	//        ('sfby' subExpressions+=AtomicValuedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicExpression returns Expression:
	//    BoolValue
	//    | '(' BoolExpression ')'
	//    | ReferenceCall
	//    | FunctionCall
	//    | RandomCall
	//    | RandomizeCall
	//    | ValuedObjectTestExpression // Last to allow detection of calls
	//    | SpecialAccessExpression
	//    | TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicValuedExpression returns Expression:
	//    IntValue
	//    | FloatValue
	//    | StringValue
	//    | VectorValue
	//    | NullValue
	//    | '(' ValuedExpression ')'
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.
	//BoolScheduleExpression returns Expression:
	//    LogicalOrExpression
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
	//    | ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID returns ecore::EString:
	//  ID ("'")*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference returns ValuedObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference returns ScheduleObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list.
	//ReferenceCall returns ReferenceCall:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (
	//        ('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()'
	//    );
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomCall returns RandomCall:
	//    {RandomCall}
	//    'random' ('()')?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomizeCall returns RandomizeCall:
	//    {RandomizeCall}
	//    'randomize' ('()')?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list.
	//FunctionCall returns FunctionCall:
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall returns PrintCall:
	//    {PrintCall}
	//    'print'
	//    (
	//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
	//    |
	//        '()'
	//    );
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter returns Parameter:
	//    (accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression returns TextExpression:
	//    (annotations += Annotation)*
	//    text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue returns IntValue:
	//    value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue returns FloatValue:
	//    value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue returns BoolValue:
	//    value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue returns VectorValue:
	//    '{' (
	//        values+=VectorValueMember (',' values+=VectorValueMember)*
	//        |
	//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference)
	//    ) '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember returns Expression:
	//    BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue returns IgnoreValue:
	//    {IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext.
	//AnyType returns ecore::EString:
	//    BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue returns Value:
	//    IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//// -------------------- //
	////  KExpressions Enums  //
	//// -------------------- //
	//enum CompareOperator returns OperatorType:
	//    EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//    PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//    BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//    BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//    BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//    BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//    NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//    ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//    SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//    MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//    MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//    DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//    VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//    LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//    LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//    SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//    SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//    SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//    POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//    POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//    CONDITIONAL = "?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//    INIT = "->";
	public KExpressionsGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaKExpressions.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//    FBY = "fby";
	public KExpressionsGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaKExpressions.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//    SFBY = "sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//    HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//    STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//    CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum EnumType returns ValueType:
	//    ENUM="enum";
	public KExpressionsGrammarAccess.EnumTypeElements getEnumTypeAccess() {
		return gaKExpressions.getEnumTypeAccess();
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//enum CombineOperator returns CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier returns AccessModifier:
	//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//    VOID="void" |
	//    BOOL="bool" | INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType returns ParameterAccessType:
	//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
	//;
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                //
	//// -------------------- //
	//JsonObjectValue returns JsonObjectValue:
	//    {JsonObjectValue}
	//    '{'
	//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
	//    '}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember returns JsonObjectMember:
	//    key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue returns JsonArrayValue:
	//    {JsonArrayValue}
	//    '['
	//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
	//    ']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue returns Value:
	//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue returns NullValue:
	//    {NullValue}
	//    'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma returns JsonPragma:
	//    '#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation returns JsonAnnotation:
	//    '@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma returns annotations::Pragma:
	//    super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// OO
	//ThisExpression returns ThisExpression:
	//    {ThisExpression}
	//    'this';
	public KExpressionsGrammarAccess.ThisExpressionElements getThisExpressionAccess() {
		return gaKExpressions.getThisExpressionAccess();
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//// ------------------------ //
	////  KExpressions Terminals  //
	//// ------------------------ //
	//// Hostcode Terminals
	//// Custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE returns ecore::EString:
	//    "`" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"`") )* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// ------------------ //
	////  Annotation Rules  //
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters!
	//Annotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.
	//Pragma returns Pragma:
	//    StringPragma |
	//    PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations.
	//// You can use this rule in derived grammars if you don't want to permit typed strings.
	//RestrictedTypeAnnotation returns Annotation:
	//    CommentAnnotation |
	//    RestrictedKeyStringValueAnnotation |
	//    RestrictedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in
	//// derived grammars if you don't want to permit unquoted strings.
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)
	//QuotedStringAnnotation returns Annotation:
	//    CommentAnnotation |
	//    QuotedKeyStringValueAnnotation |
	//    QuotedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation returns CommentAnnotation:
	//    values += COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL returns CommentAnnotation:
	//    values += SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation returns TagAnnotation:
	//    '@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag returns Pragma:
	//    '#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.
	//KeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma returns StringPragma:
	//    '#' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString returns ecore::EString:
	//    STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID returns ecore::EString:
	//  ID (('.'|'-') ID)* (('#') INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID returns ecore::EString:
	//  ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer returns ecore::EInt:
	//    '-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger returns ecore::EDouble:
	//    '-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//// ---------------------- //
	////  Annotation Terminals  //
	//// ---------------------- //
	//// Comment Annotation Terminal
	//// Custom terminal rule introducing semantic comments.
	//terminal COMMENT_ANNOTATION returns ecore::EString:
	//    '/**' -> '*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//// Multiline Comment Terminal
	//// Modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one.
	//@Override
	//terminal ML_COMMENT returns ecore::EString:
	//    '/*'!'*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION returns ecore::EString:
	//    '//*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '//' !'*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	}
	
	//// Number Terminal
	//terminal fragment NUMBER :
	//    '0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//// Integer Terminal
	//// An INT is a list of numbers.
	//@Override
	//terminal INT returns ecore::EInt:
	//    NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//// Float Terminal (internal precision: double!)
	//// Make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EDouble:
	//    NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
	//    NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//// Boolean Terminal
	//// Introduce boolean values.
	//terminal BOOLEAN returns ecore::EBooleanObject :
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//// String Terminal
	//// Custom terminal rule for strings, only use double quotes.
	//@Override
	//terminal STRING returns ecore::EString:
	//    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?(('_'?'a'..'z'|'_'?'A'..'Z')|'_''0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
