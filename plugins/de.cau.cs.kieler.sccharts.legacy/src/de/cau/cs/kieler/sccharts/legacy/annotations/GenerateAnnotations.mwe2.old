module de.cau.cs.kieler.sccharts.legacy.annotations.Annotations

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/de/cau/cs/kieler/sccharts/legacy/annotations/Annotations.xtext"
var file.extensions = "anno"
var projectName = "de.cau.cs.kieler.sccharts.legacy"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        platformUri = "${runtimeProject}/.."
        registerGeneratedEPackage = "de.cau.cs.kieler.sccharts.legacy.annotations.AnnotationsPackage"
        registerGenModelFile = "platform:/resource/de.cau.cs.kieler.sccharts.legacy/model/annotations.genmodel"
    }
    
    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"   
        language = {
            uri = grammarURI
            fileExtensions = file.extensions
            
            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment {}
            
            // generates Java API for the generated EPackages
            // fragment = ecore.EcoreGeneratorFragment {}

            // the serialization component
            // New Serializer 2.0
            fragment = serializer.SerializerFragment {}
            // Old serializer            
            fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
            
            // a custom ResourceFactory for use with EMF 
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }
                
            // the Antlr parser
            fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment {
                options = {
                    classSplitting = true
                    backtrack = false
                }
            }


            

            // java-based API for validation 
            fragment = validation.JavaValidatorFragment {
            //    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            //    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }
            
            // scoping and exporting API
            fragment = scoping.ImportURIScopingFragment {}
            // fragment = exporting.SimpleNamesFragment {} -- chsch: seems to be abolished
            
            // scoping and exporting API 
            
            // fragment = scoping.ImportNamespacesScopingFragment {}
            // fragment = exporting.QualifiedNamesFragment {}


            // formatter API 
            fragment = ecore2xtext.FormatterFragment {}

            // labeling API 
            fragment = labeling.LabelProviderFragment {}

            // outline API 
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

            // java-based API for content assistance 
            fragment = contentAssist.JavaBasedContentAssistFragment {}
            
            // antlr parser generator tailored for content assist 
            fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrUiGeneratorFragment { 
                options = {
                    classSplitting = true
                    backtrack = false
                }
            }
            
            
            
            
            

            //fragment = builder.BuilderIntegrationFragment {}

            // project wizard (optional) 
            
            // fragment = projectWizard.SimpleProjectWizardFragment {
            //    generatorProjectName = "${projectName}.generator" 
            //    modelFileExtension = file.extensions
            // }
            
            // quickfix API 
            fragment = quickfix.QuickfixProviderFragment {}            
        }
    }
}
