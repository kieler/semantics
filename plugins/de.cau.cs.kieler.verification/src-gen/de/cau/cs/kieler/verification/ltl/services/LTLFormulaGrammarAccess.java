/*
 * generated by Xtext
 */
package de.cau.cs.kieler.verification.ltl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LTLFormulaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LTLFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormulasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormulasOrParserRuleCall_0_0 = (RuleCall)cFormulasAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormulasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormulasOrParserRuleCall_1_1_0 = (RuleCall)cFormulasAssignment_1_1.eContents().get(0);
		
		//LTLFormula:
		//    formulas+=Or ('->' formulas+=Or)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//formulas+=Or ('->' formulas+=Or)*
		public Group getGroup() { return cGroup; }
		
		//formulas+=Or
		public Assignment getFormulasAssignment_0() { return cFormulasAssignment_0; }
		
		//Or
		public RuleCall getFormulasOrParserRuleCall_0_0() { return cFormulasOrParserRuleCall_0_0; }
		
		//('->' formulas+=Or)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//formulas+=Or
		public Assignment getFormulasAssignment_1_1() { return cFormulasAssignment_1_1; }
		
		//Or
		public RuleCall getFormulasOrParserRuleCall_1_1_0() { return cFormulasOrParserRuleCall_1_1_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.verification.ltl.LTLFormula.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormulasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormulasLastParserRuleCall_0_0 = (RuleCall)cFormulasAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormulasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormulasLastParserRuleCall_1_1_0 = (RuleCall)cFormulasAssignment_1_1.eContents().get(0);
		
		//And:
		//    formulas+=Last ('&&' formulas+=Last)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//formulas+=Last ('&&' formulas+=Last)*
		public Group getGroup() { return cGroup; }
		
		//formulas+=Last
		public Assignment getFormulasAssignment_0() { return cFormulasAssignment_0; }
		
		//Last
		public RuleCall getFormulasLastParserRuleCall_0_0() { return cFormulasLastParserRuleCall_0_0; }
		
		//('&&' formulas+=Last)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//formulas+=Last
		public Assignment getFormulasAssignment_1_1() { return cFormulasAssignment_1_1; }
		
		//Last
		public RuleCall getFormulasLastParserRuleCall_1_1_0() { return cFormulasLastParserRuleCall_1_1_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.verification.ltl.LTLFormula.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormulasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormulasAndParserRuleCall_0_0 = (RuleCall)cFormulasAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormulasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormulasAndParserRuleCall_1_1_0 = (RuleCall)cFormulasAssignment_1_1.eContents().get(0);
		
		//Or:
		//    formulas+=And ('||' formulas+=And)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//formulas+=And ('||' formulas+=And)*
		public Group getGroup() { return cGroup; }
		
		//formulas+=And
		public Assignment getFormulasAssignment_0() { return cFormulasAssignment_0; }
		
		//And
		public RuleCall getFormulasAndParserRuleCall_0_0() { return cFormulasAndParserRuleCall_0_0; }
		
		//('||' formulas+=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }
		
		//formulas+=And
		public Assignment getFormulasAssignment_1_1() { return cFormulasAssignment_1_1; }
		
		//And
		public RuleCall getFormulasAndParserRuleCall_1_1_0() { return cFormulasAndParserRuleCall_1_1_0; }
	}
	public class LastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.verification.ltl.LTLFormula.Last");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOperatorGKeyword_0_0_0 = (Keyword)cOperatorAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFormulasAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFormulasLTLFormulaParserRuleCall_0_2_0 = (RuleCall)cFormulasAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorFKeyword_1_0_0 = (Keyword)cOperatorAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFormulasAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFormulasLTLFormulaParserRuleCall_1_2_0 = (RuleCall)cFormulasAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperatorXKeyword_2_0_0 = (Keyword)cOperatorAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFormulasAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFormulasLTLFormulaParserRuleCall_2_2_0 = (RuleCall)cFormulasAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOperatorExclamationMarkKeyword_3_0_0 = (Keyword)cOperatorAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFormulasAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFormulasLTLFormulaParserRuleCall_3_2_0 = (RuleCall)cFormulasAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFormulasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFormulasLTLFormulaParserRuleCall_4_1_0 = (RuleCall)cFormulasAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cOperatorAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final Keyword cOperatorUKeyword_4_3_0 = (Keyword)cOperatorAssignment_4_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cFormulasAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cFormulasLTLFormulaParserRuleCall_4_5_0 = (RuleCall)cFormulasAssignment_4_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_4_7 = (Keyword)cGroup_4.eContents().get(7);
		private final Assignment cFormulasAssignment_4_8 = (Assignment)cGroup_4.eContents().get(8);
		private final RuleCall cFormulasLTLFormulaParserRuleCall_4_8_0 = (RuleCall)cFormulasAssignment_4_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_9 = (Keyword)cGroup_4.eContents().get(9);
		private final Assignment cFormulasAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cFormulasVariableParserRuleCall_5_0 = (RuleCall)cFormulasAssignment_5.eContents().get(0);
		
		//Last:
		//    operator='G' '(' formulas+=LTLFormula ')' |
		//    operator='F' '(' formulas+=LTLFormula ')' |
		//    operator='X' '(' formulas+=LTLFormula ')' |
		//    operator='!' '(' formulas+=LTLFormula ')' |
		//    '(' formulas+=LTLFormula ')' operator='U' '(' formulas+=LTLFormula ')'
		//    '(' formulas+=LTLFormula ')' |
		//    formulas+=Variable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operator='G' '(' formulas+=LTLFormula ')' |
		//operator='F' '(' formulas+=LTLFormula ')' |
		//operator='X' '(' formulas+=LTLFormula ')' |
		//operator='!' '(' formulas+=LTLFormula ')' |
		//'(' formulas+=LTLFormula ')' operator='U' '(' formulas+=LTLFormula ')'
		//'(' formulas+=LTLFormula ')' |
		//formulas+=Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operator='G' '(' formulas+=LTLFormula ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//operator='G'
		public Assignment getOperatorAssignment_0_0() { return cOperatorAssignment_0_0; }
		
		//'G'
		public Keyword getOperatorGKeyword_0_0_0() { return cOperatorGKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//formulas+=LTLFormula
		public Assignment getFormulasAssignment_0_2() { return cFormulasAssignment_0_2; }
		
		//LTLFormula
		public RuleCall getFormulasLTLFormulaParserRuleCall_0_2_0() { return cFormulasLTLFormulaParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//operator='F' '(' formulas+=LTLFormula ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//operator='F'
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//'F'
		public Keyword getOperatorFKeyword_1_0_0() { return cOperatorFKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//formulas+=LTLFormula
		public Assignment getFormulasAssignment_1_2() { return cFormulasAssignment_1_2; }
		
		//LTLFormula
		public RuleCall getFormulasLTLFormulaParserRuleCall_1_2_0() { return cFormulasLTLFormulaParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//operator='X' '(' formulas+=LTLFormula ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//operator='X'
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }
		
		//'X'
		public Keyword getOperatorXKeyword_2_0_0() { return cOperatorXKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//formulas+=LTLFormula
		public Assignment getFormulasAssignment_2_2() { return cFormulasAssignment_2_2; }
		
		//LTLFormula
		public RuleCall getFormulasLTLFormulaParserRuleCall_2_2_0() { return cFormulasLTLFormulaParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//operator='!' '(' formulas+=LTLFormula ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//operator='!'
		public Assignment getOperatorAssignment_3_0() { return cOperatorAssignment_3_0; }
		
		//'!'
		public Keyword getOperatorExclamationMarkKeyword_3_0_0() { return cOperatorExclamationMarkKeyword_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//formulas+=LTLFormula
		public Assignment getFormulasAssignment_3_2() { return cFormulasAssignment_3_2; }
		
		//LTLFormula
		public RuleCall getFormulasLTLFormulaParserRuleCall_3_2_0() { return cFormulasLTLFormulaParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' formulas+=LTLFormula ')' operator='U' '(' formulas+=LTLFormula ')'
		//'(' formulas+=LTLFormula ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//formulas+=LTLFormula
		public Assignment getFormulasAssignment_4_1() { return cFormulasAssignment_4_1; }
		
		//LTLFormula
		public RuleCall getFormulasLTLFormulaParserRuleCall_4_1_0() { return cFormulasLTLFormulaParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//operator='U'
		public Assignment getOperatorAssignment_4_3() { return cOperatorAssignment_4_3; }
		
		//'U'
		public Keyword getOperatorUKeyword_4_3_0() { return cOperatorUKeyword_4_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_4() { return cLeftParenthesisKeyword_4_4; }
		
		//formulas+=LTLFormula
		public Assignment getFormulasAssignment_4_5() { return cFormulasAssignment_4_5; }
		
		//LTLFormula
		public RuleCall getFormulasLTLFormulaParserRuleCall_4_5_0() { return cFormulasLTLFormulaParserRuleCall_4_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_6() { return cRightParenthesisKeyword_4_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_7() { return cLeftParenthesisKeyword_4_7; }
		
		//formulas+=LTLFormula
		public Assignment getFormulasAssignment_4_8() { return cFormulasAssignment_4_8; }
		
		//LTLFormula
		public RuleCall getFormulasLTLFormulaParserRuleCall_4_8_0() { return cFormulasLTLFormulaParserRuleCall_4_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_9() { return cRightParenthesisKeyword_4_9; }
		
		//formulas+=Variable
		public Assignment getFormulasAssignment_5() { return cFormulasAssignment_5; }
		
		//Variable
		public RuleCall getFormulasVariableParserRuleCall_5_0() { return cFormulasVariableParserRuleCall_5_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.verification.ltl.LTLFormula.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_0_1_0 = (Keyword)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_2_1_0 = (Keyword)cOperatorAssignment_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Assignment cOperatorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_3_1_0 = (Keyword)cOperatorAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_4_0_0 = (RuleCall)cNameAssignment_4_0.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignKeyword_4_1_0 = (Keyword)cOperatorAssignment_4_1.eContents().get(0);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_5_0_0 = (RuleCall)cNameAssignment_5_0.eContents().get(0);
		private final Assignment cOperatorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_5_1_0 = (Keyword)cOperatorAssignment_5_1.eContents().get(0);
		private final Assignment cValueAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_5_2_0 = (RuleCall)cValueAssignment_5_2.eContents().get(0);
		
		//Variable:
		//    // TODO: value could also be a number
		//    name=ID operator='==' value=ID |
		//    name=ID operator='!=' value=ID |
		//    name=ID operator='>=' value=ID |
		//    name=ID operator='<=' value=ID |
		//    name=ID operator='>' value=ID |
		//    name=ID operator='<' value=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO: value could also be a number
		//name=ID operator='==' value=ID |
		//name=ID operator='!=' value=ID |
		//name=ID operator='>=' value=ID |
		//name=ID operator='<=' value=ID |
		//name=ID operator='>' value=ID |
		//name=ID operator='<' value=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// TODO: value could also be a number
		//name=ID operator='==' value=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//// TODO: value could also be a number
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//operator='=='
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//'=='
		public Keyword getOperatorEqualsSignEqualsSignKeyword_0_1_0() { return cOperatorEqualsSignEqualsSignKeyword_0_1_0; }
		
		//value=ID
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_2_0() { return cValueIDTerminalRuleCall_0_2_0; }
		
		//name=ID operator='!=' value=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//operator='!='
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0; }
		
		//value=ID
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_2_0() { return cValueIDTerminalRuleCall_1_2_0; }
		
		//name=ID operator='>=' value=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//operator='>='
		public Assignment getOperatorAssignment_2_1() { return cOperatorAssignment_2_1; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_2_1_0() { return cOperatorGreaterThanSignEqualsSignKeyword_2_1_0; }
		
		//value=ID
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_2_2_0() { return cValueIDTerminalRuleCall_2_2_0; }
		
		//name=ID operator='<=' value=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }
		
		//operator='<='
		public Assignment getOperatorAssignment_3_1() { return cOperatorAssignment_3_1; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_3_1_0() { return cOperatorLessThanSignEqualsSignKeyword_3_1_0; }
		
		//value=ID
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_3_2_0() { return cValueIDTerminalRuleCall_3_2_0; }
		
		//name=ID operator='>' value=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//name=ID
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0_0() { return cNameIDTerminalRuleCall_4_0_0; }
		
		//operator='>'
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_4_1_0() { return cOperatorGreaterThanSignKeyword_4_1_0; }
		
		//value=ID
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_4_2_0() { return cValueIDTerminalRuleCall_4_2_0; }
		
		//name=ID operator='<' value=ID
		public Group getGroup_5() { return cGroup_5; }
		
		//name=ID
		public Assignment getNameAssignment_5_0() { return cNameAssignment_5_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0_0() { return cNameIDTerminalRuleCall_5_0_0; }
		
		//operator='<'
		public Assignment getOperatorAssignment_5_1() { return cOperatorAssignment_5_1; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_5_1_0() { return cOperatorLessThanSignKeyword_5_1_0; }
		
		//value=ID
		public Assignment getValueAssignment_5_2() { return cValueAssignment_5_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_5_2_0() { return cValueIDTerminalRuleCall_5_2_0; }
	}
	
	
	private final LTLFormulaElements pLTLFormula;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final LastElements pLast;
	private final VariableElements pVariable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LTLFormulaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLTLFormula = new LTLFormulaElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pLast = new LastElements();
		this.pVariable = new VariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.verification.ltl.LTLFormula".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LTLFormula:
	//    formulas+=Or ('->' formulas+=Or)*
	//;
	public LTLFormulaElements getLTLFormulaAccess() {
		return pLTLFormula;
	}
	
	public ParserRule getLTLFormulaRule() {
		return getLTLFormulaAccess().getRule();
	}
	
	//And:
	//    formulas+=Last ('&&' formulas+=Last)*
	//;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Or:
	//    formulas+=And ('||' formulas+=And)*
	//;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Last:
	//    operator='G' '(' formulas+=LTLFormula ')' |
	//    operator='F' '(' formulas+=LTLFormula ')' |
	//    operator='X' '(' formulas+=LTLFormula ')' |
	//    operator='!' '(' formulas+=LTLFormula ')' |
	//    '(' formulas+=LTLFormula ')' operator='U' '(' formulas+=LTLFormula ')'
	//    '(' formulas+=LTLFormula ')' |
	//    formulas+=Variable
	//;
	public LastElements getLastAccess() {
		return pLast;
	}
	
	public ParserRule getLastRule() {
		return getLastAccess().getRule();
	}
	
	//Variable:
	//    // TODO: value could also be a number
	//    name=ID operator='==' value=ID |
	//    name=ID operator='!=' value=ID |
	//    name=ID operator='>=' value=ID |
	//    name=ID operator='<=' value=ID |
	//    name=ID operator='>' value=ID |
	//    name=ID operator='<' value=ID
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
