/**
 * generated by Xtext
 */
package de.cau.cs.kieler.verification.ltl.lTLFormula;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>LTL Operator Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see de.cau.cs.kieler.verification.ltl.lTLFormula.LTLFormulaPackage#getLTLOperatorType()
 * @model
 * @generated
 */
public enum LTLOperatorType implements Enumerator
{
  /**
   * The '<em><b>GLOBAL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GLOBAL_VALUE
   * @generated
   * @ordered
   */
  GLOBAL(0, "GLOBAL", "G"),

  /**
   * The '<em><b>FINAL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FINAL_VALUE
   * @generated
   * @ordered
   */
  FINAL(1, "FINAL", "F"),

  /**
   * The '<em><b>NEXT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEXT_VALUE
   * @generated
   * @ordered
   */
  NEXT(2, "NEXT", "X"),

  /**
   * The '<em><b>UNTIL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UNTIL_VALUE
   * @generated
   * @ordered
   */
  UNTIL(3, "UNTIL", "U");

  /**
   * The '<em><b>GLOBAL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GLOBAL
   * @model literal="G"
   * @generated
   * @ordered
   */
  public static final int GLOBAL_VALUE = 0;

  /**
   * The '<em><b>FINAL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FINAL
   * @model literal="F"
   * @generated
   * @ordered
   */
  public static final int FINAL_VALUE = 1;

  /**
   * The '<em><b>NEXT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEXT
   * @model literal="X"
   * @generated
   * @ordered
   */
  public static final int NEXT_VALUE = 2;

  /**
   * The '<em><b>UNTIL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UNTIL
   * @model literal="U"
   * @generated
   * @ordered
   */
  public static final int UNTIL_VALUE = 3;

  /**
   * An array of all the '<em><b>LTL Operator Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final LTLOperatorType[] VALUES_ARRAY =
    new LTLOperatorType[]
    {
      GLOBAL,
      FINAL,
      NEXT,
      UNTIL,
    };

  /**
   * A public read-only list of all the '<em><b>LTL Operator Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<LTLOperatorType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>LTL Operator Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static LTLOperatorType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      LTLOperatorType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>LTL Operator Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static LTLOperatorType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      LTLOperatorType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>LTL Operator Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static LTLOperatorType get(int value)
  {
    switch (value)
    {
      case GLOBAL_VALUE: return GLOBAL;
      case FINAL_VALUE: return FINAL;
      case NEXT_VALUE: return NEXT;
      case UNTIL_VALUE: return UNTIL;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private LTLOperatorType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //LTLOperatorType
