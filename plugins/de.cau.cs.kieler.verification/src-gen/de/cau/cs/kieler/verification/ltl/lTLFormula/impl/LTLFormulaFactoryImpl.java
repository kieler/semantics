/**
 * generated by Xtext
 */
package de.cau.cs.kieler.verification.ltl.lTLFormula.impl;

import de.cau.cs.kieler.verification.ltl.lTLFormula.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LTLFormulaFactoryImpl extends EFactoryImpl implements LTLFormulaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LTLFormulaFactory init()
  {
    try
    {
      LTLFormulaFactory theLTLFormulaFactory = (LTLFormulaFactory)EPackage.Registry.INSTANCE.getEFactory(LTLFormulaPackage.eNS_URI);
      if (theLTLFormulaFactory != null)
      {
        return theLTLFormulaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LTLFormulaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LTLFormulaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LTLFormulaPackage.LTL_EXPRESSION: return createLTLExpression();
      case LTLFormulaPackage.OPERATOR_EXPRESSION: return createOperatorExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LTLFormulaPackage.LTL_OPERATOR_TYPE:
        return createLTLOperatorTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LTLFormulaPackage.LTL_OPERATOR_TYPE:
        return convertLTLOperatorTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTLExpression createLTLExpression()
  {
    LTLExpressionImpl ltlExpression = new LTLExpressionImpl();
    return ltlExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperatorExpression createOperatorExpression()
  {
    OperatorExpressionImpl operatorExpression = new OperatorExpressionImpl();
    return operatorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LTLOperatorType createLTLOperatorTypeFromString(EDataType eDataType, String initialValue)
  {
    LTLOperatorType result = LTLOperatorType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLTLOperatorTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTLFormulaPackage getLTLFormulaPackage()
  {
    return (LTLFormulaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LTLFormulaPackage getPackage()
  {
    return LTLFormulaPackage.eINSTANCE;
  }

} //LTLFormulaFactoryImpl
