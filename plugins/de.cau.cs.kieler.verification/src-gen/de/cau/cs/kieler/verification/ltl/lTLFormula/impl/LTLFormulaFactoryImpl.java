/**
 * generated by Xtext
 */
package de.cau.cs.kieler.verification.ltl.lTLFormula.impl;

import de.cau.cs.kieler.verification.ltl.lTLFormula.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LTLFormulaFactoryImpl extends EFactoryImpl implements LTLFormulaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LTLFormulaFactory init()
  {
    try
    {
      LTLFormulaFactory theLTLFormulaFactory = (LTLFormulaFactory)EPackage.Registry.INSTANCE.getEFactory(LTLFormulaPackage.eNS_URI);
      if (theLTLFormulaFactory != null)
      {
        return theLTLFormulaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LTLFormulaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LTLFormulaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LTLFormulaPackage.LTL_FORMULA: return createLTLFormula();
      case LTLFormulaPackage.AND: return createAnd();
      case LTLFormulaPackage.OR: return createOr();
      case LTLFormulaPackage.LAST: return createLast();
      case LTLFormulaPackage.VARIABLE: return createVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTLFormula createLTLFormula()
  {
    LTLFormulaImpl ltlFormula = new LTLFormulaImpl();
    return ltlFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Last createLast()
  {
    LastImpl last = new LastImpl();
    return last;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTLFormulaPackage getLTLFormulaPackage()
  {
    return (LTLFormulaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LTLFormulaPackage getPackage()
  {
    return LTLFormulaPackage.eINSTANCE;
  }

} //LTLFormulaFactoryImpl
