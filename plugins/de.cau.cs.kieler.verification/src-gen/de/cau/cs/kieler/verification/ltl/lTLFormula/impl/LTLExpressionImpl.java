/**
 * generated by Xtext
 */
package de.cau.cs.kieler.verification.ltl.lTLFormula.impl;

import de.cau.cs.kieler.kexpressions.Declaration;
import de.cau.cs.kieler.kexpressions.Expression;
import de.cau.cs.kieler.kexpressions.ScheduleObjectReference;

import de.cau.cs.kieler.verification.ltl.lTLFormula.LTLExpression;
import de.cau.cs.kieler.verification.ltl.lTLFormula.LTLFormulaPackage;
import de.cau.cs.kieler.verification.ltl.lTLFormula.LTLOperatorType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>LTL Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.verification.ltl.lTLFormula.impl.LTLExpressionImpl#getSchedule <em>Schedule</em>}</li>
 *   <li>{@link de.cau.cs.kieler.verification.ltl.lTLFormula.impl.LTLExpressionImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link de.cau.cs.kieler.verification.ltl.lTLFormula.impl.LTLExpressionImpl#getDeclarations <em>Declarations</em>}</li>
 *   <li>{@link de.cau.cs.kieler.verification.ltl.lTLFormula.impl.LTLExpressionImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link de.cau.cs.kieler.verification.ltl.lTLFormula.impl.LTLExpressionImpl#getSubExpressions <em>Sub Expressions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LTLExpressionImpl extends MinimalEObjectImpl.Container implements LTLExpression
{
  /**
   * The cached value of the '{@link #getSchedule() <em>Schedule</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchedule()
   * @generated
   * @ordered
   */
  protected EList<ScheduleObjectReference> schedule;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expression expr;

  /**
   * The cached value of the '{@link #getDeclarations() <em>Declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclarations()
   * @generated
   * @ordered
   */
  protected EList<Declaration> declarations;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final LTLOperatorType OPERATOR_EDEFAULT = LTLOperatorType.GLOBAL;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected LTLOperatorType operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getSubExpressions() <em>Sub Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubExpressions()
   * @generated
   * @ordered
   */
  protected EList<Expression> subExpressions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LTLExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LTLFormulaPackage.Literals.LTL_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ScheduleObjectReference> getSchedule()
  {
    if (schedule == null)
    {
      schedule = new EObjectContainmentEList<ScheduleObjectReference>(ScheduleObjectReference.class, this, LTLFormulaPackage.LTL_EXPRESSION__SCHEDULE);
    }
    return schedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expression newExpr, NotificationChain msgs)
  {
    Expression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LTLFormulaPackage.LTL_EXPRESSION__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr(Expression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LTLFormulaPackage.LTL_EXPRESSION__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LTLFormulaPackage.LTL_EXPRESSION__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLFormulaPackage.LTL_EXPRESSION__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Declaration> getDeclarations()
  {
    if (declarations == null)
    {
      declarations = new EObjectContainmentEList<Declaration>(Declaration.class, this, LTLFormulaPackage.LTL_EXPRESSION__DECLARATIONS);
    }
    return declarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTLOperatorType getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(LTLOperatorType newOperator)
  {
    LTLOperatorType oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLFormulaPackage.LTL_EXPRESSION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getSubExpressions()
  {
    if (subExpressions == null)
    {
      subExpressions = new EObjectContainmentEList<Expression>(Expression.class, this, LTLFormulaPackage.LTL_EXPRESSION__SUB_EXPRESSIONS);
    }
    return subExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LTLFormulaPackage.LTL_EXPRESSION__SCHEDULE:
        return ((InternalEList<?>)getSchedule()).basicRemove(otherEnd, msgs);
      case LTLFormulaPackage.LTL_EXPRESSION__EXPR:
        return basicSetExpr(null, msgs);
      case LTLFormulaPackage.LTL_EXPRESSION__DECLARATIONS:
        return ((InternalEList<?>)getDeclarations()).basicRemove(otherEnd, msgs);
      case LTLFormulaPackage.LTL_EXPRESSION__SUB_EXPRESSIONS:
        return ((InternalEList<?>)getSubExpressions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LTLFormulaPackage.LTL_EXPRESSION__SCHEDULE:
        return getSchedule();
      case LTLFormulaPackage.LTL_EXPRESSION__EXPR:
        return getExpr();
      case LTLFormulaPackage.LTL_EXPRESSION__DECLARATIONS:
        return getDeclarations();
      case LTLFormulaPackage.LTL_EXPRESSION__OPERATOR:
        return getOperator();
      case LTLFormulaPackage.LTL_EXPRESSION__SUB_EXPRESSIONS:
        return getSubExpressions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LTLFormulaPackage.LTL_EXPRESSION__SCHEDULE:
        getSchedule().clear();
        getSchedule().addAll((Collection<? extends ScheduleObjectReference>)newValue);
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__EXPR:
        setExpr((Expression)newValue);
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__DECLARATIONS:
        getDeclarations().clear();
        getDeclarations().addAll((Collection<? extends Declaration>)newValue);
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__OPERATOR:
        setOperator((LTLOperatorType)newValue);
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__SUB_EXPRESSIONS:
        getSubExpressions().clear();
        getSubExpressions().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LTLFormulaPackage.LTL_EXPRESSION__SCHEDULE:
        getSchedule().clear();
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__EXPR:
        setExpr((Expression)null);
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__DECLARATIONS:
        getDeclarations().clear();
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case LTLFormulaPackage.LTL_EXPRESSION__SUB_EXPRESSIONS:
        getSubExpressions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LTLFormulaPackage.LTL_EXPRESSION__SCHEDULE:
        return schedule != null && !schedule.isEmpty();
      case LTLFormulaPackage.LTL_EXPRESSION__EXPR:
        return expr != null;
      case LTLFormulaPackage.LTL_EXPRESSION__DECLARATIONS:
        return declarations != null && !declarations.isEmpty();
      case LTLFormulaPackage.LTL_EXPRESSION__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case LTLFormulaPackage.LTL_EXPRESSION__SUB_EXPRESSIONS:
        return subExpressions != null && !subExpressions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //LTLExpressionImpl
