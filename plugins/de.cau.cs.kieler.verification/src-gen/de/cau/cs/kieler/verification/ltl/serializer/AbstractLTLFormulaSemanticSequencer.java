/*
 * generated by Xtext
 */
package de.cau.cs.kieler.verification.ltl.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.verification.ltl.lTLFormula.And;
import de.cau.cs.kieler.verification.ltl.lTLFormula.LTLFormula;
import de.cau.cs.kieler.verification.ltl.lTLFormula.LTLFormulaPackage;
import de.cau.cs.kieler.verification.ltl.lTLFormula.Last;
import de.cau.cs.kieler.verification.ltl.lTLFormula.Or;
import de.cau.cs.kieler.verification.ltl.lTLFormula.Variable;
import de.cau.cs.kieler.verification.ltl.services.LTLFormulaGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public abstract class AbstractLTLFormulaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LTLFormulaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LTLFormulaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LTLFormulaPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case LTLFormulaPackage.LTL_FORMULA:
				sequence_LTLFormula(context, (LTLFormula) semanticObject); 
				return; 
			case LTLFormulaPackage.LAST:
				sequence_Last(context, (Last) semanticObject); 
				return; 
			case LTLFormulaPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case LTLFormulaPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     And returns And
	 *
	 * Constraint:
	 *     (formulas+=Last formulas+=Last*)
	 * </pre>
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LTLFormula returns LTLFormula
	 *
	 * Constraint:
	 *     (formulas+=Or formulas+=Or*)
	 * </pre>
	 */
	protected void sequence_LTLFormula(ISerializationContext context, LTLFormula semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Last returns Last
	 *
	 * Constraint:
	 *     (
	 *         (operator='G' formulas+=LTLFormula) | 
	 *         (operator='F' formulas+=LTLFormula) | 
	 *         (operator='X' formulas+=LTLFormula) | 
	 *         (operator='!' formulas+=LTLFormula) | 
	 *         (formulas+=LTLFormula operator='U' formulas+=LTLFormula formulas+=LTLFormula) | 
	 *         formulas+=Variable
	 *     )
	 * </pre>
	 */
	protected void sequence_Last(ISerializationContext context, Last semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Or returns Or
	 *
	 * Constraint:
	 *     (formulas+=And formulas+=And*)
	 * </pre>
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (
	 *         (name=ID operator='==' value=ID) | 
	 *         (name=ID operator='!=' value=ID) | 
	 *         (name=ID operator='&gt;=' value=ID) | 
	 *         (name=ID operator='&lt;=' value=ID) | 
	 *         (name=ID operator='&gt;' value=ID) | 
	 *         (name=ID operator='&lt;' value=ID)
	 *     )
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
