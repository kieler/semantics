/*
 * generated by Xtext
 */
grammar InternalLTLFormula;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package de.cau.cs.kieler.verification.ltl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.verification.ltl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.verification.ltl.services.LTLFormulaGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private LTLFormulaGrammarAccess grammarAccess;

    public InternalLTLFormulaParser(TokenStream input, LTLFormulaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LTLFormula";
   	}

   	@Override
   	protected LTLFormulaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLTLFormula
entryRuleLTLFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTLFormulaRule()); }
	iv_ruleLTLFormula=ruleLTLFormula
	{ $current=$iv_ruleLTLFormula.current; }
	EOF;

// Rule LTLFormula
ruleLTLFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getLTLFormulaAccess().getLTLExpressionParserRuleCall());
	}
	this_LTLExpression_0=ruleLTLExpression
	{
		$current = $this_LTLExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLTLExpression
entryRuleLTLExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTLExpressionRule()); }
	iv_ruleLTLExpression=ruleLTLExpression
	{ $current=$iv_ruleLTLExpression.current; }
	EOF;

// Rule LTLExpression
ruleLTLExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getLTLExpressionAccess().getLTLExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getLTLExpressionAccess().getOperatorGlobalOperatorEnumRuleCall_0_1_0_0());
						}
						lv_operator_1_1=ruleGlobalOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_1_1,
								"de.cau.cs.kieler.verification.ltl.LTLFormula.GlobalOperator");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLTLExpressionAccess().getOperatorFinalOperatorEnumRuleCall_0_1_0_1());
						}
						lv_operator_1_2=ruleFinalOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_1_2,
								"de.cau.cs.kieler.verification.ltl.LTLFormula.FinalOperator");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getLTLExpressionAccess().getOperatorNextOperatorEnumRuleCall_0_1_0_2());
						}
						lv_operator_1_3=ruleNextOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_1_3,
								"de.cau.cs.kieler.verification.ltl.LTLFormula.NextOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getLTLExpressionAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLTLExpressionAccess().getSubExpressionsLTLExpressionParserRuleCall_0_3_0());
					}
					lv_subExpressions_3_0=ruleLTLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_3_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getLTLExpressionAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getLTLExpressionAccess().getBoolExpressionParserRuleCall_1_0());
			}
			this_BoolExpression_5=ruleBoolExpression
			{
				$current = $this_BoolExpression_5.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getLTLExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0(),
							$current);
					}
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getLTLExpressionAccess().getOperatorUntilOperatorEnumRuleCall_1_1_1_0_0());
							}
							lv_operator_7_0=ruleUntilOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
								}
								set(
									$current,
									"operator",
									lv_operator_7_0,
									"de.cau.cs.kieler.verification.ltl.LTLFormula.UntilOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getLTLExpressionAccess().getSubExpressionsBoolExpressionParserRuleCall_1_1_1_1_0());
							}
							lv_subExpressions_8_0=ruleBoolExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_8_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.BoolExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				(
					otherlv_9='U'
					{
						newLeafNode(otherlv_9, grammarAccess.getLTLExpressionAccess().getUKeyword_1_1_2_0());
					}
					otherlv_10='('
					{
						newLeafNode(otherlv_10, grammarAccess.getLTLExpressionAccess().getLeftParenthesisKeyword_1_1_2_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getLTLExpressionAccess().getSubExpressionsBoolExpressionParserRuleCall_1_1_2_2_0());
							}
							lv_subExpressions_11_0=ruleBoolExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLTLExpressionRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_11_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.BoolExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_12=')'
					{
						newLeafNode(otherlv_12, grammarAccess.getLTLExpressionAccess().getRightParenthesisKeyword_1_1_2_3());
					}
				)*
			)?
		)
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBoolValueParserRuleCall_0());
		}
		this_BoolValue_0=ruleBoolValue
		{
			$current = $this_BoolValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAtomicExpressionAccess().getLTLExpressionParserRuleCall_1_1());
			}
			this_LTLExpression_2=ruleLTLExpression
			{
				$current = $this_LTLExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getReferenceCallParserRuleCall_2());
		}
		this_ReferenceCall_4=ruleReferenceCall
		{
			$current = $this_ReferenceCall_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getFunctionCallParserRuleCall_3());
		}
		this_FunctionCall_5=ruleFunctionCall
		{
			$current = $this_FunctionCall_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getRandomCallParserRuleCall_4());
		}
		this_RandomCall_6=ruleRandomCall
		{
			$current = $this_RandomCall_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getRandomizeCallParserRuleCall_5());
		}
		this_RandomizeCall_7=ruleRandomizeCall
		{
			$current = $this_RandomizeCall_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_6());
		}
		this_ValuedObjectTestExpression_8=ruleValuedObjectTestExpression
		{
			$current = $this_ValuedObjectTestExpression_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getSpecialAccessExpressionParserRuleCall_7());
		}
		this_SpecialAccessExpression_9=ruleSpecialAccessExpression
		{
			$current = $this_SpecialAccessExpression_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_8());
		}
		this_TextExpression_10=ruleTextExpression
		{
			$current = $this_TextExpression_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBoolExpressionParserRuleCall_0());
		}
		this_BoolExpression_0=ruleBoolExpression
		{
			$current = $this_BoolExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1());
		}
		this_ValuedExpression_1=ruleValuedExpression
		{
			$current = $this_ValuedExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolExpression
entryRuleBoolExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolExpressionRule()); }
	iv_ruleBoolExpression=ruleBoolExpression
	{ $current=$iv_ruleBoolExpression.current; }
	EOF;

// Rule BoolExpression
ruleBoolExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getBoolExpressionAccess().getLogicalOrExpressionParserRuleCall());
	}
	this_LogicalOrExpression_0=ruleLogicalOrExpression
	{
		$current = $this_LogicalOrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	iv_ruleLogicalOrExpression=ruleLogicalOrExpression
	{ $current=$iv_ruleLogicalOrExpression.current; }
	EOF;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0());
		}
		this_LogicalAndExpression_0=ruleLogicalAndExpression
		{
			$current = $this_LogicalAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleLogicalOrOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.LogicalOrOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleLogicalAndExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.LogicalAndExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='||'
				{
					newLeafNode(otherlv_4, grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleLogicalAndExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.LogicalAndExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	iv_ruleLogicalAndExpression=ruleLogicalAndExpression
	{ $current=$iv_ruleLogicalAndExpression.current; }
	EOF;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getBitwiseOrExpressionParserRuleCall_0());
		}
		this_BitwiseOrExpression_0=ruleBitwiseOrExpression
		{
			$current = $this_BitwiseOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleLogicalAndOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.LogicalAndOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsBitwiseOrExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleBitwiseOrExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseOrExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='&&'
				{
					newLeafNode(otherlv_4, grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsBitwiseOrExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleBitwiseOrExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseOrExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseOrExpressionRule()); }
	iv_ruleBitwiseOrExpression=ruleBitwiseOrExpression
	{ $current=$iv_ruleBitwiseOrExpression.current; }
	EOF;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseXOrExpressionParserRuleCall_0());
		}
		this_BitwiseXOrExpression_0=ruleBitwiseXOrExpression
		{
			$current = $this_BitwiseXOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getOperatorBitwiseOrOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleBitwiseOrOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseOrOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleBitwiseXOrExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseXOrExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='|'
				{
					newLeafNode(otherlv_4, grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleBitwiseXOrExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseXOrExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleBitwiseXOrExpression
entryRuleBitwiseXOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseXOrExpressionRule()); }
	iv_ruleBitwiseXOrExpression=ruleBitwiseXOrExpression
	{ $current=$iv_ruleBitwiseXOrExpression.current; }
	EOF;

// Rule BitwiseXOrExpression
ruleBitwiseXOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBitwiseXOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0());
		}
		this_BitwiseAndExpression_0=ruleBitwiseAndExpression
		{
			$current = $this_BitwiseAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseXOrExpressionAccess().getOperatorBitwiseXOrOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleBitwiseXOrOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseXOrExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseXOrOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsBitwiseAndExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleBitwiseAndExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseXOrExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseAndExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='^'
				{
					newLeafNode(otherlv_4, grammarAccess.getBitwiseXOrExpressionAccess().getCircumflexAccentKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsBitwiseAndExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleBitwiseAndExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseXOrExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseAndExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseAndExpressionRule()); }
	iv_ruleBitwiseAndExpression=ruleBitwiseAndExpression
	{ $current=$iv_ruleBitwiseAndExpression.current; }
	EOF;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getCompareOperationParserRuleCall_0());
		}
		this_CompareOperation_0=ruleCompareOperation
		{
			$current = $this_CompareOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getOperatorBitwiseAndOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleBitwiseAndOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseAndOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleCompareOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.CompareOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='&'
				{
					newLeafNode(otherlv_4, grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleCompareOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.CompareOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareOperationRule()); }
	iv_ruleCompareOperation=ruleCompareOperation
	{ $current=$iv_ruleCompareOperation.current; }
	EOF;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0());
		}
		this_NotOrValuedExpression_0=ruleNotOrValuedExpression
		{
			$current = $this_NotOrValuedExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleCompareOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompareOperationRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.CompareOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0());
					}
					lv_subExpressions_3_0=ruleNotOrValuedExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompareOperationRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_3_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.NotOrValuedExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotOrValuedExpressionRule()); }
	iv_ruleNotOrValuedExpression=ruleNotOrValuedExpression
	{ $current=$iv_ruleNotOrValuedExpression.current; }
	EOF;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0());
		}
		this_ValuedExpression_0=ruleValuedExpression
		{
			$current = $this_ValuedExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1());
		}
		this_NotExpression_1=ruleNotExpression
		{
			$current = $this_NotExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBitwiseNotExpression
entryRuleBitwiseNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitwiseNotExpressionRule()); }
	iv_ruleBitwiseNotExpression=ruleBitwiseNotExpression
	{ $current=$iv_ruleBitwiseNotExpression.current; }
	EOF;

// Rule BitwiseNotExpression
ruleBitwiseNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getBitwiseNotExpressionAccess().getOperatorExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseNotExpressionAccess().getOperatorBitwiseNotOperatorEnumRuleCall_0_1_0());
					}
					lv_operator_1_0=ruleBitwiseNotOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseNotExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseNotOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBitwiseNotExpressionAccess().getSubExpressionsBitwiseNotExpressionParserRuleCall_0_2_0());
					}
					lv_subExpressions_2_0=ruleBitwiseNotExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitwiseNotExpressionRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseNotExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBitwiseNotExpressionAccess().getAtomicExpressionParserRuleCall_1());
		}
		this_AtomicExpression_3=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	iv_ruleNotExpression=ruleNotExpression
	{ $current=$iv_ruleNotExpression.current; }
	EOF;

// Rule NotExpression
ruleNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0());
					}
					lv_operator_1_0=ruleNotOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.NotOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0());
					}
					lv_subExpressions_2_0=ruleNotExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotExpressionRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.NotExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNotExpressionAccess().getBitwiseNotExpressionParserRuleCall_1());
		}
		this_BitwiseNotExpression_3=ruleBitwiseNotExpression
		{
			$current = $this_BitwiseNotExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValuedExpression
entryRuleValuedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValuedExpressionRule()); }
	iv_ruleValuedExpression=ruleValuedExpression
	{ $current=$iv_ruleValuedExpression.current; }
	EOF;

// Rule ValuedExpression
ruleValuedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getValuedExpressionAccess().getShiftExpressionsParserRuleCall());
	}
	this_ShiftExpressions_0=ruleShiftExpressions
	{
		$current = $this_ShiftExpressions_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleShiftExpressions
entryRuleShiftExpressions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftExpressionsRule()); }
	iv_ruleShiftExpressions=ruleShiftExpressions
	{ $current=$iv_ruleShiftExpressions.current; }
	EOF;

// Rule ShiftExpressions
ruleShiftExpressions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getShiftExpressionsAccess().getSumExpressionParserRuleCall_0());
		}
		this_SumExpression_0=ruleSumExpression
		{
			$current = $this_SumExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftExpressionsAccess().getOperatorShiftLeftOperatorEnumRuleCall_1_0_1_0());
						}
						lv_operator_2_0=ruleShiftLeftOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ShiftLeftOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftExpressionsAccess().getSubExpressionsSumExpressionParserRuleCall_1_0_2_0());
						}
						lv_subExpressions_3_0=ruleSumExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4='<<'
					{
						newLeafNode(otherlv_4, grammarAccess.getShiftExpressionsAccess().getLessThanSignLessThanSignKeyword_1_0_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getShiftExpressionsAccess().getSubExpressionsSumExpressionParserRuleCall_1_0_3_1_0());
							}
							lv_subExpressions_5_0=ruleSumExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_5_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftExpressionsAccess().getOperatorShiftRightOperatorEnumRuleCall_1_1_1_0());
						}
						lv_operator_7_0=ruleShiftRightOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
							}
							set(
								$current,
								"operator",
								lv_operator_7_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftExpressionsAccess().getSubExpressionsSumExpressionParserRuleCall_1_1_2_0());
						}
						lv_subExpressions_8_0=ruleSumExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_8_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9='>>'
					{
						newLeafNode(otherlv_9, grammarAccess.getShiftExpressionsAccess().getGreaterThanSignGreaterThanSignKeyword_1_1_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getShiftExpressionsAccess().getSubExpressionsSumExpressionParserRuleCall_1_1_3_1_0());
							}
							lv_subExpressions_10_0=ruleSumExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_10_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftExpressionsAccess().getOperatorShiftRightUnsignedOperatorEnumRuleCall_1_2_1_0());
						}
						lv_operator_12_0=ruleShiftRightUnsignedOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
							}
							set(
								$current,
								"operator",
								lv_operator_12_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightUnsignedOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftExpressionsAccess().getSubExpressionsSumExpressionParserRuleCall_1_2_2_0());
						}
						lv_subExpressions_13_0=ruleSumExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_13_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_14='>>>'
					{
						newLeafNode(otherlv_14, grammarAccess.getShiftExpressionsAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getShiftExpressionsAccess().getSubExpressionsSumExpressionParserRuleCall_1_2_3_1_0());
							}
							lv_subExpressions_15_0=ruleSumExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getShiftExpressionsRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_15_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)*
	)
;

// Entry rule entryRuleShiftRightExpression
entryRuleShiftRightExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftRightExpressionRule()); }
	iv_ruleShiftRightExpression=ruleShiftRightExpression
	{ $current=$iv_ruleShiftRightExpression.current; }
	EOF;

// Rule ShiftRightExpression
ruleShiftRightExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getShiftRightExpressionAccess().getSumExpressionParserRuleCall_0());
		}
		this_SumExpression_0=ruleSumExpression
		{
			$current = $this_SumExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftRightExpressionAccess().getOperatorShiftRightOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleShiftRightOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftRightExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleShiftRightUnsignedExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftRightExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightUnsignedExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='>>'
				{
					newLeafNode(otherlv_4, grammarAccess.getShiftRightExpressionAccess().getGreaterThanSignGreaterThanSignKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleShiftRightUnsignedExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftRightExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightUnsignedExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleShiftRightUnsignedExpression
entryRuleShiftRightUnsignedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftRightUnsignedExpressionRule()); }
	iv_ruleShiftRightUnsignedExpression=ruleShiftRightUnsignedExpression
	{ $current=$iv_ruleShiftRightUnsignedExpression.current; }
	EOF;

// Rule ShiftRightUnsignedExpression
ruleShiftRightUnsignedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getShiftRightUnsignedExpressionAccess().getSumExpressionParserRuleCall_0());
		}
		this_SumExpression_0=ruleSumExpression
		{
			$current = $this_SumExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorShiftRightUnsignedOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleShiftRightUnsignedOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftRightUnsignedExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightUnsignedOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsSumExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleSumExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftRightUnsignedExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='>>>'
				{
					newLeafNode(otherlv_4, grammarAccess.getShiftRightUnsignedExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsSumExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleSumExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getShiftRightUnsignedExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleSumExpression
entryRuleSumExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumExpressionRule()); }
	iv_ruleSumExpression=ruleSumExpression
	{ $current=$iv_ruleSumExpression.current; }
	EOF;

// Rule SumExpression
ruleSumExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSumExpressionAccess().getProductExpressionParserRuleCall_0());
		}
		this_ProductExpression_0=ruleProductExpression
		{
			$current = $this_ProductExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSumExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_0_1_0());
						}
						lv_operator_2_0=ruleAddOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSumExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.AddOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSumExpressionAccess().getSubExpressionsProductExpressionParserRuleCall_1_0_2_0());
						}
						lv_subExpressions_3_0=ruleProductExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSumExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ProductExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4='+'
					{
						newLeafNode(otherlv_4, grammarAccess.getSumExpressionAccess().getPlusSignKeyword_1_0_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSumExpressionAccess().getSubExpressionsProductExpressionParserRuleCall_1_0_3_1_0());
							}
							lv_subExpressions_5_0=ruleProductExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSumExpressionRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_5_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.ProductExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSumExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_1_0());
						}
						lv_operator_7_0=ruleSubOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSumExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_7_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SubOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSumExpressionAccess().getSubExpressionsProductExpressionParserRuleCall_1_1_2_0());
						}
						lv_subExpressions_8_0=ruleProductExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSumExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_8_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ProductExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9='-'
					{
						newLeafNode(otherlv_9, grammarAccess.getSumExpressionAccess().getHyphenMinusKeyword_1_1_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSumExpressionAccess().getSubExpressionsProductExpressionParserRuleCall_1_1_3_1_0());
							}
							lv_subExpressions_10_0=ruleProductExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSumExpressionRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_10_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.ProductExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)*
	)
;

// Entry rule entryRuleProductExpression
entryRuleProductExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductExpressionRule()); }
	iv_ruleProductExpression=ruleProductExpression
	{ $current=$iv_ruleProductExpression.current; }
	EOF;

// Rule ProductExpression
ruleProductExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProductExpressionAccess().getNegExpressionParserRuleCall_0());
		}
		this_NegExpression_0=ruleNegExpression
		{
			$current = $this_NegExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_0_1_0());
						}
						lv_operator_2_0=ruleMultOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.MultOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_1_0_2_0());
						}
						lv_subExpressions_3_0=ruleNegExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4='*'
					{
						newLeafNode(otherlv_4, grammarAccess.getProductExpressionAccess().getAsteriskKeyword_1_0_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProductExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_1_0_3_1_0());
							}
							lv_subExpressions_5_0=ruleNegExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_5_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_1_0());
						}
						lv_operator_7_0=ruleDivOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_7_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.DivOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_1_1_2_0());
						}
						lv_subExpressions_8_0=ruleNegExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_8_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9='/'
					{
						newLeafNode(otherlv_9, grammarAccess.getProductExpressionAccess().getSolidusKeyword_1_1_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProductExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_1_1_3_1_0());
							}
							lv_subExpressions_10_0=ruleNegExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_10_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductExpressionAccess().getOperatorModOperatorEnumRuleCall_1_2_1_0());
						}
						lv_operator_12_0=ruleModOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_12_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ModOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_1_2_2_0());
						}
						lv_subExpressions_13_0=ruleNegExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_13_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_14='%'
					{
						newLeafNode(otherlv_14, grammarAccess.getProductExpressionAccess().getPercentSignKeyword_1_2_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProductExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_1_2_3_1_0());
							}
							lv_subExpressions_15_0=ruleNegExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProductExpressionRule());
								}
								add(
									$current,
									"subExpressions",
									lv_subExpressions_15_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)*
	)
;

// Entry rule entryRuleNegExpression
entryRuleNegExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegExpressionRule()); }
	iv_ruleNegExpression=ruleNegExpression
	{ $current=$iv_ruleNegExpression.current; }
	EOF;

// Rule NegExpression
ruleNegExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0());
					}
					lv_operator_1_0=ruleSubOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNegExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.SubOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0());
					}
					lv_subExpressions_2_0=ruleNegExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNegExpressionRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNegExpressionAccess().getTernaryOperationParserRuleCall_1());
		}
		this_TernaryOperation_3=ruleTernaryOperation
		{
			$current = $this_TernaryOperation_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTernaryOperation
entryRuleTernaryOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTernaryOperationRule()); }
	iv_ruleTernaryOperation=ruleTernaryOperation
	{ $current=$iv_ruleTernaryOperation.current; }
	EOF;

// Rule TernaryOperation
ruleTernaryOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTernaryOperationAccess().getOperatorExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0());
					}
					lv_subExpressions_1_0=ruleAtomicValuedExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTernaryOperationRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_1_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.AtomicValuedExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTernaryOperationAccess().getOperatorConditionalOperatorEnumRuleCall_0_2_0());
					}
					lv_operator_2_0=ruleConditionalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTernaryOperationRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.ConditionalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0());
					}
					lv_subExpressions_3_0=ruleAtomicValuedExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTernaryOperationRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_3_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.AtomicValuedExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getTernaryOperationAccess().getColonKeyword_0_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_4_1_0());
						}
						lv_subExpressions_5_0=ruleAtomicValuedExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTernaryOperationRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.AtomicValuedExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTernaryOperationAccess().getInitExpressionParserRuleCall_1());
		}
		this_InitExpression_6=ruleInitExpression
		{
			$current = $this_InitExpression_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInitExpression
entryRuleInitExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitExpressionRule()); }
	iv_ruleInitExpression=ruleInitExpression
	{ $current=$iv_ruleInitExpression.current; }
	EOF;

// Rule InitExpression
ruleInitExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getInitExpressionAccess().getFbyExpressionParserRuleCall_0());
		}
		this_FbyExpression_0=ruleFbyExpression
		{
			$current = $this_FbyExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getInitExpressionAccess().getOperatorInitOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleInitOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInitExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.InitOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getInitExpressionAccess().getSubExpressionsFbyExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleFbyExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInitExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.FbyExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='->'
				{
					newLeafNode(otherlv_4, grammarAccess.getInitExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInitExpressionAccess().getSubExpressionsFbyExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleFbyExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInitExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.FbyExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleFbyExpression
entryRuleFbyExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFbyExpressionRule()); }
	iv_ruleFbyExpression=ruleFbyExpression
	{ $current=$iv_ruleFbyExpression.current; }
	EOF;

// Rule FbyExpression
ruleFbyExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFbyExpressionAccess().getSfbyExpressionParserRuleCall_0());
		}
		this_SfbyExpression_0=ruleSfbyExpression
		{
			$current = $this_SfbyExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFbyExpressionAccess().getOperatorFbyOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleFbyOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFbyExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.FbyOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getFbyExpressionAccess().getSubExpressionsSfbyExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleSfbyExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFbyExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SfbyExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='fby'
				{
					newLeafNode(otherlv_4, grammarAccess.getFbyExpressionAccess().getFbyKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFbyExpressionAccess().getSubExpressionsSfbyExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleSfbyExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFbyExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SfbyExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleSfbyExpression
entryRuleSfbyExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSfbyExpressionRule()); }
	iv_ruleSfbyExpression=ruleSfbyExpression
	{ $current=$iv_ruleSfbyExpression.current; }
	EOF;

// Rule SfbyExpression
ruleSfbyExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSfbyExpressionAccess().getAtomicValuedExpressionParserRuleCall_0());
		}
		this_AtomicValuedExpression_0=ruleAtomicValuedExpression
		{
			$current = $this_AtomicValuedExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSfbyExpressionAccess().getOperatorSfbyOperatorEnumRuleCall_1_1_0_0());
						}
						lv_operator_2_0=ruleSfbyOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSfbyExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_2_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.SfbyOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSfbyExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleAtomicValuedExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSfbyExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.AtomicValuedExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_4='sfby'
				{
					newLeafNode(otherlv_4, grammarAccess.getSfbyExpressionAccess().getSfbyKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSfbyExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0());
						}
						lv_subExpressions_5_0=ruleAtomicValuedExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSfbyExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.AtomicValuedExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicValuedExpressionRule()); }
	iv_ruleAtomicValuedExpression=ruleAtomicValuedExpression
	{ $current=$iv_ruleAtomicValuedExpression.current; }
	EOF;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0());
		}
		this_IntValue_0=ruleIntValue
		{
			$current = $this_IntValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1());
		}
		this_FloatValue_1=ruleFloatValue
		{
			$current = $this_FloatValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getStringValueParserRuleCall_2());
		}
		this_StringValue_2=ruleStringValue
		{
			$current = $this_StringValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getVectorValueParserRuleCall_3());
		}
		this_VectorValue_3=ruleVectorValue
		{
			$current = $this_VectorValue_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getNullValueParserRuleCall_4());
		}
		this_NullValue_4=ruleNullValue
		{
			$current = $this_NullValue_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_5_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_5_1());
			}
			this_ValuedExpression_6=ruleValuedExpression
			{
				$current = $this_ValuedExpression_6.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_5_2());
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_6());
		}
		this_AtomicExpression_8=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValuedObjectTestExpressionRule()); }
	iv_ruleValuedObjectTestExpression=ruleValuedObjectTestExpression
	{ $current=$iv_ruleValuedObjectTestExpression.current; }
	EOF;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0_0());
						}
						lv_operator_1_1=rulePreOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_1_1,
								"de.cau.cs.kieler.kexpressions.KExpressions.PreOperator");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValOperatorEnumRuleCall_0_1_0_1());
						}
						lv_operator_1_2=ruleValOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_1_2,
								"de.cau.cs.kieler.kexpressions.KExpressions.ValOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0());
					}
					lv_subExpressions_3_0=ruleValuedObjectTestExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_3_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectTestExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getValuedObjectTestExpressionAccess().getCommaKeyword_0_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectReferenceParserRuleCall_0_4_1_0());
						}
						lv_subExpressions_5_0=ruleValuedObjectReference
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_5_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectReference");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_5());
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_1());
		}
		this_ValuedObjectReference_7=ruleValuedObjectReference
		{
			$current = $this_ValuedObjectReference_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSpecialAccessExpression
entryRuleSpecialAccessExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecialAccessExpressionRule()); }
	iv_ruleSpecialAccessExpression=ruleSpecialAccessExpression
	{ $current=$iv_ruleSpecialAccessExpression.current; }
	EOF;

// Rule SpecialAccessExpression
ruleSpecialAccessExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_access_0_0='static'
				{
					newLeafNode(lv_access_0_0, grammarAccess.getSpecialAccessExpressionAccess().getAccessStaticKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecialAccessExpressionRule());
					}
					setWithLastConsumed($current, "access", lv_access_0_0, "static");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSpecialAccessExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSpecialAccessExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getSpecialAccessExpressionAccess().getContainerNamedObjectCrossReference_2_0_0());
					}
					rulePrimeID
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getSpecialAccessExpressionAccess().getFullStopKeyword_2_1());
			}
		)?
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecialAccessExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSpecialAccessExpressionAccess().getTargetNamedObjectCrossReference_3_0());
				}
				rulePrimeID
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSpecialAccessExpressionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getSpecialAccessExpressionAccess().getFullStopKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecialAccessExpressionAccess().getSubReferenceValuedObjectReferenceParserRuleCall_6_0());
				}
				lv_subReference_7_0=ruleValuedObjectReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecialAccessExpressionRule());
					}
					set(
						$current,
						"subReference",
						lv_subReference_7_0,
						"de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimeID
entryRulePrimeID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimeIDRule()); }
	iv_rulePrimeID=rulePrimeID
	{ $current=$iv_rulePrimeID.current.getText(); }
	EOF;

// Rule PrimeID
rulePrimeID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getPrimeIDAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='\''
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPrimeIDAccess().getApostropheKeyword_1());
			}
		)*
	)
;

// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValuedObjectReferenceRule()); }
	iv_ruleValuedObjectReference=ruleValuedObjectReference
	{ $current=$iv_ruleValuedObjectReference.current; }
	EOF;

// Rule ValuedObjectReference
ruleValuedObjectReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValuedObjectReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0_0());
				}
				rulePrimeID
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getValuedObjectReferenceAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValuedObjectReferenceAccess().getIndicesExpressionParserRuleCall_1_1_0());
					}
					lv_indices_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValuedObjectReferenceRule());
						}
						add(
							$current,
							"indices",
							lv_indices_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getValuedObjectReferenceAccess().getRightSquareBracketKeyword_1_2());
			}
		)*
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getValuedObjectReferenceAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValuedObjectReferenceAccess().getSubReferenceValuedObjectReferenceParserRuleCall_2_1_0());
					}
					lv_subReference_5_0=ruleValuedObjectReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValuedObjectReferenceRule());
						}
						set(
							$current,
							"subReference",
							lv_subReference_5_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleScheduleObjectReference
entryRuleScheduleObjectReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScheduleObjectReferenceRule()); }
	iv_ruleScheduleObjectReference=ruleScheduleObjectReference
	{ $current=$iv_ruleScheduleObjectReference.current; }
	EOF;

// Rule ScheduleObjectReference
ruleScheduleObjectReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScheduleObjectReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0_0());
				}
				rulePrimeID
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_priority_1_0=RULE_INT
				{
					newLeafNode(lv_priority_1_0, grammarAccess.getScheduleObjectReferenceAccess().getPriorityINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScheduleObjectReferenceRule());
					}
					setWithLastConsumed(
						$current,
						"priority",
						lv_priority_1_0,
						"de.cau.cs.kieler.annotations.Annotations.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleReferenceCall
entryRuleReferenceCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceCallRule()); }
	iv_ruleReferenceCall=ruleReferenceCall
	{ $current=$iv_ruleReferenceCall.current; }
	EOF;

// Rule ReferenceCall
ruleReferenceCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReferenceCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getReferenceCallAccess().getValuedObjectValuedObjectCrossReference_0_0());
				}
				rulePrimeID
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getReferenceCallAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceCallAccess().getIndicesExpressionParserRuleCall_1_1_0());
					}
					lv_indices_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceCallRule());
						}
						add(
							$current,
							"indices",
							lv_indices_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getReferenceCallAccess().getRightSquareBracketKeyword_1_2());
			}
		)*
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getReferenceCallAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceCallAccess().getSubReferenceValuedObjectReferenceParserRuleCall_2_1_0());
					}
					lv_subReference_5_0=ruleValuedObjectReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceCallRule());
						}
						set(
							$current,
							"subReference",
							lv_subReference_5_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				otherlv_6='('
				{
					newLeafNode(otherlv_6, grammarAccess.getReferenceCallAccess().getLeftParenthesisKeyword_3_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReferenceCallAccess().getParametersParameterParserRuleCall_3_0_1_0());
						}
						lv_parameters_7_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReferenceCallRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_7_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_8=','
					{
						newLeafNode(otherlv_8, grammarAccess.getReferenceCallAccess().getCommaKeyword_3_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getReferenceCallAccess().getParametersParameterParserRuleCall_3_0_2_1_0());
							}
							lv_parameters_9_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getReferenceCallRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_9_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_10=')'
				{
					newLeafNode(otherlv_10, grammarAccess.getReferenceCallAccess().getRightParenthesisKeyword_3_0_3());
				}
			)
			    |
			otherlv_11='()'
			{
				newLeafNode(otherlv_11, grammarAccess.getReferenceCallAccess().getLeftParenthesisRightParenthesisKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRuleRandomCall
entryRuleRandomCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRandomCallRule()); }
	iv_ruleRandomCall=ruleRandomCall
	{ $current=$iv_ruleRandomCall.current; }
	EOF;

// Rule RandomCall
ruleRandomCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRandomCallAccess().getRandomCallAction_0(),
					$current);
			}
		)
		otherlv_1='random'
		{
			newLeafNode(otherlv_1, grammarAccess.getRandomCallAccess().getRandomKeyword_1());
		}
		(
			otherlv_2='()'
			{
				newLeafNode(otherlv_2, grammarAccess.getRandomCallAccess().getLeftParenthesisRightParenthesisKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleRandomizeCall
entryRuleRandomizeCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRandomizeCallRule()); }
	iv_ruleRandomizeCall=ruleRandomizeCall
	{ $current=$iv_ruleRandomizeCall.current; }
	EOF;

// Rule RandomizeCall
ruleRandomizeCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getRandomizeCallAccess().getRandomizeCallAction_0(),
					$current);
			}
		)
		otherlv_1='randomize'
		{
			newLeafNode(otherlv_1, grammarAccess.getRandomizeCallAccess().getRandomizeKeyword_1());
		}
		(
			otherlv_2='()'
			{
				newLeafNode(otherlv_2, grammarAccess.getRandomizeCallAccess().getLeftParenthesisRightParenthesisKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extern'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getExternKeyword_0());
		}
		(
			(
				lv_functionName_1_0=RULE_ID
				{
					newLeafNode(lv_functionName_1_0, grammarAccess.getFunctionCallAccess().getFunctionNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
					setWithLastConsumed(
						$current,
						"functionName",
						lv_functionName_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ID");
				}
			)
		)
		(
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_1_0());
						}
						lv_parameters_3_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_2_1_0());
							}
							lv_parameters_5_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_5_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_6=')'
				{
					newLeafNode(otherlv_6, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_2_0_3());
				}
			)
			    |
			otherlv_7='()'
			{
				newLeafNode(otherlv_7, grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getAccessTypeParameterAccessTypeEnumRuleCall_0_0_0());
					}
					lv_accessType_0_0=ruleParameterAccessType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"accessType",
							lv_accessType_0_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.ParameterAccessType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getExpressionValuedObjectReferenceParserRuleCall_0_1_0());
					}
					lv_expression_1_0=ruleValuedObjectReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"expression",
							lv_expression_1_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"de.cau.cs.kieler.kexpressions.KExpressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextExpressionRule()); }
	iv_ruleTextExpression=ruleTextExpression
	{ $current=$iv_ruleTextExpression.current; }
	EOF;

// Rule TextExpression
ruleTextExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTextExpressionAccess().getAnnotationsAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextExpressionRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"de.cau.cs.kieler.kexpressions.KExpressions.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_text_1_0=RULE_HOSTCODE
				{
					newLeafNode(lv_text_1_0, grammarAccess.getTextExpressionAccess().getTextHOSTCODETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"de.cau.cs.kieler.kexpressions.KExpressions.HOSTCODE");
				}
			)
		)
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current; }
	EOF;

// Rule IntValue
ruleIntValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"de.cau.cs.kieler.annotations.Annotations.INT");
			}
		)
	)
;

// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	iv_ruleFloatValue=ruleFloatValue
	{ $current=$iv_ruleFloatValue.current; }
	EOF;

// Rule FloatValue
ruleFloatValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_FLOAT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFloatValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"de.cau.cs.kieler.annotations.Annotations.FLOAT");
			}
		)
	)
;

// Entry rule entryRuleBoolValue
entryRuleBoolValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolValueRule()); }
	iv_ruleBoolValue=ruleBoolValue
	{ $current=$iv_ruleBoolValue.current; }
	EOF;

// Rule BoolValue
ruleBoolValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOLEAN
			{
				newLeafNode(lv_value_0_0, grammarAccess.getBoolValueAccess().getValueBOOLEANTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBoolValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"de.cau.cs.kieler.annotations.Annotations.BOOLEAN");
			}
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"de.cau.cs.kieler.annotations.Annotations.STRING");
			}
		)
	)
;

// Entry rule entryRuleVectorValue
entryRuleVectorValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVectorValueRule()); }
	iv_ruleVectorValue=ruleVectorValue
	{ $current=$iv_ruleVectorValue.current; }
	EOF;

// Rule VectorValue
ruleVectorValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getVectorValueAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getVectorValueAccess().getValuesVectorValueMemberParserRuleCall_1_0_0_0());
						}
						lv_values_1_0=ruleVectorValueMember
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVectorValueRule());
							}
							add(
								$current,
								"values",
								lv_values_1_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.VectorValueMember");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getVectorValueAccess().getCommaKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVectorValueAccess().getValuesVectorValueMemberParserRuleCall_1_0_1_1_0());
							}
							lv_values_3_0=ruleVectorValueMember
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVectorValueRule());
								}
								add(
									$current,
									"values",
									lv_values_3_0,
									"de.cau.cs.kieler.kexpressions.KExpressions.VectorValueMember");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getVectorValueAccess().getValuesIntValueParserRuleCall_1_1_0_0());
						}
						lv_values_4_0=ruleIntValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVectorValueRule());
							}
							add(
								$current,
								"values",
								lv_values_4_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.IntValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						lv_range_5_0='to'
						{
							newLeafNode(lv_range_5_0, grammarAccess.getVectorValueAccess().getRangeToKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVectorValueRule());
							}
							setWithLastConsumed($current, "range", lv_range_5_0 != null, "to");
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getVectorValueAccess().getValuesIntValueParserRuleCall_1_1_2_0_0());
							}
							lv_values_6_1=ruleIntValue
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVectorValueRule());
								}
								add(
									$current,
									"values",
									lv_values_6_1,
									"de.cau.cs.kieler.kexpressions.KExpressions.IntValue");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getVectorValueAccess().getValuesValuedObjectReferenceParserRuleCall_1_1_2_0_1());
							}
							lv_values_6_2=ruleValuedObjectReference
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVectorValueRule());
								}
								add(
									$current,
									"values",
									lv_values_6_2,
									"de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectReference");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getVectorValueAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleVectorValueMember
entryRuleVectorValueMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVectorValueMemberRule()); }
	iv_ruleVectorValueMember=ruleVectorValueMember
	{ $current=$iv_ruleVectorValueMember.current; }
	EOF;

// Rule VectorValueMember
ruleVectorValueMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVectorValueMemberAccess().getBoolExpressionParserRuleCall_0());
		}
		this_BoolExpression_0=ruleBoolExpression
		{
			$current = $this_BoolExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVectorValueMemberAccess().getValuedExpressionParserRuleCall_1());
		}
		this_ValuedExpression_1=ruleValuedExpression
		{
			$current = $this_ValuedExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVectorValueMemberAccess().getIgnoreValueParserRuleCall_2());
		}
		this_IgnoreValue_2=ruleIgnoreValue
		{
			$current = $this_IgnoreValue_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIgnoreValue
entryRuleIgnoreValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIgnoreValueRule()); }
	iv_ruleIgnoreValue=ruleIgnoreValue
	{ $current=$iv_ruleIgnoreValue.current; }
	EOF;

// Rule IgnoreValue
ruleIgnoreValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getIgnoreValueAccess().getIgnoreValueAction_0(),
					$current);
			}
		)
		otherlv_1='_'
		{
			newLeafNode(otherlv_1, grammarAccess.getIgnoreValueAccess().get_Keyword_1());
		}
	)
;

// Entry rule entryRuleAnyValue
entryRuleAnyValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnyValueRule()); }
	iv_ruleAnyValue=ruleAnyValue
	{ $current=$iv_ruleAnyValue.current; }
	EOF;

// Rule AnyValue
ruleAnyValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnyValueAccess().getIntValueParserRuleCall_0());
		}
		this_IntValue_0=ruleIntValue
		{
			$current = $this_IntValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnyValueAccess().getFloatValueParserRuleCall_1());
		}
		this_FloatValue_1=ruleFloatValue
		{
			$current = $this_FloatValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnyValueAccess().getBoolValueParserRuleCall_2());
		}
		this_BoolValue_2=ruleBoolValue
		{
			$current = $this_BoolValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnyValueAccess().getStringValueParserRuleCall_3());
		}
		this_StringValue_3=ruleStringValue
		{
			$current = $this_StringValue_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJsonObjectValue
entryRuleJsonObjectValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonObjectValueRule()); }
	iv_ruleJsonObjectValue=ruleJsonObjectValue
	{ $current=$iv_ruleJsonObjectValue.current; }
	EOF;

// Rule JsonObjectValue
ruleJsonObjectValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getJsonObjectValueAccess().getJsonObjectValueAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getJsonObjectValueAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJsonObjectValueAccess().getMembersJsonObjectMemberParserRuleCall_2_0_0());
					}
					lv_members_2_0=ruleJsonObjectMember
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJsonObjectValueRule());
						}
						add(
							$current,
							"members",
							lv_members_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.JsonObjectMember");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getJsonObjectValueAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getJsonObjectValueAccess().getMembersJsonObjectMemberParserRuleCall_2_1_1_0());
						}
						lv_members_4_0=ruleJsonObjectMember
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJsonObjectValueRule());
							}
							add(
								$current,
								"members",
								lv_members_4_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.JsonObjectMember");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getJsonObjectValueAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleJsonObjectMember
entryRuleJsonObjectMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonObjectMemberRule()); }
	iv_ruleJsonObjectMember=ruleJsonObjectMember
	{ $current=$iv_ruleJsonObjectMember.current; }
	EOF;

// Rule JsonObjectMember
ruleJsonObjectMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_STRING
				{
					newLeafNode(lv_key_0_0, grammarAccess.getJsonObjectMemberAccess().getKeySTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsonObjectMemberRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"de.cau.cs.kieler.annotations.Annotations.STRING");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getJsonObjectMemberAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJsonObjectMemberAccess().getValueJsonValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleJsonValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJsonObjectMemberRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"de.cau.cs.kieler.kexpressions.KExpressions.JsonValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJsonArrayValue
entryRuleJsonArrayValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonArrayValueRule()); }
	iv_ruleJsonArrayValue=ruleJsonArrayValue
	{ $current=$iv_ruleJsonArrayValue.current; }
	EOF;

// Rule JsonArrayValue
ruleJsonArrayValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getJsonArrayValueAccess().getJsonArrayValueAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getJsonArrayValueAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJsonArrayValueAccess().getElementsJsonValueParserRuleCall_2_0_0());
					}
					lv_elements_2_0=ruleJsonValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJsonArrayValueRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"de.cau.cs.kieler.kexpressions.KExpressions.JsonValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getJsonArrayValueAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getJsonArrayValueAccess().getElementsJsonValueParserRuleCall_2_1_1_0());
						}
						lv_elements_4_0=ruleJsonValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJsonArrayValueRule());
							}
							add(
								$current,
								"elements",
								lv_elements_4_0,
								"de.cau.cs.kieler.kexpressions.KExpressions.JsonValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getJsonArrayValueAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleJsonValue
entryRuleJsonValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonValueRule()); }
	iv_ruleJsonValue=ruleJsonValue
	{ $current=$iv_ruleJsonValue.current; }
	EOF;

// Rule JsonValue
ruleJsonValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getJsonObjectValueParserRuleCall_0());
		}
		this_JsonObjectValue_0=ruleJsonObjectValue
		{
			$current = $this_JsonObjectValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getJsonArrayValueParserRuleCall_1());
		}
		this_JsonArrayValue_1=ruleJsonArrayValue
		{
			$current = $this_JsonArrayValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getNullValueParserRuleCall_2());
		}
		this_NullValue_2=ruleNullValue
		{
			$current = $this_NullValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getJsonValueAccess().getAnyValueParserRuleCall_3());
		}
		this_AnyValue_3=ruleAnyValue
		{
			$current = $this_AnyValue_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNullValue
entryRuleNullValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullValueRule()); }
	iv_ruleNullValue=ruleNullValue
	{ $current=$iv_ruleNullValue.current; }
	EOF;

// Rule NullValue
ruleNullValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getNullValueAccess().getNullValueAction_0(),
					$current);
			}
		)
		otherlv_1='null'
		{
			newLeafNode(otherlv_1, grammarAccess.getNullValueAccess().getNullKeyword_1());
		}
	)
;

// Entry rule entryRuleJsonPragma
entryRuleJsonPragma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonPragmaRule()); }
	iv_ruleJsonPragma=ruleJsonPragma
	{ $current=$iv_ruleJsonPragma.current; }
	EOF;

// Rule JsonPragma
ruleJsonPragma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getJsonPragmaAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJsonPragmaAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJsonPragmaRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJsonPragmaAccess().getValueJsonObjectValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleJsonObjectValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJsonPragmaRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"de.cau.cs.kieler.kexpressions.KExpressions.JsonObjectValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJsonAnnotation
entryRuleJsonAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonAnnotationRule()); }
	iv_ruleJsonAnnotation=ruleJsonAnnotation
	{ $current=$iv_ruleJsonAnnotation.current; }
	EOF;

// Rule JsonAnnotation
ruleJsonAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getJsonAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJsonAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJsonAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getJsonAnnotationAccess().getValueJsonObjectValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleJsonObjectValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJsonAnnotationRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"de.cau.cs.kieler.kexpressions.KExpressions.JsonObjectValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current; }
	EOF;

// Rule Annotation
ruleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationParserRuleCall_0());
		}
		this_Annotation_0=superAnnotation
		{
			$current = $this_Annotation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationAccess().getJsonAnnotationParserRuleCall_1());
		}
		this_JsonAnnotation_1=ruleJsonAnnotation
		{
			$current = $this_JsonAnnotation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entrySuperAnnotation
entrySuperAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationsAnnotationRule()); }
	iv_superAnnotation=superAnnotation
	{ $current=$iv_superAnnotation.current; }
	EOF;

// Rule Annotation
superAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsAnnotationAccess().getCommentAnnotationParserRuleCall_0());
		}
		this_CommentAnnotation_0=ruleCommentAnnotation
		{
			$current = $this_CommentAnnotation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_1());
		}
		this_KeyStringValueAnnotation_1=ruleKeyStringValueAnnotation
		{
			$current = $this_KeyStringValueAnnotation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_2());
		}
		this_TypedKeyStringValueAnnotation_2=ruleTypedKeyStringValueAnnotation
		{
			$current = $this_TypedKeyStringValueAnnotation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsAnnotationAccess().getTagAnnotationParserRuleCall_3());
		}
		this_TagAnnotation_3=ruleTagAnnotation
		{
			$current = $this_TagAnnotation_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entrySuperPragma
entrySuperPragma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationsPragmaRule()); }
	iv_superPragma=superPragma
	{ $current=$iv_superPragma.current; }
	EOF;

// Rule Pragma
superPragma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsPragmaAccess().getStringPragmaParserRuleCall_0());
		}
		this_StringPragma_0=ruleStringPragma
		{
			$current = $this_StringPragma_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsPragmaAccess().getPragmaTagParserRuleCall_1());
		}
		this_PragmaTag_1=rulePragmaTag
		{
			$current = $this_PragmaTag_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entrySuperValuedAnnotation
entrySuperValuedAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationsValuedAnnotationRule()); }
	iv_superValuedAnnotation=superValuedAnnotation
	{ $current=$iv_superValuedAnnotation.current; }
	EOF;

// Rule ValuedAnnotation
superValuedAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsValuedAnnotationAccess().getCommentAnnotationParserRuleCall_0());
		}
		this_CommentAnnotation_0=ruleCommentAnnotation
		{
			$current = $this_CommentAnnotation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsValuedAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_1());
		}
		this_KeyStringValueAnnotation_1=ruleKeyStringValueAnnotation
		{
			$current = $this_KeyStringValueAnnotation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsValuedAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_2());
		}
		this_TypedKeyStringValueAnnotation_2=ruleTypedKeyStringValueAnnotation
		{
			$current = $this_TypedKeyStringValueAnnotation_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entrySuperQuotedStringAnnotation
entrySuperQuotedStringAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationsQuotedStringAnnotationRule()); }
	iv_superQuotedStringAnnotation=superQuotedStringAnnotation
	{ $current=$iv_superQuotedStringAnnotation.current; }
	EOF;

// Rule QuotedStringAnnotation
superQuotedStringAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsQuotedStringAnnotationAccess().getCommentAnnotationParserRuleCall_0());
		}
		this_CommentAnnotation_0=ruleCommentAnnotation
		{
			$current = $this_CommentAnnotation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsQuotedStringAnnotationAccess().getQuotedKeyStringValueAnnotationParserRuleCall_1());
		}
		this_QuotedKeyStringValueAnnotation_1=ruleQuotedKeyStringValueAnnotation
		{
			$current = $this_QuotedKeyStringValueAnnotation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsQuotedStringAnnotationAccess().getQuotedTypedKeyStringValueAnnotationParserRuleCall_2());
		}
		this_QuotedTypedKeyStringValueAnnotation_2=ruleQuotedTypedKeyStringValueAnnotation
		{
			$current = $this_QuotedTypedKeyStringValueAnnotation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAnnotationsQuotedStringAnnotationAccess().getTagAnnotationParserRuleCall_3());
		}
		this_TagAnnotation_3=ruleTagAnnotation
		{
			$current = $this_TagAnnotation_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentAnnotationRule()); }
	iv_ruleCommentAnnotation=ruleCommentAnnotation
	{ $current=$iv_ruleCommentAnnotation.current; }
	EOF;

// Rule CommentAnnotation
ruleCommentAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_values_0_0=RULE_COMMENT_ANNOTATION
			{
				newLeafNode(lv_values_0_0, grammarAccess.getCommentAnnotationAccess().getValuesCOMMENT_ANNOTATIONTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCommentAnnotationRule());
				}
				addWithLastConsumed(
					$current,
					"values",
					lv_values_0_0,
					"de.cau.cs.kieler.annotations.Annotations.COMMENT_ANNOTATION");
			}
		)
	)
;

// Entry rule entryRuleTagAnnotation
entryRuleTagAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTagAnnotationRule()); }
	iv_ruleTagAnnotation=ruleTagAnnotation
	{ $current=$iv_ruleTagAnnotation.current; }
	EOF;

// Rule TagAnnotation
ruleTagAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTagAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePragmaTag
entryRulePragmaTag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPragmaTagRule()); }
	iv_rulePragmaTag=rulePragmaTag
	{ $current=$iv_rulePragmaTag.current; }
	EOF;

// Rule PragmaTag
rulePragmaTag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getPragmaTagAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPragmaTagAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPragmaTagRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleKeyStringValueAnnotation
entryRuleKeyStringValueAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyStringValueAnnotationRule()); }
	iv_ruleKeyStringValueAnnotation=ruleKeyStringValueAnnotation
	{ $current=$iv_ruleKeyStringValueAnnotation.current; }
	EOF;

// Rule KeyStringValueAnnotation
ruleKeyStringValueAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_2_0());
				}
				lv_values_2_0=ruleEStringAllTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
					}
					add(
						$current,
						"values",
						lv_values_2_0,
						"de.cau.cs.kieler.annotations.Annotations.EStringAllTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getKeyStringValueAnnotationAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_3_1_0());
					}
					lv_values_4_0=ruleEStringAllTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
						}
						add(
							$current,
							"values",
							lv_values_4_0,
							"de.cau.cs.kieler.annotations.Annotations.EStringAllTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRestrictedKeyStringValueAnnotation
entryRuleRestrictedKeyStringValueAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestrictedKeyStringValueAnnotationRule()); }
	iv_ruleRestrictedKeyStringValueAnnotation=ruleRestrictedKeyStringValueAnnotation
	{ $current=$iv_ruleRestrictedKeyStringValueAnnotation.current; }
	EOF;

// Rule RestrictedKeyStringValueAnnotation
ruleRestrictedKeyStringValueAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestrictedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_2_0());
				}
				lv_values_2_0=ruleEStringBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestrictedKeyStringValueAnnotationRule());
					}
					add(
						$current,
						"values",
						lv_values_2_0,
						"de.cau.cs.kieler.annotations.Annotations.EStringBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_3_1_0());
					}
					lv_values_4_0=ruleEStringBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRestrictedKeyStringValueAnnotationRule());
						}
						add(
							$current,
							"values",
							lv_values_4_0,
							"de.cau.cs.kieler.annotations.Annotations.EStringBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStringPragma
entryRuleStringPragma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringPragmaRule()); }
	iv_ruleStringPragma=ruleStringPragma
	{ $current=$iv_ruleStringPragma.current; }
	EOF;

// Rule StringPragma
ruleStringPragma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringPragmaAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringPragmaAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringPragmaRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringPragmaAccess().getValuesEStringAllTypesParserRuleCall_2_0());
				}
				lv_values_2_0=ruleEStringAllTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringPragmaRule());
					}
					add(
						$current,
						"values",
						lv_values_2_0,
						"de.cau.cs.kieler.annotations.Annotations.EStringAllTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getStringPragmaAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringPragmaAccess().getValuesEStringAllTypesParserRuleCall_3_1_0());
					}
					lv_values_4_0=ruleEStringAllTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringPragmaRule());
						}
						add(
							$current,
							"values",
							lv_values_4_0,
							"de.cau.cs.kieler.annotations.Annotations.EStringAllTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTypedKeyStringValueAnnotation
entryRuleTypedKeyStringValueAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationRule()); }
	iv_ruleTypedKeyStringValueAnnotation=ruleTypedKeyStringValueAnnotation
	{ $current=$iv_ruleTypedKeyStringValueAnnotation.current; }
	EOF;

// Rule TypedKeyStringValueAnnotation
ruleTypedKeyStringValueAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0());
				}
				lv_type_3_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_5_0());
				}
				lv_values_5_0=ruleEStringAllTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
					}
					add(
						$current,
						"values",
						lv_values_5_0,
						"de.cau.cs.kieler.annotations.Annotations.EStringAllTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_6_1_0());
					}
					lv_values_7_0=ruleEStringAllTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
						}
						add(
							$current,
							"values",
							lv_values_7_0,
							"de.cau.cs.kieler.annotations.Annotations.EStringAllTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRestrictedTypedKeyStringValueAnnotation
entryRuleRestrictedTypedKeyStringValueAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()); }
	iv_ruleRestrictedTypedKeyStringValueAnnotation=ruleRestrictedTypedKeyStringValueAnnotation
	{ $current=$iv_ruleRestrictedTypedKeyStringValueAnnotation.current; }
	EOF;

// Rule RestrictedTypedKeyStringValueAnnotation
ruleRestrictedTypedKeyStringValueAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0());
				}
				lv_type_3_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_5_0());
				}
				lv_values_5_0=ruleEStringBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule());
					}
					add(
						$current,
						"values",
						lv_values_5_0,
						"de.cau.cs.kieler.annotations.Annotations.EStringBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_6_1_0());
					}
					lv_values_7_0=ruleEStringBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule());
						}
						add(
							$current,
							"values",
							lv_values_7_0,
							"de.cau.cs.kieler.annotations.Annotations.EStringBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleQuotedKeyStringValueAnnotation
entryRuleQuotedKeyStringValueAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuotedKeyStringValueAnnotationRule()); }
	iv_ruleQuotedKeyStringValueAnnotation=ruleQuotedKeyStringValueAnnotation
	{ $current=$iv_ruleQuotedKeyStringValueAnnotation.current; }
	EOF;

// Rule QuotedKeyStringValueAnnotation
ruleQuotedKeyStringValueAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuotedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_values_2_0=RULE_STRING
				{
					newLeafNode(lv_values_2_0, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuotedKeyStringValueAnnotationRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_2_0,
						"de.cau.cs.kieler.annotations.Annotations.STRING");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_values_4_0=RULE_STRING
					{
						newLeafNode(lv_values_4_0, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuotedKeyStringValueAnnotationRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_4_0,
							"de.cau.cs.kieler.annotations.Annotations.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleQuotedTypedKeyStringValueAnnotation
entryRuleQuotedTypedKeyStringValueAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()); }
	iv_ruleQuotedTypedKeyStringValueAnnotation=ruleQuotedTypedKeyStringValueAnnotation
	{ $current=$iv_ruleQuotedTypedKeyStringValueAnnotation.current; }
	EOF;

// Rule QuotedTypedKeyStringValueAnnotation
ruleQuotedTypedKeyStringValueAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0());
				}
				lv_type_3_0=ruleExtendedID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
		}
		(
			(
				lv_values_5_0=RULE_STRING
				{
					newLeafNode(lv_values_5_0, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_5_0,
						"de.cau.cs.kieler.annotations.Annotations.STRING");
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0());
			}
			(
				(
					lv_values_7_0=RULE_STRING
					{
						newLeafNode(lv_values_7_0, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_7_0,
							"de.cau.cs.kieler.annotations.Annotations.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEStringBoolean
entryRuleEStringBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringBooleanRule()); }
	iv_ruleEStringBoolean=ruleEStringBoolean
	{ $current=$iv_ruleEStringBoolean.current.getText(); }
	EOF;

// Rule EStringBoolean
ruleEStringBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringBooleanAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getEStringBooleanAccess().getExtendedIDParserRuleCall_1());
		}
		this_ExtendedID_1=ruleExtendedID
		{
			$current.merge(this_ExtendedID_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_BOOLEAN_2=RULE_BOOLEAN
		{
			$current.merge(this_BOOLEAN_2);
		}
		{
			newLeafNode(this_BOOLEAN_2, grammarAccess.getEStringBooleanAccess().getBOOLEANTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleEStringAllTypes
entryRuleEStringAllTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringAllTypesRule()); }
	iv_ruleEStringAllTypes=ruleEStringAllTypes
	{ $current=$iv_ruleEStringAllTypes.current.getText(); }
	EOF;

// Rule EStringAllTypes
ruleEStringAllTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAllTypesAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getEStringAllTypesAccess().getExtendedIDParserRuleCall_1());
		}
		this_ExtendedID_1=ruleExtendedID
		{
			$current.merge(this_ExtendedID_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_BOOLEAN_2=RULE_BOOLEAN
		{
			$current.merge(this_BOOLEAN_2);
		}
		{
			newLeafNode(this_BOOLEAN_2, grammarAccess.getEStringAllTypesAccess().getBOOLEANTerminalRuleCall_2());
		}
		    |
		{
			newCompositeNode(grammarAccess.getEStringAllTypesAccess().getIntegerParserRuleCall_3());
		}
		this_Integer_3=ruleInteger
		{
			$current.merge(this_Integer_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEStringAllTypesAccess().getFloategerParserRuleCall_4());
		}
		this_Floateger_4=ruleFloateger
		{
			$current.merge(this_Floateger_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); }
	iv_ruleExtendedID=ruleExtendedID
	{ $current=$iv_ruleExtendedID.current.getText(); }
	EOF;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0());
		}
		(
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0_0());
				}
				    |
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getExtendedIDAccess().getHyphenMinusKeyword_1_0_1());
				}
			)
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1());
			}
		)*
		(
			kw='#'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExtendedIDAccess().getNumberSignKeyword_2_0());
			}
			this_INT_5=RULE_INT
			{
				$current.merge(this_INT_5);
			}
			{
				newLeafNode(this_INT_5, grammarAccess.getExtendedIDAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	iv_ruleInteger=ruleInteger
	{ $current=$iv_ruleInteger.current.getText(); }
	EOF;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFloateger
entryRuleFloateger returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloategerRule()); }
	iv_ruleFloateger=ruleFloateger
	{ $current=$iv_ruleFloateger.current.getText(); }
	EOF;

// Rule Floateger
ruleFloateger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFloategerAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_FLOAT_1=RULE_FLOAT
		{
			$current.merge(this_FLOAT_1);
		}
		{
			newLeafNode(this_FLOAT_1, grammarAccess.getFloategerAccess().getFLOATTerminalRuleCall_1());
		}
	)
;

// Rule GlobalOperator
ruleGlobalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='G'
		{
			$current = grammarAccess.getGlobalOperatorAccess().getGLOBALEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getGlobalOperatorAccess().getGLOBALEnumLiteralDeclaration());
		}
	)
;

// Rule FinalOperator
ruleFinalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='F'
		{
			$current = grammarAccess.getFinalOperatorAccess().getFINALEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getFinalOperatorAccess().getFINALEnumLiteralDeclaration());
		}
	)
;

// Rule NextOperator
ruleNextOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='X'
		{
			$current = grammarAccess.getNextOperatorAccess().getNEXTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getNextOperatorAccess().getNEXTEnumLiteralDeclaration());
		}
	)
;

// Rule UntilOperator
ruleUntilOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='U'
		{
			$current = grammarAccess.getUntilOperatorAccess().getUNTILEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getUntilOperatorAccess().getUNTILEnumLiteralDeclaration());
		}
	)
;

// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='!='
			{
				$current = grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule PreOperator
rulePreOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='pre'
		{
			$current = grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration());
		}
	)
;

// Rule BitwiseNotOperator
ruleBitwiseNotOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='~'
		{
			$current = grammarAccess.getBitwiseNotOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getBitwiseNotOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration());
		}
	)
;

// Rule BitwiseXOrOperator
ruleBitwiseXOrOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='^'
		{
			$current = grammarAccess.getBitwiseXOrOperatorAccess().getBITWISE_XOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getBitwiseXOrOperatorAccess().getBITWISE_XOREnumLiteralDeclaration());
		}
	)
;

// Rule BitwiseOrOperator
ruleBitwiseOrOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='|'
		{
			$current = grammarAccess.getBitwiseOrOperatorAccess().getBITWISE_OREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getBitwiseOrOperatorAccess().getBITWISE_OREnumLiteralDeclaration());
		}
	)
;

// Rule BitwiseAndOperator
ruleBitwiseAndOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='&'
		{
			$current = grammarAccess.getBitwiseAndOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getBitwiseAndOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration());
		}
	)
;

// Rule NotOperator
ruleNotOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='!'
		{
			$current = grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration());
		}
	)
;

// Rule AddOperator
ruleAddOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='+'
		{
			$current = grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration());
		}
	)
;

// Rule SubOperator
ruleSubOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='-'
		{
			$current = grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration());
		}
	)
;

// Rule MultOperator
ruleMultOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='*'
		{
			$current = grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration());
		}
	)
;

// Rule ModOperator
ruleModOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='%'
		{
			$current = grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration());
		}
	)
;

// Rule DivOperator
ruleDivOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='/'
		{
			$current = grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration());
		}
	)
;

// Rule ValOperator
ruleValOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='val'
		{
			$current = grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration());
		}
	)
;

// Rule LogicalOrOperator
ruleLogicalOrOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='||'
		{
			$current = grammarAccess.getLogicalOrOperatorAccess().getLOGICAL_OREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getLogicalOrOperatorAccess().getLOGICAL_OREnumLiteralDeclaration());
		}
	)
;

// Rule LogicalAndOperator
ruleLogicalAndOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='&&'
		{
			$current = grammarAccess.getLogicalAndOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getLogicalAndOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration());
		}
	)
;

// Rule ShiftLeftOperator
ruleShiftLeftOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='<<'
		{
			$current = grammarAccess.getShiftLeftOperatorAccess().getSHIFT_LEFTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getShiftLeftOperatorAccess().getSHIFT_LEFTEnumLiteralDeclaration());
		}
	)
;

// Rule ShiftRightOperator
ruleShiftRightOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='>>'
		{
			$current = grammarAccess.getShiftRightOperatorAccess().getSHIFT_RIGHTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getShiftRightOperatorAccess().getSHIFT_RIGHTEnumLiteralDeclaration());
		}
	)
;

// Rule ShiftRightUnsignedOperator
ruleShiftRightUnsignedOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='>>>'
		{
			$current = grammarAccess.getShiftRightUnsignedOperatorAccess().getSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getShiftRightUnsignedOperatorAccess().getSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration());
		}
	)
;

// Rule ConditionalOperator
ruleConditionalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='?'
		{
			$current = grammarAccess.getConditionalOperatorAccess().getCONDITIONALEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getConditionalOperatorAccess().getCONDITIONALEnumLiteralDeclaration());
		}
	)
;

// Rule InitOperator
ruleInitOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='->'
		{
			$current = grammarAccess.getInitOperatorAccess().getINITEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getInitOperatorAccess().getINITEnumLiteralDeclaration());
		}
	)
;

// Rule FbyOperator
ruleFbyOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='fby'
		{
			$current = grammarAccess.getFbyOperatorAccess().getFBYEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getFbyOperatorAccess().getFBYEnumLiteralDeclaration());
		}
	)
;

// Rule SfbyOperator
ruleSfbyOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='sfby'
		{
			$current = grammarAccess.getSfbyOperatorAccess().getSFBYEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getSfbyOperatorAccess().getSFBYEnumLiteralDeclaration());
		}
	)
;

// Rule ParameterAccessType
ruleParameterAccessType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='&'
			{
				$current = grammarAccess.getParameterAccessTypeAccess().getCALL_BY_REFERENCEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getParameterAccessTypeAccess().getCALL_BY_REFERENCEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!&'
			{
				$current = grammarAccess.getParameterAccessTypeAccess().getPURE_OUTPUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getParameterAccessTypeAccess().getPURE_OUTPUTEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_HOSTCODE : '`' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'`')))* '`';

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT_ANNOTATION : '//*' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_SL_COMMENT : '//' ~('*') ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_NUMBER : '0'..'9';

RULE_INT : RULE_NUMBER+;

RULE_FLOAT : (RULE_NUMBER+ '.' RULE_NUMBER* (('e'|'E') ('+'|'-')? RULE_NUMBER+)? 'f'?|RULE_NUMBER+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? (('_'? 'a'..'z'|'_'? 'A'..'Z')|'_' '0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
