/*
 * generated by Xtext
 */
grammar InternalLTLFormula;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package de.cau.cs.kieler.verification.ltl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.verification.ltl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.verification.ltl.services.LTLFormulaGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private LTLFormulaGrammarAccess grammarAccess;

    public InternalLTLFormulaParser(TokenStream input, LTLFormulaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LTLFormula";
   	}

   	@Override
   	protected LTLFormulaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLTLFormula
entryRuleLTLFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTLFormulaRule()); }
	iv_ruleLTLFormula=ruleLTLFormula
	{ $current=$iv_ruleLTLFormula.current; }
	EOF;

// Rule LTLFormula
ruleLTLFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLTLFormulaAccess().getFormulasOrParserRuleCall_0_0());
				}
				lv_formulas_0_0=ruleOr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTLFormulaRule());
					}
					add(
						$current,
						"formulas",
						lv_formulas_0_0,
						"de.cau.cs.kieler.verification.ltl.LTLFormula.Or");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getLTLFormulaAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLTLFormulaAccess().getFormulasOrParserRuleCall_1_1_0());
					}
					lv_formulas_2_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLTLFormulaRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_2_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getFormulasLastParserRuleCall_0_0());
				}
				lv_formulas_0_0=ruleLast
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					add(
						$current,
						"formulas",
						lv_formulas_0_0,
						"de.cau.cs.kieler.verification.ltl.LTLFormula.Last");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='&&'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getFormulasLastParserRuleCall_1_1_0());
					}
					lv_formulas_2_0=ruleLast
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_2_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.Last");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrAccess().getFormulasAndParserRuleCall_0_0());
				}
				lv_formulas_0_0=ruleAnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrRule());
					}
					add(
						$current,
						"formulas",
						lv_formulas_0_0,
						"de.cau.cs.kieler.verification.ltl.LTLFormula.And");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='||'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getFormulasAndParserRuleCall_1_1_0());
					}
					lv_formulas_2_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_2_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLast
entryRuleLast returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLastRule()); }
	iv_ruleLast=ruleLast
	{ $current=$iv_ruleLast.current; }
	EOF;

// Rule Last
ruleLast returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_operator_0_0='G'
					{
						newLeafNode(lv_operator_0_0, grammarAccess.getLastAccess().getOperatorGKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLastRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_0, "G");
					}
				)
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getLastAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLastAccess().getFormulasLTLFormulaParserRuleCall_0_2_0());
					}
					lv_formulas_2_0=ruleLTLFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLastRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_2_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getLastAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			(
				(
					lv_operator_4_0='F'
					{
						newLeafNode(lv_operator_4_0, grammarAccess.getLastAccess().getOperatorFKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLastRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_4_0, "F");
					}
				)
			)
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getLastAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLastAccess().getFormulasLTLFormulaParserRuleCall_1_2_0());
					}
					lv_formulas_6_0=ruleLTLFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLastRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_6_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getLastAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			(
				(
					lv_operator_8_0='X'
					{
						newLeafNode(lv_operator_8_0, grammarAccess.getLastAccess().getOperatorXKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLastRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_8_0, "X");
					}
				)
			)
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getLastAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLastAccess().getFormulasLTLFormulaParserRuleCall_2_2_0());
					}
					lv_formulas_10_0=ruleLTLFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLastRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_10_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getLastAccess().getRightParenthesisKeyword_2_3());
			}
		)
		    |
		(
			(
				(
					lv_operator_12_0='!'
					{
						newLeafNode(lv_operator_12_0, grammarAccess.getLastAccess().getOperatorExclamationMarkKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLastRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_12_0, "!");
					}
				)
			)
			otherlv_13='('
			{
				newLeafNode(otherlv_13, grammarAccess.getLastAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLastAccess().getFormulasLTLFormulaParserRuleCall_3_2_0());
					}
					lv_formulas_14_0=ruleLTLFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLastRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_14_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15=')'
			{
				newLeafNode(otherlv_15, grammarAccess.getLastAccess().getRightParenthesisKeyword_3_3());
			}
		)
		    |
		(
			otherlv_16='('
			{
				newLeafNode(otherlv_16, grammarAccess.getLastAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLastAccess().getFormulasLTLFormulaParserRuleCall_4_1_0());
					}
					lv_formulas_17_0=ruleLTLFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLastRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_17_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getLastAccess().getRightParenthesisKeyword_4_2());
			}
			(
				(
					lv_operator_19_0='U'
					{
						newLeafNode(lv_operator_19_0, grammarAccess.getLastAccess().getOperatorUKeyword_4_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLastRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_19_0, "U");
					}
				)
			)
			otherlv_20='('
			{
				newLeafNode(otherlv_20, grammarAccess.getLastAccess().getLeftParenthesisKeyword_4_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLastAccess().getFormulasLTLFormulaParserRuleCall_4_5_0());
					}
					lv_formulas_21_0=ruleLTLFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLastRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_21_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_22=')'
			{
				newLeafNode(otherlv_22, grammarAccess.getLastAccess().getRightParenthesisKeyword_4_6());
			}
			otherlv_23='('
			{
				newLeafNode(otherlv_23, grammarAccess.getLastAccess().getLeftParenthesisKeyword_4_7());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLastAccess().getFormulasLTLFormulaParserRuleCall_4_8_0());
					}
					lv_formulas_24_0=ruleLTLFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLastRule());
						}
						add(
							$current,
							"formulas",
							lv_formulas_24_0,
							"de.cau.cs.kieler.verification.ltl.LTLFormula.LTLFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_25=')'
			{
				newLeafNode(otherlv_25, grammarAccess.getLastAccess().getRightParenthesisKeyword_4_9());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLastAccess().getFormulasVariableParserRuleCall_5_0());
				}
				lv_formulas_26_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLastRule());
					}
					add(
						$current,
						"formulas",
						lv_formulas_26_0,
						"de.cau.cs.kieler.verification.ltl.LTLFormula.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_operator_1_0='=='
					{
						newLeafNode(lv_operator_1_0, grammarAccess.getVariableAccess().getOperatorEqualsSignEqualsSignKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_1_0, "==");
					}
				)
			)
			(
				(
					lv_value_2_0=RULE_ID
					{
						newLeafNode(lv_value_2_0, grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_name_3_0=RULE_ID
					{
						newLeafNode(lv_name_3_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_operator_4_0='!='
					{
						newLeafNode(lv_operator_4_0, grammarAccess.getVariableAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_4_0, "!=");
					}
				)
			)
			(
				(
					lv_value_5_0=RULE_ID
					{
						newLeafNode(lv_value_5_0, grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_name_6_0=RULE_ID
					{
						newLeafNode(lv_name_6_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_6_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_operator_7_0='>='
					{
						newLeafNode(lv_operator_7_0, grammarAccess.getVariableAccess().getOperatorGreaterThanSignEqualsSignKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_7_0, ">=");
					}
				)
			)
			(
				(
					lv_value_8_0=RULE_ID
					{
						newLeafNode(lv_value_8_0, grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_8_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_name_9_0=RULE_ID
					{
						newLeafNode(lv_name_9_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_9_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_operator_10_0='<='
					{
						newLeafNode(lv_operator_10_0, grammarAccess.getVariableAccess().getOperatorLessThanSignEqualsSignKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_10_0, "<=");
					}
				)
			)
			(
				(
					lv_value_11_0=RULE_ID
					{
						newLeafNode(lv_value_11_0, grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_11_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_name_12_0=RULE_ID
					{
						newLeafNode(lv_name_12_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_12_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_operator_13_0='>'
					{
						newLeafNode(lv_operator_13_0, grammarAccess.getVariableAccess().getOperatorGreaterThanSignKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_13_0, ">");
					}
				)
			)
			(
				(
					lv_value_14_0=RULE_ID
					{
						newLeafNode(lv_value_14_0, grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_14_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_name_15_0=RULE_ID
					{
						newLeafNode(lv_name_15_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_15_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					lv_operator_16_0='<'
					{
						newLeafNode(lv_operator_16_0, grammarAccess.getVariableAccess().getOperatorLessThanSignKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_16_0, "<");
					}
				)
			)
			(
				(
					lv_value_17_0=RULE_ID
					{
						newLeafNode(lv_value_17_0, grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_5_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_17_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
