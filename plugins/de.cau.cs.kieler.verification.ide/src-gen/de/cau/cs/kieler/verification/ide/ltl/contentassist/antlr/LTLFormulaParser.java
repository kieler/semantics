/*
 * generated by Xtext
 */
package de.cau.cs.kieler.verification.ide.ltl.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.verification.ide.ltl.contentassist.antlr.internal.InternalLTLFormulaParser;
import de.cau.cs.kieler.verification.ltl.services.LTLFormulaGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LTLFormulaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LTLFormulaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LTLFormulaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLastAccess().getAlternatives(), "rule__Last__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getLTLFormulaAccess().getGroup(), "rule__LTLFormula__Group__0");
			builder.put(grammarAccess.getLTLFormulaAccess().getGroup_1(), "rule__LTLFormula__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getLastAccess().getGroup_0(), "rule__Last__Group_0__0");
			builder.put(grammarAccess.getLastAccess().getGroup_1(), "rule__Last__Group_1__0");
			builder.put(grammarAccess.getLastAccess().getGroup_2(), "rule__Last__Group_2__0");
			builder.put(grammarAccess.getLastAccess().getGroup_3(), "rule__Last__Group_3__0");
			builder.put(grammarAccess.getLastAccess().getGroup_4(), "rule__Last__Group_4__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_0(), "rule__Variable__Group_0__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1(), "rule__Variable__Group_1__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_2(), "rule__Variable__Group_2__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_3(), "rule__Variable__Group_3__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_4(), "rule__Variable__Group_4__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_5(), "rule__Variable__Group_5__0");
			builder.put(grammarAccess.getLTLFormulaAccess().getFormulasAssignment_0(), "rule__LTLFormula__FormulasAssignment_0");
			builder.put(grammarAccess.getLTLFormulaAccess().getFormulasAssignment_1_1(), "rule__LTLFormula__FormulasAssignment_1_1");
			builder.put(grammarAccess.getAndAccess().getFormulasAssignment_0(), "rule__And__FormulasAssignment_0");
			builder.put(grammarAccess.getAndAccess().getFormulasAssignment_1_1(), "rule__And__FormulasAssignment_1_1");
			builder.put(grammarAccess.getOrAccess().getFormulasAssignment_0(), "rule__Or__FormulasAssignment_0");
			builder.put(grammarAccess.getOrAccess().getFormulasAssignment_1_1(), "rule__Or__FormulasAssignment_1_1");
			builder.put(grammarAccess.getLastAccess().getOperatorAssignment_0_0(), "rule__Last__OperatorAssignment_0_0");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_0_2(), "rule__Last__FormulasAssignment_0_2");
			builder.put(grammarAccess.getLastAccess().getOperatorAssignment_1_0(), "rule__Last__OperatorAssignment_1_0");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_1_2(), "rule__Last__FormulasAssignment_1_2");
			builder.put(grammarAccess.getLastAccess().getOperatorAssignment_2_0(), "rule__Last__OperatorAssignment_2_0");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_2_2(), "rule__Last__FormulasAssignment_2_2");
			builder.put(grammarAccess.getLastAccess().getOperatorAssignment_3_0(), "rule__Last__OperatorAssignment_3_0");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_3_2(), "rule__Last__FormulasAssignment_3_2");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_4_1(), "rule__Last__FormulasAssignment_4_1");
			builder.put(grammarAccess.getLastAccess().getOperatorAssignment_4_3(), "rule__Last__OperatorAssignment_4_3");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_4_5(), "rule__Last__FormulasAssignment_4_5");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_4_8(), "rule__Last__FormulasAssignment_4_8");
			builder.put(grammarAccess.getLastAccess().getFormulasAssignment_5(), "rule__Last__FormulasAssignment_5");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_0_0(), "rule__Variable__NameAssignment_0_0");
			builder.put(grammarAccess.getVariableAccess().getOperatorAssignment_0_1(), "rule__Variable__OperatorAssignment_0_1");
			builder.put(grammarAccess.getVariableAccess().getValueAssignment_0_2(), "rule__Variable__ValueAssignment_0_2");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1_0(), "rule__Variable__NameAssignment_1_0");
			builder.put(grammarAccess.getVariableAccess().getOperatorAssignment_1_1(), "rule__Variable__OperatorAssignment_1_1");
			builder.put(grammarAccess.getVariableAccess().getValueAssignment_1_2(), "rule__Variable__ValueAssignment_1_2");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_2_0(), "rule__Variable__NameAssignment_2_0");
			builder.put(grammarAccess.getVariableAccess().getOperatorAssignment_2_1(), "rule__Variable__OperatorAssignment_2_1");
			builder.put(grammarAccess.getVariableAccess().getValueAssignment_2_2(), "rule__Variable__ValueAssignment_2_2");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_3_0(), "rule__Variable__NameAssignment_3_0");
			builder.put(grammarAccess.getVariableAccess().getOperatorAssignment_3_1(), "rule__Variable__OperatorAssignment_3_1");
			builder.put(grammarAccess.getVariableAccess().getValueAssignment_3_2(), "rule__Variable__ValueAssignment_3_2");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_4_0(), "rule__Variable__NameAssignment_4_0");
			builder.put(grammarAccess.getVariableAccess().getOperatorAssignment_4_1(), "rule__Variable__OperatorAssignment_4_1");
			builder.put(grammarAccess.getVariableAccess().getValueAssignment_4_2(), "rule__Variable__ValueAssignment_4_2");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_5_0(), "rule__Variable__NameAssignment_5_0");
			builder.put(grammarAccess.getVariableAccess().getOperatorAssignment_5_1(), "rule__Variable__OperatorAssignment_5_1");
			builder.put(grammarAccess.getVariableAccess().getValueAssignment_5_2(), "rule__Variable__ValueAssignment_5_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LTLFormulaGrammarAccess grammarAccess;

	@Override
	protected InternalLTLFormulaParser createParser() {
		InternalLTLFormulaParser result = new InternalLTLFormulaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LTLFormulaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LTLFormulaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
