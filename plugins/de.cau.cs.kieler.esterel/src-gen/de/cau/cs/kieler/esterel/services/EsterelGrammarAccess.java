/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EsterelGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EsterelProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPragmasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0 = (RuleCall)cPragmasAssignment_0.eContents().get(0);
		private final Assignment cModulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModulesEsterelModuleParserRuleCall_1_0 = (RuleCall)cModulesAssignment_1.eContents().get(0);
		
		////  root rule. an esterel file can contain multiple modules
		//EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
		//    pragmas+=Pragma*
		//    (modules+=EsterelModule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//pragmas+=Pragma*
		//(modules+=EsterelModule)*
		public Group getGroup() { return cGroup; }
		
		//pragmas+=Pragma*
		public Assignment getPragmasAssignment_0() { return cPragmasAssignment_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0() { return cPragmasPragmaParserRuleCall_0_0; }
		
		//(modules+=EsterelModule)*
		public Assignment getModulesAssignment_1() { return cModulesAssignment_1; }
		
		//EsterelModule
		public RuleCall getModulesEsterelModuleParserRuleCall_1_0() { return cModulesEsterelModuleParserRuleCall_1_0; }
	}
	public class EsterelModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsEsterelDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cEndKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cModuleKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		///*
		// * The numbering references:
		// *
		// *   The Esterel v5 Language Primer
		// *   Version v5 91
		// *   Gérard Berry
		// *   Centre de Mathématiques Appliquées
		// *   Ecole des Mines and INRIA
		// *   2004 Route des Lucioles
		// *   06565 Sophia-Antipolis
		// *   berry@sophia.inria.fr
		// *   June 5, 2000
		// *
		// */
		///* ###################################################
		// * ###                 7.2 Modules                 ###
		// * ###################################################
		// */
		//// = module: a module consists of an interface and a body
		//// -------------------------------------
		//EsterelModule returns scl::Module:
		//    (annotations += Annotation)*
		//    "module" name=ID ":"
		//    (declarations+=EsterelDeclaration)*
		//    (statements+=EsterelParallel)?
		//    ("end" "module" | ".");
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"module" name=ID ":"
		//(declarations+=EsterelDeclaration)*
		//(statements+=EsterelParallel)?
		//("end" "module" | ".")
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(declarations+=EsterelDeclaration)*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//EsterelDeclaration
		public RuleCall getDeclarationsEsterelDeclarationParserRuleCall_4_0() { return cDeclarationsEsterelDeclarationParserRuleCall_4_0; }
		
		//(statements+=EsterelParallel)?
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_5_0() { return cStatementsEsterelParallelParserRuleCall_5_0; }
		
		//("end" "module" | ".")
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//"end" "module"
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//"end"
		public Keyword getEndKeyword_6_0_0() { return cEndKeyword_6_0_0; }
		
		//"module"
		public Keyword getModuleKeyword_6_0_1() { return cModuleKeyword_6_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_6_1() { return cFullStopKeyword_6_1; }
	}
	public class EsterelDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInputOutputDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReturnDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSensorDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstantDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRelationDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTaskDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFunctionDeclarationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cProcedureDeclarationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		///* ###################################################
		// * ###        7.3 Interface Declaration            ###
		// * ###################################################
		// */
		//EsterelDeclaration:
		//    InputDeclaration
		//    | OutputDeclaration
		//    | InputOutputDeclaration
		//    | ReturnDeclaration
		//    | TypeDeclaration
		//    | SensorDeclaration
		//    | ConstantDeclaration
		//    | RelationDeclaration
		//    | TaskDeclaration
		//    | FunctionDeclaration
		//    | ProcedureDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//InputDeclaration
		//| OutputDeclaration
		//| InputOutputDeclaration
		//| ReturnDeclaration
		//| TypeDeclaration
		//| SensorDeclaration
		//| ConstantDeclaration
		//| RelationDeclaration
		//| TaskDeclaration
		//| FunctionDeclaration
		//| ProcedureDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InputDeclaration
		public RuleCall getInputDeclarationParserRuleCall_0() { return cInputDeclarationParserRuleCall_0; }
		
		//OutputDeclaration
		public RuleCall getOutputDeclarationParserRuleCall_1() { return cOutputDeclarationParserRuleCall_1; }
		
		//InputOutputDeclaration
		public RuleCall getInputOutputDeclarationParserRuleCall_2() { return cInputOutputDeclarationParserRuleCall_2; }
		
		//ReturnDeclaration
		public RuleCall getReturnDeclarationParserRuleCall_3() { return cReturnDeclarationParserRuleCall_3; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_4() { return cTypeDeclarationParserRuleCall_4; }
		
		//SensorDeclaration
		public RuleCall getSensorDeclarationParserRuleCall_5() { return cSensorDeclarationParserRuleCall_5; }
		
		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_6() { return cConstantDeclarationParserRuleCall_6; }
		
		//RelationDeclaration
		public RuleCall getRelationDeclarationParserRuleCall_7() { return cRelationDeclarationParserRuleCall_7; }
		
		//TaskDeclaration
		public RuleCall getTaskDeclarationParserRuleCall_8() { return cTaskDeclarationParserRuleCall_8; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_9() { return cFunctionDeclarationParserRuleCall_9; }
		
		//ProcedureDeclaration
		public RuleCall getProcedureDeclarationParserRuleCall_10() { return cProcedureDeclarationParserRuleCall_10; }
	}
	public class TypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCombineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_1_1_0_0 = (RuleCall)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_1_1_1_0 = (RuleCall)cIdTypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cWithKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperatorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperatorEsterelCombineOperatorEnumRuleCall_1_3_0 = (RuleCall)cOperatorAssignment_1_3.eContents().get(0);
		private final Assignment cIdTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdTypeIDTerminalRuleCall_2_0 = (RuleCall)cIdTypeAssignment_2.eContents().get(0);
		private final Assignment cEsterelTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cEsterelTypeTypeDefinitionCrossReference_3_0 = (CrossReference)cEsterelTypeAssignment_3.eContents().get(0);
		private final RuleCall cEsterelTypeTypeDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cEsterelTypeTypeDefinitionCrossReference_3_0.eContents().get(1);
		
		//// = Interface Declaration
		//// ----------------------------------------------
		//// overwrite to allow type definitions in a specific module
		//TypeIdentifier:
		//      type=EsterelValueType
		//    | ("combine" (type=EsterelValueType | idType=ID) "with" operator=EsterelCombineOperator)
		//    | idType=ID
		//    | esterelType=[TypeDefinition|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//  type=EsterelValueType
		//| ("combine" (type=EsterelValueType | idType=ID) "with" operator=EsterelCombineOperator)
		//| idType=ID
		//| esterelType=[TypeDefinition|ID]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_0_0() { return cTypeEsterelValueTypeEnumRuleCall_0_0; }
		
		//("combine" (type=EsterelValueType | idType=ID) "with" operator=EsterelCombineOperator)
		public Group getGroup_1() { return cGroup_1; }
		
		//"combine"
		public Keyword getCombineKeyword_1_0() { return cCombineKeyword_1_0; }
		
		//(type=EsterelValueType | idType=ID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_1_1_0_0() { return cTypeEsterelValueTypeEnumRuleCall_1_1_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_1_1_1() { return cIdTypeAssignment_1_1_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_1_1_1_0() { return cIdTypeIDTerminalRuleCall_1_1_1_0; }
		
		//"with"
		public Keyword getWithKeyword_1_2() { return cWithKeyword_1_2; }
		
		//operator=EsterelCombineOperator
		public Assignment getOperatorAssignment_1_3() { return cOperatorAssignment_1_3; }
		
		//EsterelCombineOperator
		public RuleCall getOperatorEsterelCombineOperatorEnumRuleCall_1_3_0() { return cOperatorEsterelCombineOperatorEnumRuleCall_1_3_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_2() { return cIdTypeAssignment_2; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_2_0() { return cIdTypeIDTerminalRuleCall_2_0; }
		
		//esterelType=[TypeDefinition|ID]
		public Assignment getEsterelTypeAssignment_3() { return cEsterelTypeAssignment_3; }
		
		//[TypeDefinition|ID]
		public CrossReference getEsterelTypeTypeDefinitionCrossReference_3_0() { return cEsterelTypeTypeDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getEsterelTypeTypeDefinitionIDTerminalRuleCall_3_0_1() { return cEsterelTypeTypeDefinitionIDTerminalRuleCall_3_0_1; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsTypeDefinitionParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsTypeDefinitionParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.1 Type Declarations
		//// -------------------------------------
		//TypeDeclaration:
		//    (annotations += Annotation)*
		//    "type"
		//    valuedObjects+=TypeDefinition ("," valuedObjects+=TypeDefinition)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"type"
		//valuedObjects+=TypeDefinition ("," valuedObjects+=TypeDefinition)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//valuedObjects+=TypeDefinition
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//TypeDefinition
		public RuleCall getValuedObjectsTypeDefinitionParserRuleCall_2_0() { return cValuedObjectsTypeDefinitionParserRuleCall_2_0; }
		
		//("," valuedObjects+=TypeDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=TypeDefinition
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//TypeDefinition
		public RuleCall getValuedObjectsTypeDefinitionParserRuleCall_3_1_0() { return cValuedObjectsTypeDefinitionParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TypeDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TypeDefinition:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsConstantParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsConstantParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.2 Constant Declarations
		//// -------------------------------------
		//ConstantDeclaration:
		//    (annotations += Annotation)*
		//    "constant"
		//    valuedObjects+=Constant ("," valuedObjects+=Constant)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"constant"
		//valuedObjects+=Constant ("," valuedObjects+=Constant)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"constant"
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }
		
		//valuedObjects+=Constant
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Constant
		public RuleCall getValuedObjectsConstantParserRuleCall_2_0() { return cValuedObjectsConstantParserRuleCall_2_0; }
		
		//("," valuedObjects+=Constant)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Constant
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Constant
		public RuleCall getValuedObjectsConstantParserRuleCall_3_1_0() { return cValuedObjectsConstantParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_1_1_0 = (RuleCall)cInitialValueAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Constant:
		//    name=ID ("=" initialValue=Expression)? ":" type=TypeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ("=" initialValue=Expression)? ":" type=TypeIdentifier
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("=" initialValue=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_1_1() { return cInitialValueAssignment_1_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_1_1_0() { return cInitialValueExpressionParserRuleCall_1_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeIdentifier
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_3_0() { return cTypeTypeIdentifierParserRuleCall_3_0; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsFunctionParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsFunctionParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.3 Function Declaration
		//// -------------------------------------
		//FunctionDeclaration:
		//    (annotations += Annotation)*
		//    "function"
		//    valuedObjects+=Function ("," valuedObjects+=Function)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"function"
		//valuedObjects+=Function ("," valuedObjects+=Function)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//valuedObjects+=Function
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Function
		public RuleCall getValuedObjectsFunctionParserRuleCall_2_0() { return cValuedObjectsFunctionParserRuleCall_2_0; }
		
		//("," valuedObjects+=Function)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Function
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Function
		public RuleCall getValuedObjectsFunctionParserRuleCall_3_1_0() { return cValuedObjectsFunctionParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cParameterTypesAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cParameterTypesTypeIdentifierParserRuleCall_1_0_1_0_0 = (RuleCall)cParameterTypesAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cParameterTypesAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cParameterTypesTypeIdentifierParserRuleCall_1_0_1_1_1_0 = (RuleCall)cParameterTypesAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReturnTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReturnTypeTypeIdentifierParserRuleCall_3_0 = (RuleCall)cReturnTypeAssignment_3.eContents().get(0);
		
		//Function:
		//    name=ID
		//    ("(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")" | '()')
		//    ":" returnType=TypeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		//("(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")" | '()')
		//":" returnType=TypeIdentifier
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")" | '()')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//parameterTypes+=TypeIdentifier
		public Assignment getParameterTypesAssignment_1_0_1_0() { return cParameterTypesAssignment_1_0_1_0; }
		
		//TypeIdentifier
		public RuleCall getParameterTypesTypeIdentifierParserRuleCall_1_0_1_0_0() { return cParameterTypesTypeIdentifierParserRuleCall_1_0_1_0_0; }
		
		//("," parameterTypes+=TypeIdentifier)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//parameterTypes+=TypeIdentifier
		public Assignment getParameterTypesAssignment_1_0_1_1_1() { return cParameterTypesAssignment_1_0_1_1_1; }
		
		//TypeIdentifier
		public RuleCall getParameterTypesTypeIdentifierParserRuleCall_1_0_1_1_1_0() { return cParameterTypesTypeIdentifierParserRuleCall_1_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//returnType=TypeIdentifier
		public Assignment getReturnTypeAssignment_3() { return cReturnTypeAssignment_3; }
		
		//TypeIdentifier
		public RuleCall getReturnTypeTypeIdentifierParserRuleCall_3_0() { return cReturnTypeTypeIdentifierParserRuleCall_3_0; }
	}
	public class ProcedureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ProcedureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsProcedureParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsProcedureParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.4 Procedure Declaration
		//// -------------------------------------
		//ProcedureDeclaration:
		//    (annotations += Annotation)*
		//    "procedure" valuedObjects+=Procedure ("," valuedObjects+=Procedure)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"procedure" valuedObjects+=Procedure ("," valuedObjects+=Procedure)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"procedure"
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }
		
		//valuedObjects+=Procedure
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Procedure
		public RuleCall getValuedObjectsProcedureParserRuleCall_2_0() { return cValuedObjectsProcedureParserRuleCall_2_0; }
		
		//("," valuedObjects+=Procedure)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Procedure
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Procedure
		public RuleCall getValuedObjectsProcedureParserRuleCall_3_1_0() { return cValuedObjectsProcedureParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cReferenceArgumentsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_0_0 = (RuleCall)cReferenceArgumentsAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cReferenceArgumentsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_1_1_0 = (RuleCall)cReferenceArgumentsAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cValueArgumentsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_0_0 = (RuleCall)cValueArgumentsAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cValueArgumentsAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_1_1_0 = (RuleCall)cValueArgumentsAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Procedure:
		//    name=ID
		//    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
		//    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		//("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
		//("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()')
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//referenceArguments+=TypeIdentifier
		public Assignment getReferenceArgumentsAssignment_1_0_1_0() { return cReferenceArgumentsAssignment_1_0_1_0; }
		
		//TypeIdentifier
		public RuleCall getReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_0_0() { return cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_0_0; }
		
		//("," referenceArguments+=TypeIdentifier)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//referenceArguments+=TypeIdentifier
		public Assignment getReferenceArgumentsAssignment_1_0_1_1_1() { return cReferenceArgumentsAssignment_1_0_1_1_1; }
		
		//TypeIdentifier
		public RuleCall getReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_1_1_0() { return cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
		
		//("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")"
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//(valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//valueArguments+=TypeIdentifier
		public Assignment getValueArgumentsAssignment_2_0_1_0() { return cValueArgumentsAssignment_2_0_1_0; }
		
		//TypeIdentifier
		public RuleCall getValueArgumentsTypeIdentifierParserRuleCall_2_0_1_0_0() { return cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_0_0; }
		
		//("," valueArguments+=TypeIdentifier)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//valueArguments+=TypeIdentifier
		public Assignment getValueArgumentsAssignment_2_0_1_1_1() { return cValueArgumentsAssignment_2_0_1_1_1; }
		
		//TypeIdentifier
		public RuleCall getValueArgumentsTypeIdentifierParserRuleCall_2_0_1_1_1_0() { return cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
	}
	public class TaskDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TaskDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsTaskParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsTaskParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.5 Task Declaration
		//// -------------------------------------
		//TaskDeclaration:
		//    (annotations += Annotation)*
		//    "task" valuedObjects+=Task ("," valuedObjects+=Task)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"task" valuedObjects+=Task ("," valuedObjects+=Task)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"task"
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }
		
		//valuedObjects+=Task
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Task
		public RuleCall getValuedObjectsTaskParserRuleCall_2_0() { return cValuedObjectsTaskParserRuleCall_2_0; }
		
		//("," valuedObjects+=Task)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Task
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Task
		public RuleCall getValuedObjectsTaskParserRuleCall_3_1_0() { return cValuedObjectsTaskParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cReferenceArgumentsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_0_0 = (RuleCall)cReferenceArgumentsAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cReferenceArgumentsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_1_1_0 = (RuleCall)cReferenceArgumentsAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cValueArgumentsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_0_0 = (RuleCall)cValueArgumentsAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cValueArgumentsAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_1_1_0 = (RuleCall)cValueArgumentsAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Task:
		//    name=ID
		//    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
		//    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		//("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
		//("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()')
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//referenceArguments+=TypeIdentifier
		public Assignment getReferenceArgumentsAssignment_1_0_1_0() { return cReferenceArgumentsAssignment_1_0_1_0; }
		
		//TypeIdentifier
		public RuleCall getReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_0_0() { return cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_0_0; }
		
		//("," referenceArguments+=TypeIdentifier)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//referenceArguments+=TypeIdentifier
		public Assignment getReferenceArgumentsAssignment_1_0_1_1_1() { return cReferenceArgumentsAssignment_1_0_1_1_1; }
		
		//TypeIdentifier
		public RuleCall getReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_1_1_0() { return cReferenceArgumentsTypeIdentifierParserRuleCall_1_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
		
		//("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")"
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//(valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//valueArguments+=TypeIdentifier
		public Assignment getValueArgumentsAssignment_2_0_1_0() { return cValueArgumentsAssignment_2_0_1_0; }
		
		//TypeIdentifier
		public RuleCall getValueArgumentsTypeIdentifierParserRuleCall_2_0_1_0_0() { return cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_0_0; }
		
		//("," valueArguments+=TypeIdentifier)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//valueArguments+=TypeIdentifier
		public Assignment getValueArgumentsAssignment_2_0_1_1_1() { return cValueArgumentsAssignment_2_0_1_1_1; }
		
		//TypeIdentifier
		public RuleCall getValueArgumentsTypeIdentifierParserRuleCall_2_0_1_1_1_0() { return cValueArgumentsTypeIdentifierParserRuleCall_2_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
	}
	public class InputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.InputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsSignalParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsSignalParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.6 Signal Declaration
		//// -------------------------------------
		//InputDeclaration:
		//    (annotations += Annotation)*
		//    "input"
		//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"input"
		//valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"input"
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_2_0() { return cValuedObjectsSignalParserRuleCall_2_0; }
		
		//("," valuedObjects+=Signal)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_3_1_0() { return cValuedObjectsSignalParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class OutputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.OutputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsSignalParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsSignalParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OutputDeclaration:
		//    (annotations += Annotation)*
		//    "output"
		//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"output"
		//valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"output"
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_2_0() { return cValuedObjectsSignalParserRuleCall_2_0; }
		
		//("," valuedObjects+=Signal)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_3_1_0() { return cValuedObjectsSignalParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class InputOutputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.InputOutputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cInputoutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsSignalParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsSignalParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InputOutputDeclaration:
		//    (annotations += Annotation)*
		//    "inputoutput"
		//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"inputoutput"
		//valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"inputoutput"
		public Keyword getInputoutputKeyword_1() { return cInputoutputKeyword_1; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_2_0() { return cValuedObjectsSignalParserRuleCall_2_0; }
		
		//("," valuedObjects+=Signal)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_3_1_0() { return cValuedObjectsSignalParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ReturnDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ReturnDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsSignalParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsSignalParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReturnDeclaration:
		//    (annotations += Annotation)*
		//    "return"
		//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"return"
		//valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_2_0() { return cValuedObjectsSignalParserRuleCall_2_0; }
		
		//("," valuedObjects+=Signal)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_3_1_0() { return cValuedObjectsSignalParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cInitialValueAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_1_0_0_1_0 = (RuleCall)cInitialValueAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Assignment cTypeAssignment_1_0_2_0 = (Assignment)cAlternatives_1_0_2.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_1_0_2_0_0 = (RuleCall)cTypeAssignment_1_0_2_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_1_0_2_1 = (Assignment)cAlternatives_1_0_2.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_1_0_2_1_0 = (RuleCall)cIdTypeAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_2_2 = (Group)cAlternatives_1_0_2.eContents().get(2);
		private final Keyword cCombineKeyword_1_0_2_2_0 = (Keyword)cGroup_1_0_2_2.eContents().get(0);
		private final Alternatives cAlternatives_1_0_2_2_1 = (Alternatives)cGroup_1_0_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_2_2_1_0 = (Assignment)cAlternatives_1_0_2_2_1.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_1_0_2_2_1_0_0 = (RuleCall)cTypeAssignment_1_0_2_2_1_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_1_0_2_2_1_1 = (Assignment)cAlternatives_1_0_2_2_1.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_1_0_2_2_1_1_0 = (RuleCall)cIdTypeAssignment_1_0_2_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_1_0_2_2_2 = (Keyword)cGroup_1_0_2_2.eContents().get(2);
		private final Alternatives cAlternatives_1_0_2_2_3 = (Alternatives)cGroup_1_0_2_2.eContents().get(3);
		private final Assignment cCombineFunctionAssignment_1_0_2_2_3_0 = (Assignment)cAlternatives_1_0_2_2_3.eContents().get(0);
		private final CrossReference cCombineFunctionFunctionCrossReference_1_0_2_2_3_0_0 = (CrossReference)cCombineFunctionAssignment_1_0_2_2_3_0.eContents().get(0);
		private final RuleCall cCombineFunctionFunctionIDTerminalRuleCall_1_0_2_2_3_0_0_1 = (RuleCall)cCombineFunctionFunctionCrossReference_1_0_2_2_3_0_0.eContents().get(1);
		private final Assignment cCombineOperatorAssignment_1_0_2_2_3_1 = (Assignment)cAlternatives_1_0_2_2_3.eContents().get(1);
		private final RuleCall cCombineOperatorEsterelCombineOperatorEnumRuleCall_1_0_2_2_3_1_0 = (RuleCall)cCombineOperatorAssignment_1_0_2_2_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cInitialValueAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_2_0 = (Assignment)cAlternatives_1_1_2.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_1_1_2_0_0 = (RuleCall)cTypeAssignment_1_1_2_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_1_1_2_1 = (Assignment)cAlternatives_1_1_2.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_1_1_2_1_0 = (RuleCall)cIdTypeAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_2_2 = (Group)cAlternatives_1_1_2.eContents().get(2);
		private final Keyword cCombineKeyword_1_1_2_2_0 = (Keyword)cGroup_1_1_2_2.eContents().get(0);
		private final Alternatives cAlternatives_1_1_2_2_1 = (Alternatives)cGroup_1_1_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_2_2_1_0 = (Assignment)cAlternatives_1_1_2_2_1.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_1_1_2_2_1_0_0 = (RuleCall)cTypeAssignment_1_1_2_2_1_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_1_1_2_2_1_1 = (Assignment)cAlternatives_1_1_2_2_1.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_1_1_2_2_1_1_0 = (RuleCall)cIdTypeAssignment_1_1_2_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1_2_2_2 = (Keyword)cGroup_1_1_2_2.eContents().get(2);
		private final Alternatives cAlternatives_1_1_2_2_3 = (Alternatives)cGroup_1_1_2_2.eContents().get(3);
		private final Assignment cCombineFunctionAssignment_1_1_2_2_3_0 = (Assignment)cAlternatives_1_1_2_2_3.eContents().get(0);
		private final CrossReference cCombineFunctionFunctionCrossReference_1_1_2_2_3_0_0 = (CrossReference)cCombineFunctionAssignment_1_1_2_2_3_0.eContents().get(0);
		private final RuleCall cCombineFunctionFunctionIDTerminalRuleCall_1_1_2_2_3_0_0_1 = (RuleCall)cCombineFunctionFunctionCrossReference_1_1_2_2_3_0_0.eContents().get(1);
		private final Assignment cCombineOperatorAssignment_1_1_2_2_3_1 = (Assignment)cAlternatives_1_1_2_2_3.eContents().get(1);
		private final RuleCall cCombineOperatorEsterelCombineOperatorEnumRuleCall_1_1_2_2_3_1_0 = (RuleCall)cCombineOperatorAssignment_1_1_2_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//// example 1:   A : combine boolean with or
		//// example 2:   A (combine boolean with or) // NO longer supported
		//// example 3:   A := 0 : combine integer with '+'
		//Signal:
		//    name=ID
		//    (
		//        (":=" initialValue=Expression)?
		//        ":"
		//        (     type=EsterelValueType
		//            | idType=ID
		//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//        )
		//    |
		//        "("
		//        (":=" initialValue=Expression ":")?
		//        (     type=EsterelValueType
		//            | idType=ID
		//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//        )
		//        ")"
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		//(
		//    (":=" initialValue=Expression)?
		//    ":"
		//    (     type=EsterelValueType
		//        | idType=ID
		//        | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//    )
		//|
		//    "("
		//    (":=" initialValue=Expression ":")?
		//    (     type=EsterelValueType
		//        | idType=ID
		//        | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//    )
		//    ")"
		//)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(
		//    (":=" initialValue=Expression)?
		//    ":"
		//    (     type=EsterelValueType
		//        | idType=ID
		//        | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//    )
		//|
		//    "("
		//    (":=" initialValue=Expression ":")?
		//    (     type=EsterelValueType
		//        | idType=ID
		//        | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//    )
		//    ")"
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(":=" initialValue=Expression)?
		//":"
		//(     type=EsterelValueType
		//    | idType=ID
		//    | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(":=" initialValue=Expression)?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_0_0_0() { return cColonEqualsSignKeyword_1_0_0_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_1_0_0_1() { return cInitialValueAssignment_1_0_0_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_1_0_0_1_0() { return cInitialValueExpressionParserRuleCall_1_0_0_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//(     type=EsterelValueType
		//    | idType=ID
		//    | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//)
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_1_0_2_0() { return cTypeAssignment_1_0_2_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_1_0_2_0_0() { return cTypeEsterelValueTypeEnumRuleCall_1_0_2_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_1_0_2_1() { return cIdTypeAssignment_1_0_2_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_1_0_2_1_0() { return cIdTypeIDTerminalRuleCall_1_0_2_1_0; }
		
		//("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }
		
		//"combine"
		public Keyword getCombineKeyword_1_0_2_2_0() { return cCombineKeyword_1_0_2_2_0; }
		
		//(type=EsterelValueType | idType=ID)
		public Alternatives getAlternatives_1_0_2_2_1() { return cAlternatives_1_0_2_2_1; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_1_0_2_2_1_0() { return cTypeAssignment_1_0_2_2_1_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_1_0_2_2_1_0_0() { return cTypeEsterelValueTypeEnumRuleCall_1_0_2_2_1_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_1_0_2_2_1_1() { return cIdTypeAssignment_1_0_2_2_1_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_1_0_2_2_1_1_0() { return cIdTypeIDTerminalRuleCall_1_0_2_2_1_1_0; }
		
		//"with"
		public Keyword getWithKeyword_1_0_2_2_2() { return cWithKeyword_1_0_2_2_2; }
		
		//(combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)
		public Alternatives getAlternatives_1_0_2_2_3() { return cAlternatives_1_0_2_2_3; }
		
		//combineFunction=[Function|ID]
		public Assignment getCombineFunctionAssignment_1_0_2_2_3_0() { return cCombineFunctionAssignment_1_0_2_2_3_0; }
		
		//[Function|ID]
		public CrossReference getCombineFunctionFunctionCrossReference_1_0_2_2_3_0_0() { return cCombineFunctionFunctionCrossReference_1_0_2_2_3_0_0; }
		
		//ID
		public RuleCall getCombineFunctionFunctionIDTerminalRuleCall_1_0_2_2_3_0_0_1() { return cCombineFunctionFunctionIDTerminalRuleCall_1_0_2_2_3_0_0_1; }
		
		//combineOperator=EsterelCombineOperator
		public Assignment getCombineOperatorAssignment_1_0_2_2_3_1() { return cCombineOperatorAssignment_1_0_2_2_3_1; }
		
		//EsterelCombineOperator
		public RuleCall getCombineOperatorEsterelCombineOperatorEnumRuleCall_1_0_2_2_3_1_0() { return cCombineOperatorEsterelCombineOperatorEnumRuleCall_1_0_2_2_3_1_0; }
		
		//"("
		//(":=" initialValue=Expression ":")?
		//(     type=EsterelValueType
		//    | idType=ID
		//    | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//)
		//")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(":=" initialValue=Expression ":")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_1_1_0() { return cColonEqualsSignKeyword_1_1_1_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_1_1_1_1() { return cInitialValueAssignment_1_1_1_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_1_1_1_1_0() { return cInitialValueExpressionParserRuleCall_1_1_1_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_1_1_2() { return cColonKeyword_1_1_1_2; }
		
		//(     type=EsterelValueType
		//    | idType=ID
		//    | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//)
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_1_1_2_0() { return cTypeAssignment_1_1_2_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_1_1_2_0_0() { return cTypeEsterelValueTypeEnumRuleCall_1_1_2_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_1_1_2_1() { return cIdTypeAssignment_1_1_2_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_1_1_2_1_0() { return cIdTypeIDTerminalRuleCall_1_1_2_1_0; }
		
		//("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		public Group getGroup_1_1_2_2() { return cGroup_1_1_2_2; }
		
		//"combine"
		public Keyword getCombineKeyword_1_1_2_2_0() { return cCombineKeyword_1_1_2_2_0; }
		
		//(type=EsterelValueType | idType=ID)
		public Alternatives getAlternatives_1_1_2_2_1() { return cAlternatives_1_1_2_2_1; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_1_1_2_2_1_0() { return cTypeAssignment_1_1_2_2_1_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_1_1_2_2_1_0_0() { return cTypeEsterelValueTypeEnumRuleCall_1_1_2_2_1_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_1_1_2_2_1_1() { return cIdTypeAssignment_1_1_2_2_1_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_1_1_2_2_1_1_0() { return cIdTypeIDTerminalRuleCall_1_1_2_2_1_1_0; }
		
		//"with"
		public Keyword getWithKeyword_1_1_2_2_2() { return cWithKeyword_1_1_2_2_2; }
		
		//(combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)
		public Alternatives getAlternatives_1_1_2_2_3() { return cAlternatives_1_1_2_2_3; }
		
		//combineFunction=[Function|ID]
		public Assignment getCombineFunctionAssignment_1_1_2_2_3_0() { return cCombineFunctionAssignment_1_1_2_2_3_0; }
		
		//[Function|ID]
		public CrossReference getCombineFunctionFunctionCrossReference_1_1_2_2_3_0_0() { return cCombineFunctionFunctionCrossReference_1_1_2_2_3_0_0; }
		
		//ID
		public RuleCall getCombineFunctionFunctionIDTerminalRuleCall_1_1_2_2_3_0_0_1() { return cCombineFunctionFunctionIDTerminalRuleCall_1_1_2_2_3_0_0_1; }
		
		//combineOperator=EsterelCombineOperator
		public Assignment getCombineOperatorAssignment_1_1_2_2_3_1() { return cCombineOperatorAssignment_1_1_2_2_3_1; }
		
		//EsterelCombineOperator
		public RuleCall getCombineOperatorEsterelCombineOperatorEnumRuleCall_1_1_2_2_3_1_0() { return cCombineOperatorEsterelCombineOperatorEnumRuleCall_1_1_2_2_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }
	}
	public class SensorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SensorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsSensorParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsSensorParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.7 Sensor Declaration
		//// -------------------------------------
		//SensorDeclaration:
		//    (annotations += Annotation)*
		//    "sensor"
		//    valuedObjects+=Sensor ("," valuedObjects+=Sensor)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"sensor"
		//valuedObjects+=Sensor ("," valuedObjects+=Sensor)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"sensor"
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//valuedObjects+=Sensor
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Sensor
		public RuleCall getValuedObjectsSensorParserRuleCall_2_0() { return cValuedObjectsSensorParserRuleCall_2_0; }
		
		//("," valuedObjects+=Sensor)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Sensor
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Sensor
		public RuleCall getValuedObjectsSensorParserRuleCall_3_1_0() { return cValuedObjectsSensorParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Sensor:
		//    name=ID
		//    ((":" type=TypeIdentifier) | ("(" type=TypeIdentifier ")"))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		//((":" type=TypeIdentifier) | ("(" type=TypeIdentifier ")"))?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//((":" type=TypeIdentifier) | ("(" type=TypeIdentifier ")"))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(":" type=TypeIdentifier)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }
		
		//type=TypeIdentifier
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }
		
		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_1_0_1_0() { return cTypeTypeIdentifierParserRuleCall_1_0_1_0; }
		
		//("(" type=TypeIdentifier ")")
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//type=TypeIdentifier
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }
		
		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_1_1_1_0() { return cTypeTypeIdentifierParserRuleCall_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class RelationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.RelationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cRelationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationsRelationParserRuleCall_2_0 = (RuleCall)cRelationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRelationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRelationsRelationParserRuleCall_3_1_0 = (RuleCall)cRelationsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = 7.3.8 Input Relation Declaration
		//// -------------------------------------
		//RelationDeclaration:
		//    (annotations += Annotation)*
		//    "relation"
		//    relations+=Relation ("," relations+=Relation)*
		//    ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"relation"
		//relations+=Relation ("," relations+=Relation)*
		//";"
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"relation"
		public Keyword getRelationKeyword_1() { return cRelationKeyword_1; }
		
		//relations+=Relation
		public Assignment getRelationsAssignment_2() { return cRelationsAssignment_2; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_2_0() { return cRelationsRelationParserRuleCall_2_0; }
		
		//("," relations+=Relation)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//relations+=Relation
		public Assignment getRelationsAssignment_3_1() { return cRelationsAssignment_3_1; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_3_1_0() { return cRelationsRelationParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationImplicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationIncompatibilityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Relation:
		//    RelationImplication | RelationIncompatibility;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationImplication | RelationIncompatibility
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelationImplication
		public RuleCall getRelationImplicationParserRuleCall_0() { return cRelationImplicationParserRuleCall_0; }
		
		//RelationIncompatibility
		public RuleCall getRelationIncompatibilityParserRuleCall_1() { return cRelationIncompatibilityParserRuleCall_1; }
	}
	public class RelationImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.RelationImplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFirstSignalCrossReference_0_0 = (CrossReference)cFirstAssignment_0.eContents().get(0);
		private final RuleCall cFirstSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cFirstSignalCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cSecondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSecondSignalCrossReference_2_0 = (CrossReference)cSecondAssignment_2.eContents().get(0);
		private final RuleCall cSecondSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSecondSignalCrossReference_2_0.eContents().get(1);
		
		//RelationImplication:
		//    first=[Signal|ID] type="=>" second=[Signal|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//first=[Signal|ID] type="=>" second=[Signal|ID]
		public Group getGroup() { return cGroup; }
		
		//first=[Signal|ID]
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//[Signal|ID]
		public CrossReference getFirstSignalCrossReference_0_0() { return cFirstSignalCrossReference_0_0; }
		
		//ID
		public RuleCall getFirstSignalIDTerminalRuleCall_0_0_1() { return cFirstSignalIDTerminalRuleCall_0_0_1; }
		
		//type="=>"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"=>"
		public Keyword getTypeEqualsSignGreaterThanSignKeyword_1_0() { return cTypeEqualsSignGreaterThanSignKeyword_1_0; }
		
		//second=[Signal|ID]
		public Assignment getSecondAssignment_2() { return cSecondAssignment_2; }
		
		//[Signal|ID]
		public CrossReference getSecondSignalCrossReference_2_0() { return cSecondSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getSecondSignalIDTerminalRuleCall_2_0_1() { return cSecondSignalIDTerminalRuleCall_2_0_1; }
	}
	public class RelationIncompatibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.RelationIncompatibility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncompAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIncompSignalCrossReference_0_0 = (CrossReference)cIncompAssignment_0.eContents().get(0);
		private final RuleCall cIncompSignalIDTerminalRuleCall_0_0_1 = (RuleCall)cIncompSignalCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeNumberSignKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cIncompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIncompSignalCrossReference_2_0 = (CrossReference)cIncompAssignment_2.eContents().get(0);
		private final RuleCall cIncompSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cIncompSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIncompAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cIncompSignalCrossReference_3_1_0 = (CrossReference)cIncompAssignment_3_1.eContents().get(0);
		private final RuleCall cIncompSignalIDTerminalRuleCall_3_1_0_1 = (RuleCall)cIncompSignalCrossReference_3_1_0.eContents().get(1);
		
		//RelationIncompatibility:
		//    incomp+=[Signal|ID] type="#" incomp+=[Signal|ID] ("#" incomp+=[Signal|ID])*;
		@Override public ParserRule getRule() { return rule; }
		
		//incomp+=[Signal|ID] type="#" incomp+=[Signal|ID] ("#" incomp+=[Signal|ID])*
		public Group getGroup() { return cGroup; }
		
		//incomp+=[Signal|ID]
		public Assignment getIncompAssignment_0() { return cIncompAssignment_0; }
		
		//[Signal|ID]
		public CrossReference getIncompSignalCrossReference_0_0() { return cIncompSignalCrossReference_0_0; }
		
		//ID
		public RuleCall getIncompSignalIDTerminalRuleCall_0_0_1() { return cIncompSignalIDTerminalRuleCall_0_0_1; }
		
		//type="#"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"#"
		public Keyword getTypeNumberSignKeyword_1_0() { return cTypeNumberSignKeyword_1_0; }
		
		//incomp+=[Signal|ID]
		public Assignment getIncompAssignment_2() { return cIncompAssignment_2; }
		
		//[Signal|ID]
		public CrossReference getIncompSignalCrossReference_2_0() { return cIncompSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getIncompSignalIDTerminalRuleCall_2_0_1() { return cIncompSignalIDTerminalRuleCall_2_0_1; }
		
		//("#" incomp+=[Signal|ID])*
		public Group getGroup_3() { return cGroup_3; }
		
		//"#"
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//incomp+=[Signal|ID]
		public Assignment getIncompAssignment_3_1() { return cIncompAssignment_3_1; }
		
		//[Signal|ID]
		public CrossReference getIncompSignalCrossReference_3_1_0() { return cIncompSignalCrossReference_3_1_0; }
		
		//ID
		public RuleCall getIncompSignalIDTerminalRuleCall_3_1_0_1() { return cIncompSignalIDTerminalRuleCall_3_1_0_1; }
	}
	public class InstructionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.InstructionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNothingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEsterelPauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHaltParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEmitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPresentParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAwaitParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEsterelAssignmentParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAbortParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLoopParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEveryDoParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSustainParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTrapParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSuspendParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLocalSignalDeclarationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cIfTestParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cExecParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRunParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cProcedureCallParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cRepeatParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cBlockParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLegacyDoParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		
		///* ###################################################
		// * ###               7.5 Statements                ###
		// * ###################################################
		// */
		//InstructionStatement returns scl::Statement:
		//    Nothing |
		//    EsterelPause |
		//    Halt |
		//    Emit |
		//    Exit |
		//    Present |
		//    Await |
		//    EsterelAssignment |
		//    Abort |
		//    Loop |
		//    EveryDo |
		//    Sustain |
		//    Trap |
		//    Suspend |
		//    LocalSignalDeclaration |
		//    LocalVariableDeclaration |
		//    IfTest |
		//    Exec |
		//    Run |
		//    ProcedureCall |
		//    Repeat |
		//    Block |
		//    LegacyDo
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Nothing |
		//EsterelPause |
		//Halt |
		//Emit |
		//Exit |
		//Present |
		//Await |
		//EsterelAssignment |
		//Abort |
		//Loop |
		//EveryDo |
		//Sustain |
		//Trap |
		//Suspend |
		//LocalSignalDeclaration |
		//LocalVariableDeclaration |
		//IfTest |
		//Exec |
		//Run |
		//ProcedureCall |
		//Repeat |
		//Block |
		//LegacyDo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Nothing
		public RuleCall getNothingParserRuleCall_0() { return cNothingParserRuleCall_0; }
		
		//EsterelPause
		public RuleCall getEsterelPauseParserRuleCall_1() { return cEsterelPauseParserRuleCall_1; }
		
		//Halt
		public RuleCall getHaltParserRuleCall_2() { return cHaltParserRuleCall_2; }
		
		//Emit
		public RuleCall getEmitParserRuleCall_3() { return cEmitParserRuleCall_3; }
		
		//Exit
		public RuleCall getExitParserRuleCall_4() { return cExitParserRuleCall_4; }
		
		//Present
		public RuleCall getPresentParserRuleCall_5() { return cPresentParserRuleCall_5; }
		
		//Await
		public RuleCall getAwaitParserRuleCall_6() { return cAwaitParserRuleCall_6; }
		
		//EsterelAssignment
		public RuleCall getEsterelAssignmentParserRuleCall_7() { return cEsterelAssignmentParserRuleCall_7; }
		
		//Abort
		public RuleCall getAbortParserRuleCall_8() { return cAbortParserRuleCall_8; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_9() { return cLoopParserRuleCall_9; }
		
		//EveryDo
		public RuleCall getEveryDoParserRuleCall_10() { return cEveryDoParserRuleCall_10; }
		
		//Sustain
		public RuleCall getSustainParserRuleCall_11() { return cSustainParserRuleCall_11; }
		
		//Trap
		public RuleCall getTrapParserRuleCall_12() { return cTrapParserRuleCall_12; }
		
		//Suspend
		public RuleCall getSuspendParserRuleCall_13() { return cSuspendParserRuleCall_13; }
		
		//LocalSignalDeclaration
		public RuleCall getLocalSignalDeclarationParserRuleCall_14() { return cLocalSignalDeclarationParserRuleCall_14; }
		
		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_15() { return cLocalVariableDeclarationParserRuleCall_15; }
		
		//IfTest
		public RuleCall getIfTestParserRuleCall_16() { return cIfTestParserRuleCall_16; }
		
		//Exec
		public RuleCall getExecParserRuleCall_17() { return cExecParserRuleCall_17; }
		
		//Run
		public RuleCall getRunParserRuleCall_18() { return cRunParserRuleCall_18; }
		
		//ProcedureCall
		public RuleCall getProcedureCallParserRuleCall_19() { return cProcedureCallParserRuleCall_19; }
		
		//Repeat
		public RuleCall getRepeatParserRuleCall_20() { return cRepeatParserRuleCall_20; }
		
		//Block
		public RuleCall getBlockParserRuleCall_21() { return cBlockParserRuleCall_21; }
		
		//LegacyDo
		public RuleCall getLegacyDoParserRuleCall_22() { return cLegacyDoParserRuleCall_22; }
	}
	public class EsterelParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelParallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEsterelThreadParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEsterelParallelStatementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStatementsEsterelThreadParserRuleCall_1_1_1_0 = (RuleCall)cStatementsAssignment_1_1_1.eContents().get(0);
		
		//// = Parallel: at least two threads
		//// -------------------------------------
		////EsterelParallel returns EsterelParallel:
		////    {EsterelParallel}
		////    threads+=EsterelThread (=>"||" threads+=EsterelThread)+;
		//// This rule massively improves parsing
		//EsterelParallel returns scl::Statement:
		//    EsterelThread ({EsterelParallel.statements+=current} (=>"||" statements+=EsterelThread)+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//EsterelThread ({EsterelParallel.statements+=current} (=>"||" statements+=EsterelThread)+)?
		public Group getGroup() { return cGroup; }
		
		//EsterelThread
		public RuleCall getEsterelThreadParserRuleCall_0() { return cEsterelThreadParserRuleCall_0; }
		
		//({EsterelParallel.statements+=current} (=>"||" statements+=EsterelThread)+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{EsterelParallel.statements+=current}
		public Action getEsterelParallelStatementsAction_1_0() { return cEsterelParallelStatementsAction_1_0; }
		
		//(=>"||" statements+=EsterelThread)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=>"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_0() { return cVerticalLineVerticalLineKeyword_1_1_0; }
		
		//statements+=EsterelThread
		public Assignment getStatementsAssignment_1_1_1() { return cStatementsAssignment_1_1_1; }
		
		//EsterelThread
		public RuleCall getStatementsEsterelThreadParserRuleCall_1_1_1_0() { return cStatementsEsterelThreadParserRuleCall_1_1_1_0; }
	}
	public class EsterelThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelThread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInstructionStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEsterelThreadStatementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_1_1_1_0 = (RuleCall)cStatementsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// = Thread
		//// One AtomicStatement or multiple AtomicStatements
		//// It doesn't include 'Parallel' statements because they would be parallel to
		//// the existing thread and therefore included in the previous thread list (Parallel.threads).
		//// -------------------------------------
		////EsterelThread:
		////    {EsterelThread}
		////    (statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=InstructionStatement?;
		//// This rule massively improves parsing
		//EsterelThread returns scl::Statement:
		//    InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=InstructionStatement)+)? ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=InstructionStatement)+)? ";"?
		public Group getGroup() { return cGroup; }
		
		//InstructionStatement
		public RuleCall getInstructionStatementParserRuleCall_0() { return cInstructionStatementParserRuleCall_0; }
		
		//({EsterelThread.statements+=current} (=>";" statements+=InstructionStatement)+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{EsterelThread.statements+=current}
		public Action getEsterelThreadStatementsAction_1_0() { return cEsterelThreadStatementsAction_1_0; }
		
		//(=>";" statements+=InstructionStatement)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=>";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }
		
		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_1_1_1() { return cStatementsAssignment_1_1_1; }
		
		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_1_1_1_0() { return cStatementsInstructionStatementParserRuleCall_1_1_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class NothingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Nothing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNothingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cNothingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// = Nothing
		//// -------------------------------------
		//Nothing:
		//    {Nothing}
		//    (annotations += Annotation)*
		//    "nothing"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Nothing}
		//(annotations += Annotation)*
		//"nothing"
		public Group getGroup() { return cGroup; }
		
		//{Nothing}
		public Action getNothingAction_0() { return cNothingAction_0; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//"nothing"
		public Keyword getNothingKeyword_2() { return cNothingKeyword_2; }
	}
	public class EsterelPauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelPause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cPauseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// = Pause
		//// -------------------------------------
		//EsterelPause returns scl::Pause:
		//    {scl::Pause}
		//    (annotations += Annotation)*
		//    "pause"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{scl::Pause}
		//(annotations += Annotation)*
		//"pause"
		public Group getGroup() { return cGroup; }
		
		//{scl::Pause}
		public Action getPauseAction_0() { return cPauseAction_0; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//"pause"
		public Keyword getPauseKeyword_2() { return cPauseKeyword_2; }
	}
	public class HaltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Halt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaltAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cHaltKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// = Halt
		//// -------------------------------------
		//Halt:
		//    {Halt}
		//    (annotations += Annotation)*
		//    "halt"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Halt}
		//(annotations += Annotation)*
		//"halt"
		public Group getGroup() { return cGroup; }
		
		//{Halt}
		public Action getHaltAction_0() { return cHaltAction_0; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//"halt"
		public Keyword getHaltKeyword_2() { return cHaltKeyword_2; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// = Block
		//// -------------------------------------
		//Block:
		//    {Block}
		//    (annotations += Annotation)*
		//    "[" (statements+=EsterelParallel) "]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Block}
		//(annotations += Annotation)*
		//"[" (statements+=EsterelParallel) "]"
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_3_0() { return cStatementsEsterelParallelParserRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class EmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEmitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// = 7.5.1 Signal Emission
		//// -------------------------------------
		//Emit:
		//    (annotations += Annotation)*
		//    "emit"
		//    signal=[Signal|ID]
		//    ("("expression=Expression")")?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"emit"
		//signal=[Signal|ID]
		//("("expression=Expression")")?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"emit"
		public Keyword getEmitKeyword_1() { return cEmitKeyword_1; }
		
		//signal=[Signal|ID]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }
		
		//[Signal|ID]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }
		
		//("("expression=Expression")")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class SustainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Sustain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSustainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// emit a signal indefinitely
		//Sustain:
		//    (annotations += Annotation)*
		//    "sustain"
		//    signal=[Signal|ID]
		//    ("(" expression=Expression ")")?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"sustain"
		//signal=[Signal|ID]
		//("(" expression=Expression ")")?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"sustain"
		public Keyword getSustainKeyword_1() { return cSustainKeyword_1; }
		
		//signal=[Signal|ID]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }
		
		//[Signal|ID]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }
		
		//("(" expression=Expression ")")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class EsterelAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceVariableReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//// = 7.5.2 Assignment and Procedure Call
		//// -------------------------------------
		//EsterelAssignment returns scl::Assignment:
		//    (annotations += Annotation)*
		//    reference=VariableReference ":=" expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//reference=VariableReference ":=" expression=Expression
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//reference=VariableReference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//VariableReference
		public RuleCall getReferenceVariableReferenceParserRuleCall_1_0() { return cReferenceVariableReferenceParserRuleCall_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuedObjectVariableCrossReference_1_0 = (CrossReference)cValuedObjectAssignment_1.eContents().get(0);
		private final RuleCall cValuedObjectVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cValuedObjectVariableCrossReference_1_0.eContents().get(1);
		
		//VariableReference returns kexpressions::ValuedObjectReference:
		//   {VariableReference} valuedObject=[Variable|ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableReference} valuedObject=[Variable|ID]
		public Group getGroup() { return cGroup; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_0() { return cVariableReferenceAction_0; }
		
		//valuedObject=[Variable|ID]
		public Assignment getValuedObjectAssignment_1() { return cValuedObjectAssignment_1; }
		
		//[Variable|ID]
		public CrossReference getValuedObjectVariableCrossReference_1_0() { return cValuedObjectVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getValuedObjectVariableIDTerminalRuleCall_1_0_1() { return cValuedObjectVariableIDTerminalRuleCall_1_0_1; }
	}
	public class ProcedureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ProcedureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcedureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcedureProcedureCrossReference_2_0 = (CrossReference)cProcedureAssignment_2.eContents().get(0);
		private final RuleCall cProcedureProcedureIDTerminalRuleCall_2_0_1 = (RuleCall)cProcedureProcedureCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Assignment cReferenceArgumentsAssignment_3_0_1_0 = (Assignment)cGroup_3_0_1.eContents().get(0);
		private final CrossReference cReferenceArgumentsVariableCrossReference_3_0_1_0_0 = (CrossReference)cReferenceArgumentsAssignment_3_0_1_0.eContents().get(0);
		private final RuleCall cReferenceArgumentsVariableIDTerminalRuleCall_3_0_1_0_0_1 = (RuleCall)cReferenceArgumentsVariableCrossReference_3_0_1_0_0.eContents().get(1);
		private final Group cGroup_3_0_1_1 = (Group)cGroup_3_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_1_0 = (Keyword)cGroup_3_0_1_1.eContents().get(0);
		private final Assignment cReferenceArgumentsAssignment_3_0_1_1_1 = (Assignment)cGroup_3_0_1_1.eContents().get(1);
		private final CrossReference cReferenceArgumentsVariableCrossReference_3_0_1_1_1_0 = (CrossReference)cReferenceArgumentsAssignment_3_0_1_1_1.eContents().get(0);
		private final RuleCall cReferenceArgumentsVariableIDTerminalRuleCall_3_0_1_1_1_0_1 = (RuleCall)cReferenceArgumentsVariableCrossReference_3_0_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cValueArgumentsAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cValueArgumentsExpressionParserRuleCall_4_0_1_0_0 = (RuleCall)cValueArgumentsAssignment_4_0_1_0.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_1_0 = (Keyword)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cValueArgumentsAssignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cValueArgumentsExpressionParserRuleCall_4_0_1_1_1_0 = (RuleCall)cValueArgumentsAssignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//ProcedureCall:
		//    (annotations += Annotation)*
		//    "call"
		//    procedure=[Procedure|ID]
		//    ("("
		//        ( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
		//    ")" | '()')
		//    ("("
		//        ( valueArguments+=Expression ("," valueArguments+=Expression)* )?
		//    ")" | '()')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"call"
		//procedure=[Procedure|ID]
		//("("
		//    ( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
		//")" | '()')
		//("("
		//    ( valueArguments+=Expression ("," valueArguments+=Expression)* )?
		//")" | '()')
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"call"
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }
		
		//procedure=[Procedure|ID]
		public Assignment getProcedureAssignment_2() { return cProcedureAssignment_2; }
		
		//[Procedure|ID]
		public CrossReference getProcedureProcedureCrossReference_2_0() { return cProcedureProcedureCrossReference_2_0; }
		
		//ID
		public RuleCall getProcedureProcedureIDTerminalRuleCall_2_0_1() { return cProcedureProcedureIDTerminalRuleCall_2_0_1; }
		
		//("("
		//    ( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
		//")" | '()')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//"("
		//        ( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
		//    ")"
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }
		
		//( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//referenceArguments+=[Variable|ID]
		public Assignment getReferenceArgumentsAssignment_3_0_1_0() { return cReferenceArgumentsAssignment_3_0_1_0; }
		
		//[Variable|ID]
		public CrossReference getReferenceArgumentsVariableCrossReference_3_0_1_0_0() { return cReferenceArgumentsVariableCrossReference_3_0_1_0_0; }
		
		//ID
		public RuleCall getReferenceArgumentsVariableIDTerminalRuleCall_3_0_1_0_0_1() { return cReferenceArgumentsVariableIDTerminalRuleCall_3_0_1_0_0_1; }
		
		//("," referenceArguments+=[Variable|ID])*
		public Group getGroup_3_0_1_1() { return cGroup_3_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_3_0_1_1_0() { return cCommaKeyword_3_0_1_1_0; }
		
		//referenceArguments+=[Variable|ID]
		public Assignment getReferenceArgumentsAssignment_3_0_1_1_1() { return cReferenceArgumentsAssignment_3_0_1_1_1; }
		
		//[Variable|ID]
		public CrossReference getReferenceArgumentsVariableCrossReference_3_0_1_1_1_0() { return cReferenceArgumentsVariableCrossReference_3_0_1_1_1_0; }
		
		//ID
		public RuleCall getReferenceArgumentsVariableIDTerminalRuleCall_3_0_1_1_1_0_1() { return cReferenceArgumentsVariableIDTerminalRuleCall_3_0_1_1_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_0_2() { return cRightParenthesisKeyword_3_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3_1() { return cLeftParenthesisRightParenthesisKeyword_3_1; }
		
		//("("
		//    ( valueArguments+=Expression ("," valueArguments+=Expression)* )?
		//")" | '()')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//"("
		//        ( valueArguments+=Expression ("," valueArguments+=Expression)* )?
		//    ")"
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }
		
		//( valueArguments+=Expression ("," valueArguments+=Expression)* )?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//valueArguments+=Expression
		public Assignment getValueArgumentsAssignment_4_0_1_0() { return cValueArgumentsAssignment_4_0_1_0; }
		
		//Expression
		public RuleCall getValueArgumentsExpressionParserRuleCall_4_0_1_0_0() { return cValueArgumentsExpressionParserRuleCall_4_0_1_0_0; }
		
		//("," valueArguments+=Expression)*
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_4_0_1_1_0() { return cCommaKeyword_4_0_1_1_0; }
		
		//valueArguments+=Expression
		public Assignment getValueArgumentsAssignment_4_0_1_1_1() { return cValueArgumentsAssignment_4_0_1_1_1; }
		
		//Expression
		public RuleCall getValueArgumentsExpressionParserRuleCall_4_0_1_1_1_0() { return cValueArgumentsExpressionParserRuleCall_4_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_0_2() { return cRightParenthesisKeyword_4_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_4_1() { return cLeftParenthesisRightParenthesisKeyword_4_1; }
	}
	public class PresentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Present");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cPresentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_0_0 = (Assignment)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0_0_0 = (RuleCall)cExpressionAssignment_2_0_0_0.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cAlternatives_2_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_0_0_1_0 = (Keyword)cGroup_2_0_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_0_1_1 = (Assignment)cGroup_2_0_0_1.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0 = (RuleCall)cExpressionAssignment_2_0_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_0_1_2 = (Keyword)cGroup_2_0_0_1.eContents().get(2);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cAnnotationsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_0_1_0_0 = (RuleCall)cAnnotationsAssignment_2_0_1_0.eContents().get(0);
		private final Keyword cThenKeyword_2_0_1_1 = (Keyword)cGroup_2_0_1.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1_2 = (Assignment)cGroup_2_0_1.eContents().get(2);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_2_0_1_2_0 = (RuleCall)cStatementsAssignment_2_0_1_2.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCasesPresentCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseStatementsEsterelParallelParserRuleCall_3_1_0 = (RuleCall)cElseStatementsAssignment_3_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPresentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// = 7.5.3 The present Signal Test
		//// -------------------------------------
		//Present:
		//    (annotations += Annotation)*
		//    "present"
		//    (   (
		//            (     expression=SignalExpression
		//                | "[" expression=SignalExpression "]"
		//            )
		//            (
		//                (annotations += Annotation)*
		//                "then"
		//                (statements+=EsterelParallel)
		//            )?
		//        )
		//        |
		//        cases+=PresentCase+
		//    )
		//    (
		//        "else"
		//        (elseStatements+=EsterelParallel)
		//    )?
		//    "end" "present"?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"present"
		//(   (
		//        (     expression=SignalExpression
		//            | "[" expression=SignalExpression "]"
		//        )
		//        (
		//            (annotations += Annotation)*
		//            "then"
		//            (statements+=EsterelParallel)
		//        )?
		//    )
		//    |
		//    cases+=PresentCase+
		//)
		//(
		//    "else"
		//    (elseStatements+=EsterelParallel)
		//)?
		//"end" "present"?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"present"
		public Keyword getPresentKeyword_1() { return cPresentKeyword_1; }
		
		//(   (
		//        (     expression=SignalExpression
		//            | "[" expression=SignalExpression "]"
		//        )
		//        (
		//            (annotations += Annotation)*
		//            "then"
		//            (statements+=EsterelParallel)
		//        )?
		//    )
		//    |
		//    cases+=PresentCase+
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(
		//         (     expression=SignalExpression
		//             | "[" expression=SignalExpression "]"
		//         )
		//         (
		//             (annotations += Annotation)*
		//             "then"
		//             (statements+=EsterelParallel)
		//         )?
		//     )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//(     expression=SignalExpression
		//    | "[" expression=SignalExpression "]"
		//)
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0_0_0() { return cExpressionAssignment_2_0_0_0; }
		
		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0_0_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0_0_0; }
		
		//"[" expression=SignalExpression "]"
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0_1_0() { return cLeftSquareBracketKeyword_2_0_0_1_0; }
		
		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0_0_1_1() { return cExpressionAssignment_2_0_0_1_1; }
		
		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_0_1_2() { return cRightSquareBracketKeyword_2_0_0_1_2; }
		
		//(
		//    (annotations += Annotation)*
		//    "then"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_2_0_1_0() { return cAnnotationsAssignment_2_0_1_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_0_1_0_0() { return cAnnotationsAnnotationParserRuleCall_2_0_1_0_0; }
		
		//"then"
		public Keyword getThenKeyword_2_0_1_1() { return cThenKeyword_2_0_1_1; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_2_0_1_2() { return cStatementsAssignment_2_0_1_2; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_2_0_1_2_0() { return cStatementsEsterelParallelParserRuleCall_2_0_1_2_0; }
		
		//cases+=PresentCase+
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }
		
		//PresentCase
		public RuleCall getCasesPresentCaseParserRuleCall_2_1_0() { return cCasesPresentCaseParserRuleCall_2_1_0; }
		
		//(
		//    "else"
		//    (elseStatements+=EsterelParallel)
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//(elseStatements+=EsterelParallel)
		public Assignment getElseStatementsAssignment_3_1() { return cElseStatementsAssignment_3_1; }
		
		//EsterelParallel
		public RuleCall getElseStatementsEsterelParallelParserRuleCall_3_1_0() { return cElseStatementsEsterelParallelParserRuleCall_3_1_0; }
		
		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//"present"?
		public Keyword getPresentKeyword_5() { return cPresentKeyword_5; }
	}
	public class PresentCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.PresentCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExpressionAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		
		//PresentCase:
		//    (annotations += Annotation)*
		//    "case"
		//    (     expression=SignalExpression
		//        | "[" expression=SignalExpression "]"
		//    )
		//    (   "do"
		//        (statements+=EsterelParallel)
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"case"
		//(     expression=SignalExpression
		//    | "[" expression=SignalExpression "]"
		//)
		//(   "do"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//(     expression=SignalExpression
		//    | "[" expression=SignalExpression "]"
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0; }
		
		//"[" expression=SignalExpression "]"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }
		
		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_1_1() { return cExpressionAssignment_2_1_1; }
		
		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_1_1_0() { return cExpressionSignalExpressionParserRuleCall_2_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }
		
		//(   "do"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_3_1_0() { return cStatementsEsterelParallelParserRuleCall_3_1_0; }
	}
	public class IfTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.IfTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAnnotationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_3_0_0 = (RuleCall)cAnnotationsAssignment_3_0.eContents().get(0);
		private final Keyword cThenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStatementsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_3_2_0 = (RuleCall)cStatementsAssignment_3_2.eContents().get(0);
		private final Assignment cElseifAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseifElsIfParserRuleCall_4_0 = (RuleCall)cElseifAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementsEsterelParallelParserRuleCall_5_1_0 = (RuleCall)cElseStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// = 7.5.4 The if Data Test
		//// -------------------------------------
		//IfTest:
		//    (annotations += Annotation)*
		//    "if"
		//    expression=Expression
		//    (
		//        (annotations+=Annotation)*
		//        "then"
		//        (statements+=EsterelParallel)
		//    )?
		//    (elseif+=ElsIf)*
		//    (
		//            "else"
		//            (elseStatements+=EsterelParallel)
		//    )?
		//    "end" "if"?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"if"
		//expression=Expression
		//(
		//    (annotations+=Annotation)*
		//    "then"
		//    (statements+=EsterelParallel)
		//)?
		//(elseif+=ElsIf)*
		//(
		//        "else"
		//        (elseStatements+=EsterelParallel)
		//)?
		//"end" "if"?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//(
		//    (annotations+=Annotation)*
		//    "then"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//(annotations+=Annotation)*
		public Assignment getAnnotationsAssignment_3_0() { return cAnnotationsAssignment_3_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_3_0_0() { return cAnnotationsAnnotationParserRuleCall_3_0_0; }
		
		//"then"
		public Keyword getThenKeyword_3_1() { return cThenKeyword_3_1; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_3_2() { return cStatementsAssignment_3_2; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_3_2_0() { return cStatementsEsterelParallelParserRuleCall_3_2_0; }
		
		//(elseif+=ElsIf)*
		public Assignment getElseifAssignment_4() { return cElseifAssignment_4; }
		
		//ElsIf
		public RuleCall getElseifElsIfParserRuleCall_4_0() { return cElseifElsIfParserRuleCall_4_0; }
		
		//(
		//        "else"
		//        (elseStatements+=EsterelParallel)
		//)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//(elseStatements+=EsterelParallel)
		public Assignment getElseStatementsAssignment_5_1() { return cElseStatementsAssignment_5_1; }
		
		//EsterelParallel
		public RuleCall getElseStatementsEsterelParallelParserRuleCall_5_1_0() { return cElseStatementsEsterelParallelParserRuleCall_5_1_0; }
		
		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//"if"?
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}
	public class ElsIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ElsIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cElsifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		
		//ElsIf:
		//    (annotations += Annotation)*
		//    "elsif"
		//    expression=Expression
		//    (
		//        "then"
		//        (statements+=EsterelParallel)
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"elsif"
		//expression=Expression
		//(
		//    "then"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"elsif"
		public Keyword getElsifKeyword_1() { return cElsifKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//(
		//    "then"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"then"
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_3_1_0() { return cStatementsEsterelParallelParserRuleCall_3_1_0; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cEndKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cLoopKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cEachKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cDelayAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDelayDelayExpressionParserRuleCall_4_1_1_0 = (RuleCall)cDelayAssignment_4_1_1.eContents().get(0);
		
		//// = 7.5.5 Looping & 7.5.9 Temporal Loops
		//// -------------------------------------
		//Loop:
		//    {Loop}
		//    (annotations += Annotation)*
		//    "loop"
		//    (statements+=EsterelParallel)
		//    ("end" "loop"? | "each" delay=DelayExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Loop}
		//(annotations += Annotation)*
		//"loop"
		//(statements+=EsterelParallel)
		//("end" "loop"? | "each" delay=DelayExpression)
		public Group getGroup() { return cGroup; }
		
		//{Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//"loop"
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_3_0() { return cStatementsEsterelParallelParserRuleCall_3_0; }
		
		//("end" "loop"? | "each" delay=DelayExpression)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//"end" "loop"?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//"end"
		public Keyword getEndKeyword_4_0_0() { return cEndKeyword_4_0_0; }
		
		//"loop"?
		public Keyword getLoopKeyword_4_0_1() { return cLoopKeyword_4_0_1; }
		
		//"each" delay=DelayExpression
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//"each"
		public Keyword getEachKeyword_4_1_0() { return cEachKeyword_4_1_0; }
		
		//delay=DelayExpression
		public Assignment getDelayAssignment_4_1_1() { return cDelayAssignment_4_1_1; }
		
		//DelayExpression
		public RuleCall getDelayDelayExpressionParserRuleCall_4_1_1_0() { return cDelayDelayExpressionParserRuleCall_4_1_1_0; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cPositiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPositivePositiveKeyword_1_0 = (Keyword)cPositiveAssignment_1.eContents().get(0);
		private final Keyword cRepeatKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cTimesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// = 7.5.6 Repeat Looping
		//// -------------------------------------
		//Repeat:
		//    (annotations += Annotation)*
		//    (positive?="positive")?
		//    "repeat"
		//    expression=Expression
		//    "times"
		//    (statements+=EsterelParallel)
		//    "end" "repeat"?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//(positive?="positive")?
		//"repeat"
		//expression=Expression
		//"times"
		//(statements+=EsterelParallel)
		//"end" "repeat"?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//(positive?="positive")?
		public Assignment getPositiveAssignment_1() { return cPositiveAssignment_1; }
		
		//"positive"
		public Keyword getPositivePositiveKeyword_1_0() { return cPositivePositiveKeyword_1_0; }
		
		//"repeat"
		public Keyword getRepeatKeyword_2() { return cRepeatKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//"times"
		public Keyword getTimesKeyword_4() { return cTimesKeyword_4; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_5_0() { return cStatementsEsterelParallelParserRuleCall_5_0; }
		
		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//"repeat"?
		public Keyword getRepeatKeyword_7() { return cRepeatKeyword_7; }
	}
	public class AbortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Abort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeakAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cWeakWeakKeyword_1_0_0 = (Keyword)cWeakAssignment_1_0.eContents().get(0);
		private final Keyword cAbortKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cDelayAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cDelayDelayExpressionParserRuleCall_4_0_0_0 = (RuleCall)cDelayAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Keyword cDoKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Assignment cDoStatementsAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cDoStatementsEsterelParallelParserRuleCall_4_0_1_1_0 = (RuleCall)cDoStatementsAssignment_4_0_1_1.eContents().get(0);
		private final Keyword cEndKeyword_4_0_1_2 = (Keyword)cGroup_4_0_1.eContents().get(2);
		private final Keyword cWeakKeyword_4_0_1_3 = (Keyword)cGroup_4_0_1.eContents().get(3);
		private final Keyword cAbortKeyword_4_0_1_4 = (Keyword)cGroup_4_0_1.eContents().get(4);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cCasesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_4_1_0_0 = (RuleCall)cCasesAssignment_4_1_0.eContents().get(0);
		private final Keyword cEndKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Keyword cWeakKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Keyword cAbortKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		
		//// = 7.5.7 The abort Statements
		//// -------------------------------------
		//Abort:
		//    (annotations += Annotation)*
		//    ((weak?="weak")? "abort")
		//    (statements+=EsterelParallel)
		//    "when"
		//    (
		//        delay=DelayExpression
		//        (
		//            "do"
		//            (doStatements+=EsterelParallel)
		//            "end" "weak"? "abort"?
		//        )?
		//    |
		//        cases+=Case+
		//        "end" "weak"? "abort"?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//((weak?="weak")? "abort")
		//(statements+=EsterelParallel)
		//"when"
		//(
		//    delay=DelayExpression
		//    (
		//        "do"
		//        (doStatements+=EsterelParallel)
		//        "end" "weak"? "abort"?
		//    )?
		//|
		//    cases+=Case+
		//    "end" "weak"? "abort"?
		//)
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//((weak?="weak")? "abort")
		public Group getGroup_1() { return cGroup_1; }
		
		//(weak?="weak")?
		public Assignment getWeakAssignment_1_0() { return cWeakAssignment_1_0; }
		
		//"weak"
		public Keyword getWeakWeakKeyword_1_0_0() { return cWeakWeakKeyword_1_0_0; }
		
		//"abort"
		public Keyword getAbortKeyword_1_1() { return cAbortKeyword_1_1; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_2_0() { return cStatementsEsterelParallelParserRuleCall_2_0; }
		
		//"when"
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }
		
		//(
		//    delay=DelayExpression
		//    (
		//        "do"
		//        (doStatements+=EsterelParallel)
		//        "end" "weak"? "abort"?
		//    )?
		//|
		//    cases+=Case+
		//    "end" "weak"? "abort"?
		//)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//delay=DelayExpression
		//(
		//    "do"
		//    (doStatements+=EsterelParallel)
		//    "end" "weak"? "abort"?
		//)?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//delay=DelayExpression
		public Assignment getDelayAssignment_4_0_0() { return cDelayAssignment_4_0_0; }
		
		//DelayExpression
		public RuleCall getDelayDelayExpressionParserRuleCall_4_0_0_0() { return cDelayDelayExpressionParserRuleCall_4_0_0_0; }
		
		//(
		//    "do"
		//    (doStatements+=EsterelParallel)
		//    "end" "weak"? "abort"?
		//)?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//"do"
		public Keyword getDoKeyword_4_0_1_0() { return cDoKeyword_4_0_1_0; }
		
		//(doStatements+=EsterelParallel)
		public Assignment getDoStatementsAssignment_4_0_1_1() { return cDoStatementsAssignment_4_0_1_1; }
		
		//EsterelParallel
		public RuleCall getDoStatementsEsterelParallelParserRuleCall_4_0_1_1_0() { return cDoStatementsEsterelParallelParserRuleCall_4_0_1_1_0; }
		
		//"end"
		public Keyword getEndKeyword_4_0_1_2() { return cEndKeyword_4_0_1_2; }
		
		//"weak"?
		public Keyword getWeakKeyword_4_0_1_3() { return cWeakKeyword_4_0_1_3; }
		
		//"abort"?
		public Keyword getAbortKeyword_4_0_1_4() { return cAbortKeyword_4_0_1_4; }
		
		//cases+=Case+
		//"end" "weak"? "abort"?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//cases+=Case+
		public Assignment getCasesAssignment_4_1_0() { return cCasesAssignment_4_1_0; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_4_1_0_0() { return cCasesCaseParserRuleCall_4_1_0_0; }
		
		//"end"
		public Keyword getEndKeyword_4_1_1() { return cEndKeyword_4_1_1; }
		
		//"weak"?
		public Keyword getWeakKeyword_4_1_2() { return cWeakKeyword_4_1_2; }
		
		//"abort"?
		public Keyword getAbortKeyword_4_1_3() { return cAbortKeyword_4_1_3; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayExpressionParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		
		//Case:
		//    (annotations += Annotation)*
		//    "case"
		//    delay=DelayExpression
		//    (
		//        "do"
		//        (statements+=EsterelParallel)
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"case"
		//delay=DelayExpression
		//(
		//    "do"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//delay=DelayExpression
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayExpression
		public RuleCall getDelayDelayExpressionParserRuleCall_2_0() { return cDelayDelayExpressionParserRuleCall_2_0; }
		
		//(
		//    "do"
		//    (statements+=EsterelParallel)
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_3_1_0() { return cStatementsEsterelParallelParserRuleCall_3_1_0; }
	}
	public class AwaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Await");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAwaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cDelayAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cDelayDelayExpressionParserRuleCall_2_0_0_0 = (RuleCall)cDelayAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cDoKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_2_0_1_1_0 = (RuleCall)cStatementsAssignment_2_0_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2_0_1_2 = (Keyword)cGroup_2_0_1.eContents().get(2);
		private final Keyword cAwaitKeyword_2_0_1_3 = (Keyword)cGroup_2_0_1.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cCasesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_2_1_0_0 = (RuleCall)cCasesAssignment_2_1_0.eContents().get(0);
		private final Keyword cEndKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cAwaitKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// = 7.5.8 The await Statement
		//// -------------------------------------
		//Await:
		//    (annotations += Annotation)*
		//    "await"
		//    (
		//        delay=DelayExpression
		//        (
		//            "do"
		//            (statements+=EsterelParallel)
		//            "end" "await"?
		//        )?
		//    |
		//        cases+=Case+
		//        "end" "await"?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"await"
		//(
		//    delay=DelayExpression
		//    (
		//        "do"
		//        (statements+=EsterelParallel)
		//        "end" "await"?
		//    )?
		//|
		//    cases+=Case+
		//    "end" "await"?
		//)
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"await"
		public Keyword getAwaitKeyword_1() { return cAwaitKeyword_1; }
		
		//(
		//    delay=DelayExpression
		//    (
		//        "do"
		//        (statements+=EsterelParallel)
		//        "end" "await"?
		//    )?
		//|
		//    cases+=Case+
		//    "end" "await"?
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//delay=DelayExpression
		//(
		//    "do"
		//    (statements+=EsterelParallel)
		//    "end" "await"?
		//)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//delay=DelayExpression
		public Assignment getDelayAssignment_2_0_0() { return cDelayAssignment_2_0_0; }
		
		//DelayExpression
		public RuleCall getDelayDelayExpressionParserRuleCall_2_0_0_0() { return cDelayDelayExpressionParserRuleCall_2_0_0_0; }
		
		//(
		//    "do"
		//    (statements+=EsterelParallel)
		//    "end" "await"?
		//)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//"do"
		public Keyword getDoKeyword_2_0_1_0() { return cDoKeyword_2_0_1_0; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_2_0_1_1() { return cStatementsAssignment_2_0_1_1; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_2_0_1_1_0() { return cStatementsEsterelParallelParserRuleCall_2_0_1_1_0; }
		
		//"end"
		public Keyword getEndKeyword_2_0_1_2() { return cEndKeyword_2_0_1_2; }
		
		//"await"?
		public Keyword getAwaitKeyword_2_0_1_3() { return cAwaitKeyword_2_0_1_3; }
		
		//cases+=Case+
		//"end" "await"?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//cases+=Case+
		public Assignment getCasesAssignment_2_1_0() { return cCasesAssignment_2_1_0; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_2_1_0_0() { return cCasesCaseParserRuleCall_2_1_0_0; }
		
		//"end"
		public Keyword getEndKeyword_2_1_1() { return cEndKeyword_2_1_1; }
		
		//"await"?
		public Keyword getAwaitKeyword_2_1_2() { return cAwaitKeyword_2_1_2; }
	}
	public class EveryDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EveryDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEveryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayExpressionParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEveryKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// = 7.5.9 Temporal Loops
		//// -------------------------------------
		//// for 'LoopEach' look at 7.5.5
		//EveryDo:
		//    (annotations += Annotation)*
		//    "every"
		//    delay=DelayExpression
		//    "do"
		//    (statements+=EsterelParallel)
		//    "end" "every"?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"every"
		//delay=DelayExpression
		//"do"
		//(statements+=EsterelParallel)
		//"end" "every"?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"every"
		public Keyword getEveryKeyword_1() { return cEveryKeyword_1; }
		
		//delay=DelayExpression
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayExpression
		public RuleCall getDelayDelayExpressionParserRuleCall_2_0() { return cDelayDelayExpressionParserRuleCall_2_0; }
		
		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_4_0() { return cStatementsEsterelParallelParserRuleCall_4_0; }
		
		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//"every"?
		public Keyword getEveryKeyword_6() { return cEveryKeyword_6; }
	}
	public class SuspendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Suspend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeakAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cWeakWeakKeyword_1_0_0 = (Keyword)cWeakAssignment_1_0.eContents().get(0);
		private final Keyword cSuspendKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDelayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDelayDelayExpressionParserRuleCall_4_0 = (RuleCall)cDelayAssignment_4.eContents().get(0);
		
		//// = 7.5.10 The suspend Statement
		//// -------------------------------------
		//Suspend:
		//    (annotations += Annotation)*
		//    ((weak?="weak")? "suspend")
		//    (statements+=EsterelParallel)
		//    "when"
		//    delay=DelayExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//((weak?="weak")? "suspend")
		//(statements+=EsterelParallel)
		//"when"
		//delay=DelayExpression
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//((weak?="weak")? "suspend")
		public Group getGroup_1() { return cGroup_1; }
		
		//(weak?="weak")?
		public Assignment getWeakAssignment_1_0() { return cWeakAssignment_1_0; }
		
		//"weak"
		public Keyword getWeakWeakKeyword_1_0_0() { return cWeakWeakKeyword_1_0_0; }
		
		//"suspend"
		public Keyword getSuspendKeyword_1_1() { return cSuspendKeyword_1_1; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_2_0() { return cStatementsEsterelParallelParserRuleCall_2_0; }
		
		//"when"
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }
		
		//delay=DelayExpression
		public Assignment getDelayAssignment_4() { return cDelayAssignment_4; }
		
		//DelayExpression
		public RuleCall getDelayDelayExpressionParserRuleCall_4_0() { return cDelayDelayExpressionParserRuleCall_4_0; }
	}
	public class TrapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Trap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTrapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapSignalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTrapSignalsTrapSignalParserRuleCall_2_0 = (RuleCall)cTrapSignalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTrapSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTrapSignalsTrapSignalParserRuleCall_3_1_0 = (RuleCall)cTrapSignalsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Assignment cTrapHandlerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTrapHandlerTrapHandlerParserRuleCall_6_0 = (RuleCall)cTrapHandlerAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTrapKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// = 7.5.11 Traps
		//// -------------------------------------
		//Trap:
		//    (annotations += Annotation)*
		//    "trap"
		//    trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
		//    "in"
		//    (statements+=EsterelParallel)
		//    (trapHandler+=TrapHandler)*
		//    "end" "trap"?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"trap"
		//trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
		//"in"
		//(statements+=EsterelParallel)
		//(trapHandler+=TrapHandler)*
		//"end" "trap"?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"trap"
		public Keyword getTrapKeyword_1() { return cTrapKeyword_1; }
		
		//trapSignals+=TrapSignal
		public Assignment getTrapSignalsAssignment_2() { return cTrapSignalsAssignment_2; }
		
		//TrapSignal
		public RuleCall getTrapSignalsTrapSignalParserRuleCall_2_0() { return cTrapSignalsTrapSignalParserRuleCall_2_0; }
		
		//("," trapSignals+=TrapSignal)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//trapSignals+=TrapSignal
		public Assignment getTrapSignalsAssignment_3_1() { return cTrapSignalsAssignment_3_1; }
		
		//TrapSignal
		public RuleCall getTrapSignalsTrapSignalParserRuleCall_3_1_0() { return cTrapSignalsTrapSignalParserRuleCall_3_1_0; }
		
		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_5_0() { return cStatementsEsterelParallelParserRuleCall_5_0; }
		
		//(trapHandler+=TrapHandler)*
		public Assignment getTrapHandlerAssignment_6() { return cTrapHandlerAssignment_6; }
		
		//TrapHandler
		public RuleCall getTrapHandlerTrapHandlerParserRuleCall_6_0() { return cTrapHandlerTrapHandlerParserRuleCall_6_0; }
		
		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
		
		//"trap"?
		public Keyword getTrapKeyword_8() { return cTrapKeyword_8; }
	}
	public class TrapSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrapSignalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_2_0_1_0 = (RuleCall)cInitialValueAssignment_2_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Alternatives cAlternatives_2_0_3 = (Alternatives)cGroup_2_0.eContents().get(3);
		private final Assignment cTypeAssignment_2_0_3_0 = (Assignment)cAlternatives_2_0_3.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_2_0_3_0_0 = (RuleCall)cTypeAssignment_2_0_3_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_2_0_3_1 = (Assignment)cAlternatives_2_0_3.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_2_0_3_1_0 = (RuleCall)cIdTypeAssignment_2_0_3_1.eContents().get(0);
		private final Group cGroup_2_0_3_2 = (Group)cAlternatives_2_0_3.eContents().get(2);
		private final Keyword cCombineKeyword_2_0_3_2_0 = (Keyword)cGroup_2_0_3_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_3_2_1 = (Alternatives)cGroup_2_0_3_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_3_2_1_0 = (Assignment)cAlternatives_2_0_3_2_1.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_2_0_3_2_1_0_0 = (RuleCall)cTypeAssignment_2_0_3_2_1_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_2_0_3_2_1_1 = (Assignment)cAlternatives_2_0_3_2_1.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_2_0_3_2_1_1_0 = (RuleCall)cIdTypeAssignment_2_0_3_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_0_3_2_2 = (Keyword)cGroup_2_0_3_2.eContents().get(2);
		private final Alternatives cAlternatives_2_0_3_2_3 = (Alternatives)cGroup_2_0_3_2.eContents().get(3);
		private final Assignment cCombineFunctionAssignment_2_0_3_2_3_0 = (Assignment)cAlternatives_2_0_3_2_3.eContents().get(0);
		private final CrossReference cCombineFunctionFunctionCrossReference_2_0_3_2_3_0_0 = (CrossReference)cCombineFunctionAssignment_2_0_3_2_3_0.eContents().get(0);
		private final RuleCall cCombineFunctionFunctionIDTerminalRuleCall_2_0_3_2_3_0_0_1 = (RuleCall)cCombineFunctionFunctionCrossReference_2_0_3_2_3_0_0.eContents().get(1);
		private final Assignment cCombineOperatorAssignment_2_0_3_2_3_1 = (Assignment)cAlternatives_2_0_3_2_3.eContents().get(1);
		private final RuleCall cCombineOperatorEsterelCombineOperatorEnumRuleCall_2_0_3_2_3_1_0 = (RuleCall)cCombineOperatorAssignment_2_0_3_2_3_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_2_1_1_0_0 = (RuleCall)cTypeAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_2_1_1_1 = (Assignment)cAlternatives_2_1_1.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_2_1_1_1_0 = (RuleCall)cIdTypeAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_2 = (Group)cAlternatives_2_1_1.eContents().get(2);
		private final Keyword cCombineKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1_2_1 = (Alternatives)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_1_2_1_0 = (Assignment)cAlternatives_2_1_1_2_1.eContents().get(0);
		private final RuleCall cTypeEsterelValueTypeEnumRuleCall_2_1_1_2_1_0_0 = (RuleCall)cTypeAssignment_2_1_1_2_1_0.eContents().get(0);
		private final Assignment cIdTypeAssignment_2_1_1_2_1_1 = (Assignment)cAlternatives_2_1_1_2_1.eContents().get(1);
		private final RuleCall cIdTypeIDTerminalRuleCall_2_1_1_2_1_1_0 = (RuleCall)cIdTypeAssignment_2_1_1_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_1_1_2_2 = (Keyword)cGroup_2_1_1_2.eContents().get(2);
		private final Alternatives cAlternatives_2_1_1_2_3 = (Alternatives)cGroup_2_1_1_2.eContents().get(3);
		private final Assignment cCombineFunctionAssignment_2_1_1_2_3_0 = (Assignment)cAlternatives_2_1_1_2_3.eContents().get(0);
		private final CrossReference cCombineFunctionFunctionCrossReference_2_1_1_2_3_0_0 = (CrossReference)cCombineFunctionAssignment_2_1_1_2_3_0.eContents().get(0);
		private final RuleCall cCombineFunctionFunctionIDTerminalRuleCall_2_1_1_2_3_0_0_1 = (RuleCall)cCombineFunctionFunctionCrossReference_2_1_1_2_3_0_0.eContents().get(1);
		private final Assignment cCombineOperatorAssignment_2_1_1_2_3_1 = (Assignment)cAlternatives_2_1_1_2_3.eContents().get(1);
		private final RuleCall cCombineOperatorEsterelCombineOperatorEnumRuleCall_2_1_1_2_3_1_0 = (RuleCall)cCombineOperatorAssignment_2_1_1_2_3_1.eContents().get(0);
		
		//TrapSignal returns Signal:
		//    {TrapSignal}
		//    name=ID
		//    (
		//        ":=" initialValue=Expression
		//        ":"
		//          (       type=EsterelValueType
		//                | idType=ID
		//                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//          )
		//    |
		//        ":"
		//          (       type=EsterelValueType
		//                | idType=ID
		//                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//          )
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TrapSignal}
		//name=ID
		//(
		//    ":=" initialValue=Expression
		//    ":"
		//      (       type=EsterelValueType
		//            | idType=ID
		//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//      )
		//|
		//    ":"
		//      (       type=EsterelValueType
		//            | idType=ID
		//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//      )
		//)?
		public Group getGroup() { return cGroup; }
		
		//{TrapSignal}
		public Action getTrapSignalAction_0() { return cTrapSignalAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    ":=" initialValue=Expression
		//    ":"
		//      (       type=EsterelValueType
		//            | idType=ID
		//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//      )
		//|
		//    ":"
		//      (       type=EsterelValueType
		//            | idType=ID
		//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//      )
		//)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//":=" initialValue=Expression
		//":"
		//  (       type=EsterelValueType
		//        | idType=ID
		//        | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//  )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2_0_0() { return cColonEqualsSignKeyword_2_0_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_2_0_1() { return cInitialValueAssignment_2_0_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_2_0_1_0() { return cInitialValueExpressionParserRuleCall_2_0_1_0; }
		
		//":"
		public Keyword getColonKeyword_2_0_2() { return cColonKeyword_2_0_2; }
		
		//(       type=EsterelValueType
		//      | idType=ID
		//      | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//)
		public Alternatives getAlternatives_2_0_3() { return cAlternatives_2_0_3; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_2_0_3_0() { return cTypeAssignment_2_0_3_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_2_0_3_0_0() { return cTypeEsterelValueTypeEnumRuleCall_2_0_3_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_2_0_3_1() { return cIdTypeAssignment_2_0_3_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_2_0_3_1_0() { return cIdTypeIDTerminalRuleCall_2_0_3_1_0; }
		
		//("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		public Group getGroup_2_0_3_2() { return cGroup_2_0_3_2; }
		
		//"combine"
		public Keyword getCombineKeyword_2_0_3_2_0() { return cCombineKeyword_2_0_3_2_0; }
		
		//(type=EsterelValueType | idType=ID)
		public Alternatives getAlternatives_2_0_3_2_1() { return cAlternatives_2_0_3_2_1; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_2_0_3_2_1_0() { return cTypeAssignment_2_0_3_2_1_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_2_0_3_2_1_0_0() { return cTypeEsterelValueTypeEnumRuleCall_2_0_3_2_1_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_2_0_3_2_1_1() { return cIdTypeAssignment_2_0_3_2_1_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_2_0_3_2_1_1_0() { return cIdTypeIDTerminalRuleCall_2_0_3_2_1_1_0; }
		
		//"with"
		public Keyword getWithKeyword_2_0_3_2_2() { return cWithKeyword_2_0_3_2_2; }
		
		//(combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)
		public Alternatives getAlternatives_2_0_3_2_3() { return cAlternatives_2_0_3_2_3; }
		
		//combineFunction=[Function|ID]
		public Assignment getCombineFunctionAssignment_2_0_3_2_3_0() { return cCombineFunctionAssignment_2_0_3_2_3_0; }
		
		//[Function|ID]
		public CrossReference getCombineFunctionFunctionCrossReference_2_0_3_2_3_0_0() { return cCombineFunctionFunctionCrossReference_2_0_3_2_3_0_0; }
		
		//ID
		public RuleCall getCombineFunctionFunctionIDTerminalRuleCall_2_0_3_2_3_0_0_1() { return cCombineFunctionFunctionIDTerminalRuleCall_2_0_3_2_3_0_0_1; }
		
		//combineOperator=EsterelCombineOperator
		public Assignment getCombineOperatorAssignment_2_0_3_2_3_1() { return cCombineOperatorAssignment_2_0_3_2_3_1; }
		
		//EsterelCombineOperator
		public RuleCall getCombineOperatorEsterelCombineOperatorEnumRuleCall_2_0_3_2_3_1_0() { return cCombineOperatorEsterelCombineOperatorEnumRuleCall_2_0_3_2_3_1_0; }
		
		//":"
		//  (       type=EsterelValueType
		//        | idType=ID
		//        | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//  )
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//":"
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }
		
		//(       type=EsterelValueType
		//      | idType=ID
		//      | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		//)
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_2_1_1_0() { return cTypeAssignment_2_1_1_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_2_1_1_0_0() { return cTypeEsterelValueTypeEnumRuleCall_2_1_1_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_2_1_1_1() { return cIdTypeAssignment_2_1_1_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_2_1_1_1_0() { return cIdTypeIDTerminalRuleCall_2_1_1_1_0; }
		
		//("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }
		
		//"combine"
		public Keyword getCombineKeyword_2_1_1_2_0() { return cCombineKeyword_2_1_1_2_0; }
		
		//(type=EsterelValueType | idType=ID)
		public Alternatives getAlternatives_2_1_1_2_1() { return cAlternatives_2_1_1_2_1; }
		
		//type=EsterelValueType
		public Assignment getTypeAssignment_2_1_1_2_1_0() { return cTypeAssignment_2_1_1_2_1_0; }
		
		//EsterelValueType
		public RuleCall getTypeEsterelValueTypeEnumRuleCall_2_1_1_2_1_0_0() { return cTypeEsterelValueTypeEnumRuleCall_2_1_1_2_1_0_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_2_1_1_2_1_1() { return cIdTypeAssignment_2_1_1_2_1_1; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_2_1_1_2_1_1_0() { return cIdTypeIDTerminalRuleCall_2_1_1_2_1_1_0; }
		
		//"with"
		public Keyword getWithKeyword_2_1_1_2_2() { return cWithKeyword_2_1_1_2_2; }
		
		//(combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)
		public Alternatives getAlternatives_2_1_1_2_3() { return cAlternatives_2_1_1_2_3; }
		
		//combineFunction=[Function|ID]
		public Assignment getCombineFunctionAssignment_2_1_1_2_3_0() { return cCombineFunctionAssignment_2_1_1_2_3_0; }
		
		//[Function|ID]
		public CrossReference getCombineFunctionFunctionCrossReference_2_1_1_2_3_0_0() { return cCombineFunctionFunctionCrossReference_2_1_1_2_3_0_0; }
		
		//ID
		public RuleCall getCombineFunctionFunctionIDTerminalRuleCall_2_1_1_2_3_0_0_1() { return cCombineFunctionFunctionIDTerminalRuleCall_2_1_1_2_3_0_0_1; }
		
		//combineOperator=EsterelCombineOperator
		public Assignment getCombineOperatorAssignment_2_1_1_2_3_1() { return cCombineOperatorAssignment_2_1_1_2_3_1; }
		
		//EsterelCombineOperator
		public RuleCall getCombineOperatorEsterelCombineOperatorEnumRuleCall_2_1_1_2_3_1_0() { return cCombineOperatorEsterelCombineOperatorEnumRuleCall_2_1_1_2_3_1_0; }
	}
	public class TrapHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cHandleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionTrapExprParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		
		//TrapHandler:
		//    (annotations += Annotation)*
		//    "handle"
		//    expression=TrapExpr
		//    "do"
		//    (statements+=EsterelParallel)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"handle"
		//expression=TrapExpr
		//"do"
		//(statements+=EsterelParallel)
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"handle"
		public Keyword getHandleKeyword_1() { return cHandleKeyword_1; }
		
		//expression=TrapExpr
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//TrapExpr
		public RuleCall getExpressionTrapExprParserRuleCall_2_0() { return cExpressionTrapExprParserRuleCall_2_0; }
		
		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_4_0() { return cStatementsEsterelParallelParserRuleCall_4_0; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTrapTrapSignalCrossReference_2_0 = (CrossReference)cTrapAssignment_2.eContents().get(0);
		private final RuleCall cTrapTrapSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cTrapTrapSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Exit:
		//    (annotations += Annotation)*
		//    "exit"
		//    trap=[TrapSignal|ID]
		//    ("(" expression=Expression ")")?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"exit"
		//trap=[TrapSignal|ID]
		//("(" expression=Expression ")")?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"exit"
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
		
		//trap=[TrapSignal|ID]
		public Assignment getTrapAssignment_2() { return cTrapAssignment_2; }
		
		//[TrapSignal|ID]
		public CrossReference getTrapTrapSignalCrossReference_2_0() { return cTrapTrapSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getTrapTrapSignalIDTerminalRuleCall_2_0_1() { return cTrapTrapSignalIDTerminalRuleCall_2_0_1; }
		
		//("(" expression=Expression ")")?
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ExecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Exec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cExecKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTaskAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final CrossReference cTaskTaskCrossReference_2_0_0_0 = (CrossReference)cTaskAssignment_2_0_0.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_2_0_0_0_1 = (RuleCall)cTaskTaskCrossReference_2_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_0_1_0 = (Group)cAlternatives_2_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1_0_0 = (Keyword)cGroup_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_0_1 = (Group)cGroup_2_0_1_0.eContents().get(1);
		private final Assignment cReferenceParametersAssignment_2_0_1_0_1_0 = (Assignment)cGroup_2_0_1_0_1.eContents().get(0);
		private final CrossReference cReferenceParametersVariableCrossReference_2_0_1_0_1_0_0 = (CrossReference)cReferenceParametersAssignment_2_0_1_0_1_0.eContents().get(0);
		private final RuleCall cReferenceParametersVariableIDTerminalRuleCall_2_0_1_0_1_0_0_1 = (RuleCall)cReferenceParametersVariableCrossReference_2_0_1_0_1_0_0.eContents().get(1);
		private final Group cGroup_2_0_1_0_1_1 = (Group)cGroup_2_0_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_0_1_1_0 = (Keyword)cGroup_2_0_1_0_1_1.eContents().get(0);
		private final Assignment cReferenceParametersAssignment_2_0_1_0_1_1_1 = (Assignment)cGroup_2_0_1_0_1_1.eContents().get(1);
		private final CrossReference cReferenceParametersVariableCrossReference_2_0_1_0_1_1_1_0 = (CrossReference)cReferenceParametersAssignment_2_0_1_0_1_1_1.eContents().get(0);
		private final RuleCall cReferenceParametersVariableIDTerminalRuleCall_2_0_1_0_1_1_1_0_1 = (RuleCall)cReferenceParametersVariableCrossReference_2_0_1_0_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_1_0_2 = (Keyword)cGroup_2_0_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_0_1_1 = (Keyword)cAlternatives_2_0_1.eContents().get(1);
		private final Alternatives cAlternatives_2_0_2 = (Alternatives)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_0_2_0 = (Group)cAlternatives_2_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_2_0_0 = (Keyword)cGroup_2_0_2_0.eContents().get(0);
		private final Group cGroup_2_0_2_0_1 = (Group)cGroup_2_0_2_0.eContents().get(1);
		private final Assignment cValueParametersAssignment_2_0_2_0_1_0 = (Assignment)cGroup_2_0_2_0_1.eContents().get(0);
		private final RuleCall cValueParametersExpressionParserRuleCall_2_0_2_0_1_0_0 = (RuleCall)cValueParametersAssignment_2_0_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_2_0_1_1 = (Group)cGroup_2_0_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_2_0_1_1_0 = (Keyword)cGroup_2_0_2_0_1_1.eContents().get(0);
		private final Assignment cValueParametersAssignment_2_0_2_0_1_1_1 = (Assignment)cGroup_2_0_2_0_1_1.eContents().get(1);
		private final RuleCall cValueParametersExpressionParserRuleCall_2_0_2_0_1_1_1_0 = (RuleCall)cValueParametersAssignment_2_0_2_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2_0_2 = (Keyword)cGroup_2_0_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_0_2_1 = (Keyword)cAlternatives_2_0_2.eContents().get(1);
		private final Keyword cReturnKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cReturnSignalAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final CrossReference cReturnSignalSignalCrossReference_2_0_4_0 = (CrossReference)cReturnSignalAssignment_2_0_4.eContents().get(0);
		private final RuleCall cReturnSignalSignalIDTerminalRuleCall_2_0_4_0_1 = (RuleCall)cReturnSignalSignalCrossReference_2_0_4_0.eContents().get(1);
		private final Group cGroup_2_0_5 = (Group)cGroup_2_0.eContents().get(5);
		private final Keyword cDoKeyword_2_0_5_0 = (Keyword)cGroup_2_0_5.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_5_1 = (Assignment)cGroup_2_0_5.eContents().get(1);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_2_0_5_1_0 = (RuleCall)cStatementsAssignment_2_0_5_1.eContents().get(0);
		private final Keyword cEndKeyword_2_0_5_2 = (Keyword)cGroup_2_0_5.eContents().get(2);
		private final Keyword cExecKeyword_2_0_5_3 = (Keyword)cGroup_2_0_5.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cExecCaseListAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cExecCaseListExecCaseParserRuleCall_2_1_0_0 = (RuleCall)cExecCaseListAssignment_2_1_0.eContents().get(0);
		private final Keyword cEndKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cExecKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// = 7.5.12 The exec Task Execution Statement
		//// -------------------------------------
		//Exec:
		//    (annotations += Annotation)*
		//    "exec"
		//        (   task=[Task|ID]
		//            ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		//            ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()')
		//            "return"
		//            returnSignal=[Signal]
		//            ("do" (statements+=EsterelParallel) "end" "exec"?)?
		//        |
		//            execCaseList+=ExecCase+
		//            "end" "exec"?
		//        );
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"exec"
		//    (   task=[Task|ID]
		//        ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		//        ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()')
		//        "return"
		//        returnSignal=[Signal]
		//        ("do" (statements+=EsterelParallel) "end" "exec"?)?
		//    |
		//        execCaseList+=ExecCase+
		//        "end" "exec"?
		//    )
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"exec"
		public Keyword getExecKeyword_1() { return cExecKeyword_1; }
		
		//(   task=[Task|ID]
		//    ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		//    ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()')
		//    "return"
		//    returnSignal=[Signal]
		//    ("do" (statements+=EsterelParallel) "end" "exec"?)?
		//|
		//    execCaseList+=ExecCase+
		//    "end" "exec"?
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//task=[Task|ID]
		//         ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		//         ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()')
		//         "return"
		//         returnSignal=[Signal]
		//         ("do" (statements+=EsterelParallel) "end" "exec"?)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//task=[Task|ID]
		public Assignment getTaskAssignment_2_0_0() { return cTaskAssignment_2_0_0; }
		
		//[Task|ID]
		public CrossReference getTaskTaskCrossReference_2_0_0_0() { return cTaskTaskCrossReference_2_0_0_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_2_0_0_0_1() { return cTaskTaskIDTerminalRuleCall_2_0_0_0_1; }
		
		//("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//"(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")"
		public Group getGroup_2_0_1_0() { return cGroup_2_0_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0_1_0_0() { return cLeftParenthesisKeyword_2_0_1_0_0; }
		
		//(referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)?
		public Group getGroup_2_0_1_0_1() { return cGroup_2_0_1_0_1; }
		
		//referenceParameters+=[Variable|ID]
		public Assignment getReferenceParametersAssignment_2_0_1_0_1_0() { return cReferenceParametersAssignment_2_0_1_0_1_0; }
		
		//[Variable|ID]
		public CrossReference getReferenceParametersVariableCrossReference_2_0_1_0_1_0_0() { return cReferenceParametersVariableCrossReference_2_0_1_0_1_0_0; }
		
		//ID
		public RuleCall getReferenceParametersVariableIDTerminalRuleCall_2_0_1_0_1_0_0_1() { return cReferenceParametersVariableIDTerminalRuleCall_2_0_1_0_1_0_0_1; }
		
		//("," referenceParameters+=[Variable|ID])*
		public Group getGroup_2_0_1_0_1_1() { return cGroup_2_0_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_0_1_1_0() { return cCommaKeyword_2_0_1_0_1_1_0; }
		
		//referenceParameters+=[Variable|ID]
		public Assignment getReferenceParametersAssignment_2_0_1_0_1_1_1() { return cReferenceParametersAssignment_2_0_1_0_1_1_1; }
		
		//[Variable|ID]
		public CrossReference getReferenceParametersVariableCrossReference_2_0_1_0_1_1_1_0() { return cReferenceParametersVariableCrossReference_2_0_1_0_1_1_1_0; }
		
		//ID
		public RuleCall getReferenceParametersVariableIDTerminalRuleCall_2_0_1_0_1_1_1_0_1() { return cReferenceParametersVariableIDTerminalRuleCall_2_0_1_0_1_1_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_0_1_0_2() { return cRightParenthesisKeyword_2_0_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_0_1_1() { return cLeftParenthesisRightParenthesisKeyword_2_0_1_1; }
		
		//("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()')
		public Alternatives getAlternatives_2_0_2() { return cAlternatives_2_0_2; }
		
		//"(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"
		public Group getGroup_2_0_2_0() { return cGroup_2_0_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0_2_0_0() { return cLeftParenthesisKeyword_2_0_2_0_0; }
		
		//(valueParameters+=Expression ("," valueParameters+=Expression)*)?
		public Group getGroup_2_0_2_0_1() { return cGroup_2_0_2_0_1; }
		
		//valueParameters+=Expression
		public Assignment getValueParametersAssignment_2_0_2_0_1_0() { return cValueParametersAssignment_2_0_2_0_1_0; }
		
		//Expression
		public RuleCall getValueParametersExpressionParserRuleCall_2_0_2_0_1_0_0() { return cValueParametersExpressionParserRuleCall_2_0_2_0_1_0_0; }
		
		//("," valueParameters+=Expression)*
		public Group getGroup_2_0_2_0_1_1() { return cGroup_2_0_2_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_2_0_1_1_0() { return cCommaKeyword_2_0_2_0_1_1_0; }
		
		//valueParameters+=Expression
		public Assignment getValueParametersAssignment_2_0_2_0_1_1_1() { return cValueParametersAssignment_2_0_2_0_1_1_1; }
		
		//Expression
		public RuleCall getValueParametersExpressionParserRuleCall_2_0_2_0_1_1_1_0() { return cValueParametersExpressionParserRuleCall_2_0_2_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_0_2_0_2() { return cRightParenthesisKeyword_2_0_2_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_0_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_0_2_1; }
		
		//"return"
		public Keyword getReturnKeyword_2_0_3() { return cReturnKeyword_2_0_3; }
		
		//returnSignal=[Signal]
		public Assignment getReturnSignalAssignment_2_0_4() { return cReturnSignalAssignment_2_0_4; }
		
		//[Signal]
		public CrossReference getReturnSignalSignalCrossReference_2_0_4_0() { return cReturnSignalSignalCrossReference_2_0_4_0; }
		
		//ID
		public RuleCall getReturnSignalSignalIDTerminalRuleCall_2_0_4_0_1() { return cReturnSignalSignalIDTerminalRuleCall_2_0_4_0_1; }
		
		//("do" (statements+=EsterelParallel) "end" "exec"?)?
		public Group getGroup_2_0_5() { return cGroup_2_0_5; }
		
		//"do"
		public Keyword getDoKeyword_2_0_5_0() { return cDoKeyword_2_0_5_0; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_2_0_5_1() { return cStatementsAssignment_2_0_5_1; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_2_0_5_1_0() { return cStatementsEsterelParallelParserRuleCall_2_0_5_1_0; }
		
		//"end"
		public Keyword getEndKeyword_2_0_5_2() { return cEndKeyword_2_0_5_2; }
		
		//"exec"?
		public Keyword getExecKeyword_2_0_5_3() { return cExecKeyword_2_0_5_3; }
		
		//execCaseList+=ExecCase+
		//"end" "exec"?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//execCaseList+=ExecCase+
		public Assignment getExecCaseListAssignment_2_1_0() { return cExecCaseListAssignment_2_1_0; }
		
		//ExecCase
		public RuleCall getExecCaseListExecCaseParserRuleCall_2_1_0_0() { return cExecCaseListExecCaseParserRuleCall_2_1_0_0; }
		
		//"end"
		public Keyword getEndKeyword_2_1_1() { return cEndKeyword_2_1_1; }
		
		//"exec"?
		public Keyword getExecKeyword_2_1_2() { return cExecKeyword_2_1_2; }
	}
	public class ExecCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ExecCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_2_0 = (CrossReference)cTaskAssignment_2.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_2_0_1 = (RuleCall)cTaskTaskCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Assignment cReferenceParametersAssignment_3_0_1_0 = (Assignment)cGroup_3_0_1.eContents().get(0);
		private final CrossReference cReferenceParametersVariableCrossReference_3_0_1_0_0 = (CrossReference)cReferenceParametersAssignment_3_0_1_0.eContents().get(0);
		private final RuleCall cReferenceParametersVariableIDTerminalRuleCall_3_0_1_0_0_1 = (RuleCall)cReferenceParametersVariableCrossReference_3_0_1_0_0.eContents().get(1);
		private final Group cGroup_3_0_1_1 = (Group)cGroup_3_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_1_0 = (Keyword)cGroup_3_0_1_1.eContents().get(0);
		private final Assignment cReferenceParametersAssignment_3_0_1_1_1 = (Assignment)cGroup_3_0_1_1.eContents().get(1);
		private final CrossReference cReferenceParametersVariableCrossReference_3_0_1_1_1_0 = (CrossReference)cReferenceParametersAssignment_3_0_1_1_1.eContents().get(0);
		private final RuleCall cReferenceParametersVariableIDTerminalRuleCall_3_0_1_1_1_0_1 = (RuleCall)cReferenceParametersVariableCrossReference_3_0_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cValueParametersAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cValueParametersExpressionParserRuleCall_4_0_1_0_0 = (RuleCall)cValueParametersAssignment_4_0_1_0.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_1_0 = (Keyword)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cValueParametersAssignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cValueParametersExpressionParserRuleCall_4_0_1_1_1_0 = (RuleCall)cValueParametersAssignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Keyword cReturnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnSignalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cReturnSignalSignalCrossReference_6_0 = (CrossReference)cReturnSignalAssignment_6.eContents().get(0);
		private final RuleCall cReturnSignalSignalIDTerminalRuleCall_6_0_1 = (RuleCall)cReturnSignalSignalCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDoKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStatementsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_7_1_0 = (RuleCall)cStatementsAssignment_7_1.eContents().get(0);
		
		//ExecCase:
		//    (annotations += Annotation)*
		//    "case" task=[Task|ID]
		//    ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		//    ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"  | '()')
		//    "return"
		//    returnSignal=[Signal]
		//    ("do" (statements+=EsterelParallel))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"case" task=[Task|ID]
		//("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		//("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"  | '()')
		//"return"
		//returnSignal=[Signal]
		//("do" (statements+=EsterelParallel))?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//task=[Task|ID]
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }
		
		//[Task|ID]
		public CrossReference getTaskTaskCrossReference_2_0() { return cTaskTaskCrossReference_2_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_2_0_1() { return cTaskTaskIDTerminalRuleCall_2_0_1; }
		
		//("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//"(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")"
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }
		
		//(referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//referenceParameters+=[Variable|ID]
		public Assignment getReferenceParametersAssignment_3_0_1_0() { return cReferenceParametersAssignment_3_0_1_0; }
		
		//[Variable|ID]
		public CrossReference getReferenceParametersVariableCrossReference_3_0_1_0_0() { return cReferenceParametersVariableCrossReference_3_0_1_0_0; }
		
		//ID
		public RuleCall getReferenceParametersVariableIDTerminalRuleCall_3_0_1_0_0_1() { return cReferenceParametersVariableIDTerminalRuleCall_3_0_1_0_0_1; }
		
		//("," referenceParameters+=[Variable|ID])*
		public Group getGroup_3_0_1_1() { return cGroup_3_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_3_0_1_1_0() { return cCommaKeyword_3_0_1_1_0; }
		
		//referenceParameters+=[Variable|ID]
		public Assignment getReferenceParametersAssignment_3_0_1_1_1() { return cReferenceParametersAssignment_3_0_1_1_1; }
		
		//[Variable|ID]
		public CrossReference getReferenceParametersVariableCrossReference_3_0_1_1_1_0() { return cReferenceParametersVariableCrossReference_3_0_1_1_1_0; }
		
		//ID
		public RuleCall getReferenceParametersVariableIDTerminalRuleCall_3_0_1_1_1_0_1() { return cReferenceParametersVariableIDTerminalRuleCall_3_0_1_1_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_0_2() { return cRightParenthesisKeyword_3_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3_1() { return cLeftParenthesisRightParenthesisKeyword_3_1; }
		
		//("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"  | '()')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//"(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }
		
		//(valueParameters+=Expression ("," valueParameters+=Expression)*)?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//valueParameters+=Expression
		public Assignment getValueParametersAssignment_4_0_1_0() { return cValueParametersAssignment_4_0_1_0; }
		
		//Expression
		public RuleCall getValueParametersExpressionParserRuleCall_4_0_1_0_0() { return cValueParametersExpressionParserRuleCall_4_0_1_0_0; }
		
		//("," valueParameters+=Expression)*
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_4_0_1_1_0() { return cCommaKeyword_4_0_1_1_0; }
		
		//valueParameters+=Expression
		public Assignment getValueParametersAssignment_4_0_1_1_1() { return cValueParametersAssignment_4_0_1_1_1; }
		
		//Expression
		public RuleCall getValueParametersExpressionParserRuleCall_4_0_1_1_1_0() { return cValueParametersExpressionParserRuleCall_4_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_0_2() { return cRightParenthesisKeyword_4_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_4_1() { return cLeftParenthesisRightParenthesisKeyword_4_1; }
		
		//"return"
		public Keyword getReturnKeyword_5() { return cReturnKeyword_5; }
		
		//returnSignal=[Signal]
		public Assignment getReturnSignalAssignment_6() { return cReturnSignalAssignment_6; }
		
		//[Signal]
		public CrossReference getReturnSignalSignalCrossReference_6_0() { return cReturnSignalSignalCrossReference_6_0; }
		
		//ID
		public RuleCall getReturnSignalSignalIDTerminalRuleCall_6_0_1() { return cReturnSignalSignalIDTerminalRuleCall_6_0_1; }
		
		//("do" (statements+=EsterelParallel))?
		public Group getGroup_7() { return cGroup_7; }
		
		//"do"
		public Keyword getDoKeyword_7_0() { return cDoKeyword_7_0; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_7_1() { return cStatementsAssignment_7_1; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_7_1_0() { return cStatementsEsterelParallelParserRuleCall_7_1_0; }
	}
	public class LocalSignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.LocalSignalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsSignalParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsSignalParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSignalKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// = 7.5.13 Local Signal Declaration
		//// -------------------------------------
		//LocalSignalDeclaration:
		//    (annotations += Annotation)*
		//    "signal" valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//    "in" (statements+=EsterelParallel)
		//    "end" "signal"?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"signal" valuedObjects+=Signal ("," valuedObjects+=Signal)*
		//"in" (statements+=EsterelParallel)
		//"end" "signal"?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"signal"
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_2_0() { return cValuedObjectsSignalParserRuleCall_2_0; }
		
		//("," valuedObjects+=Signal)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//valuedObjects+=Signal
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }
		
		//Signal
		public RuleCall getValuedObjectsSignalParserRuleCall_3_1_0() { return cValuedObjectsSignalParserRuleCall_3_1_0; }
		
		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_5_0() { return cStatementsEsterelParallelParserRuleCall_5_0; }
		
		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//"signal"?
		public Keyword getSignalKeyword_7() { return cSignalKeyword_7; }
	}
	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsEsterelVariableDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclarationsEsterelVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cVarKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// = 7.5.14 Local Variable Declaration
		//// -------------------------------------
		//LocalVariableDeclaration:
		//    (annotations += Annotation)*
		//    "var"
		//    (declarations+=EsterelVariableDeclaration) ("," declarations+=EsterelVariableDeclaration)*
		//    "in"
		//    (statements+=EsterelParallel)
		//    "end" "var"?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"var"
		//(declarations+=EsterelVariableDeclaration) ("," declarations+=EsterelVariableDeclaration)*
		//"in"
		//(statements+=EsterelParallel)
		//"end" "var"?
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//(declarations+=EsterelVariableDeclaration)
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//EsterelVariableDeclaration
		public RuleCall getDeclarationsEsterelVariableDeclarationParserRuleCall_2_0() { return cDeclarationsEsterelVariableDeclarationParserRuleCall_2_0; }
		
		//("," declarations+=EsterelVariableDeclaration)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//declarations+=EsterelVariableDeclaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }
		
		//EsterelVariableDeclaration
		public RuleCall getDeclarationsEsterelVariableDeclarationParserRuleCall_3_1_0() { return cDeclarationsEsterelVariableDeclarationParserRuleCall_3_1_0; }
		
		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_5_0() { return cStatementsEsterelParallelParserRuleCall_5_0; }
		
		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//"var"?
		public Keyword getVarKeyword_7() { return cVarKeyword_7; }
	}
	public class EsterelVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuedObjectsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuedObjectsVariableParserRuleCall_0_0 = (RuleCall)cValuedObjectsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuedObjectsVariableParserRuleCall_1_1_0 = (RuleCall)cValuedObjectsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//EsterelVariableDeclaration:
		//    (valuedObjects+=Variable) ("," valuedObjects+=Variable)* ":" type=TypeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//(valuedObjects+=Variable) ("," valuedObjects+=Variable)* ":" type=TypeIdentifier
		public Group getGroup() { return cGroup; }
		
		//(valuedObjects+=Variable)
		public Assignment getValuedObjectsAssignment_0() { return cValuedObjectsAssignment_0; }
		
		//Variable
		public RuleCall getValuedObjectsVariableParserRuleCall_0_0() { return cValuedObjectsVariableParserRuleCall_0_0; }
		
		//("," valuedObjects+=Variable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//valuedObjects+=Variable
		public Assignment getValuedObjectsAssignment_1_1() { return cValuedObjectsAssignment_1_1; }
		
		//Variable
		public RuleCall getValuedObjectsVariableParserRuleCall_1_1_0() { return cValuedObjectsVariableParserRuleCall_1_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeIdentifier
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_3_0() { return cTypeTypeIdentifierParserRuleCall_3_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_1_1_0 = (RuleCall)cInitialValueAssignment_1_1.eContents().get(0);
		
		//Variable:
		//     name=ID (":=" initialValue=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (":=" initialValue=Expression)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(":=" initialValue=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1_0() { return cColonEqualsSignKeyword_1_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_1_1() { return cInitialValueAssignment_1_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_1_1_0() { return cInitialValueExpressionParserRuleCall_1_1_0; }
	}
	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Run");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRunKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cModuleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cModuleModuleRenamingParserRuleCall_1_0_1_0 = (RuleCall)cModuleAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cRenamingsRenamingsParserRuleCall_1_0_2_1_0 = (RuleCall)cRenamingsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_2_2 = (Group)cGroup_1_0_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_0_2_2_0 = (Keyword)cGroup_1_0_2_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_0_2_2_1 = (Assignment)cGroup_1_0_2_2.eContents().get(1);
		private final RuleCall cRenamingsRenamingsParserRuleCall_1_0_2_2_1_0 = (RuleCall)cRenamingsAssignment_1_0_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_3 = (Keyword)cGroup_1_0_2.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCopymoduleKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cModuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cModuleModuleRenamingParserRuleCall_1_1_1_0 = (RuleCall)cModuleAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cRenamingsRenamingsParserRuleCall_1_1_2_1_0 = (RuleCall)cRenamingsAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_2_2 = (Group)cGroup_1_1_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_2_2_0 = (Keyword)cGroup_1_1_2_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_1_2_2_1 = (Assignment)cGroup_1_1_2_2.eContents().get(1);
		private final RuleCall cRenamingsRenamingsParserRuleCall_1_1_2_2_1_0 = (RuleCall)cRenamingsAssignment_1_1_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_3 = (Keyword)cGroup_1_1_2.eContents().get(3);
		
		//// = 7.5.15 The run Module Instantiation Statement
		//// -------------------------------------
		//Run:
		//    (annotations += Annotation)*
		//    (   (   "run"
		//            module=ModuleRenaming
		//            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		//        )
		//        |
		//        (   "copymodule"
		//            module=ModuleRenaming
		//            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		//         )
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//(   (   "run"
		//        module=ModuleRenaming
		//        ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		//    )
		//    |
		//    (   "copymodule"
		//        module=ModuleRenaming
		//        ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		//     )
		//)
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//(   (   "run"
		//        module=ModuleRenaming
		//        ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		//    )
		//    |
		//    (   "copymodule"
		//        module=ModuleRenaming
		//        ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		//     )
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(   "run"
		//         module=ModuleRenaming
		//         ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		//     )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"run"
		public Keyword getRunKeyword_1_0_0() { return cRunKeyword_1_0_0; }
		
		//module=ModuleRenaming
		public Assignment getModuleAssignment_1_0_1() { return cModuleAssignment_1_0_1; }
		
		//ModuleRenaming
		public RuleCall getModuleModuleRenamingParserRuleCall_1_0_1_0() { return cModuleModuleRenamingParserRuleCall_1_0_1_0; }
		
		//("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }
		
		//renamings+=Renamings
		public Assignment getRenamingsAssignment_1_0_2_1() { return cRenamingsAssignment_1_0_2_1; }
		
		//Renamings
		public RuleCall getRenamingsRenamingsParserRuleCall_1_0_2_1_0() { return cRenamingsRenamingsParserRuleCall_1_0_2_1_0; }
		
		//(";" renamings+=Renamings)*
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0_2_2_0() { return cSemicolonKeyword_1_0_2_2_0; }
		
		//renamings+=Renamings
		public Assignment getRenamingsAssignment_1_0_2_2_1() { return cRenamingsAssignment_1_0_2_2_1; }
		
		//Renamings
		public RuleCall getRenamingsRenamingsParserRuleCall_1_0_2_2_1_0() { return cRenamingsRenamingsParserRuleCall_1_0_2_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2_3() { return cRightSquareBracketKeyword_1_0_2_3; }
		
		//(   "copymodule"
		//    module=ModuleRenaming
		//    ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		// )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"copymodule"
		public Keyword getCopymoduleKeyword_1_1_0() { return cCopymoduleKeyword_1_1_0; }
		
		//module=ModuleRenaming
		public Assignment getModuleAssignment_1_1_1() { return cModuleAssignment_1_1_1; }
		
		//ModuleRenaming
		public RuleCall getModuleModuleRenamingParserRuleCall_1_1_1_0() { return cModuleModuleRenamingParserRuleCall_1_1_1_0; }
		
		//("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }
		
		//renamings+=Renamings
		public Assignment getRenamingsAssignment_1_1_2_1() { return cRenamingsAssignment_1_1_2_1; }
		
		//Renamings
		public RuleCall getRenamingsRenamingsParserRuleCall_1_1_2_1_0() { return cRenamingsRenamingsParserRuleCall_1_1_2_1_0; }
		
		//(";" renamings+=Renamings)*
		public Group getGroup_1_1_2_2() { return cGroup_1_1_2_2; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1_2_2_0() { return cSemicolonKeyword_1_1_2_2_0; }
		
		//renamings+=Renamings
		public Assignment getRenamingsAssignment_1_1_2_2_1() { return cRenamingsAssignment_1_1_2_2_1; }
		
		//Renamings
		public RuleCall getRenamingsRenamingsParserRuleCall_1_1_2_2_1_0() { return cRenamingsRenamingsParserRuleCall_1_1_2_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_3() { return cRightSquareBracketKeyword_1_1_2_3; }
	}
	public class ModuleRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ModuleRenaming");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cModuleModuleCrossReference_0_0 = (CrossReference)cModuleAssignment_0.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_0_0_1 = (RuleCall)cModuleModuleCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNewNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNewNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNewNameAssignment_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cModuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cModuleModuleCrossReference_1_2_0 = (CrossReference)cModuleAssignment_1_2.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_1_2_0_1 = (RuleCall)cModuleModuleCrossReference_1_2_0.eContents().get(1);
		
		//ModuleRenaming:
		//       module=[scl::Module|ID]
		//    | (newName=ID "/" module=[scl::Module|ID])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//   module=[scl::Module|ID]
		//| (newName=ID "/" module=[scl::Module|ID])
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//module=[scl::Module|ID]
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }
		
		//[scl::Module|ID]
		public CrossReference getModuleModuleCrossReference_0_0() { return cModuleModuleCrossReference_0_0; }
		
		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_0_0_1() { return cModuleModuleIDTerminalRuleCall_0_0_1; }
		
		//(newName=ID "/" module=[scl::Module|ID])
		public Group getGroup_1() { return cGroup_1; }
		
		//newName=ID
		public Assignment getNewNameAssignment_1_0() { return cNewNameAssignment_1_0; }
		
		//ID
		public RuleCall getNewNameIDTerminalRuleCall_1_0_0() { return cNewNameIDTerminalRuleCall_1_0_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//module=[scl::Module|ID]
		public Assignment getModuleAssignment_1_2() { return cModuleAssignment_1_2; }
		
		//[scl::Module|ID]
		public CrossReference getModuleModuleCrossReference_1_2_0() { return cModuleModuleCrossReference_1_2_0; }
		
		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_1_2_0_1() { return cModuleModuleIDTerminalRuleCall_1_2_0_1; }
	}
	public class RenamingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Renamings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cTypeKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRenamingsTypeRenamingParserRuleCall_1_0_1_0 = (RuleCall)cRenamingsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cRenamingsTypeRenamingParserRuleCall_1_0_2_1_0 = (RuleCall)cRenamingsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cConstantKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRenamingsConstantRenamingParserRuleCall_1_1_1_0 = (RuleCall)cRenamingsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cRenamingsConstantRenamingParserRuleCall_1_1_2_1_0 = (RuleCall)cRenamingsAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFunctionKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRenamingsFunctionRenamingParserRuleCall_1_2_1_0 = (RuleCall)cRenamingsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cRenamingsFunctionRenamingParserRuleCall_1_2_2_1_0 = (RuleCall)cRenamingsAssignment_1_2_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cProcedureKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRenamingsProcedureRenamingParserRuleCall_1_3_1_0 = (RuleCall)cRenamingsAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cRenamingsProcedureRenamingParserRuleCall_1_3_2_1_0 = (RuleCall)cRenamingsAssignment_1_3_2_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cTaskKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cRenamingsTaskRenamingParserRuleCall_1_4_1_0 = (RuleCall)cRenamingsAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_4_2 = (Group)cGroup_1_4.eContents().get(2);
		private final Keyword cCommaKeyword_1_4_2_0 = (Keyword)cGroup_1_4_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_4_2_1 = (Assignment)cGroup_1_4_2.eContents().get(1);
		private final RuleCall cRenamingsTaskRenamingParserRuleCall_1_4_2_1_0 = (RuleCall)cRenamingsAssignment_1_4_2_1.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cSignalKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cRenamingsSignalRenamingParserRuleCall_1_5_1_0 = (RuleCall)cRenamingsAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Keyword cCommaKeyword_1_5_2_0 = (Keyword)cGroup_1_5_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_5_2_1 = (Assignment)cGroup_1_5_2.eContents().get(1);
		private final RuleCall cRenamingsSignalRenamingParserRuleCall_1_5_2_1_0 = (RuleCall)cRenamingsAssignment_1_5_2_1.eContents().get(0);
		
		//Renamings:
		//    (annotations += Annotation)*
		//    ( "type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
		//    | "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
		//    | "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
		//    | "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
		//    | "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
		//    | "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)* );
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//( "type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
		//| "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
		//| "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
		//| "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
		//| "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
		//| "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)* )
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//( "type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
		//| "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
		//| "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
		//| "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
		//| "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
		//| "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)* )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"type"
		public Keyword getTypeKeyword_1_0_0() { return cTypeKeyword_1_0_0; }
		
		//renamings+=TypeRenaming
		public Assignment getRenamingsAssignment_1_0_1() { return cRenamingsAssignment_1_0_1; }
		
		//TypeRenaming
		public RuleCall getRenamingsTypeRenamingParserRuleCall_1_0_1_0() { return cRenamingsTypeRenamingParserRuleCall_1_0_1_0; }
		
		//("," renamings+=TypeRenaming)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }
		
		//renamings+=TypeRenaming
		public Assignment getRenamingsAssignment_1_0_2_1() { return cRenamingsAssignment_1_0_2_1; }
		
		//TypeRenaming
		public RuleCall getRenamingsTypeRenamingParserRuleCall_1_0_2_1_0() { return cRenamingsTypeRenamingParserRuleCall_1_0_2_1_0; }
		
		//"constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"constant"
		public Keyword getConstantKeyword_1_1_0() { return cConstantKeyword_1_1_0; }
		
		//renamings+=ConstantRenaming
		public Assignment getRenamingsAssignment_1_1_1() { return cRenamingsAssignment_1_1_1; }
		
		//ConstantRenaming
		public RuleCall getRenamingsConstantRenamingParserRuleCall_1_1_1_0() { return cRenamingsConstantRenamingParserRuleCall_1_1_1_0; }
		
		//("," renamings+=ConstantRenaming)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }
		
		//renamings+=ConstantRenaming
		public Assignment getRenamingsAssignment_1_1_2_1() { return cRenamingsAssignment_1_1_2_1; }
		
		//ConstantRenaming
		public RuleCall getRenamingsConstantRenamingParserRuleCall_1_1_2_1_0() { return cRenamingsConstantRenamingParserRuleCall_1_1_2_1_0; }
		
		//"function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"function"
		public Keyword getFunctionKeyword_1_2_0() { return cFunctionKeyword_1_2_0; }
		
		//renamings+=FunctionRenaming
		public Assignment getRenamingsAssignment_1_2_1() { return cRenamingsAssignment_1_2_1; }
		
		//FunctionRenaming
		public RuleCall getRenamingsFunctionRenamingParserRuleCall_1_2_1_0() { return cRenamingsFunctionRenamingParserRuleCall_1_2_1_0; }
		
		//("," renamings+=FunctionRenaming)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//","
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }
		
		//renamings+=FunctionRenaming
		public Assignment getRenamingsAssignment_1_2_2_1() { return cRenamingsAssignment_1_2_2_1; }
		
		//FunctionRenaming
		public RuleCall getRenamingsFunctionRenamingParserRuleCall_1_2_2_1_0() { return cRenamingsFunctionRenamingParserRuleCall_1_2_2_1_0; }
		
		//"procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//"procedure"
		public Keyword getProcedureKeyword_1_3_0() { return cProcedureKeyword_1_3_0; }
		
		//renamings+=ProcedureRenaming
		public Assignment getRenamingsAssignment_1_3_1() { return cRenamingsAssignment_1_3_1; }
		
		//ProcedureRenaming
		public RuleCall getRenamingsProcedureRenamingParserRuleCall_1_3_1_0() { return cRenamingsProcedureRenamingParserRuleCall_1_3_1_0; }
		
		//("," renamings+=ProcedureRenaming)*
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }
		
		//","
		public Keyword getCommaKeyword_1_3_2_0() { return cCommaKeyword_1_3_2_0; }
		
		//renamings+=ProcedureRenaming
		public Assignment getRenamingsAssignment_1_3_2_1() { return cRenamingsAssignment_1_3_2_1; }
		
		//ProcedureRenaming
		public RuleCall getRenamingsProcedureRenamingParserRuleCall_1_3_2_1_0() { return cRenamingsProcedureRenamingParserRuleCall_1_3_2_1_0; }
		
		//"task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//"task"
		public Keyword getTaskKeyword_1_4_0() { return cTaskKeyword_1_4_0; }
		
		//renamings+=TaskRenaming
		public Assignment getRenamingsAssignment_1_4_1() { return cRenamingsAssignment_1_4_1; }
		
		//TaskRenaming
		public RuleCall getRenamingsTaskRenamingParserRuleCall_1_4_1_0() { return cRenamingsTaskRenamingParserRuleCall_1_4_1_0; }
		
		//("," renamings+=TaskRenaming)*
		public Group getGroup_1_4_2() { return cGroup_1_4_2; }
		
		//","
		public Keyword getCommaKeyword_1_4_2_0() { return cCommaKeyword_1_4_2_0; }
		
		//renamings+=TaskRenaming
		public Assignment getRenamingsAssignment_1_4_2_1() { return cRenamingsAssignment_1_4_2_1; }
		
		//TaskRenaming
		public RuleCall getRenamingsTaskRenamingParserRuleCall_1_4_2_1_0() { return cRenamingsTaskRenamingParserRuleCall_1_4_2_1_0; }
		
		//"signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)*
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//"signal"
		public Keyword getSignalKeyword_1_5_0() { return cSignalKeyword_1_5_0; }
		
		//renamings+=SignalRenaming
		public Assignment getRenamingsAssignment_1_5_1() { return cRenamingsAssignment_1_5_1; }
		
		//SignalRenaming
		public RuleCall getRenamingsSignalRenamingParserRuleCall_1_5_1_0() { return cRenamingsSignalRenamingParserRuleCall_1_5_1_0; }
		
		//("," renamings+=SignalRenaming)*
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }
		
		//","
		public Keyword getCommaKeyword_1_5_2_0() { return cCommaKeyword_1_5_2_0; }
		
		//renamings+=SignalRenaming
		public Assignment getRenamingsAssignment_1_5_2_1() { return cRenamingsAssignment_1_5_2_1; }
		
		//SignalRenaming
		public RuleCall getRenamingsSignalRenamingParserRuleCall_1_5_2_1_0() { return cRenamingsSignalRenamingParserRuleCall_1_5_2_1_0; }
	}
	public class TypeRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TypeRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNewNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cNewNameTypeDefinitionCrossReference_0_0_0 = (CrossReference)cNewNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNewNameTypeDefinitionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNewNameTypeDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNewTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNewTypeEsterelValueTypeEnumRuleCall_0_1_0 = (RuleCall)cNewTypeAssignment_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameTypeDefinitionCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameTypeDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameTypeDefinitionCrossReference_2_0.eContents().get(1);
		
		//TypeRenaming:
		//    (newName=[TypeDefinition|ID] | newType=EsterelValueType) "/" oldName=[TypeDefinition|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//(newName=[TypeDefinition|ID] | newType=EsterelValueType) "/" oldName=[TypeDefinition|ID]
		public Group getGroup() { return cGroup; }
		
		//(newName=[TypeDefinition|ID] | newType=EsterelValueType)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//newName=[TypeDefinition|ID]
		public Assignment getNewNameAssignment_0_0() { return cNewNameAssignment_0_0; }
		
		//[TypeDefinition|ID]
		public CrossReference getNewNameTypeDefinitionCrossReference_0_0_0() { return cNewNameTypeDefinitionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getNewNameTypeDefinitionIDTerminalRuleCall_0_0_0_1() { return cNewNameTypeDefinitionIDTerminalRuleCall_0_0_0_1; }
		
		//newType=EsterelValueType
		public Assignment getNewTypeAssignment_0_1() { return cNewTypeAssignment_0_1; }
		
		//EsterelValueType
		public RuleCall getNewTypeEsterelValueTypeEnumRuleCall_0_1_0() { return cNewTypeEsterelValueTypeEnumRuleCall_0_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//oldName=[TypeDefinition|ID]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }
		
		//[TypeDefinition|ID]
		public CrossReference getOldNameTypeDefinitionCrossReference_2_0() { return cOldNameTypeDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getOldNameTypeDefinitionIDTerminalRuleCall_2_0_1() { return cOldNameTypeDefinitionIDTerminalRuleCall_2_0_1; }
	}
	public class ConstantRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ConstantRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNewNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cNewNameConstantCrossReference_0_0_0 = (CrossReference)cNewNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNewNameConstantIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNewNameConstantCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNewValueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNewValueAnyValueParserRuleCall_0_1_0 = (RuleCall)cNewValueAssignment_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameConstantCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameConstantIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameConstantCrossReference_2_0.eContents().get(1);
		
		//ConstantRenaming:
		//    (newName=[Constant|ID] | newValue=AnyValue) "/" oldName=[Constant|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//(newName=[Constant|ID] | newValue=AnyValue) "/" oldName=[Constant|ID]
		public Group getGroup() { return cGroup; }
		
		//(newName=[Constant|ID] | newValue=AnyValue)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//newName=[Constant|ID]
		public Assignment getNewNameAssignment_0_0() { return cNewNameAssignment_0_0; }
		
		//[Constant|ID]
		public CrossReference getNewNameConstantCrossReference_0_0_0() { return cNewNameConstantCrossReference_0_0_0; }
		
		//ID
		public RuleCall getNewNameConstantIDTerminalRuleCall_0_0_0_1() { return cNewNameConstantIDTerminalRuleCall_0_0_0_1; }
		
		//newValue=AnyValue
		public Assignment getNewValueAssignment_0_1() { return cNewValueAssignment_0_1; }
		
		//AnyValue
		public RuleCall getNewValueAnyValueParserRuleCall_0_1_0() { return cNewValueAnyValueParserRuleCall_0_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//oldName=[Constant|ID]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }
		
		//[Constant|ID]
		public CrossReference getOldNameConstantCrossReference_2_0() { return cOldNameConstantCrossReference_2_0; }
		
		//ID
		public RuleCall getOldNameConstantIDTerminalRuleCall_2_0_1() { return cOldNameConstantIDTerminalRuleCall_2_0_1; }
	}
	public class FunctionRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.FunctionRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNewNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cNewNameFunctionCrossReference_0_0_0 = (CrossReference)cNewNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNewNameFunctionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNewNameFunctionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNewFuncAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNewFuncBuildInFunctionParserRuleCall_0_1_0 = (RuleCall)cNewFuncAssignment_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameFunctionCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameFunctionIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameFunctionCrossReference_2_0.eContents().get(1);
		
		//FunctionRenaming:
		//    (newName=[Function|ID] | newFunc=BuildInFunction) "/" oldName=[Function|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//(newName=[Function|ID] | newFunc=BuildInFunction) "/" oldName=[Function|ID]
		public Group getGroup() { return cGroup; }
		
		//(newName=[Function|ID] | newFunc=BuildInFunction)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//newName=[Function|ID]
		public Assignment getNewNameAssignment_0_0() { return cNewNameAssignment_0_0; }
		
		//[Function|ID]
		public CrossReference getNewNameFunctionCrossReference_0_0_0() { return cNewNameFunctionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getNewNameFunctionIDTerminalRuleCall_0_0_0_1() { return cNewNameFunctionIDTerminalRuleCall_0_0_0_1; }
		
		//newFunc=BuildInFunction
		public Assignment getNewFuncAssignment_0_1() { return cNewFuncAssignment_0_1; }
		
		//BuildInFunction
		public RuleCall getNewFuncBuildInFunctionParserRuleCall_0_1_0() { return cNewFuncBuildInFunctionParserRuleCall_0_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//oldName=[Function|ID]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }
		
		//[Function|ID]
		public CrossReference getOldNameFunctionCrossReference_2_0() { return cOldNameFunctionCrossReference_2_0; }
		
		//ID
		public RuleCall getOldNameFunctionIDTerminalRuleCall_2_0_1() { return cOldNameFunctionIDTerminalRuleCall_2_0_1; }
	}
	public class ProcedureRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ProcedureRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNewNameProcedureCrossReference_0_0 = (CrossReference)cNewNameAssignment_0.eContents().get(0);
		private final RuleCall cNewNameProcedureIDTerminalRuleCall_0_0_1 = (RuleCall)cNewNameProcedureCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameProcedureCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameProcedureIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameProcedureCrossReference_2_0.eContents().get(1);
		
		//ProcedureRenaming:
		//    newName=[Procedure|ID] "/" oldName=[Procedure|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//newName=[Procedure|ID] "/" oldName=[Procedure|ID]
		public Group getGroup() { return cGroup; }
		
		//newName=[Procedure|ID]
		public Assignment getNewNameAssignment_0() { return cNewNameAssignment_0; }
		
		//[Procedure|ID]
		public CrossReference getNewNameProcedureCrossReference_0_0() { return cNewNameProcedureCrossReference_0_0; }
		
		//ID
		public RuleCall getNewNameProcedureIDTerminalRuleCall_0_0_1() { return cNewNameProcedureIDTerminalRuleCall_0_0_1; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//oldName=[Procedure|ID]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }
		
		//[Procedure|ID]
		public CrossReference getOldNameProcedureCrossReference_2_0() { return cOldNameProcedureCrossReference_2_0; }
		
		//ID
		public RuleCall getOldNameProcedureIDTerminalRuleCall_2_0_1() { return cOldNameProcedureIDTerminalRuleCall_2_0_1; }
	}
	public class TaskRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TaskRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNewNameTaskCrossReference_0_0 = (CrossReference)cNewNameAssignment_0.eContents().get(0);
		private final RuleCall cNewNameTaskIDTerminalRuleCall_0_0_1 = (RuleCall)cNewNameTaskCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameTaskCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameTaskIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameTaskCrossReference_2_0.eContents().get(1);
		
		//TaskRenaming:
		//    newName=[Task|ID] "/" oldName=[Task|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//newName=[Task|ID] "/" oldName=[Task|ID]
		public Group getGroup() { return cGroup; }
		
		//newName=[Task|ID]
		public Assignment getNewNameAssignment_0() { return cNewNameAssignment_0; }
		
		//[Task|ID]
		public CrossReference getNewNameTaskCrossReference_0_0() { return cNewNameTaskCrossReference_0_0; }
		
		//ID
		public RuleCall getNewNameTaskIDTerminalRuleCall_0_0_1() { return cNewNameTaskIDTerminalRuleCall_0_0_1; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//oldName=[Task|ID]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }
		
		//[Task|ID]
		public CrossReference getOldNameTaskCrossReference_2_0() { return cOldNameTaskCrossReference_2_0; }
		
		//ID
		public RuleCall getOldNameTaskIDTerminalRuleCall_2_0_1() { return cOldNameTaskIDTerminalRuleCall_2_0_1; }
	}
	public class SignalRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNewNameSignalOrTickReferenceExpressionParserRuleCall_0_0 = (RuleCall)cNewNameAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOldNameSignalOrTickReferenceExpressionParserRuleCall_2_0 = (RuleCall)cOldNameAssignment_2.eContents().get(0);
		
		//SignalRenaming:
		//    newName=SignalOrTickReferenceExpression "/" oldName=SignalOrTickReferenceExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//newName=SignalOrTickReferenceExpression "/" oldName=SignalOrTickReferenceExpression
		public Group getGroup() { return cGroup; }
		
		//newName=SignalOrTickReferenceExpression
		public Assignment getNewNameAssignment_0() { return cNewNameAssignment_0; }
		
		//SignalOrTickReferenceExpression
		public RuleCall getNewNameSignalOrTickReferenceExpressionParserRuleCall_0_0() { return cNewNameSignalOrTickReferenceExpressionParserRuleCall_0_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//oldName=SignalOrTickReferenceExpression
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }
		
		//SignalOrTickReferenceExpression
		public RuleCall getOldNameSignalOrTickReferenceExpressionParserRuleCall_2_0() { return cOldNameSignalOrTickReferenceExpressionParserRuleCall_2_0; }
	}
	public class BuildInFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.BuildInFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cModKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cNotKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cAndKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cOrKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//// renaming can also rename build in types and functions
		//BuildInFunction:
		//    "*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";
		@Override public ParserRule getRule() { return rule; }
		
		//"*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//"mod"
		public Keyword getModKeyword_4() { return cModKeyword_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_6() { return cLessThanSignGreaterThanSignKeyword_6; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
		
		//"<"
		public Keyword getLessThanSignKeyword_8() { return cLessThanSignKeyword_8; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_9() { return cLessThanSignEqualsSignKeyword_9; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_10() { return cGreaterThanSignEqualsSignKeyword_10; }
		
		//"not"
		public Keyword getNotKeyword_11() { return cNotKeyword_11; }
		
		//"and"
		public Keyword getAndKeyword_12() { return cAndKeyword_12; }
		
		//"or"
		public Keyword getOrKeyword_13() { return cOrKeyword_13; }
	}
	public class LegacyDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.LegacyDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cUptoKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDelayAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDelayDelayExpressionParserRuleCall_3_0_1_0 = (RuleCall)cDelayAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cWatchingKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cWatchingAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cWatchingDelayExpressionParserRuleCall_3_1_1_0 = (RuleCall)cWatchingAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cTimeoutKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cWatchingStatementsAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cWatchingStatementsEsterelParallelParserRuleCall_3_1_2_1_0 = (RuleCall)cWatchingStatementsAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cEndKeyword_3_1_2_2 = (Keyword)cGroup_3_1_2.eContents().get(2);
		private final Keyword cTimeoutKeyword_3_1_2_3 = (Keyword)cGroup_3_1_2.eContents().get(3);
		
		///* ###################################################
		// * ###               7.6 Old Syntax                ###
		// * ###################################################
		// */
		//LegacyDo returns Do:
		//    (annotations += Annotation)*
		//    "do"
		//    (statements+=EsterelParallel)
		//    (
		//        "upto"
		//        delay=DelayExpression
		//    |
		//        "watching"
		//        watching=DelayExpression
		//        (
		//            "timeout"
		//            watchingStatements+=EsterelParallel
		//            "end" "timeout"?
		//        )?
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"do"
		//(statements+=EsterelParallel)
		//(
		//    "upto"
		//    delay=DelayExpression
		//|
		//    "watching"
		//    watching=DelayExpression
		//    (
		//        "timeout"
		//        watchingStatements+=EsterelParallel
		//        "end" "timeout"?
		//    )?
		//)
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }
		
		//(statements+=EsterelParallel)
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_2_0() { return cStatementsEsterelParallelParserRuleCall_2_0; }
		
		//(
		//    "upto"
		//    delay=DelayExpression
		//|
		//    "watching"
		//    watching=DelayExpression
		//    (
		//        "timeout"
		//        watchingStatements+=EsterelParallel
		//        "end" "timeout"?
		//    )?
		//)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//"upto"
		//delay=DelayExpression
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//"upto"
		public Keyword getUptoKeyword_3_0_0() { return cUptoKeyword_3_0_0; }
		
		//delay=DelayExpression
		public Assignment getDelayAssignment_3_0_1() { return cDelayAssignment_3_0_1; }
		
		//DelayExpression
		public RuleCall getDelayDelayExpressionParserRuleCall_3_0_1_0() { return cDelayDelayExpressionParserRuleCall_3_0_1_0; }
		
		//"watching"
		//watching=DelayExpression
		//(
		//    "timeout"
		//    watchingStatements+=EsterelParallel
		//    "end" "timeout"?
		//)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"watching"
		public Keyword getWatchingKeyword_3_1_0() { return cWatchingKeyword_3_1_0; }
		
		//watching=DelayExpression
		public Assignment getWatchingAssignment_3_1_1() { return cWatchingAssignment_3_1_1; }
		
		//DelayExpression
		public RuleCall getWatchingDelayExpressionParserRuleCall_3_1_1_0() { return cWatchingDelayExpressionParserRuleCall_3_1_1_0; }
		
		//(
		//    "timeout"
		//    watchingStatements+=EsterelParallel
		//    "end" "timeout"?
		//)?
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//"timeout"
		public Keyword getTimeoutKeyword_3_1_2_0() { return cTimeoutKeyword_3_1_2_0; }
		
		//watchingStatements+=EsterelParallel
		public Assignment getWatchingStatementsAssignment_3_1_2_1() { return cWatchingStatementsAssignment_3_1_2_1; }
		
		//EsterelParallel
		public RuleCall getWatchingStatementsEsterelParallelParserRuleCall_3_1_2_1_0() { return cWatchingStatementsEsterelParallelParserRuleCall_3_1_2_1_0; }
		
		//"end"
		public Keyword getEndKeyword_3_1_2_2() { return cEndKeyword_3_1_2_2; }
		
		//"timeout"?
		public Keyword getTimeoutKeyword_3_1_2_3() { return cTimeoutKeyword_3_1_2_3; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEsterelFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrapExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValuedObjectPreExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cConstantExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		///* ###################################################
		// * ###               Expressions                   ###
		// * ###################################################
		// */
		//// Esterel is a bit richer than what is provided by kexpressions.
		//// These rules are introduced here.
		//// Care about order of the rules!
		//@Override
		//AtomicExpression returns kexpressions::Expression:
		//    EsterelFunctionCall
		//    | TrapExpression
		//    | BoolValue
		//    | ValuedObjectPreExpression
		//    | TextExpression
		//    | '(' BooleanExpression ')'
		//    | ConstantExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//EsterelFunctionCall
		//| TrapExpression
		//| BoolValue
		//| ValuedObjectPreExpression
		//| TextExpression
		//| '(' BooleanExpression ')'
		//| ConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EsterelFunctionCall
		public RuleCall getEsterelFunctionCallParserRuleCall_0() { return cEsterelFunctionCallParserRuleCall_0; }
		
		//TrapExpression
		public RuleCall getTrapExpressionParserRuleCall_1() { return cTrapExpressionParserRuleCall_1; }
		
		//BoolValue
		public RuleCall getBoolValueParserRuleCall_2() { return cBoolValueParserRuleCall_2; }
		
		//ValuedObjectPreExpression
		public RuleCall getValuedObjectPreExpressionParserRuleCall_3() { return cValuedObjectPreExpressionParserRuleCall_3; }
		
		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_4() { return cTextExpressionParserRuleCall_4; }
		
		//'(' BooleanExpression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5_1() { return cBooleanExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_6() { return cConstantExpressionParserRuleCall_6; }
	}
	public class TrapExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrapExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTrapTrapSignalCrossReference_2_0 = (CrossReference)cTrapAssignment_2.eContents().get(0);
		private final RuleCall cTrapTrapSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cTrapTrapSignalCrossReference_2_0.eContents().get(1);
		
		//TrapExpression returns kexpressions::Expression:
		//    {TrapExpression} "??" trap=[TrapSignal|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{TrapExpression} "??" trap=[TrapSignal|ID]
		public Group getGroup() { return cGroup; }
		
		//{TrapExpression}
		public Action getTrapExpressionAction_0() { return cTrapExpressionAction_0; }
		
		//"??"
		public Keyword getQuestionMarkQuestionMarkKeyword_1() { return cQuestionMarkQuestionMarkKeyword_1; }
		
		//trap=[TrapSignal|ID]
		public Assignment getTrapAssignment_2() { return cTrapAssignment_2; }
		
		//[TrapSignal|ID]
		public CrossReference getTrapTrapSignalCrossReference_2_0() { return cTrapTrapSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getTrapTrapSignalIDTerminalRuleCall_2_0_1() { return cTrapTrapSignalIDTerminalRuleCall_2_0_1; }
	}
	public class EsterelFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cParameterAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cParameterExpressionParserRuleCall_1_0_1_0_0 = (RuleCall)cParameterAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cParameterExpressionParserRuleCall_1_0_1_1_1_0 = (RuleCall)cParameterAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//EsterelFunctionCall:
		//    function=[Function|ID]
		//    ("(" (parameter+=Expression ("," parameter+=Expression)*)? ")" | '()');
		@Override public ParserRule getRule() { return rule; }
		
		//function=[Function|ID]
		//("(" (parameter+=Expression ("," parameter+=Expression)*)? ")" | '()')
		public Group getGroup() { return cGroup; }
		
		//function=[Function|ID]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[Function|ID]
		public CrossReference getFunctionFunctionCrossReference_0_0() { return cFunctionFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_0_0_1; }
		
		//("(" (parameter+=Expression ("," parameter+=Expression)*)? ")" | '()')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"(" (parameter+=Expression ("," parameter+=Expression)*)? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(parameter+=Expression ("," parameter+=Expression)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_1_0_1_0() { return cParameterAssignment_1_0_1_0; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_1_0_1_0_0() { return cParameterExpressionParserRuleCall_1_0_1_0_0; }
		
		//("," parameter+=Expression)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//parameter+=Expression
		public Assignment getParameterAssignment_1_0_1_1_1() { return cParameterAssignment_1_0_1_1_1; }
		
		//Expression
		public RuleCall getParameterExpressionParserRuleCall_1_0_1_1_1_0() { return cParameterExpressionParserRuleCall_1_0_1_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cConstantConstantCrossReference_1_0_0 = (CrossReference)cConstantAssignment_1_0.eContents().get(0);
		private final RuleCall cConstantConstantIDTerminalRuleCall_1_0_0_1 = (RuleCall)cConstantConstantCrossReference_1_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueAnyValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//ConstantExpression returns kexpressions::Expression:
		//    {ConstantExpression} (constant=[Constant|ID] | value=AnyValue);
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstantExpression} (constant=[Constant|ID] | value=AnyValue)
		public Group getGroup() { return cGroup; }
		
		//{ConstantExpression}
		public Action getConstantExpressionAction_0() { return cConstantExpressionAction_0; }
		
		//(constant=[Constant|ID] | value=AnyValue)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//constant=[Constant|ID]
		public Assignment getConstantAssignment_1_0() { return cConstantAssignment_1_0; }
		
		//[Constant|ID]
		public CrossReference getConstantConstantCrossReference_1_0_0() { return cConstantConstantCrossReference_1_0_0; }
		
		//ID
		public RuleCall getConstantConstantIDTerminalRuleCall_1_0_0_1() { return cConstantConstantIDTerminalRuleCall_1_0_0_1; }
		
		//value=AnyValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//AnyValue
		public RuleCall getValueAnyValueParserRuleCall_1_1_0() { return cValueAnyValueParserRuleCall_1_1_0; }
	}
	public class TrapExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTrapAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsTrapAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// --> B.3.5 Trap Expressions <--
		//// -------------------------------------
		//// The warning can be ignored since the operator will only override itself in this loop.
		//TrapExpr returns kexpressions::Expression:
		//    TrapAndExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelOrOperator subExpressions+=TrapAndExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//TrapAndExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelOrOperator subExpressions+=TrapAndExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//TrapAndExpression
		public RuleCall getTrapAndExpressionParserRuleCall_0() { return cTrapAndExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelOrOperator subExpressions+=TrapAndExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelOrOperator subExpressions+=TrapAndExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelOrOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelOrOperator
		public RuleCall getOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=TrapAndExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//TrapAndExpression
		public RuleCall getSubExpressionsTrapAndExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsTrapAndExpressionParserRuleCall_1_1_1_0; }
	}
	public class TrapAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTrapNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsTrapNotExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// The warning can be ignored since the operator will only override itself in this loop.
		//TrapAndExpression returns kexpressions::Expression:
		//    TrapNotExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//TrapNotExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//TrapNotExpression
		public RuleCall getTrapNotExpressionParserRuleCall_0() { return cTrapNotExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelAndOperator subExpressions+=TrapNotExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelAndOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelAndOperator
		public RuleCall getOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=TrapNotExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//TrapNotExpression
		public RuleCall getSubExpressionsTrapNotExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsTrapNotExpressionParserRuleCall_1_1_1_0; }
	}
	public class TrapNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterelNotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsTrapNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cTrapAtomicExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// The warning can be ignored since the operator will only override itself in this loop.
		//TrapNotExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=EsterelNotOperator
		//    subExpressions+=TrapNotExpression
		//    |
		//    TrapAtomicExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelNotOperator
		//subExpressions+=TrapNotExpression
		//|
		//TrapAtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelNotOperator
		//subExpressions+=TrapNotExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=EsterelNotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EsterelNotOperator
		public RuleCall getOperatorEsterelNotOperatorEnumRuleCall_0_1_0() { return cOperatorEsterelNotOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=TrapNotExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//TrapNotExpression
		public RuleCall getSubExpressionsTrapNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsTrapNotExpressionParserRuleCall_0_2_0; }
		
		//TrapAtomicExpression
		public RuleCall getTrapAtomicExpressionParserRuleCall_1() { return cTrapAtomicExpressionParserRuleCall_1; }
	}
	public class TrapAtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapAtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrapReferenceExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTrapExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TrapAtomicExpression returns kexpressions::Expression:
		//      TrapReferenceExpr
		//    | "(" TrapExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//  TrapReferenceExpr
		//| "(" TrapExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TrapReferenceExpr
		public RuleCall getTrapReferenceExprParserRuleCall_0() { return cTrapReferenceExprParserRuleCall_0; }
		
		//"(" TrapExpression ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//TrapExpression
		public RuleCall getTrapExpressionParserRuleCall_1_1() { return cTrapExpressionParserRuleCall_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class TrapReferenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapReferenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrapReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuedObjectTrapSignalCrossReference_1_0 = (CrossReference)cValuedObjectAssignment_1.eContents().get(0);
		private final RuleCall cValuedObjectTrapSignalIDTerminalRuleCall_1_0_1 = (RuleCall)cValuedObjectTrapSignalCrossReference_1_0.eContents().get(1);
		
		//TrapReferenceExpr returns kexpressions::ValuedObjectReference:
		//    {TrapReference} valuedObject=[TrapSignal|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{TrapReference} valuedObject=[TrapSignal|ID]
		public Group getGroup() { return cGroup; }
		
		//{TrapReference}
		public Action getTrapReferenceAction_0() { return cTrapReferenceAction_0; }
		
		//valuedObject=[TrapSignal|ID]
		public Assignment getValuedObjectAssignment_1() { return cValuedObjectAssignment_1; }
		
		//[TrapSignal|ID]
		public CrossReference getValuedObjectTrapSignalCrossReference_1_0() { return cValuedObjectTrapSignalCrossReference_1_0; }
		
		//ID
		public RuleCall getValuedObjectTrapSignalIDTerminalRuleCall_1_0_1() { return cValuedObjectTrapSignalIDTerminalRuleCall_1_0_1; }
	}
	public class SignalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsSignalAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// --> B.3.3 Signal Expressions <--
		//// -------------------------------------
		//// The warning can be ignored since the operator will only override itself in this loop.
		//SignalExpression returns kexpressions::Expression:
		//    SignalAndExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelOrOperator subExpressions+=SignalAndExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//SignalAndExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelOrOperator subExpressions+=SignalAndExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//SignalAndExpression
		public RuleCall getSignalAndExpressionParserRuleCall_0() { return cSignalAndExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelOrOperator subExpressions+=SignalAndExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelOrOperator subExpressions+=SignalAndExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelOrOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelOrOperator
		public RuleCall getOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=SignalAndExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//SignalAndExpression
		public RuleCall getSubExpressionsSignalAndExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsSignalAndExpressionParserRuleCall_1_1_1_0; }
	}
	public class SignalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsSignalNotExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// The warning can be ignored since the operator will only override itself in this loop.
		//SignalAndExpression returns kexpressions::Expression:
		//    SignalNotExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelAndOperator subExpressions+=SignalNotExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//SignalNotExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAndOperator subExpressions+=SignalNotExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//SignalNotExpression
		public RuleCall getSignalNotExpressionParserRuleCall_0() { return cSignalNotExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAndOperator subExpressions+=SignalNotExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelAndOperator subExpressions+=SignalNotExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelAndOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelAndOperator
		public RuleCall getOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=SignalNotExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//SignalNotExpression
		public RuleCall getSubExpressionsSignalNotExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsSignalNotExpressionParserRuleCall_1_1_1_0; }
	}
	public class SignalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterelNotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsSignalNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cSignalAtomicExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// The warning can be ignored since the operator will only override itself in this loop.
		//SignalNotExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=EsterelNotOperator
		//    subExpressions+=SignalNotExpression
		//    |
		//    SignalAtomicExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelNotOperator
		//subExpressions+=SignalNotExpression
		//|
		//SignalAtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelNotOperator
		//subExpressions+=SignalNotExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=EsterelNotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EsterelNotOperator
		public RuleCall getOperatorEsterelNotOperatorEnumRuleCall_0_1_0() { return cOperatorEsterelNotOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=SignalNotExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//SignalNotExpression
		public RuleCall getSubExpressionsSignalNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsSignalNotExpressionParserRuleCall_0_2_0; }
		
		//SignalAtomicExpression
		public RuleCall getSignalAtomicExpressionParserRuleCall_1() { return cSignalAtomicExpressionParserRuleCall_1; }
	}
	public class SignalAtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalAtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSignalExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cSignalPreExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignalOrTickReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SignalAtomicExpression returns kexpressions::Expression:
		//     "(" SignalExpression ")"
		//    | SignalPreExpression
		//    | SignalOrTickReferenceExpression;
		@Override public ParserRule getRule() { return rule; }
		
		// "(" SignalExpression ")"
		//| SignalPreExpression
		//| SignalOrTickReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" SignalExpression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//SignalExpression
		public RuleCall getSignalExpressionParserRuleCall_0_1() { return cSignalExpressionParserRuleCall_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//SignalPreExpression
		public RuleCall getSignalPreExpressionParserRuleCall_1() { return cSignalPreExpressionParserRuleCall_1; }
		
		//SignalOrTickReferenceExpression
		public RuleCall getSignalOrTickReferenceExpressionParserRuleCall_2() { return cSignalOrTickReferenceExpressionParserRuleCall_2; }
	}
	public class SignalOrTickReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalOrTickReferenceExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignalReferenceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTickSignalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignalOrTickReferenceExpression returns kexpressions::ValuedObjectReference:
		//    SignalReferenceExpression | TickSignalExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SignalReferenceExpression | TickSignalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SignalReferenceExpression
		public RuleCall getSignalReferenceExpressionParserRuleCall_0() { return cSignalReferenceExpressionParserRuleCall_0; }
		
		//TickSignalExpression
		public RuleCall getTickSignalExpressionParserRuleCall_1() { return cTickSignalExpressionParserRuleCall_1; }
	}
	public class SignalReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignalReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuedObjectSignalCrossReference_1_0 = (CrossReference)cValuedObjectAssignment_1.eContents().get(0);
		private final RuleCall cValuedObjectSignalIDTerminalRuleCall_1_0_1 = (RuleCall)cValuedObjectSignalCrossReference_1_0.eContents().get(1);
		
		//SignalReferenceExpression returns kexpressions::ValuedObjectReference:
		//    {SignalReference} valuedObject=[Signal|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//{SignalReference} valuedObject=[Signal|ID]
		public Group getGroup() { return cGroup; }
		
		//{SignalReference}
		public Action getSignalReferenceAction_0() { return cSignalReferenceAction_0; }
		
		//valuedObject=[Signal|ID]
		public Assignment getValuedObjectAssignment_1() { return cValuedObjectAssignment_1; }
		
		//[Signal|ID]
		public CrossReference getValuedObjectSignalCrossReference_1_0() { return cValuedObjectSignalCrossReference_1_0; }
		
		//ID
		public RuleCall getValuedObjectSignalIDTerminalRuleCall_1_0_1() { return cValuedObjectSignalIDTerminalRuleCall_1_0_1; }
	}
	public class TickSignalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TickSignalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTickReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTickKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TickSignalExpression returns kexpressions::ValuedObjectReference:
		//    {TickReference} 'tick';
		@Override public ParserRule getRule() { return rule; }
		
		//{TickReference} 'tick'
		public Group getGroup() { return cGroup; }
		
		//{TickReference}
		public Action getTickReferenceAction_0() { return cTickReferenceAction_0; }
		
		//'tick'
		public Keyword getTickKeyword_1() { return cTickKeyword_1; }
	}
	public class SignalPreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalPreExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperatorExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorEsterelPreOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubExpressionsSignalOrTickReferenceExpressionParserRuleCall_3_0 = (RuleCall)cSubExpressionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SignalPreExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=EsterelPreOperator
		//    '(' subExpressions+=SignalOrTickReferenceExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelPreOperator
		//'(' subExpressions+=SignalOrTickReferenceExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0() { return cOperatorExpressionAction_0; }
		
		//operator=EsterelPreOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//EsterelPreOperator
		public RuleCall getOperatorEsterelPreOperatorEnumRuleCall_1_0() { return cOperatorEsterelPreOperatorEnumRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//subExpressions+=SignalOrTickReferenceExpression
		public Assignment getSubExpressionsAssignment_3() { return cSubExpressionsAssignment_3; }
		
		//SignalOrTickReferenceExpression
		public RuleCall getSubExpressionsSignalOrTickReferenceExpressionParserRuleCall_3_0() { return cSubExpressionsSignalOrTickReferenceExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DelayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.DelayExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDelayAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDelayExpressionParserRuleCall_0_0_0 = (RuleCall)cDelayAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cExpressionSignalOrTickReferenceExpressionParserRuleCall_0_1_0_0 = (RuleCall)cExpressionAssignment_0_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cExpressionSignalPreExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_0_1_2_1_0 = (RuleCall)cExpressionAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_2_2 = (Keyword)cGroup_0_1_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cImmediateAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cImmediateImmediateKeyword_1_0_0 = (Keyword)cImmediateAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cExpressionSignalOrTickReferenceExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionAssignment_1_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cExpressionSignalPreExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		
		//// --> B.3.4 Delay Expressions <--
		//// -------------------------------------
		//DelayExpression:
		//    (delay=Expression
		//        (     expression=SignalOrTickReferenceExpression
		//            | expression=SignalPreExpression
		//            | "[" expression=SignalExpression "]"
		//        )
		//    )
		//    |
		//    (immediate?="immediate"?
		//        (     expression=SignalOrTickReferenceExpression
		//            | expression=SignalPreExpression
		//            | "[" expression=SignalExpression "]"
		//        )
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//(delay=Expression
		//    (     expression=SignalOrTickReferenceExpression
		//        | expression=SignalPreExpression
		//        | "[" expression=SignalExpression "]"
		//    )
		//)
		//|
		//(immediate?="immediate"?
		//    (     expression=SignalOrTickReferenceExpression
		//        | expression=SignalPreExpression
		//        | "[" expression=SignalExpression "]"
		//    )
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(delay=Expression
		//    (     expression=SignalOrTickReferenceExpression
		//        | expression=SignalPreExpression
		//        | "[" expression=SignalExpression "]"
		//    )
		//)
		public Group getGroup_0() { return cGroup_0; }
		
		//delay=Expression
		public Assignment getDelayAssignment_0_0() { return cDelayAssignment_0_0; }
		
		//Expression
		public RuleCall getDelayExpressionParserRuleCall_0_0_0() { return cDelayExpressionParserRuleCall_0_0_0; }
		
		//(     expression=SignalOrTickReferenceExpression
		//    | expression=SignalPreExpression
		//    | "[" expression=SignalExpression "]"
		//)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//expression=SignalOrTickReferenceExpression
		public Assignment getExpressionAssignment_0_1_0() { return cExpressionAssignment_0_1_0; }
		
		//SignalOrTickReferenceExpression
		public RuleCall getExpressionSignalOrTickReferenceExpressionParserRuleCall_0_1_0_0() { return cExpressionSignalOrTickReferenceExpressionParserRuleCall_0_1_0_0; }
		
		//expression=SignalPreExpression
		public Assignment getExpressionAssignment_0_1_1() { return cExpressionAssignment_0_1_1; }
		
		//SignalPreExpression
		public RuleCall getExpressionSignalPreExpressionParserRuleCall_0_1_1_0() { return cExpressionSignalPreExpressionParserRuleCall_0_1_1_0; }
		
		//"[" expression=SignalExpression "]"
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_2_0() { return cLeftSquareBracketKeyword_0_1_2_0; }
		
		//expression=SignalExpression
		public Assignment getExpressionAssignment_0_1_2_1() { return cExpressionAssignment_0_1_2_1; }
		
		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_0_1_2_1_0() { return cExpressionSignalExpressionParserRuleCall_0_1_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_2_2() { return cRightSquareBracketKeyword_0_1_2_2; }
		
		//(immediate?="immediate"?
		//    (     expression=SignalOrTickReferenceExpression
		//        | expression=SignalPreExpression
		//        | "[" expression=SignalExpression "]"
		//    )
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//immediate?="immediate"?
		public Assignment getImmediateAssignment_1_0() { return cImmediateAssignment_1_0; }
		
		//"immediate"
		public Keyword getImmediateImmediateKeyword_1_0_0() { return cImmediateImmediateKeyword_1_0_0; }
		
		//(     expression=SignalOrTickReferenceExpression
		//    | expression=SignalPreExpression
		//    | "[" expression=SignalExpression "]"
		//)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//expression=SignalOrTickReferenceExpression
		public Assignment getExpressionAssignment_1_1_0() { return cExpressionAssignment_1_1_0; }
		
		//SignalOrTickReferenceExpression
		public RuleCall getExpressionSignalOrTickReferenceExpressionParserRuleCall_1_1_0_0() { return cExpressionSignalOrTickReferenceExpressionParserRuleCall_1_1_0_0; }
		
		//expression=SignalPreExpression
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }
		
		//SignalPreExpression
		public RuleCall getExpressionSignalPreExpressionParserRuleCall_1_1_1_0() { return cExpressionSignalPreExpressionParserRuleCall_1_1_1_0; }
		
		//"[" expression=SignalExpression "]"
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }
		
		//expression=SignalExpression
		public Assignment getExpressionAssignment_1_1_2_1() { return cExpressionAssignment_1_1_2_1; }
		
		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_1_1_2_1_0() { return cExpressionSignalExpressionParserRuleCall_1_1_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_2() { return cRightSquareBracketKeyword_1_1_2_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* #########################################################################
		// *
		// *
		// * Before the following was an extra plugin named
		// * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
		// *
		// *
		// * #########################################################################
		// */
		//@Override
		//Expression returns kexpressions::Expression:
		//      BooleanExpression
		//    | ValuedExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//  BooleanExpression
		//| ValuedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0() { return cBooleanExpressionParserRuleCall_0; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_1() { return cValuedExpressionParserRuleCall_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.BooleanExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Example: not D and C or ?E = 42 or not (A and (B or C))
		//BooleanExpression returns kexpressions::Expression:
		//    OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
		//// The warning can be ignored since the operator will only override itself in this loop.
		//OrExpression returns kexpressions::Expression:
		//    AndExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelOrOperator subExpressions+=AndExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelOrOperator subExpressions+=AndExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelOrOperator subExpressions+=AndExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelOrOperator subExpressions+=AndExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelOrOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelOrOperator
		public RuleCall getOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelOrOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=AndExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//AndExpression
		public RuleCall getSubExpressionsAndExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsAndExpressionParserRuleCall_1_1_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsCompareOperationParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// Example: A and B, not C and 42 <= ?D
		//// The warning can be ignored since the operator will only override itself in this loop.
		//AndExpression returns kexpressions::Expression:
		//    CompareOperation
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelAndOperator subExpressions+=CompareOperation)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareOperation
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAndOperator subExpressions+=CompareOperation)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_0() { return cCompareOperationParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAndOperator subExpressions+=CompareOperation)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelAndOperator subExpressions+=CompareOperation)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelAndOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelAndOperator
		public RuleCall getOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelAndOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=CompareOperation
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//CompareOperation
		public RuleCall getSubExpressionsCompareOperationParserRuleCall_1_1_1_0() { return cSubExpressionsCompareOperationParserRuleCall_1_1_1_0; }
	}
	public class CompareOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.CompareOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotOrValuedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterelCompareOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: 42 <= ?A
		//@Override
		//CompareOperation returns kexpressions::Expression:
		//    NotOrValuedExpression
		//    ({kexpressions::OperatorExpression.subExpressions+=current}
		//        operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//NotOrValuedExpression
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression
		//)?
		public Group getGroup() { return cGroup; }
		
		//NotOrValuedExpression
		public RuleCall getNotOrValuedExpressionParserRuleCall_0() { return cNotOrValuedExpressionParserRuleCall_0; }
		
		//({kexpressions::OperatorExpression.subExpressions+=current}
		//    operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//operator=EsterelCompareOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EsterelCompareOperator
		public RuleCall getOperatorEsterelCompareOperatorEnumRuleCall_1_1_0() { return cOperatorEsterelCompareOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=NotOrValuedExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//NotOrValuedExpression
		public RuleCall getSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0() { return cSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0; }
	}
	public class NotOrValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.NotOrValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValuedExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// order IS IMPORTANT
		//@Override
		//NotOrValuedExpression returns kexpressions::Expression:
		//      ValuedExpression
		//    | NotExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//  ValuedExpression
		//| NotExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_0() { return cValuedExpressionParserRuleCall_0; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_1() { return cNotExpressionParserRuleCall_1; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterelNotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Example: not A, not false, not (A or B)
		//// at the latter we need the parans to indicate the right binding
		//@Override
		//NotExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=EsterelNotOperator
		//    subExpressions+=(NotExpression)
		//    |
		//    AtomicExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelNotOperator
		//subExpressions+=(NotExpression)
		//|
		//AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelNotOperator
		//subExpressions+=(NotExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=EsterelNotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EsterelNotOperator
		public RuleCall getOperatorEsterelNotOperatorEnumRuleCall_0_1_0() { return cOperatorEsterelNotOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=(NotExpression)
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//(NotExpression)
		public RuleCall getSubExpressionsNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsNotExpressionParserRuleCall_0_2_0; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_1() { return cAtomicExpressionParserRuleCall_1; }
	}
	public class ValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ValuedExpression");
		private final RuleCall cAddExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// everything that evaluates to a primitive number value
		//@Override
		//ValuedExpression returns kexpressions::Expression:
		//    AddExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AddExpression
		public RuleCall getAddExpressionParserRuleCall() { return cAddExpressionParserRuleCall; }
	}
	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelAddOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsSubExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// Example: 1 + 2
		//// The warning can be ignored since the operator will only override itself in this loop.
		//@Override
		//AddExpression returns kexpressions::Expression:
		//    SubExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelAddOperator subExpressions+=SubExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//SubExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAddOperator subExpressions+=SubExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//SubExpression
		public RuleCall getSubExpressionParserRuleCall_0() { return cSubExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelAddOperator subExpressions+=SubExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelAddOperator subExpressions+=SubExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelAddOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelAddOperator
		public RuleCall getOperatorEsterelAddOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelAddOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=SubExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//SubExpression
		public RuleCall getSubExpressionsSubExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsSubExpressionParserRuleCall_1_1_1_0; }
	}
	public class SubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SubExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelSubOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsMultExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// Example: varA - ?B
		//// The warning can be ignored since the operator will only override itself in this loop.
		//@Override
		//SubExpression returns kexpressions::Expression:
		//    MultExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelSubOperator subExpressions+=MultExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//MultExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelSubOperator subExpressions+=MultExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//MultExpression
		public RuleCall getMultExpressionParserRuleCall_0() { return cMultExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelSubOperator subExpressions+=MultExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelSubOperator subExpressions+=MultExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelSubOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelSubOperator
		public RuleCall getOperatorEsterelSubOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelSubOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=MultExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//MultExpression
		public RuleCall getSubExpressionsMultExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsMultExpressionParserRuleCall_1_1_1_0; }
	}
	public class MultExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.MultExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorEsterelMultOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsDivExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		
		//// Example: 2 * 4
		//// The warning can be ignored since the operator will only override itself in this loop.
		//@Override
		//MultExpression returns kexpressions::Expression:
		//    DivExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        (operator=EsterelMultOperator subExpressions+=DivExpression)+
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//DivExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelMultOperator subExpressions+=DivExpression)+
		//)?
		public Group getGroup() { return cGroup; }
		
		//DivExpression
		public RuleCall getDivExpressionParserRuleCall_0() { return cDivExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    (operator=EsterelMultOperator subExpressions+=DivExpression)+
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=EsterelMultOperator subExpressions+=DivExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=EsterelMultOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//EsterelMultOperator
		public RuleCall getOperatorEsterelMultOperatorEnumRuleCall_1_1_0_0() { return cOperatorEsterelMultOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=DivExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//DivExpression
		public RuleCall getSubExpressionsDivExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsDivExpressionParserRuleCall_1_1_1_0; }
	}
	public class DivExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.DivExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterelDivOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsModExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: (2 / 4)
		//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
		//@Override
		//DivExpression returns kexpressions::Expression:
		//    ModExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        operator=EsterelDivOperator
		//        subExpressions+=ModExpression
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//ModExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    operator=EsterelDivOperator
		//    subExpressions+=ModExpression
		//)?
		public Group getGroup() { return cGroup; }
		
		//ModExpression
		public RuleCall getModExpressionParserRuleCall_0() { return cModExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    operator=EsterelDivOperator
		//    subExpressions+=ModExpression
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//operator=EsterelDivOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EsterelDivOperator
		public RuleCall getOperatorEsterelDivOperatorEnumRuleCall_1_1_0() { return cOperatorEsterelDivOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=ModExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//ModExpression
		public RuleCall getSubExpressionsModExpressionParserRuleCall_1_2_0() { return cSubExpressionsModExpressionParserRuleCall_1_2_0; }
	}
	public class ModExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ModExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterelModOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: varA mod ?B
		//@Override
		//ModExpression returns kexpressions::Expression:
		//    NegExpression
		//    (   {kexpressions::OperatorExpression.subExpressions+=current}
		//        operator=EsterelModOperator
		//        subExpressions+=AtomicValuedExpression
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//NegExpression
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    operator=EsterelModOperator
		//    subExpressions+=AtomicValuedExpression
		//)?
		public Group getGroup() { return cGroup; }
		
		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_0() { return cNegExpressionParserRuleCall_0; }
		
		//(   {kexpressions::OperatorExpression.subExpressions+=current}
		//    operator=EsterelModOperator
		//    subExpressions+=AtomicValuedExpression
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//operator=EsterelModOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EsterelModOperator
		public RuleCall getOperatorEsterelModOperatorEnumRuleCall_1_1_0() { return cOperatorEsterelModOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0; }
	}
	public class NegExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.NegExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterelSubOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Example: not A, not false, not (A or B)
		//// at the latter we need the parans to indicate the right binding
		//@Override
		//NegExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression}
		//    operator=EsterelSubOperator
		//    subExpressions+=(NegExpression)
		//    |
		//    AtomicValuedExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelSubOperator
		//subExpressions+=(NegExpression)
		//|
		//AtomicValuedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression}
		//operator=EsterelSubOperator
		//subExpressions+=(NegExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=EsterelSubOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EsterelSubOperator
		public RuleCall getOperatorEsterelSubOperatorEnumRuleCall_0_1_0() { return cOperatorEsterelSubOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=(NegExpression)
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//(NegExpression)
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_0_2_0() { return cSubExpressionsNegExpressionParserRuleCall_0_2_0; }
		
		//AtomicValuedExpression
		public RuleCall getAtomicValuedExpressionParserRuleCall_1() { return cAtomicValuedExpressionParserRuleCall_1; }
	}
	public class AtomicValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AtomicValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cAtomicExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//@Override
		//AtomicValuedExpression returns kexpressions::Expression:
		//    IntValue
		//    | FloatValue
		//    | '(' ValuedExpression ')'
		//    | AtomicExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue
		//| FloatValue
		//| '(' ValuedExpression ')'
		//| AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }
		
		//'(' ValuedExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_2_1() { return cValuedExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_3() { return cAtomicExpressionParserRuleCall_3; }
	}
	public class ValuedObjectPreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ValuedObjectPreExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterelPreOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubExpressionsValuedObjectPreExpressionParserRuleCall_0_3_0 = (RuleCall)cSubExpressionsAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterelValueTestOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsSignalReferenceExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		private final RuleCall cValuedObjectReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
		//ValuedObjectPreExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
		//    | {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
		//    | ValuedObjectReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
		//| {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
		//| ValuedObjectReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=EsterelPreOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EsterelPreOperator
		public RuleCall getOperatorEsterelPreOperatorEnumRuleCall_0_1_0() { return cOperatorEsterelPreOperatorEnumRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//subExpressions+=ValuedObjectPreExpression
		public Assignment getSubExpressionsAssignment_0_3() { return cSubExpressionsAssignment_0_3; }
		
		//ValuedObjectPreExpression
		public RuleCall getSubExpressionsValuedObjectPreExpressionParserRuleCall_0_3_0() { return cSubExpressionsValuedObjectPreExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operator=EsterelValueTestOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EsterelValueTestOperator
		public RuleCall getOperatorEsterelValueTestOperatorEnumRuleCall_1_1_0() { return cOperatorEsterelValueTestOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=SignalReferenceExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//SignalReferenceExpression
		public RuleCall getSubExpressionsSignalReferenceExpressionParserRuleCall_1_2_0() { return cSubExpressionsSignalReferenceExpressionParserRuleCall_1_2_0; }
		
		//ValuedObjectReference
		public RuleCall getValuedObjectReferenceParserRuleCall_2() { return cValuedObjectReferenceParserRuleCall_2; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Annotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommentAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeyStringValueAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypedKeyStringValueAnnotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTagAnnotationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// For some reason Esterel fails to parse the optional semicolon in threads if the Annotation rule includes JsonAnnotations
		//@Override
		//Annotation returns annotations::Annotation:
		//    CommentAnnotation |
		//    KeyStringValueAnnotation |
		//    TypedKeyStringValueAnnotation |
		//    TagAnnotation;
		@Override public ParserRule getRule() { return rule; }
		
		//CommentAnnotation |
		//KeyStringValueAnnotation |
		//TypedKeyStringValueAnnotation |
		//TagAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CommentAnnotation
		public RuleCall getCommentAnnotationParserRuleCall_0() { return cCommentAnnotationParserRuleCall_0; }
		
		//KeyStringValueAnnotation
		public RuleCall getKeyStringValueAnnotationParserRuleCall_1() { return cKeyStringValueAnnotationParserRuleCall_1; }
		
		//TypedKeyStringValueAnnotation
		public RuleCall getTypedKeyStringValueAnnotationParserRuleCall_2() { return cTypedKeyStringValueAnnotationParserRuleCall_2; }
		
		//TagAnnotation
		public RuleCall getTagAnnotationParserRuleCall_3() { return cTagAnnotationParserRuleCall_3; }
	}
	
	public class EsterelCompareOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelCompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNELessThanSignGreaterThanSignKeyword_5_0 = (Keyword)cNEEnumLiteralDeclaration_5.eContents().get(0);
		
		///* ###################################################
		// * ###                    Enum                     ###
		// * ###################################################
		// */
		//enum EsterelCompareOperator returns kexpressions::OperatorType:
		//    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
		public EnumRule getRule() { return rule; }
		
		//EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }
		
		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_2() { return cLEQEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_2_0() { return cLEQLessThanSignEqualsSignKeyword_2_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }
		
		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_4() { return cGEQEnumLiteralDeclaration_4; }
		
		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_4_0() { return cGEQGreaterThanSignEqualsSignKeyword_4_0; }
		
		//NE="<>"
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_5() { return cNEEnumLiteralDeclaration_5; }
		
		//"<>"
		public Keyword getNELessThanSignGreaterThanSignKeyword_5_0() { return cNELessThanSignGreaterThanSignKeyword_5_0; }
	}
	public class EsterelPreOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelPreOperator");
		private final EnumLiteralDeclaration cPREEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPREPreKeyword_0 = (Keyword)cPREEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelPreOperator returns kexpressions::OperatorType:
		//    PRE="pre";
		public EnumRule getRule() { return rule; }
		
		//PRE="pre"
		public EnumLiteralDeclaration getPREEnumLiteralDeclaration() { return cPREEnumLiteralDeclaration; }
		
		//"pre"
		public Keyword getPREPreKeyword_0() { return cPREPreKeyword_0; }
	}
	public class EsterelOrOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelOrOperator");
		private final EnumLiteralDeclaration cLOGICAL_OREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLOGICAL_OROrKeyword_0 = (Keyword)cLOGICAL_OREnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelOrOperator returns kexpressions::OperatorType:
		//    LOGICAL_OR="or";
		public EnumRule getRule() { return rule; }
		
		//LOGICAL_OR="or"
		public EnumLiteralDeclaration getLOGICAL_OREnumLiteralDeclaration() { return cLOGICAL_OREnumLiteralDeclaration; }
		
		//"or"
		public Keyword getLOGICAL_OROrKeyword_0() { return cLOGICAL_OROrKeyword_0; }
	}
	public class EsterelAndOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelAndOperator");
		private final EnumLiteralDeclaration cLOGICAL_ANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLOGICAL_ANDAndKeyword_0 = (Keyword)cLOGICAL_ANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelAndOperator returns kexpressions::OperatorType:
		//    LOGICAL_AND="and";
		public EnumRule getRule() { return rule; }
		
		//LOGICAL_AND="and"
		public EnumLiteralDeclaration getLOGICAL_ANDEnumLiteralDeclaration() { return cLOGICAL_ANDEnumLiteralDeclaration; }
		
		//"and"
		public Keyword getLOGICAL_ANDAndKeyword_0() { return cLOGICAL_ANDAndKeyword_0; }
	}
	public class EsterelNotOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelNotOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTNotKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelNotOperator returns kexpressions::OperatorType:
		//    NOT="not";
		public EnumRule getRule() { return rule; }
		
		//NOT="not"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }
		
		//"not"
		public Keyword getNOTNotKeyword_0() { return cNOTNotKeyword_0; }
	}
	public class EsterelAddOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelAddOperator");
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_0 = (Keyword)cADDEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelAddOperator returns kexpressions::OperatorType:
		//    ADD="+";
		public EnumRule getRule() { return rule; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration() { return cADDEnumLiteralDeclaration; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_0() { return cADDPlusSignKeyword_0; }
	}
	public class EsterelSubOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelSubOperator");
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_0 = (Keyword)cSUBEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelSubOperator returns kexpressions::OperatorType:
		//    SUB="-";
		public EnumRule getRule() { return rule; }
		
		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration() { return cSUBEnumLiteralDeclaration; }
		
		//"-"
		public Keyword getSUBHyphenMinusKeyword_0() { return cSUBHyphenMinusKeyword_0; }
	}
	public class EsterelMultOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelMultOperator");
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMULTAsteriskKeyword_0 = (Keyword)cMULTEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelMultOperator returns kexpressions::OperatorType:
		//    MULT="*";
		public EnumRule getRule() { return rule; }
		
		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration() { return cMULTEnumLiteralDeclaration; }
		
		//"*"
		public Keyword getMULTAsteriskKeyword_0() { return cMULTAsteriskKeyword_0; }
	}
	public class EsterelModOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelModOperator");
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMODModKeyword_0 = (Keyword)cMODEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelModOperator returns kexpressions::OperatorType:
		//    MOD="mod";
		public EnumRule getRule() { return rule; }
		
		//MOD="mod"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration() { return cMODEnumLiteralDeclaration; }
		
		//"mod"
		public Keyword getMODModKeyword_0() { return cMODModKeyword_0; }
	}
	public class EsterelDivOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelDivOperator");
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_0 = (Keyword)cDIVEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelDivOperator returns kexpressions::OperatorType:
		//    DIV="/";
		public EnumRule getRule() { return rule; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration() { return cDIVEnumLiteralDeclaration; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_0() { return cDIVSolidusKeyword_0; }
	}
	public class EsterelValueTestOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelValueTestOperator");
		private final EnumLiteralDeclaration cVALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cVALQuestionMarkKeyword_0 = (Keyword)cVALEnumLiteralDeclaration.eContents().get(0);
		
		//enum EsterelValueTestOperator returns kexpressions::OperatorType:
		//    VAL="?";
		public EnumRule getRule() { return rule; }
		
		//VAL="?"
		public EnumLiteralDeclaration getVALEnumLiteralDeclaration() { return cVALEnumLiteralDeclaration; }
		
		//"?"
		public Keyword getVALQuestionMarkKeyword_0() { return cVALQuestionMarkKeyword_0; }
	}
	public class EsterelValueTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPureKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBooleanKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNSIGNEDUnsignedKeyword_2_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTIntegerKeyword_3_0 = (Keyword)cINTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDOUBLEDoubleKeyword_5_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSTRINGStringKeyword_6_0 = (Keyword)cSTRINGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		///*
		//   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext
		//*/
		//enum EsterelValueType returns kexpressions::ValueType:
		//    PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned"  |
		//    INT="integer" | FLOAT="float" | DOUBLE="double" |
		//    STRING="string" | HOST="host";
		public EnumRule getRule() { return rule; }
		
		//PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned"  |
		//INT="integer" | FLOAT="float" | DOUBLE="double" |
		//STRING="string" | HOST="host"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PURE="pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }
		
		//"pure"
		public Keyword getPUREPureKeyword_0_0() { return cPUREPureKeyword_0_0; }
		
		//BOOL="boolean"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }
		
		//"boolean"
		public Keyword getBOOLBooleanKeyword_1_0() { return cBOOLBooleanKeyword_1_0; }
		
		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_2() { return cUNSIGNEDEnumLiteralDeclaration_2; }
		
		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_2_0() { return cUNSIGNEDUnsignedKeyword_2_0; }
		
		//INT="integer"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_3() { return cINTEnumLiteralDeclaration_3; }
		
		//"integer"
		public Keyword getINTIntegerKeyword_3_0() { return cINTIntegerKeyword_3_0; }
		
		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }
		
		//"float"
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }
		
		//DOUBLE="double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_5() { return cDOUBLEEnumLiteralDeclaration_5; }
		
		//"double"
		public Keyword getDOUBLEDoubleKeyword_5_0() { return cDOUBLEDoubleKeyword_5_0; }
		
		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_6() { return cSTRINGEnumLiteralDeclaration_6; }
		
		//"string"
		public Keyword getSTRINGStringKeyword_6_0() { return cSTRINGStringKeyword_6_0; }
		
		//HOST="host"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }
		
		//"host"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}
	public class EsterelCombineOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelCombineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTAsteriskKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMAXMaxKeyword_3_0 = (Keyword)cMAXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOROrKeyword_5_0 = (Keyword)cOREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAndKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum EsterelCombineOperator returns kexpressions::CombineOperator:
		//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
		//    MIN="min" | OR="or" | AND="and" | HOST="host";
		public EnumRule getRule() { return rule; }
		
		//NONE="none" | ADD="+" | MULT="*" | MAX="max" |
		//MIN="min" | OR="or" | AND="and" | HOST="host"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE="none"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//"none"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_1_0() { return cADDPlusSignKeyword_1_0; }
		
		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }
		
		//"*"
		public Keyword getMULTAsteriskKeyword_2_0() { return cMULTAsteriskKeyword_2_0; }
		
		//MAX="max"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_3() { return cMAXEnumLiteralDeclaration_3; }
		
		//"max"
		public Keyword getMAXMaxKeyword_3_0() { return cMAXMaxKeyword_3_0; }
		
		//MIN="min"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }
		
		//"min"
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }
		
		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_5() { return cOREnumLiteralDeclaration_5; }
		
		//"or"
		public Keyword getOROrKeyword_5_0() { return cOROrKeyword_5_0; }
		
		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }
		
		//"and"
		public Keyword getANDAndKeyword_6_0() { return cANDAndKeyword_6_0; }
		
		//HOST="host"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }
		
		//"host"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}
	
	private final EsterelProgramElements pEsterelProgram;
	private final EsterelModuleElements pEsterelModule;
	private final EsterelDeclarationElements pEsterelDeclaration;
	private final TypeIdentifierElements pTypeIdentifier;
	private final TypeDeclarationElements pTypeDeclaration;
	private final TypeDefinitionElements pTypeDefinition;
	private final ConstantDeclarationElements pConstantDeclaration;
	private final ConstantElements pConstant;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final FunctionElements pFunction;
	private final ProcedureDeclarationElements pProcedureDeclaration;
	private final ProcedureElements pProcedure;
	private final TaskDeclarationElements pTaskDeclaration;
	private final TaskElements pTask;
	private final InputDeclarationElements pInputDeclaration;
	private final OutputDeclarationElements pOutputDeclaration;
	private final InputOutputDeclarationElements pInputOutputDeclaration;
	private final ReturnDeclarationElements pReturnDeclaration;
	private final SignalElements pSignal;
	private final SensorDeclarationElements pSensorDeclaration;
	private final SensorElements pSensor;
	private final RelationDeclarationElements pRelationDeclaration;
	private final RelationElements pRelation;
	private final RelationImplicationElements pRelationImplication;
	private final RelationIncompatibilityElements pRelationIncompatibility;
	private final InstructionStatementElements pInstructionStatement;
	private final EsterelParallelElements pEsterelParallel;
	private final EsterelThreadElements pEsterelThread;
	private final NothingElements pNothing;
	private final EsterelPauseElements pEsterelPause;
	private final HaltElements pHalt;
	private final BlockElements pBlock;
	private final EmitElements pEmit;
	private final SustainElements pSustain;
	private final EsterelAssignmentElements pEsterelAssignment;
	private final VariableReferenceElements pVariableReference;
	private final ProcedureCallElements pProcedureCall;
	private final PresentElements pPresent;
	private final PresentCaseElements pPresentCase;
	private final IfTestElements pIfTest;
	private final ElsIfElements pElsIf;
	private final LoopElements pLoop;
	private final RepeatElements pRepeat;
	private final AbortElements pAbort;
	private final CaseElements pCase;
	private final AwaitElements pAwait;
	private final EveryDoElements pEveryDo;
	private final SuspendElements pSuspend;
	private final TrapElements pTrap;
	private final TrapSignalElements pTrapSignal;
	private final TrapHandlerElements pTrapHandler;
	private final ExitElements pExit;
	private final ExecElements pExec;
	private final ExecCaseElements pExecCase;
	private final LocalSignalDeclarationElements pLocalSignalDeclaration;
	private final LocalVariableDeclarationElements pLocalVariableDeclaration;
	private final EsterelVariableDeclarationElements pEsterelVariableDeclaration;
	private final VariableElements pVariable;
	private final RunElements pRun;
	private final ModuleRenamingElements pModuleRenaming;
	private final RenamingsElements pRenamings;
	private final TypeRenamingElements pTypeRenaming;
	private final ConstantRenamingElements pConstantRenaming;
	private final FunctionRenamingElements pFunctionRenaming;
	private final ProcedureRenamingElements pProcedureRenaming;
	private final TaskRenamingElements pTaskRenaming;
	private final SignalRenamingElements pSignalRenaming;
	private final BuildInFunctionElements pBuildInFunction;
	private final LegacyDoElements pLegacyDo;
	private final EsterelCompareOperatorElements eEsterelCompareOperator;
	private final EsterelPreOperatorElements eEsterelPreOperator;
	private final EsterelOrOperatorElements eEsterelOrOperator;
	private final EsterelAndOperatorElements eEsterelAndOperator;
	private final EsterelNotOperatorElements eEsterelNotOperator;
	private final EsterelAddOperatorElements eEsterelAddOperator;
	private final EsterelSubOperatorElements eEsterelSubOperator;
	private final EsterelMultOperatorElements eEsterelMultOperator;
	private final EsterelModOperatorElements eEsterelModOperator;
	private final EsterelDivOperatorElements eEsterelDivOperator;
	private final EsterelValueTestOperatorElements eEsterelValueTestOperator;
	private final EsterelValueTypeElements eEsterelValueType;
	private final EsterelCombineOperatorElements eEsterelCombineOperator;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tHOSTCODE;
	private final AtomicExpressionElements pAtomicExpression;
	private final TrapExpressionElements pTrapExpression;
	private final EsterelFunctionCallElements pEsterelFunctionCall;
	private final ConstantExpressionElements pConstantExpression;
	private final TrapExprElements pTrapExpr;
	private final TrapAndExpressionElements pTrapAndExpression;
	private final TrapNotExpressionElements pTrapNotExpression;
	private final TrapAtomicExpressionElements pTrapAtomicExpression;
	private final TrapReferenceExprElements pTrapReferenceExpr;
	private final SignalExpressionElements pSignalExpression;
	private final SignalAndExpressionElements pSignalAndExpression;
	private final SignalNotExpressionElements pSignalNotExpression;
	private final SignalAtomicExpressionElements pSignalAtomicExpression;
	private final SignalOrTickReferenceExpressionElements pSignalOrTickReferenceExpression;
	private final SignalReferenceExpressionElements pSignalReferenceExpression;
	private final TickSignalExpressionElements pTickSignalExpression;
	private final SignalPreExpressionElements pSignalPreExpression;
	private final DelayExpressionElements pDelayExpression;
	private final ExpressionElements pExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final CompareOperationElements pCompareOperation;
	private final NotOrValuedExpressionElements pNotOrValuedExpression;
	private final NotExpressionElements pNotExpression;
	private final ValuedExpressionElements pValuedExpression;
	private final AddExpressionElements pAddExpression;
	private final SubExpressionElements pSubExpression;
	private final MultExpressionElements pMultExpression;
	private final DivExpressionElements pDivExpression;
	private final ModExpressionElements pModExpression;
	private final NegExpressionElements pNegExpression;
	private final AtomicValuedExpressionElements pAtomicValuedExpression;
	private final ValuedObjectPreExpressionElements pValuedObjectPreExpression;
	private final AnnotationElements pAnnotation;
	
	private final Grammar grammar;
	
	private final SCLGrammarAccess gaSCL;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EsterelGrammarAccess(GrammarProvider grammarProvider,
			SCLGrammarAccess gaSCL,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSCL = gaSCL;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pEsterelProgram = new EsterelProgramElements();
		this.pEsterelModule = new EsterelModuleElements();
		this.pEsterelDeclaration = new EsterelDeclarationElements();
		this.pTypeIdentifier = new TypeIdentifierElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pConstantDeclaration = new ConstantDeclarationElements();
		this.pConstant = new ConstantElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pFunction = new FunctionElements();
		this.pProcedureDeclaration = new ProcedureDeclarationElements();
		this.pProcedure = new ProcedureElements();
		this.pTaskDeclaration = new TaskDeclarationElements();
		this.pTask = new TaskElements();
		this.pInputDeclaration = new InputDeclarationElements();
		this.pOutputDeclaration = new OutputDeclarationElements();
		this.pInputOutputDeclaration = new InputOutputDeclarationElements();
		this.pReturnDeclaration = new ReturnDeclarationElements();
		this.pSignal = new SignalElements();
		this.pSensorDeclaration = new SensorDeclarationElements();
		this.pSensor = new SensorElements();
		this.pRelationDeclaration = new RelationDeclarationElements();
		this.pRelation = new RelationElements();
		this.pRelationImplication = new RelationImplicationElements();
		this.pRelationIncompatibility = new RelationIncompatibilityElements();
		this.pInstructionStatement = new InstructionStatementElements();
		this.pEsterelParallel = new EsterelParallelElements();
		this.pEsterelThread = new EsterelThreadElements();
		this.pNothing = new NothingElements();
		this.pEsterelPause = new EsterelPauseElements();
		this.pHalt = new HaltElements();
		this.pBlock = new BlockElements();
		this.pEmit = new EmitElements();
		this.pSustain = new SustainElements();
		this.pEsterelAssignment = new EsterelAssignmentElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pProcedureCall = new ProcedureCallElements();
		this.pPresent = new PresentElements();
		this.pPresentCase = new PresentCaseElements();
		this.pIfTest = new IfTestElements();
		this.pElsIf = new ElsIfElements();
		this.pLoop = new LoopElements();
		this.pRepeat = new RepeatElements();
		this.pAbort = new AbortElements();
		this.pCase = new CaseElements();
		this.pAwait = new AwaitElements();
		this.pEveryDo = new EveryDoElements();
		this.pSuspend = new SuspendElements();
		this.pTrap = new TrapElements();
		this.pTrapSignal = new TrapSignalElements();
		this.pTrapHandler = new TrapHandlerElements();
		this.pExit = new ExitElements();
		this.pExec = new ExecElements();
		this.pExecCase = new ExecCaseElements();
		this.pLocalSignalDeclaration = new LocalSignalDeclarationElements();
		this.pLocalVariableDeclaration = new LocalVariableDeclarationElements();
		this.pEsterelVariableDeclaration = new EsterelVariableDeclarationElements();
		this.pVariable = new VariableElements();
		this.pRun = new RunElements();
		this.pModuleRenaming = new ModuleRenamingElements();
		this.pRenamings = new RenamingsElements();
		this.pTypeRenaming = new TypeRenamingElements();
		this.pConstantRenaming = new ConstantRenamingElements();
		this.pFunctionRenaming = new FunctionRenamingElements();
		this.pProcedureRenaming = new ProcedureRenamingElements();
		this.pTaskRenaming = new TaskRenamingElements();
		this.pSignalRenaming = new SignalRenamingElements();
		this.pBuildInFunction = new BuildInFunctionElements();
		this.pLegacyDo = new LegacyDoElements();
		this.eEsterelCompareOperator = new EsterelCompareOperatorElements();
		this.eEsterelPreOperator = new EsterelPreOperatorElements();
		this.eEsterelOrOperator = new EsterelOrOperatorElements();
		this.eEsterelAndOperator = new EsterelAndOperatorElements();
		this.eEsterelNotOperator = new EsterelNotOperatorElements();
		this.eEsterelAddOperator = new EsterelAddOperatorElements();
		this.eEsterelSubOperator = new EsterelSubOperatorElements();
		this.eEsterelMultOperator = new EsterelMultOperatorElements();
		this.eEsterelModOperator = new EsterelModOperatorElements();
		this.eEsterelDivOperator = new EsterelDivOperatorElements();
		this.eEsterelValueTestOperator = new EsterelValueTestOperatorElements();
		this.eEsterelValueType = new EsterelValueTypeElements();
		this.eEsterelCombineOperator = new EsterelCombineOperatorElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ML_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.STRING");
		this.tHOSTCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.HOSTCODE");
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pTrapExpression = new TrapExpressionElements();
		this.pEsterelFunctionCall = new EsterelFunctionCallElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pTrapExpr = new TrapExprElements();
		this.pTrapAndExpression = new TrapAndExpressionElements();
		this.pTrapNotExpression = new TrapNotExpressionElements();
		this.pTrapAtomicExpression = new TrapAtomicExpressionElements();
		this.pTrapReferenceExpr = new TrapReferenceExprElements();
		this.pSignalExpression = new SignalExpressionElements();
		this.pSignalAndExpression = new SignalAndExpressionElements();
		this.pSignalNotExpression = new SignalNotExpressionElements();
		this.pSignalAtomicExpression = new SignalAtomicExpressionElements();
		this.pSignalOrTickReferenceExpression = new SignalOrTickReferenceExpressionElements();
		this.pSignalReferenceExpression = new SignalReferenceExpressionElements();
		this.pTickSignalExpression = new TickSignalExpressionElements();
		this.pSignalPreExpression = new SignalPreExpressionElements();
		this.pDelayExpression = new DelayExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pCompareOperation = new CompareOperationElements();
		this.pNotOrValuedExpression = new NotOrValuedExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pValuedExpression = new ValuedExpressionElements();
		this.pAddExpression = new AddExpressionElements();
		this.pSubExpression = new SubExpressionElements();
		this.pMultExpression = new MultExpressionElements();
		this.pDivExpression = new DivExpressionElements();
		this.pModExpression = new ModExpressionElements();
		this.pNegExpression = new NegExpressionElements();
		this.pAtomicValuedExpression = new AtomicValuedExpressionElements();
		this.pValuedObjectPreExpression = new ValuedObjectPreExpressionElements();
		this.pAnnotation = new AnnotationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.esterel.Esterel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////  root rule. an esterel file can contain multiple modules
	//EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
	//    pragmas+=Pragma*
	//    (modules+=EsterelModule)*;
	public EsterelProgramElements getEsterelProgramAccess() {
		return pEsterelProgram;
	}
	
	public ParserRule getEsterelProgramRule() {
		return getEsterelProgramAccess().getRule();
	}
	
	///*
	// * The numbering references:
	// *
	// *   The Esterel v5 Language Primer
	// *   Version v5 91
	// *   Gérard Berry
	// *   Centre de Mathématiques Appliquées
	// *   Ecole des Mines and INRIA
	// *   2004 Route des Lucioles
	// *   06565 Sophia-Antipolis
	// *   berry@sophia.inria.fr
	// *   June 5, 2000
	// *
	// */
	///* ###################################################
	// * ###                 7.2 Modules                 ###
	// * ###################################################
	// */
	//// = module: a module consists of an interface and a body
	//// -------------------------------------
	//EsterelModule returns scl::Module:
	//    (annotations += Annotation)*
	//    "module" name=ID ":"
	//    (declarations+=EsterelDeclaration)*
	//    (statements+=EsterelParallel)?
	//    ("end" "module" | ".");
	public EsterelModuleElements getEsterelModuleAccess() {
		return pEsterelModule;
	}
	
	public ParserRule getEsterelModuleRule() {
		return getEsterelModuleAccess().getRule();
	}
	
	///* ###################################################
	// * ###        7.3 Interface Declaration            ###
	// * ###################################################
	// */
	//EsterelDeclaration:
	//    InputDeclaration
	//    | OutputDeclaration
	//    | InputOutputDeclaration
	//    | ReturnDeclaration
	//    | TypeDeclaration
	//    | SensorDeclaration
	//    | ConstantDeclaration
	//    | RelationDeclaration
	//    | TaskDeclaration
	//    | FunctionDeclaration
	//    | ProcedureDeclaration;
	public EsterelDeclarationElements getEsterelDeclarationAccess() {
		return pEsterelDeclaration;
	}
	
	public ParserRule getEsterelDeclarationRule() {
		return getEsterelDeclarationAccess().getRule();
	}
	
	//// = Interface Declaration
	//// ----------------------------------------------
	//// overwrite to allow type definitions in a specific module
	//TypeIdentifier:
	//      type=EsterelValueType
	//    | ("combine" (type=EsterelValueType | idType=ID) "with" operator=EsterelCombineOperator)
	//    | idType=ID
	//    | esterelType=[TypeDefinition|ID];
	public TypeIdentifierElements getTypeIdentifierAccess() {
		return pTypeIdentifier;
	}
	
	public ParserRule getTypeIdentifierRule() {
		return getTypeIdentifierAccess().getRule();
	}
	
	//// = 7.3.1 Type Declarations
	//// -------------------------------------
	//TypeDeclaration:
	//    (annotations += Annotation)*
	//    "type"
	//    valuedObjects+=TypeDefinition ("," valuedObjects+=TypeDefinition)*
	//    ";";
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//TypeDefinition:
	//    name=ID;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//// = 7.3.2 Constant Declarations
	//// -------------------------------------
	//ConstantDeclaration:
	//    (annotations += Annotation)*
	//    "constant"
	//    valuedObjects+=Constant ("," valuedObjects+=Constant)*
	//    ";";
	public ConstantDeclarationElements getConstantDeclarationAccess() {
		return pConstantDeclaration;
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}
	
	//Constant:
	//    name=ID ("=" initialValue=Expression)? ":" type=TypeIdentifier;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//// = 7.3.3 Function Declaration
	//// -------------------------------------
	//FunctionDeclaration:
	//    (annotations += Annotation)*
	//    "function"
	//    valuedObjects+=Function ("," valuedObjects+=Function)*
	//    ";";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//Function:
	//    name=ID
	//    ("(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")" | '()')
	//    ":" returnType=TypeIdentifier;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//// = 7.3.4 Procedure Declaration
	//// -------------------------------------
	//ProcedureDeclaration:
	//    (annotations += Annotation)*
	//    "procedure" valuedObjects+=Procedure ("," valuedObjects+=Procedure)*
	//    ";";
	public ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return pProcedureDeclaration;
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}
	
	//Procedure:
	//    name=ID
	//    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
	//    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//// = 7.3.5 Task Declaration
	//// -------------------------------------
	//TaskDeclaration:
	//    (annotations += Annotation)*
	//    "task" valuedObjects+=Task ("," valuedObjects+=Task)*
	//    ";";
	public TaskDeclarationElements getTaskDeclarationAccess() {
		return pTaskDeclaration;
	}
	
	public ParserRule getTaskDeclarationRule() {
		return getTaskDeclarationAccess().getRule();
	}
	
	//Task:
	//    name=ID
	//    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
	//    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//// = 7.3.6 Signal Declaration
	//// -------------------------------------
	//InputDeclaration:
	//    (annotations += Annotation)*
	//    "input"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public InputDeclarationElements getInputDeclarationAccess() {
		return pInputDeclaration;
	}
	
	public ParserRule getInputDeclarationRule() {
		return getInputDeclarationAccess().getRule();
	}
	
	//OutputDeclaration:
	//    (annotations += Annotation)*
	//    "output"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public OutputDeclarationElements getOutputDeclarationAccess() {
		return pOutputDeclaration;
	}
	
	public ParserRule getOutputDeclarationRule() {
		return getOutputDeclarationAccess().getRule();
	}
	
	//InputOutputDeclaration:
	//    (annotations += Annotation)*
	//    "inputoutput"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public InputOutputDeclarationElements getInputOutputDeclarationAccess() {
		return pInputOutputDeclaration;
	}
	
	public ParserRule getInputOutputDeclarationRule() {
		return getInputOutputDeclarationAccess().getRule();
	}
	
	//ReturnDeclaration:
	//    (annotations += Annotation)*
	//    "return"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public ReturnDeclarationElements getReturnDeclarationAccess() {
		return pReturnDeclaration;
	}
	
	public ParserRule getReturnDeclarationRule() {
		return getReturnDeclarationAccess().getRule();
	}
	
	//// example 1:   A : combine boolean with or
	//// example 2:   A (combine boolean with or) // NO longer supported
	//// example 3:   A := 0 : combine integer with '+'
	//Signal:
	//    name=ID
	//    (
	//        (":=" initialValue=Expression)?
	//        ":"
	//        (     type=EsterelValueType
	//            | idType=ID
	//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//        )
	//    |
	//        "("
	//        (":=" initialValue=Expression ":")?
	//        (     type=EsterelValueType
	//            | idType=ID
	//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//        )
	//        ")"
	//    )?;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//// = 7.3.7 Sensor Declaration
	//// -------------------------------------
	//SensorDeclaration:
	//    (annotations += Annotation)*
	//    "sensor"
	//    valuedObjects+=Sensor ("," valuedObjects+=Sensor)*
	//    ";";
	public SensorDeclarationElements getSensorDeclarationAccess() {
		return pSensorDeclaration;
	}
	
	public ParserRule getSensorDeclarationRule() {
		return getSensorDeclarationAccess().getRule();
	}
	
	//Sensor:
	//    name=ID
	//    ((":" type=TypeIdentifier) | ("(" type=TypeIdentifier ")"))?;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//// = 7.3.8 Input Relation Declaration
	//// -------------------------------------
	//RelationDeclaration:
	//    (annotations += Annotation)*
	//    "relation"
	//    relations+=Relation ("," relations+=Relation)*
	//    ";";
	public RelationDeclarationElements getRelationDeclarationAccess() {
		return pRelationDeclaration;
	}
	
	public ParserRule getRelationDeclarationRule() {
		return getRelationDeclarationAccess().getRule();
	}
	
	//Relation:
	//    RelationImplication | RelationIncompatibility;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelationImplication:
	//    first=[Signal|ID] type="=>" second=[Signal|ID];
	public RelationImplicationElements getRelationImplicationAccess() {
		return pRelationImplication;
	}
	
	public ParserRule getRelationImplicationRule() {
		return getRelationImplicationAccess().getRule();
	}
	
	//RelationIncompatibility:
	//    incomp+=[Signal|ID] type="#" incomp+=[Signal|ID] ("#" incomp+=[Signal|ID])*;
	public RelationIncompatibilityElements getRelationIncompatibilityAccess() {
		return pRelationIncompatibility;
	}
	
	public ParserRule getRelationIncompatibilityRule() {
		return getRelationIncompatibilityAccess().getRule();
	}
	
	///* ###################################################
	// * ###               7.5 Statements                ###
	// * ###################################################
	// */
	//InstructionStatement returns scl::Statement:
	//    Nothing |
	//    EsterelPause |
	//    Halt |
	//    Emit |
	//    Exit |
	//    Present |
	//    Await |
	//    EsterelAssignment |
	//    Abort |
	//    Loop |
	//    EveryDo |
	//    Sustain |
	//    Trap |
	//    Suspend |
	//    LocalSignalDeclaration |
	//    LocalVariableDeclaration |
	//    IfTest |
	//    Exec |
	//    Run |
	//    ProcedureCall |
	//    Repeat |
	//    Block |
	//    LegacyDo
	//;
	public InstructionStatementElements getInstructionStatementAccess() {
		return pInstructionStatement;
	}
	
	public ParserRule getInstructionStatementRule() {
		return getInstructionStatementAccess().getRule();
	}
	
	//// = Parallel: at least two threads
	//// -------------------------------------
	////EsterelParallel returns EsterelParallel:
	////    {EsterelParallel}
	////    threads+=EsterelThread (=>"||" threads+=EsterelThread)+;
	//// This rule massively improves parsing
	//EsterelParallel returns scl::Statement:
	//    EsterelThread ({EsterelParallel.statements+=current} (=>"||" statements+=EsterelThread)+)?;
	public EsterelParallelElements getEsterelParallelAccess() {
		return pEsterelParallel;
	}
	
	public ParserRule getEsterelParallelRule() {
		return getEsterelParallelAccess().getRule();
	}
	
	//// = Thread
	//// One AtomicStatement or multiple AtomicStatements
	//// It doesn't include 'Parallel' statements because they would be parallel to
	//// the existing thread and therefore included in the previous thread list (Parallel.threads).
	//// -------------------------------------
	////EsterelThread:
	////    {EsterelThread}
	////    (statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=InstructionStatement?;
	//// This rule massively improves parsing
	//EsterelThread returns scl::Statement:
	//    InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=InstructionStatement)+)? ";"?;
	public EsterelThreadElements getEsterelThreadAccess() {
		return pEsterelThread;
	}
	
	public ParserRule getEsterelThreadRule() {
		return getEsterelThreadAccess().getRule();
	}
	
	//// = Nothing
	//// -------------------------------------
	//Nothing:
	//    {Nothing}
	//    (annotations += Annotation)*
	//    "nothing"
	//;
	public NothingElements getNothingAccess() {
		return pNothing;
	}
	
	public ParserRule getNothingRule() {
		return getNothingAccess().getRule();
	}
	
	//// = Pause
	//// -------------------------------------
	//EsterelPause returns scl::Pause:
	//    {scl::Pause}
	//    (annotations += Annotation)*
	//    "pause"
	//;
	public EsterelPauseElements getEsterelPauseAccess() {
		return pEsterelPause;
	}
	
	public ParserRule getEsterelPauseRule() {
		return getEsterelPauseAccess().getRule();
	}
	
	//// = Halt
	//// -------------------------------------
	//Halt:
	//    {Halt}
	//    (annotations += Annotation)*
	//    "halt"
	//;
	public HaltElements getHaltAccess() {
		return pHalt;
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}
	
	//// = Block
	//// -------------------------------------
	//Block:
	//    {Block}
	//    (annotations += Annotation)*
	//    "[" (statements+=EsterelParallel) "]"
	//;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//// = 7.5.1 Signal Emission
	//// -------------------------------------
	//Emit:
	//    (annotations += Annotation)*
	//    "emit"
	//    signal=[Signal|ID]
	//    ("("expression=Expression")")?
	//;
	public EmitElements getEmitAccess() {
		return pEmit;
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}
	
	//// emit a signal indefinitely
	//Sustain:
	//    (annotations += Annotation)*
	//    "sustain"
	//    signal=[Signal|ID]
	//    ("(" expression=Expression ")")?
	//;
	public SustainElements getSustainAccess() {
		return pSustain;
	}
	
	public ParserRule getSustainRule() {
		return getSustainAccess().getRule();
	}
	
	//// = 7.5.2 Assignment and Procedure Call
	//// -------------------------------------
	//EsterelAssignment returns scl::Assignment:
	//    (annotations += Annotation)*
	//    reference=VariableReference ":=" expression=Expression
	//;
	public EsterelAssignmentElements getEsterelAssignmentAccess() {
		return pEsterelAssignment;
	}
	
	public ParserRule getEsterelAssignmentRule() {
		return getEsterelAssignmentAccess().getRule();
	}
	
	//VariableReference returns kexpressions::ValuedObjectReference:
	//   {VariableReference} valuedObject=[Variable|ID]
	//;
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//ProcedureCall:
	//    (annotations += Annotation)*
	//    "call"
	//    procedure=[Procedure|ID]
	//    ("("
	//        ( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
	//    ")" | '()')
	//    ("("
	//        ( valueArguments+=Expression ("," valueArguments+=Expression)* )?
	//    ")" | '()')
	//;
	public ProcedureCallElements getProcedureCallAccess() {
		return pProcedureCall;
	}
	
	public ParserRule getProcedureCallRule() {
		return getProcedureCallAccess().getRule();
	}
	
	//// = 7.5.3 The present Signal Test
	//// -------------------------------------
	//Present:
	//    (annotations += Annotation)*
	//    "present"
	//    (   (
	//            (     expression=SignalExpression
	//                | "[" expression=SignalExpression "]"
	//            )
	//            (
	//                (annotations += Annotation)*
	//                "then"
	//                (statements+=EsterelParallel)
	//            )?
	//        )
	//        |
	//        cases+=PresentCase+
	//    )
	//    (
	//        "else"
	//        (elseStatements+=EsterelParallel)
	//    )?
	//    "end" "present"?
	//;
	public PresentElements getPresentAccess() {
		return pPresent;
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}
	
	//PresentCase:
	//    (annotations += Annotation)*
	//    "case"
	//    (     expression=SignalExpression
	//        | "[" expression=SignalExpression "]"
	//    )
	//    (   "do"
	//        (statements+=EsterelParallel)
	//    )?;
	public PresentCaseElements getPresentCaseAccess() {
		return pPresentCase;
	}
	
	public ParserRule getPresentCaseRule() {
		return getPresentCaseAccess().getRule();
	}
	
	//// = 7.5.4 The if Data Test
	//// -------------------------------------
	//IfTest:
	//    (annotations += Annotation)*
	//    "if"
	//    expression=Expression
	//    (
	//        (annotations+=Annotation)*
	//        "then"
	//        (statements+=EsterelParallel)
	//    )?
	//    (elseif+=ElsIf)*
	//    (
	//            "else"
	//            (elseStatements+=EsterelParallel)
	//    )?
	//    "end" "if"?
	//;
	public IfTestElements getIfTestAccess() {
		return pIfTest;
	}
	
	public ParserRule getIfTestRule() {
		return getIfTestAccess().getRule();
	}
	
	//ElsIf:
	//    (annotations += Annotation)*
	//    "elsif"
	//    expression=Expression
	//    (
	//        "then"
	//        (statements+=EsterelParallel)
	//    )?;
	public ElsIfElements getElsIfAccess() {
		return pElsIf;
	}
	
	public ParserRule getElsIfRule() {
		return getElsIfAccess().getRule();
	}
	
	//// = 7.5.5 Looping & 7.5.9 Temporal Loops
	//// -------------------------------------
	//Loop:
	//    {Loop}
	//    (annotations += Annotation)*
	//    "loop"
	//    (statements+=EsterelParallel)
	//    ("end" "loop"? | "each" delay=DelayExpression)
	//;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//// = 7.5.6 Repeat Looping
	//// -------------------------------------
	//Repeat:
	//    (annotations += Annotation)*
	//    (positive?="positive")?
	//    "repeat"
	//    expression=Expression
	//    "times"
	//    (statements+=EsterelParallel)
	//    "end" "repeat"?
	//;
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//// = 7.5.7 The abort Statements
	//// -------------------------------------
	//Abort:
	//    (annotations += Annotation)*
	//    ((weak?="weak")? "abort")
	//    (statements+=EsterelParallel)
	//    "when"
	//    (
	//        delay=DelayExpression
	//        (
	//            "do"
	//            (doStatements+=EsterelParallel)
	//            "end" "weak"? "abort"?
	//        )?
	//    |
	//        cases+=Case+
	//        "end" "weak"? "abort"?
	//    )
	//;
	public AbortElements getAbortAccess() {
		return pAbort;
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}
	
	//Case:
	//    (annotations += Annotation)*
	//    "case"
	//    delay=DelayExpression
	//    (
	//        "do"
	//        (statements+=EsterelParallel)
	//    )?;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//// = 7.5.8 The await Statement
	//// -------------------------------------
	//Await:
	//    (annotations += Annotation)*
	//    "await"
	//    (
	//        delay=DelayExpression
	//        (
	//            "do"
	//            (statements+=EsterelParallel)
	//            "end" "await"?
	//        )?
	//    |
	//        cases+=Case+
	//        "end" "await"?
	//    )
	//;
	public AwaitElements getAwaitAccess() {
		return pAwait;
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}
	
	//// = 7.5.9 Temporal Loops
	//// -------------------------------------
	//// for 'LoopEach' look at 7.5.5
	//EveryDo:
	//    (annotations += Annotation)*
	//    "every"
	//    delay=DelayExpression
	//    "do"
	//    (statements+=EsterelParallel)
	//    "end" "every"?
	//;
	public EveryDoElements getEveryDoAccess() {
		return pEveryDo;
	}
	
	public ParserRule getEveryDoRule() {
		return getEveryDoAccess().getRule();
	}
	
	//// = 7.5.10 The suspend Statement
	//// -------------------------------------
	//Suspend:
	//    (annotations += Annotation)*
	//    ((weak?="weak")? "suspend")
	//    (statements+=EsterelParallel)
	//    "when"
	//    delay=DelayExpression
	//;
	public SuspendElements getSuspendAccess() {
		return pSuspend;
	}
	
	public ParserRule getSuspendRule() {
		return getSuspendAccess().getRule();
	}
	
	//// = 7.5.11 Traps
	//// -------------------------------------
	//Trap:
	//    (annotations += Annotation)*
	//    "trap"
	//    trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
	//    "in"
	//    (statements+=EsterelParallel)
	//    (trapHandler+=TrapHandler)*
	//    "end" "trap"?
	//;
	public TrapElements getTrapAccess() {
		return pTrap;
	}
	
	public ParserRule getTrapRule() {
		return getTrapAccess().getRule();
	}
	
	//TrapSignal returns Signal:
	//    {TrapSignal}
	//    name=ID
	//    (
	//        ":=" initialValue=Expression
	//        ":"
	//          (       type=EsterelValueType
	//                | idType=ID
	//                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//          )
	//    |
	//        ":"
	//          (       type=EsterelValueType
	//                | idType=ID
	//                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//          )
	//    )?
	//;
	public TrapSignalElements getTrapSignalAccess() {
		return pTrapSignal;
	}
	
	public ParserRule getTrapSignalRule() {
		return getTrapSignalAccess().getRule();
	}
	
	//TrapHandler:
	//    (annotations += Annotation)*
	//    "handle"
	//    expression=TrapExpr
	//    "do"
	//    (statements+=EsterelParallel)
	//;
	public TrapHandlerElements getTrapHandlerAccess() {
		return pTrapHandler;
	}
	
	public ParserRule getTrapHandlerRule() {
		return getTrapHandlerAccess().getRule();
	}
	
	//Exit:
	//    (annotations += Annotation)*
	//    "exit"
	//    trap=[TrapSignal|ID]
	//    ("(" expression=Expression ")")?
	//;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//// = 7.5.12 The exec Task Execution Statement
	//// -------------------------------------
	//Exec:
	//    (annotations += Annotation)*
	//    "exec"
	//        (   task=[Task|ID]
	//            ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
	//            ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()')
	//            "return"
	//            returnSignal=[Signal]
	//            ("do" (statements+=EsterelParallel) "end" "exec"?)?
	//        |
	//            execCaseList+=ExecCase+
	//            "end" "exec"?
	//        );
	public ExecElements getExecAccess() {
		return pExec;
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}
	
	//ExecCase:
	//    (annotations += Annotation)*
	//    "case" task=[Task|ID]
	//    ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
	//    ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"  | '()')
	//    "return"
	//    returnSignal=[Signal]
	//    ("do" (statements+=EsterelParallel))?;
	public ExecCaseElements getExecCaseAccess() {
		return pExecCase;
	}
	
	public ParserRule getExecCaseRule() {
		return getExecCaseAccess().getRule();
	}
	
	//// = 7.5.13 Local Signal Declaration
	//// -------------------------------------
	//LocalSignalDeclaration:
	//    (annotations += Annotation)*
	//    "signal" valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    "in" (statements+=EsterelParallel)
	//    "end" "signal"?
	//;
	public LocalSignalDeclarationElements getLocalSignalDeclarationAccess() {
		return pLocalSignalDeclaration;
	}
	
	public ParserRule getLocalSignalDeclarationRule() {
		return getLocalSignalDeclarationAccess().getRule();
	}
	
	//// = 7.5.14 Local Variable Declaration
	//// -------------------------------------
	//LocalVariableDeclaration:
	//    (annotations += Annotation)*
	//    "var"
	//    (declarations+=EsterelVariableDeclaration) ("," declarations+=EsterelVariableDeclaration)*
	//    "in"
	//    (statements+=EsterelParallel)
	//    "end" "var"?
	//;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return pLocalVariableDeclaration;
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}
	
	//EsterelVariableDeclaration:
	//    (valuedObjects+=Variable) ("," valuedObjects+=Variable)* ":" type=TypeIdentifier;
	public EsterelVariableDeclarationElements getEsterelVariableDeclarationAccess() {
		return pEsterelVariableDeclaration;
	}
	
	public ParserRule getEsterelVariableDeclarationRule() {
		return getEsterelVariableDeclarationAccess().getRule();
	}
	
	//Variable:
	//     name=ID (":=" initialValue=Expression)?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//// = 7.5.15 The run Module Instantiation Statement
	//// -------------------------------------
	//Run:
	//    (annotations += Annotation)*
	//    (   (   "run"
	//            module=ModuleRenaming
	//            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
	//        )
	//        |
	//        (   "copymodule"
	//            module=ModuleRenaming
	//            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
	//         )
	//    )
	//;
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//ModuleRenaming:
	//       module=[scl::Module|ID]
	//    | (newName=ID "/" module=[scl::Module|ID])
	//;
	public ModuleRenamingElements getModuleRenamingAccess() {
		return pModuleRenaming;
	}
	
	public ParserRule getModuleRenamingRule() {
		return getModuleRenamingAccess().getRule();
	}
	
	//Renamings:
	//    (annotations += Annotation)*
	//    ( "type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
	//    | "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
	//    | "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
	//    | "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
	//    | "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
	//    | "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)* );
	public RenamingsElements getRenamingsAccess() {
		return pRenamings;
	}
	
	public ParserRule getRenamingsRule() {
		return getRenamingsAccess().getRule();
	}
	
	//TypeRenaming:
	//    (newName=[TypeDefinition|ID] | newType=EsterelValueType) "/" oldName=[TypeDefinition|ID];
	public TypeRenamingElements getTypeRenamingAccess() {
		return pTypeRenaming;
	}
	
	public ParserRule getTypeRenamingRule() {
		return getTypeRenamingAccess().getRule();
	}
	
	//ConstantRenaming:
	//    (newName=[Constant|ID] | newValue=AnyValue) "/" oldName=[Constant|ID];
	public ConstantRenamingElements getConstantRenamingAccess() {
		return pConstantRenaming;
	}
	
	public ParserRule getConstantRenamingRule() {
		return getConstantRenamingAccess().getRule();
	}
	
	//FunctionRenaming:
	//    (newName=[Function|ID] | newFunc=BuildInFunction) "/" oldName=[Function|ID];
	public FunctionRenamingElements getFunctionRenamingAccess() {
		return pFunctionRenaming;
	}
	
	public ParserRule getFunctionRenamingRule() {
		return getFunctionRenamingAccess().getRule();
	}
	
	//ProcedureRenaming:
	//    newName=[Procedure|ID] "/" oldName=[Procedure|ID];
	public ProcedureRenamingElements getProcedureRenamingAccess() {
		return pProcedureRenaming;
	}
	
	public ParserRule getProcedureRenamingRule() {
		return getProcedureRenamingAccess().getRule();
	}
	
	//TaskRenaming:
	//    newName=[Task|ID] "/" oldName=[Task|ID];
	public TaskRenamingElements getTaskRenamingAccess() {
		return pTaskRenaming;
	}
	
	public ParserRule getTaskRenamingRule() {
		return getTaskRenamingAccess().getRule();
	}
	
	//SignalRenaming:
	//    newName=SignalOrTickReferenceExpression "/" oldName=SignalOrTickReferenceExpression;
	public SignalRenamingElements getSignalRenamingAccess() {
		return pSignalRenaming;
	}
	
	public ParserRule getSignalRenamingRule() {
		return getSignalRenamingAccess().getRule();
	}
	
	//// renaming can also rename build in types and functions
	//BuildInFunction:
	//    "*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";
	public BuildInFunctionElements getBuildInFunctionAccess() {
		return pBuildInFunction;
	}
	
	public ParserRule getBuildInFunctionRule() {
		return getBuildInFunctionAccess().getRule();
	}
	
	///* ###################################################
	// * ###               7.6 Old Syntax                ###
	// * ###################################################
	// */
	//LegacyDo returns Do:
	//    (annotations += Annotation)*
	//    "do"
	//    (statements+=EsterelParallel)
	//    (
	//        "upto"
	//        delay=DelayExpression
	//    |
	//        "watching"
	//        watching=DelayExpression
	//        (
	//            "timeout"
	//            watchingStatements+=EsterelParallel
	//            "end" "timeout"?
	//        )?
	//    );
	public LegacyDoElements getLegacyDoAccess() {
		return pLegacyDo;
	}
	
	public ParserRule getLegacyDoRule() {
		return getLegacyDoAccess().getRule();
	}
	
	///* ###################################################
	// * ###                    Enum                     ###
	// * ###################################################
	// */
	//enum EsterelCompareOperator returns kexpressions::OperatorType:
	//    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public EsterelCompareOperatorElements getEsterelCompareOperatorAccess() {
		return eEsterelCompareOperator;
	}
	
	public EnumRule getEsterelCompareOperatorRule() {
		return getEsterelCompareOperatorAccess().getRule();
	}
	
	//enum EsterelPreOperator returns kexpressions::OperatorType:
	//    PRE="pre";
	public EsterelPreOperatorElements getEsterelPreOperatorAccess() {
		return eEsterelPreOperator;
	}
	
	public EnumRule getEsterelPreOperatorRule() {
		return getEsterelPreOperatorAccess().getRule();
	}
	
	//enum EsterelOrOperator returns kexpressions::OperatorType:
	//    LOGICAL_OR="or";
	public EsterelOrOperatorElements getEsterelOrOperatorAccess() {
		return eEsterelOrOperator;
	}
	
	public EnumRule getEsterelOrOperatorRule() {
		return getEsterelOrOperatorAccess().getRule();
	}
	
	//enum EsterelAndOperator returns kexpressions::OperatorType:
	//    LOGICAL_AND="and";
	public EsterelAndOperatorElements getEsterelAndOperatorAccess() {
		return eEsterelAndOperator;
	}
	
	public EnumRule getEsterelAndOperatorRule() {
		return getEsterelAndOperatorAccess().getRule();
	}
	
	//enum EsterelNotOperator returns kexpressions::OperatorType:
	//    NOT="not";
	public EsterelNotOperatorElements getEsterelNotOperatorAccess() {
		return eEsterelNotOperator;
	}
	
	public EnumRule getEsterelNotOperatorRule() {
		return getEsterelNotOperatorAccess().getRule();
	}
	
	//enum EsterelAddOperator returns kexpressions::OperatorType:
	//    ADD="+";
	public EsterelAddOperatorElements getEsterelAddOperatorAccess() {
		return eEsterelAddOperator;
	}
	
	public EnumRule getEsterelAddOperatorRule() {
		return getEsterelAddOperatorAccess().getRule();
	}
	
	//enum EsterelSubOperator returns kexpressions::OperatorType:
	//    SUB="-";
	public EsterelSubOperatorElements getEsterelSubOperatorAccess() {
		return eEsterelSubOperator;
	}
	
	public EnumRule getEsterelSubOperatorRule() {
		return getEsterelSubOperatorAccess().getRule();
	}
	
	//enum EsterelMultOperator returns kexpressions::OperatorType:
	//    MULT="*";
	public EsterelMultOperatorElements getEsterelMultOperatorAccess() {
		return eEsterelMultOperator;
	}
	
	public EnumRule getEsterelMultOperatorRule() {
		return getEsterelMultOperatorAccess().getRule();
	}
	
	//enum EsterelModOperator returns kexpressions::OperatorType:
	//    MOD="mod";
	public EsterelModOperatorElements getEsterelModOperatorAccess() {
		return eEsterelModOperator;
	}
	
	public EnumRule getEsterelModOperatorRule() {
		return getEsterelModOperatorAccess().getRule();
	}
	
	//enum EsterelDivOperator returns kexpressions::OperatorType:
	//    DIV="/";
	public EsterelDivOperatorElements getEsterelDivOperatorAccess() {
		return eEsterelDivOperator;
	}
	
	public EnumRule getEsterelDivOperatorRule() {
		return getEsterelDivOperatorAccess().getRule();
	}
	
	//enum EsterelValueTestOperator returns kexpressions::OperatorType:
	//    VAL="?";
	public EsterelValueTestOperatorElements getEsterelValueTestOperatorAccess() {
		return eEsterelValueTestOperator;
	}
	
	public EnumRule getEsterelValueTestOperatorRule() {
		return getEsterelValueTestOperatorAccess().getRule();
	}
	
	///*
	//   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext
	//*/
	//enum EsterelValueType returns kexpressions::ValueType:
	//    PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned"  |
	//    INT="integer" | FLOAT="float" | DOUBLE="double" |
	//    STRING="string" | HOST="host";
	public EsterelValueTypeElements getEsterelValueTypeAccess() {
		return eEsterelValueType;
	}
	
	public EnumRule getEsterelValueTypeRule() {
		return getEsterelValueTypeAccess().getRule();
	}
	
	//enum EsterelCombineOperator returns kexpressions::CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="or" | AND="and" | HOST="host";
	public EsterelCombineOperatorElements getEsterelCombineOperatorAccess() {
		return eEsterelCombineOperator;
	}
	
	public EnumRule getEsterelCombineOperatorRule() {
		return getEsterelCombineOperatorAccess().getRule();
	}
	
	///* ###################################################
	// * ###                 Terminal                    ###
	// * ###################################################
	// */
	//@Override
	//terminal SL_COMMENT:
	//    '%' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal ML_COMMENT:
	//    ('%' '{')->('}' '%');
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//// allow escaping by double quotes ( "this is a ""quote"", how nice." ) - Esterel style
	//@Override
	//terminal STRING:
	//    '"' (!('"') | ('"' '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//// custom terminal rule allowing to save transition label string as they are
	//@Override
	//terminal HOSTCODE:
	//    "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	public TerminalRule getHOSTCODERule() {
		return tHOSTCODE;
	}
	
	///* ###################################################
	// * ###               Expressions                   ###
	// * ###################################################
	// */
	//// Esterel is a bit richer than what is provided by kexpressions.
	//// These rules are introduced here.
	//// Care about order of the rules!
	//@Override
	//AtomicExpression returns kexpressions::Expression:
	//    EsterelFunctionCall
	//    | TrapExpression
	//    | BoolValue
	//    | ValuedObjectPreExpression
	//    | TextExpression
	//    | '(' BooleanExpression ')'
	//    | ConstantExpression;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//TrapExpression returns kexpressions::Expression:
	//    {TrapExpression} "??" trap=[TrapSignal|ID];
	public TrapExpressionElements getTrapExpressionAccess() {
		return pTrapExpression;
	}
	
	public ParserRule getTrapExpressionRule() {
		return getTrapExpressionAccess().getRule();
	}
	
	//EsterelFunctionCall:
	//    function=[Function|ID]
	//    ("(" (parameter+=Expression ("," parameter+=Expression)*)? ")" | '()');
	public EsterelFunctionCallElements getEsterelFunctionCallAccess() {
		return pEsterelFunctionCall;
	}
	
	public ParserRule getEsterelFunctionCallRule() {
		return getEsterelFunctionCallAccess().getRule();
	}
	
	//ConstantExpression returns kexpressions::Expression:
	//    {ConstantExpression} (constant=[Constant|ID] | value=AnyValue);
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//// --> B.3.5 Trap Expressions <--
	//// -------------------------------------
	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapExpr returns kexpressions::Expression:
	//    TrapAndExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelOrOperator subExpressions+=TrapAndExpression)+
	//    )?;
	public TrapExprElements getTrapExprAccess() {
		return pTrapExpr;
	}
	
	public ParserRule getTrapExprRule() {
		return getTrapExprAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapAndExpression returns kexpressions::Expression:
	//    TrapNotExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+
	//    )?;
	public TrapAndExpressionElements getTrapAndExpressionAccess() {
		return pTrapAndExpression;
	}
	
	public ParserRule getTrapAndExpressionRule() {
		return getTrapAndExpressionAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapNotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelNotOperator
	//    subExpressions+=TrapNotExpression
	//    |
	//    TrapAtomicExpression;
	public TrapNotExpressionElements getTrapNotExpressionAccess() {
		return pTrapNotExpression;
	}
	
	public ParserRule getTrapNotExpressionRule() {
		return getTrapNotExpressionAccess().getRule();
	}
	
	//TrapAtomicExpression returns kexpressions::Expression:
	//      TrapReferenceExpr
	//    | "(" TrapExpression ")";
	public TrapAtomicExpressionElements getTrapAtomicExpressionAccess() {
		return pTrapAtomicExpression;
	}
	
	public ParserRule getTrapAtomicExpressionRule() {
		return getTrapAtomicExpressionAccess().getRule();
	}
	
	//TrapReferenceExpr returns kexpressions::ValuedObjectReference:
	//    {TrapReference} valuedObject=[TrapSignal|ID];
	public TrapReferenceExprElements getTrapReferenceExprAccess() {
		return pTrapReferenceExpr;
	}
	
	public ParserRule getTrapReferenceExprRule() {
		return getTrapReferenceExprAccess().getRule();
	}
	
	//// --> B.3.3 Signal Expressions <--
	//// -------------------------------------
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalExpression returns kexpressions::Expression:
	//    SignalAndExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelOrOperator subExpressions+=SignalAndExpression)+
	//    )?;
	public SignalExpressionElements getSignalExpressionAccess() {
		return pSignalExpression;
	}
	
	public ParserRule getSignalExpressionRule() {
		return getSignalExpressionAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalAndExpression returns kexpressions::Expression:
	//    SignalNotExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAndOperator subExpressions+=SignalNotExpression)+
	//    )?;
	public SignalAndExpressionElements getSignalAndExpressionAccess() {
		return pSignalAndExpression;
	}
	
	public ParserRule getSignalAndExpressionRule() {
		return getSignalAndExpressionAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalNotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelNotOperator
	//    subExpressions+=SignalNotExpression
	//    |
	//    SignalAtomicExpression;
	public SignalNotExpressionElements getSignalNotExpressionAccess() {
		return pSignalNotExpression;
	}
	
	public ParserRule getSignalNotExpressionRule() {
		return getSignalNotExpressionAccess().getRule();
	}
	
	//SignalAtomicExpression returns kexpressions::Expression:
	//     "(" SignalExpression ")"
	//    | SignalPreExpression
	//    | SignalOrTickReferenceExpression;
	public SignalAtomicExpressionElements getSignalAtomicExpressionAccess() {
		return pSignalAtomicExpression;
	}
	
	public ParserRule getSignalAtomicExpressionRule() {
		return getSignalAtomicExpressionAccess().getRule();
	}
	
	//SignalOrTickReferenceExpression returns kexpressions::ValuedObjectReference:
	//    SignalReferenceExpression | TickSignalExpression
	//;
	public SignalOrTickReferenceExpressionElements getSignalOrTickReferenceExpressionAccess() {
		return pSignalOrTickReferenceExpression;
	}
	
	public ParserRule getSignalOrTickReferenceExpressionRule() {
		return getSignalOrTickReferenceExpressionAccess().getRule();
	}
	
	//SignalReferenceExpression returns kexpressions::ValuedObjectReference:
	//    {SignalReference} valuedObject=[Signal|ID];
	public SignalReferenceExpressionElements getSignalReferenceExpressionAccess() {
		return pSignalReferenceExpression;
	}
	
	public ParserRule getSignalReferenceExpressionRule() {
		return getSignalReferenceExpressionAccess().getRule();
	}
	
	//TickSignalExpression returns kexpressions::ValuedObjectReference:
	//    {TickReference} 'tick';
	public TickSignalExpressionElements getTickSignalExpressionAccess() {
		return pTickSignalExpression;
	}
	
	public ParserRule getTickSignalExpressionRule() {
		return getTickSignalExpressionAccess().getRule();
	}
	
	//SignalPreExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelPreOperator
	//    '(' subExpressions+=SignalOrTickReferenceExpression ')';
	public SignalPreExpressionElements getSignalPreExpressionAccess() {
		return pSignalPreExpression;
	}
	
	public ParserRule getSignalPreExpressionRule() {
		return getSignalPreExpressionAccess().getRule();
	}
	
	//// --> B.3.4 Delay Expressions <--
	//// -------------------------------------
	//DelayExpression:
	//    (delay=Expression
	//        (     expression=SignalOrTickReferenceExpression
	//            | expression=SignalPreExpression
	//            | "[" expression=SignalExpression "]"
	//        )
	//    )
	//    |
	//    (immediate?="immediate"?
	//        (     expression=SignalOrTickReferenceExpression
	//            | expression=SignalPreExpression
	//            | "[" expression=SignalExpression "]"
	//        )
	//    );
	public DelayExpressionElements getDelayExpressionAccess() {
		return pDelayExpression;
	}
	
	public ParserRule getDelayExpressionRule() {
		return getDelayExpressionAccess().getRule();
	}
	
	///* #########################################################################
	// *
	// *
	// * Before the following was an extra plugin named
	// * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
	// *
	// *
	// * #########################################################################
	// */
	//@Override
	//Expression returns kexpressions::Expression:
	//      BooleanExpression
	//    | ValuedExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression returns kexpressions::Expression:
	//    OrExpression;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//// The warning can be ignored since the operator will only override itself in this loop.
	//OrExpression returns kexpressions::Expression:
	//    AndExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelOrOperator subExpressions+=AndExpression)+
	//    )?;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//// Example: A and B, not C and 42 <= ?D
	//// The warning can be ignored since the operator will only override itself in this loop.
	//AndExpression returns kexpressions::Expression:
	//    CompareOperation
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAndOperator subExpressions+=CompareOperation)+
	//    )?;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//// Example: 42 <= ?A
	//@Override
	//CompareOperation returns kexpressions::Expression:
	//    NotOrValuedExpression
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression
	//    )?;
	public CompareOperationElements getCompareOperationAccess() {
		return pCompareOperation;
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// order IS IMPORTANT
	//@Override
	//NotOrValuedExpression returns kexpressions::Expression:
	//      ValuedExpression
	//    | NotExpression;
	public NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return pNotOrValuedExpression;
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//@Override
	//NotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelNotOperator
	//    subExpressions+=(NotExpression)
	//    |
	//    AtomicExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// everything that evaluates to a primitive number value
	//@Override
	//ValuedExpression returns kexpressions::Expression:
	//    AddExpression;
	public ValuedExpressionElements getValuedExpressionAccess() {
		return pValuedExpression;
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//// Example: 1 + 2
	//// The warning can be ignored since the operator will only override itself in this loop.
	//@Override
	//AddExpression returns kexpressions::Expression:
	//    SubExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAddOperator subExpressions+=SubExpression)+
	//    )?;
	public AddExpressionElements getAddExpressionAccess() {
		return pAddExpression;
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Example: varA - ?B
	//// The warning can be ignored since the operator will only override itself in this loop.
	//@Override
	//SubExpression returns kexpressions::Expression:
	//    MultExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelSubOperator subExpressions+=MultExpression)+
	//    )?;
	public SubExpressionElements getSubExpressionAccess() {
		return pSubExpression;
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//// Example: 2 * 4
	//// The warning can be ignored since the operator will only override itself in this loop.
	//@Override
	//MultExpression returns kexpressions::Expression:
	//    DivExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelMultOperator subExpressions+=DivExpression)+
	//    )?;
	public MultExpressionElements getMultExpressionAccess() {
		return pMultExpression;
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Example: (2 / 4)
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//@Override
	//DivExpression returns kexpressions::Expression:
	//    ModExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        operator=EsterelDivOperator
	//        subExpressions+=ModExpression
	//    )?;
	public DivExpressionElements getDivExpressionAccess() {
		return pDivExpression;
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Example: varA mod ?B
	//@Override
	//ModExpression returns kexpressions::Expression:
	//    NegExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        operator=EsterelModOperator
	//        subExpressions+=AtomicValuedExpression
	//    )?;
	public ModExpressionElements getModExpressionAccess() {
		return pModExpression;
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//@Override
	//NegExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelSubOperator
	//    subExpressions+=(NegExpression)
	//    |
	//    AtomicValuedExpression;
	public NegExpressionElements getNegExpressionAccess() {
		return pNegExpression;
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//@Override
	//AtomicValuedExpression returns kexpressions::Expression:
	//    IntValue
	//    | FloatValue
	//    | '(' ValuedExpression ')'
	//    | AtomicExpression;
	public AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return pAtomicValuedExpression;
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
	//ValuedObjectPreExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
	//    | {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
	//    | ValuedObjectReference;
	public ValuedObjectPreExpressionElements getValuedObjectPreExpressionAccess() {
		return pValuedObjectPreExpression;
	}
	
	public ParserRule getValuedObjectPreExpressionRule() {
		return getValuedObjectPreExpressionAccess().getRule();
	}
	
	//// For some reason Esterel fails to parse the optional semicolon in threads if the Annotation rule includes JsonAnnotations
	//@Override
	//Annotation returns annotations::Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//SCLProgram returns SCLProgram:
	//    pragmas+=Pragma*
	//    modules+=Module*
	//;
	public SCLGrammarAccess.SCLProgramElements getSCLProgramAccess() {
		return gaSCL.getSCLProgramAccess();
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}
	
	//Module returns Module:
	//    (annotations += Annotation)*
	//    'module' name = ID ':'?
	//    (declarations += Declaration)*
	//    (statements += Statement)*
	//;
	public SCLGrammarAccess.ModuleElements getModuleAccess() {
		return gaSCL.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Statement returns Statement:
	//      SclAssignment
	//    | SclPostfixAssignment
	//    | Label
	//    | SclEffectAssignment
	//    | Conditional
	//    | LegacyConditional
	//    | Goto
	//    | Parallel
	//    | Pause
	//    | ModuleCall
	//    | ScopeStatement
	//    | Return
	//    | ForLoop
	//    | WhileLoop
	//;
	public SCLGrammarAccess.StatementElements getStatementAccess() {
		return gaSCL.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Pause returns Pause:
	//    {Pause}
	//    (annotations += Annotation)*
	//    'pause'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//Label returns Label:
	//    (annotations += Annotation)*
	//    name = ID ':'
	//;
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Goto returns Goto:
	//    (annotations += Annotation)*
	//    'goto' target = [Label|ID]
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//SclAssignment returns Assignment:
	//    (annotations += Annotation)*
	//    reference = ValuedObjectReference
	//    operator = AssignOperator
	//    expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclAssignmentElements getSclAssignmentAccess() {
		return gaSCL.getSclAssignmentAccess();
	}
	
	public ParserRule getSclAssignmentRule() {
		return getSclAssignmentAccess().getRule();
	}
	
	//SclPostfixAssignment returns Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclPostfixAssignmentElements getSclPostfixAssignmentAccess() {
		return gaSCL.getSclPostfixAssignmentAccess();
	}
	
	public ParserRule getSclPostfixAssignmentRule() {
		return getSclPostfixAssignmentAccess().getRule();
	}
	
	//SclEffectAssignment returns Assignment:
	//    (annotations += Annotation)*
	//    expression = (
	//        ReferenceCall
	//    |
	//        TextExpression
	//    |
	//        PrintCall
	//    |
	//        RandomizeCall
	//    |
	//        FunctionCall
	//    )
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclEffectAssignmentElements getSclEffectAssignmentAccess() {
		return gaSCL.getSclEffectAssignmentAccess();
	}
	
	public ParserRule getSclEffectAssignmentRule() {
		return getSclEffectAssignmentAccess().getRule();
	}
	
	//Return returns Return:
	//    (annotations += Annotation)*
	//    'return'
	//    expression = Expression
	//;
	public SCLGrammarAccess.ReturnElements getReturnAccess() {
		return gaSCL.getReturnAccess();
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Conditional returns Conditional:
	//    (annotations += Annotation)*
	//    'if' expression = (BoolScheduleExpression | AtomicExpression)
	//    '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    (else = ElseScope | semicolon?=';')?
	//;
	public SCLGrammarAccess.ConditionalElements getConditionalAccess() {
		return gaSCL.getConditionalAccess();
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//ElseScope returns ElseScope:
	//    {ElseScope}
	//    (annotations += Annotation)*
	//    'else' '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ElseScopeElements getElseScopeAccess() {
		return gaSCL.getElseScopeAccess();
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}
	
	//LegacyConditional returns Conditional:
	//    (annotations += Annotation)*
	//    'if' expression = BoolExpression
	//    'then'
	//    (statements += Statement)*
	//    (else = LegacyElseScope)?
	//    'end'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.LegacyConditionalElements getLegacyConditionalAccess() {
		return gaSCL.getLegacyConditionalAccess();
	}
	
	public ParserRule getLegacyConditionalRule() {
		return getLegacyConditionalAccess().getRule();
	}
	
	//LegacyElseScope returns ElseScope:
	//    {ElseScope}
	//    (annotations += Annotation)*
	//    'else'
	//    (statements += Statement)*
	//;
	public SCLGrammarAccess.LegacyElseScopeElements getLegacyElseScopeAccess() {
		return gaSCL.getLegacyElseScopeAccess();
	}
	
	public ParserRule getLegacyElseScopeRule() {
		return getLegacyElseScopeAccess().getRule();
	}
	
	//Thread returns Thread:
	//    {Thread}
	//    (
	//        (
	//            (annotations += Annotation)*
	//            '{'
	//            (declarations+=Declaration)*
	//            (statements += Statement)*
	//            '}'
	//        ) | (
	//            (statements += Statement)*
	//        )
	//    )
	//;
	public SCLGrammarAccess.ThreadElements getThreadAccess() {
		return gaSCL.getThreadAccess();
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}
	
	//Parallel returns Parallel:
	//    'fork'
	//    //(forkType=ForkType)?
	//    (
	//        threads += Thread
	//        (
	//            'par'
	//            threads += Thread
	//        )*
	//    )
	//    'join'
	//    //joinAny?='any'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ParallelElements getParallelAccess() {
		return gaSCL.getParallelAccess();
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	////enum ForkType returns ForkType:
	////    SEQUENTIAL = 'seq' | SEQUENTIAL_PREEMPTIVE = 'seq-abort';
	//ScopeStatement returns ScopeStatement:
	//    {ScopeStatement}
	//    (annotations += Annotation)*
	//    '{'
	//        (declarations+=Declaration)*
	//        (statements += Statement)*
	//    '}'
	//;
	public SCLGrammarAccess.ScopeStatementElements getScopeStatementAccess() {
		return gaSCL.getScopeStatementAccess();
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}
	
	//ForLoop returns Loop:
	//    'for' '('
	//    (initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)?
	//    ';'
	//    condition=BoolExpression
	//    ';'
	//    afterthought=EffectOrAssignment?
	//    ')' '{'
	//    (declarations += Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ForLoopElements getForLoopAccess() {
		return gaSCL.getForLoopAccess();
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//LoopDeclaration returns kexpressions::VariableDeclaration:
	//    annotations += Annotation*
	//    (
	//        (type = ValueType)
	//    |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects += ValuedObject
	//;
	public SCLGrammarAccess.LoopDeclarationElements getLoopDeclarationAccess() {
		return gaSCL.getLoopDeclarationAccess();
	}
	
	public ParserRule getLoopDeclarationRule() {
		return getLoopDeclarationAccess().getRule();
	}
	
	//EffectOrAssignment returns keffects::Assignment:
	//    (annotations += Annotation)*
	//    (
	//        reference = ValuedObjectReference
	//        operator = PostfixOperator
	//    |
	//        reference = ValuedObjectReference
	//        operator = AssignOperator
	//        expression = Expression
	//    |
	//        expression = Expression
	//    )
	//;
	public SCLGrammarAccess.EffectOrAssignmentElements getEffectOrAssignmentAccess() {
		return gaSCL.getEffectOrAssignmentAccess();
	}
	
	public ParserRule getEffectOrAssignmentRule() {
		return getEffectOrAssignmentAccess().getRule();
	}
	
	//WhileLoop returns Loop:
	//    'while' '('
	//    condition=BoolExpression
	//    ')' '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.WhileLoopElements getWhileLoopAccess() {
		return gaSCL.getWhileLoopAccess();
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ModuleCall returns ModuleCall:
	//    (annotations += Annotation)*
	//    'run'
	//    module = [Module|ID]
	//    ('(' parameters += ModuleCallParameter (',' parameters += ModuleCallParameter)* ')' | '()')?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ModuleCallElements getModuleCallAccess() {
		return gaSCL.getModuleCallAccess();
	}
	
	public ParserRule getModuleCallRule() {
		return getModuleCallAccess().getRule();
	}
	
	//ModuleCallParameter returns kexpressions::Parameter:
	//    ((accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression)
	//    ('to' explicitBinding = [kexpressions::ValuedObject|ID] ('[' explicitBindingIndices+=Expression ']')*)?
	//;
	public SCLGrammarAccess.ModuleCallParameterElements getModuleCallParameterAccess() {
		return gaSCL.getModuleCallParameterAccess();
	}
	
	public ParserRule getModuleCallParameterRule() {
		return getModuleCallParameterAccess().getRule();
	}
	
	//@Override
	//MethodDeclaration returns kexpressions::MethodDeclaration:
	//    {MethodImplementationDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    (
	//        ';'
	//        |
	//        implemented?='{'
	//        annotations+=CommentAnnotatonSL?
	//        declarations+=Declaration*
	//        statements+=Statement*
	//        '}'
	//    )
	//    annotations+=CommentAnnotatonSL?
	//;
	public SCLGrammarAccess.MethodDeclarationElements getMethodDeclarationAccess() {
		return gaSCL.getMethodDeclarationAccess();
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//@Override
	//MethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
	//    {MethodImplementationDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    (implemented?='{'
	//        annotations+=CommentAnnotatonSL?
	//        declarations+=Declaration*
	//        statements+=Statement*
	//    '}')?
	//;
	public SCLGrammarAccess.MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return gaSCL.getMethodDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language
	// * that is used for testing kexpressions and keffects.
	// */
	//// ------------ //
	////  KEXT Rules  //
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of
	//// test entities may follow.
	//Kext returns kext::Kext:
	//    scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    (name=ID)? '{'
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//    expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'expression'
	//    expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'json'
	//    expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z
	//Declaration returns kexpressions::Declaration:
	//    VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon returns kexpressions::Declaration:
	//    VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    const?='const'?
	//    input?='input'?
	//    output?='output'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        |
	//        signal?='signal'
	//        |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    input?='input'?
	//    output?='output'?
	//    const?='const'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        | signal?='signal'
	//        | (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethod*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=Declaration*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod returns kexpressions::Declaration:
	//    Declaration | EnumDeclaration | MethodDeclaration
	//;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethodWOSemicolon*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationWOSemicolon*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return gaKExt.getClassDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon returns kexpressions::Declaration:
	//    DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
	//;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//EnumDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType=STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//        ';'
	//    '}'
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationElements getEnumDeclarationAccess() {
		return gaKExt.getEnumDeclarationAccess();
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumMemberDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return gaKExt.getEnumMemberDeclarationAccess();
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}
	
	//EnumDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType = STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//    '}'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationWOSemicolonElements getEnumDeclarationWOSemicolonAccess() {
		return gaKExt.getEnumDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getEnumDeclarationWOSemicolonRule() {
		return getEnumDeclarationWOSemicolonAccess().getRule();
	}
	
	//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString returns kexpressions::ExternString:
	//    annotations+=TagAnnotation*
	//    code = STRING
	//;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//// ---
	////  Generics
	//// ---
	//GenericParameterDeclaration returns kexpressions::GenericParameterDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject
	//    (
	//        ('is' valueType = ValueType)
	//        |
	//        ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
	//    )?
	//;
	public KExtGrammarAccess.GenericParameterDeclarationElements getGenericParameterDeclarationAccess() {
		return gaKExt.getGenericParameterDeclarationAccess();
	}
	
	public ParserRule getGenericParameterDeclarationRule() {
		return getGenericParameterDeclarationAccess().getRule();
	}
	
	//GenericParameter returns kexpressions::Parameter:
	//    // Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
	//    // Here GenericTypeReference has precedence and has to cover certain
	//    // references to VOs. This needs to be specifically handled in the scoper and in the resource
	//    // by using the KExtGenericParamterConverter.
	//    // Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
	//    // index or sub reference specified, this is why there are special non-optional rules.
	//    expression = (ValueTypeReference
	//                 | AnyValue
	//                 | GenericParameter_GenericTypeReference_Parameterized
	//                 | GenericParameter_ValuedObjectReference_Array
	//                 | GenericParameter_ValuedObjectReference_Sub
	//                 | GenericTypeReference
	//                 | ValuedObjectReference)
	//;
	public KExtGrammarAccess.GenericParameterElements getGenericParameterAccess() {
		return gaKExt.getGenericParameterAccess();
	}
	
	public ParserRule getGenericParameterRule() {
		return getGenericParameterAccess().getRule();
	}
	
	//ValueTypeReference returns kexpressions::ValueTypeReference:
	//    valueType = ValueType
	//;
	public KExtGrammarAccess.ValueTypeReferenceElements getValueTypeReferenceAccess() {
		return gaKExt.getValueTypeReferenceAccess();
	}
	
	public ParserRule getValueTypeReferenceRule() {
		return getValueTypeReferenceAccess().getRule();
	}
	
	//GenericTypeReference returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//;
	public KExtGrammarAccess.GenericTypeReferenceElements getGenericTypeReferenceAccess() {
		return gaKExt.getGenericTypeReferenceAccess();
	}
	
	public ParserRule getGenericTypeReferenceRule() {
		return getGenericTypeReferenceAccess().getRule();
	}
	
	//// Special rules for GenericParameter parsing
	//GenericParameter_GenericTypeReference_Parameterized returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    '<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>' // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_GenericTypeReference_ParameterizedElements getGenericParameter_GenericTypeReference_ParameterizedAccess() {
		return gaKExt.getGenericParameter_GenericTypeReference_ParameterizedAccess();
	}
	
	public ParserRule getGenericParameter_GenericTypeReference_ParameterizedRule() {
		return getGenericParameter_GenericTypeReference_ParameterizedAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Array returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')+ // mandatory
	//    ('.' subReference=ValuedObjectReference)?
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_ArrayElements getGenericParameter_ValuedObjectReference_ArrayAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_ArrayAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_ArrayRule() {
		return getGenericParameter_ValuedObjectReference_ArrayAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Sub returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference) // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_SubElements getGenericParameter_ValuedObjectReference_SubAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_SubAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_SubRule() {
		return getGenericParameter_ValuedObjectReference_SubAccess().getRule();
	}
	
	//// ---
	////  Scheduling Directives
	//// ---
	//ScheduleDeclaration returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//    CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part.
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('=' initialValue=Expression)?
	//    ( 'combine'
	//      (combineOperator = CombineOperator)
	//    )?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//ReferenceValuedObject returns kexpressions::ValuedObject:
	//    {kexpressions::ValuedObject}
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
	//    ('=' initialValue=Expression)?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ReferenceValuedObjectElements getReferenceValuedObjectAccess() {
		return gaKExt.getReferenceValuedObjectAccess();
	}
	
	public ParserRule getReferenceValuedObjectRule() {
		return getReferenceValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	//NamespaceID returns ecore::EString:
	//  ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */
	//// ---------------- //
	////  KEffects Rules  //
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect returns keffects::Effect:
	//    Assignment |
	//    PostfixEffect |
	//    ValuedEmission | // Will consume some ReferenceCallEffects
	//    HostcodeEffect |
	//    ReferenceCallEffect |
	//    FunctionCallEffect |
	//    PrintCallEffect |
	//    RandomizeCallEffect |
	//    PureEmission;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals.
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted
	//// annotations defined in the annotations grammar.
	//PureEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    "(" newValue = Expression ")"
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission returns keffects::Emission:
	//    ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1
	//Assignment returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=AssignOperator expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I--
	//PostfixEffect returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//    (annotations+=Annotation)*
	//     text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect returns keffects::ReferenceCallEffect:
	//    super?='super.'?
	//    (annotations+=Annotation)*
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//    (annotations+=Annotation)*
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.
	//PrintCallEffect returns keffects::PrintCallEffect:
	//    (annotations+=Annotation)*
	//    'print'
	//    ('(' parameters += Parameter (',' parameters += Parameter)* ')')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect returns keffects::RandomizeCallEffect:
	//    {keffects::RandomizeCallEffect}
	//    (annotations+=Annotation)*
	//    'randomize'
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//// ---------------- //
	////  KEffects Enums  //
	//// ---------------- //
	//// Assign Operator Enum
	//enum AssignOperator returns keffects::AssignOperator:
	//    ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//    ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//    ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//    ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//// Postfix Operator Enum
	//enum PostfixOperator returns keffects::AssignOperator:
	//    POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// -------------------- //
	////  KExpressions Rules  //
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */
	//// Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//    Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason.
	//// One could skip directly to the next rule.
	//BoolExpression returns Expression:
	//    LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression returns Expression:
	//    LogicalAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
	//        ('||' subExpressions+=LogicalAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression returns Expression:
	//    BitwiseOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
	//        ('&&' subExpressions+=BitwiseOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//    BitwiseXOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
	//        ('|' subExpressions+=BitwiseXOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression returns Expression:
	//    BitwiseAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
	//        ('^' subExpressions+=BitwiseAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//    CompareOperation
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
	//        ('&' subExpressions+=CompareOperation)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression returns Expression:
	//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//ShiftExpressions returns Expression:
	//    SumExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
	//        ('<<' subExpressions+=ShiftRightExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
	//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
	//        ('>>>' subExpressions+=SumExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression returns Expression:
	//    ProductExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//ProductExpression returns Expression:
	//    NegExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaKExpressions.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//TernaryOperation returns Expression:
	//    {OperatorExpression}
	//    subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
	//    | InitExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression returns Expression:
	//    FbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=InitOperator subExpressions+=FbyExpression)
	//        ('->' subExpressions+=FbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaKExpressions.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression returns Expression:
	//    SfbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=FbyOperator subExpressions+=SfbyExpression)
	//        ('fby' subExpressions+=SfbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaKExpressions.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression returns Expression:
	//    AtomicValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
	//        ('sfby' subExpressions+=AtomicValuedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.
	//BoolScheduleExpression returns Expression:
	//    LogicalOrExpression
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
	//    | ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// Accesses a arbitrary target in a static way (needs to be adjusted in the scoper of the deriving language)
	//// Example: static(Constants).MAX
	//SpecialAccessExpression returns SpecialAccessExpression:
	//    access='static' '('
	//    (container=[annotations::NamedObject|PrimeID] '.')?
	//    target=[annotations::NamedObject|PrimeID]
	//    ')' '.' subReference=ValuedObjectReference;
	public KExpressionsGrammarAccess.SpecialAccessExpressionElements getSpecialAccessExpressionAccess() {
		return gaKExpressions.getSpecialAccessExpressionAccess();
	}
	
	public ParserRule getSpecialAccessExpressionRule() {
		return getSpecialAccessExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID returns ecore::EString:
	//  ID ("'")*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference returns ValuedObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference returns ScheduleObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('.' subReference=ValuedObjectReference)?
	//    priority=INT
	//    ('annotated(' (annotations += QuotedStringAnnotation)+ ')')?
	//    ;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list.
	//ReferenceCall returns ReferenceCall:
	//    super?='super.'?
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (
	//        ('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()'
	//    );
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomCall returns RandomCall:
	//    {RandomCall}
	//    'random' ('()')?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomizeCall returns RandomizeCall:
	//    {RandomizeCall}
	//    'randomize' ('()')?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list.
	//FunctionCall returns FunctionCall:
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall returns PrintCall:
	//    {PrintCall}
	//    'print'
	//    (
	//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
	//    |
	//        '()'
	//    );
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter returns Parameter:
	//    (accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression returns TextExpression:
	//    (annotations += Annotation)*
	//    text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue returns IntValue:
	//    value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue returns FloatValue:
	//    value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue returns BoolValue:
	//    value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue returns VectorValue:
	//    '{' (
	//        values+=VectorValueMember (',' values+=VectorValueMember)*
	//        |
	//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
	//    ) '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember returns Expression:
	//    BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue returns IgnoreValue:
	//    {IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext.
	//AnyType returns ecore::EString:
	//    BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue returns Value:
	//    IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//// -------------------- //
	////  KExpressions Enums  //
	//// -------------------- //
	//enum CompareOperator returns OperatorType:
	//    EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//    PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//    BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//    BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//    BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//    BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//    NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//    ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//    SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//    MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//    MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//    DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//    VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//    LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//    LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//    SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//    SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//    SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//    POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//    POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//    CONDITIONAL = "?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//    INIT = "->";
	public KExpressionsGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaKExpressions.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//    FBY = "fby";
	public KExpressionsGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaKExpressions.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//    SFBY = "sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum ValueType returns ValueType:
	//    PURE="pure" | BOOL="bool" |
	//    INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//    HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//    STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//    CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum EnumType returns ValueType:
	//    ENUM="enum";
	public KExpressionsGrammarAccess.EnumTypeElements getEnumTypeAccess() {
		return gaKExpressions.getEnumTypeAccess();
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//enum CombineOperator returns CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier returns AccessModifier:
	//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//    VOID="void" |
	//    BOOL="bool" | INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType returns ParameterAccessType:
	//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
	//;
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                //
	//// -------------------- //
	//JsonObjectValue returns JsonObjectValue:
	//    {JsonObjectValue}
	//    '{'
	//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
	//    '}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember returns JsonObjectMember:
	//    key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue returns JsonArrayValue:
	//    {JsonArrayValue}
	//    '['
	//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
	//    ']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue returns Value:
	//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue returns NullValue:
	//    {NullValue}
	//    'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma returns JsonPragma:
	//    '#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation returns JsonAnnotation:
	//    '@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma returns annotations::Pragma:
	//    super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// OO
	//ThisExpression returns ThisExpression:
	//    {ThisExpression}
	//    'this';
	public KExpressionsGrammarAccess.ThisExpressionElements getThisExpressionAccess() {
		return gaKExpressions.getThisExpressionAccess();
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.
	//Pragma returns Pragma:
	//    StringPragma |
	//    PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations.
	//// You can use this rule in derived grammars if you don't want to permit typed strings.
	//RestrictedTypeAnnotation returns Annotation:
	//    CommentAnnotation |
	//    RestrictedKeyStringValueAnnotation |
	//    RestrictedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in
	//// derived grammars if you don't want to permit unquoted strings.
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)
	//QuotedStringAnnotation returns Annotation:
	//    CommentAnnotation |
	//    QuotedKeyStringValueAnnotation |
	//    QuotedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation returns CommentAnnotation:
	//    values += COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL returns CommentAnnotation:
	//    values += SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation returns TagAnnotation:
	//    '@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag returns Pragma:
	//    '#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.
	//KeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma returns StringPragma:
	//    '#' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString returns ecore::EString:
	//    STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID returns ecore::EString:
	//  ID (('.'|'-') ID)* (('#') INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID returns ecore::EString:
	//  ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer returns ecore::EInt:
	//    '-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger returns ecore::EDouble:
	//    '-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//// ---------------------- //
	////  Annotation Terminals  //
	//// ---------------------- //
	//// Comment Annotation Terminal
	//// Custom terminal rule introducing semantic comments.
	//terminal COMMENT_ANNOTATION returns ecore::EString:
	//    '/**' -> '*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION returns ecore::EString:
	//    '//*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//// Number Terminal
	//terminal fragment NUMBER :
	//    '0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//// Integer Terminal
	//// An INT is a list of numbers.
	//@Override
	//terminal INT returns ecore::EInt:
	//    NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//// Float Terminal (internal precision: double!)
	//// Make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EDouble:
	//    NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
	//    NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//// Boolean Terminal
	//// Introduce boolean values.
	//terminal BOOLEAN returns ecore::EBooleanObject :
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?(('_'?'a'..'z'|'_'?'A'..'Z')|'_''0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
