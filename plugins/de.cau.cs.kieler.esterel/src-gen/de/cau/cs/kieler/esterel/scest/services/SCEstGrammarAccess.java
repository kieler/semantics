/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.scest.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SCEstGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EsterelProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPragmasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0 = (RuleCall)cPragmasAssignment_0.eContents().get(0);
		private final Assignment cModulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModulesEsterelModuleParserRuleCall_1_0 = (RuleCall)cModulesAssignment_1.eContents().get(0);
		
		////  root rule. a SCEst file can contain multiple modules
		//@Override
		//EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
		//    pragmas+=Pragma*
		//    (modules+=EsterelModule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//pragmas+=Pragma*
		//(modules+=EsterelModule)*
		public Group getGroup() { return cGroup; }
		
		//pragmas+=Pragma*
		public Assignment getPragmasAssignment_0() { return cPragmasAssignment_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0() { return cPragmasPragmaParserRuleCall_0_0; }
		
		//(modules+=EsterelModule)*
		public Assignment getModulesAssignment_1() { return cModulesAssignment_1; }
		
		//EsterelModule
		public RuleCall getModulesEsterelModuleParserRuleCall_1_0() { return cModulesEsterelModuleParserRuleCall_1_0; }
	}
	public class EsterelModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_4_0_0 = (RuleCall)cDeclarationsAssignment_4_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cDeclarationsEsterelDeclarationParserRuleCall_4_1_0 = (RuleCall)cDeclarationsAssignment_4_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cEndKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cModuleKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		///* ###################################################
		// * ###                 7.2 Modules                 ###
		// * ###################################################
		// */
		//@Override
		//EsterelModule returns scl::Module:
		//    (annotations += Annotation)*
		//    "module" name=ID ":"
		//    (declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
		//    (statements+=EsterelParallel)?
		//    ("end" "module" | ".")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"module" name=ID ":"
		//(declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
		//(statements+=EsterelParallel)?
		//("end" "module" | ".")
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_4_0() { return cDeclarationsAssignment_4_0; }
		
		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_4_0_0() { return cDeclarationsVariableDeclarationParserRuleCall_4_0_0; }
		
		//declarations+=EsterelDeclaration
		public Assignment getDeclarationsAssignment_4_1() { return cDeclarationsAssignment_4_1; }
		
		//EsterelDeclaration
		public RuleCall getDeclarationsEsterelDeclarationParserRuleCall_4_1_0() { return cDeclarationsEsterelDeclarationParserRuleCall_4_1_0; }
		
		//(statements+=EsterelParallel)?
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_5_0() { return cStatementsEsterelParallelParserRuleCall_5_0; }
		
		//("end" "module" | ".")
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//"end" "module"
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//"end"
		public Keyword getEndKeyword_6_0_0() { return cEndKeyword_6_0_0; }
		
		//"module"
		public Keyword getModuleKeyword_6_0_1() { return cModuleKeyword_6_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_6_1() { return cFullStopKeyword_6_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Statement");
		private final RuleCall cEsterelParallelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* ###################################################
		// * ###               7.5 Statements                ###
		// * ###################################################
		// */
		//@Override
		//Statement returns scl::Statement:
		//    EsterelParallel
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EsterelParallel
		public RuleCall getEsterelParallelParserRuleCall() { return cEsterelParallelParserRuleCall; }
	}
	public class InstructionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.InstructionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnEmitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//@Override
		//InstructionStatement returns scl::Statement:
		//    super
		//    // + SCEst
		//    | UnEmit | Set
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//super
		//// + SCEst
		//| UnEmit | Set
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getInstructionStatementParserRuleCall_0() { return cInstructionStatementParserRuleCall_0; }
		
		//UnEmit
		public RuleCall getUnEmitParserRuleCall_1() { return cUnEmitParserRuleCall_1; }
		
		//Set
		public RuleCall getSetParserRuleCall_2() { return cSetParserRuleCall_2; }
	}
	public class SCLStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SCLStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSclAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLegacyConditionalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGotoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParallelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cModuleCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cScopeStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//SCLStatement returns scl::Statement:
		//    SclAssignment | Label | Conditional | LegacyConditional | Goto | Parallel | ModuleCall | ScopeStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SclAssignment | Label | Conditional | LegacyConditional | Goto | Parallel | ModuleCall | ScopeStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SclAssignment
		public RuleCall getSclAssignmentParserRuleCall_0() { return cSclAssignmentParserRuleCall_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_2() { return cConditionalParserRuleCall_2; }
		
		//LegacyConditional
		public RuleCall getLegacyConditionalParserRuleCall_3() { return cLegacyConditionalParserRuleCall_3; }
		
		//Goto
		public RuleCall getGotoParserRuleCall_4() { return cGotoParserRuleCall_4; }
		
		//Parallel
		public RuleCall getParallelParserRuleCall_5() { return cParallelParserRuleCall_5; }
		
		//ModuleCall
		public RuleCall getModuleCallParserRuleCall_6() { return cModuleCallParserRuleCall_6; }
		
		//ScopeStatement
		public RuleCall getScopeStatementParserRuleCall_7() { return cScopeStatementParserRuleCall_7; }
	}
	public class EsterelThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelThread");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInstructionStatementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cEsterelThreadStatementsAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cStatementsEsterelThreadParserRuleCall_0_1_1_1_0 = (RuleCall)cStatementsAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSCLStatementParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cEsterelThreadStatementsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStatementsEsterelThreadParserRuleCall_1_1_1_0 = (RuleCall)cStatementsAssignment_1_1_1.eContents().get(0);
		
		//@Override
		//EsterelThread returns scl::Statement:
		//    (
		//        InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=EsterelThread))?
		//    |
		//        SCLStatement ({EsterelThread.statements+=current} (statements+=EsterelThread))?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=EsterelThread))?
		//|
		//    SCLStatement ({EsterelThread.statements+=current} (statements+=EsterelThread))?
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=EsterelThread))?
		public Group getGroup_0() { return cGroup_0; }
		
		//InstructionStatement
		public RuleCall getInstructionStatementParserRuleCall_0_0() { return cInstructionStatementParserRuleCall_0_0; }
		
		//({EsterelThread.statements+=current} (=>";" statements+=EsterelThread))?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{EsterelThread.statements+=current}
		public Action getEsterelThreadStatementsAction_0_1_0() { return cEsterelThreadStatementsAction_0_1_0; }
		
		//(=>";" statements+=EsterelThread)
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//=>";"
		public Keyword getSemicolonKeyword_0_1_1_0() { return cSemicolonKeyword_0_1_1_0; }
		
		//statements+=EsterelThread
		public Assignment getStatementsAssignment_0_1_1_1() { return cStatementsAssignment_0_1_1_1; }
		
		//EsterelThread
		public RuleCall getStatementsEsterelThreadParserRuleCall_0_1_1_1_0() { return cStatementsEsterelThreadParserRuleCall_0_1_1_1_0; }
		
		//SCLStatement ({EsterelThread.statements+=current} (statements+=EsterelThread))?
		public Group getGroup_1() { return cGroup_1; }
		
		//SCLStatement
		public RuleCall getSCLStatementParserRuleCall_1_0() { return cSCLStatementParserRuleCall_1_0; }
		
		//({EsterelThread.statements+=current} (statements+=EsterelThread))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{EsterelThread.statements+=current}
		public Action getEsterelThreadStatementsAction_1_1_0() { return cEsterelThreadStatementsAction_1_1_0; }
		
		//(statements+=EsterelThread)
		public Assignment getStatementsAssignment_1_1_1() { return cStatementsAssignment_1_1_1; }
		
		//EsterelThread
		public RuleCall getStatementsEsterelThreadParserRuleCall_1_1_1_0() { return cStatementsEsterelThreadParserRuleCall_1_1_1_0; }
	}
	public class EsterelAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceVariableOrSignalReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//@Override
		//EsterelAssignment returns scl::Assignment:
		//    (annotations += Annotation)*
		//    reference=VariableOrSignalReference ":=" expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//reference=VariableOrSignalReference ":=" expression=Expression
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//reference=VariableOrSignalReference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//VariableOrSignalReference
		public RuleCall getReferenceVariableOrSignalReferenceParserRuleCall_1_0() { return cReferenceVariableOrSignalReferenceParserRuleCall_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class VariableOrSignalReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.VariableOrSignalReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValuedObjectReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableOrSignalReference returns kexpressions::ValuedObjectReference:
		//     ValuedObjectReference
		//   | SignalReferenceExpression
		//   | VariableReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  ValuedObjectReference
		//| SignalReferenceExpression
		//| VariableReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValuedObjectReference
		public RuleCall getValuedObjectReferenceParserRuleCall_0() { return cValuedObjectReferenceParserRuleCall_0; }
		
		//SignalReferenceExpression
		public RuleCall getSignalReferenceExpressionParserRuleCall_1() { return cSignalReferenceExpressionParserRuleCall_1; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_2() { return cVariableReferenceParserRuleCall_2; }
	}
	public class UnEmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.UnEmit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cUnemitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		
		///* ###################################################
		// * ###                   SCEst                     ###
		// * ###################################################
		// */
		//// ==> unemit
		//// -------------------------------------
		//UnEmit:
		//    (annotations += Annotation)*
		//    "unemit"
		//    signal=[Signal|ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"unemit"
		//signal=[Signal|ID]
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"unemit"
		public Keyword getUnemitKeyword_1() { return cUnemitKeyword_1; }
		
		//signal=[Signal|ID]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }
		
		//[Signal|ID]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// ==> reset: Signal value reset (absolute write)
		//// -------------------------------------
		//Set:
		//    (annotations += Annotation)*
		//    "set"
		//    signal=[Signal|ID]
		//    ("("expression=Expression")")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//"set"
		//signal=[Signal|ID]
		//("("expression=Expression")")
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//signal=[Signal|ID]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }
		
		//[Signal|ID]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }
		
		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }
		
		//("("expression=Expression")")
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEsterelFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrapExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValuedObjectPreExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cConstantExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunctionCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		// /* ###################################################
		// * ###               Expressions                   ###
		// * ###################################################
		// */
		//// Esterel is a bit richer than what is provided by kexpressions.
		//// These rules are introduced here.
		//// Care about order of the rules!
		//@Override
		//AtomicExpression returns kexpressions::Expression:
		//      EsterelFunctionCall
		//    | TrapExpression
		//    | BoolValue
		//    | ValuedObjectPreExpression
		//    | TextExpression
		//    | '(' BooleanExpression ')'
		//    | ConstantExpression
		//    | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//  EsterelFunctionCall
		//| TrapExpression
		//| BoolValue
		//| ValuedObjectPreExpression
		//| TextExpression
		//| '(' BooleanExpression ')'
		//| ConstantExpression
		//| FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EsterelFunctionCall
		public RuleCall getEsterelFunctionCallParserRuleCall_0() { return cEsterelFunctionCallParserRuleCall_0; }
		
		//TrapExpression
		public RuleCall getTrapExpressionParserRuleCall_1() { return cTrapExpressionParserRuleCall_1; }
		
		//BoolValue
		public RuleCall getBoolValueParserRuleCall_2() { return cBoolValueParserRuleCall_2; }
		
		//ValuedObjectPreExpression
		public RuleCall getValuedObjectPreExpressionParserRuleCall_3() { return cValuedObjectPreExpressionParserRuleCall_3; }
		
		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_4() { return cTextExpressionParserRuleCall_4; }
		
		//'(' BooleanExpression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5_1() { return cBooleanExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_6() { return cConstantExpressionParserRuleCall_6; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_7() { return cFunctionCallParserRuleCall_7; }
	}
	public class AtomicValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.AtomicValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cAtomicExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//@Override
		//AtomicValuedExpression returns kexpressions::Expression:
		//    IntValue
		//    | FloatValue
		//    | '(' ValuedExpression ')'
		//    | AtomicExpression
		//    | StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue
		//| FloatValue
		//| '(' ValuedExpression ')'
		//| AtomicExpression
		//| StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }
		
		//'(' ValuedExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_2_1() { return cValuedExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_3() { return cAtomicExpressionParserRuleCall_3; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_4() { return cStringValueParserRuleCall_4; }
	}
	public class ValuedObjectPreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ValuedObjectPreExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterelPreOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubExpressionsValuedObjectPreExpressionParserRuleCall_0_3_0 = (RuleCall)cSubExpressionsAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterelValueTestOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsSignalReferenceExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		private final RuleCall cValuedObjectOrSignalReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
		//@Override
		//ValuedObjectPreExpression returns kexpressions::Expression:
		//    {kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
		//    | {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
		//    | ValuedObjectOrSignalReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
		//| {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
		//| ValuedObjectOrSignalReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=EsterelPreOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//EsterelPreOperator
		public RuleCall getOperatorEsterelPreOperatorEnumRuleCall_0_1_0() { return cOperatorEsterelPreOperatorEnumRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//subExpressions+=ValuedObjectPreExpression
		public Assignment getSubExpressionsAssignment_0_3() { return cSubExpressionsAssignment_0_3; }
		
		//ValuedObjectPreExpression
		public RuleCall getSubExpressionsValuedObjectPreExpressionParserRuleCall_0_3_0() { return cSubExpressionsValuedObjectPreExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{kexpressions::OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }
		
		//operator=EsterelValueTestOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EsterelValueTestOperator
		public RuleCall getOperatorEsterelValueTestOperatorEnumRuleCall_1_1_0() { return cOperatorEsterelValueTestOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=SignalReferenceExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//SignalReferenceExpression
		public RuleCall getSubExpressionsSignalReferenceExpressionParserRuleCall_1_2_0() { return cSubExpressionsSignalReferenceExpressionParserRuleCall_1_2_0; }
		
		//ValuedObjectOrSignalReference
		public RuleCall getValuedObjectOrSignalReferenceParserRuleCall_2() { return cValuedObjectOrSignalReferenceParserRuleCall_2; }
	}
	public class ValuedObjectOrSignalReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ValuedObjectOrSignalReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTickSignalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedObjectReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignalReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValuedObjectOrSignalReference returns kexpressions::ValuedObjectReference:
		//     TickSignalExpression
		//   | ValuedObjectReference
		//   | SignalReferenceExpression
		//   | VariableReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  TickSignalExpression
		//| ValuedObjectReference
		//| SignalReferenceExpression
		//| VariableReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TickSignalExpression
		public RuleCall getTickSignalExpressionParserRuleCall_0() { return cTickSignalExpressionParserRuleCall_0; }
		
		//ValuedObjectReference
		public RuleCall getValuedObjectReferenceParserRuleCall_1() { return cValuedObjectReferenceParserRuleCall_1; }
		
		//SignalReferenceExpression
		public RuleCall getSignalReferenceExpressionParserRuleCall_2() { return cSignalReferenceExpressionParserRuleCall_2; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_3() { return cVariableReferenceParserRuleCall_3; }
	}
	
	
	private final EsterelProgramElements pEsterelProgram;
	private final EsterelModuleElements pEsterelModule;
	private final StatementElements pStatement;
	private final InstructionStatementElements pInstructionStatement;
	private final SCLStatementElements pSCLStatement;
	private final EsterelThreadElements pEsterelThread;
	private final EsterelAssignmentElements pEsterelAssignment;
	private final VariableOrSignalReferenceElements pVariableOrSignalReference;
	private final UnEmitElements pUnEmit;
	private final SetElements pSet;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final AtomicExpressionElements pAtomicExpression;
	private final AtomicValuedExpressionElements pAtomicValuedExpression;
	private final ValuedObjectPreExpressionElements pValuedObjectPreExpression;
	private final ValuedObjectOrSignalReferenceElements pValuedObjectOrSignalReference;
	
	private final Grammar grammar;
	
	private final EsterelGrammarAccess gaEsterel;
	
	private final SCLGrammarAccess gaSCL;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCEstGrammarAccess(GrammarProvider grammarProvider,
			EsterelGrammarAccess gaEsterel,
			SCLGrammarAccess gaSCL,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEsterel = gaEsterel;
		this.gaSCL = gaSCL;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pEsterelProgram = new EsterelProgramElements();
		this.pEsterelModule = new EsterelModuleElements();
		this.pStatement = new StatementElements();
		this.pInstructionStatement = new InstructionStatementElements();
		this.pSCLStatement = new SCLStatementElements();
		this.pEsterelThread = new EsterelThreadElements();
		this.pEsterelAssignment = new EsterelAssignmentElements();
		this.pVariableOrSignalReference = new VariableOrSignalReferenceElements();
		this.pUnEmit = new UnEmitElements();
		this.pSet = new SetElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SL_COMMENT");
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pAtomicValuedExpression = new AtomicValuedExpressionElements();
		this.pValuedObjectPreExpression = new ValuedObjectPreExpressionElements();
		this.pValuedObjectOrSignalReference = new ValuedObjectOrSignalReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.esterel.scest.SCEst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public EsterelGrammarAccess getEsterelGrammarAccess() {
		return gaEsterel;
	}
	
	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////  root rule. a SCEst file can contain multiple modules
	//@Override
	//EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
	//    pragmas+=Pragma*
	//    (modules+=EsterelModule)*;
	public EsterelProgramElements getEsterelProgramAccess() {
		return pEsterelProgram;
	}
	
	public ParserRule getEsterelProgramRule() {
		return getEsterelProgramAccess().getRule();
	}
	
	///* ###################################################
	// * ###                 7.2 Modules                 ###
	// * ###################################################
	// */
	//@Override
	//EsterelModule returns scl::Module:
	//    (annotations += Annotation)*
	//    "module" name=ID ":"
	//    (declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
	//    (statements+=EsterelParallel)?
	//    ("end" "module" | ".")
	//;
	public EsterelModuleElements getEsterelModuleAccess() {
		return pEsterelModule;
	}
	
	public ParserRule getEsterelModuleRule() {
		return getEsterelModuleAccess().getRule();
	}
	
	///* ###################################################
	// * ###               7.5 Statements                ###
	// * ###################################################
	// */
	//@Override
	//Statement returns scl::Statement:
	//    EsterelParallel
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//@Override
	//InstructionStatement returns scl::Statement:
	//    super
	//    // + SCEst
	//    | UnEmit | Set
	//;
	public InstructionStatementElements getInstructionStatementAccess() {
		return pInstructionStatement;
	}
	
	public ParserRule getInstructionStatementRule() {
		return getInstructionStatementAccess().getRule();
	}
	
	//SCLStatement returns scl::Statement:
	//    SclAssignment | Label | Conditional | LegacyConditional | Goto | Parallel | ModuleCall | ScopeStatement
	//;
	public SCLStatementElements getSCLStatementAccess() {
		return pSCLStatement;
	}
	
	public ParserRule getSCLStatementRule() {
		return getSCLStatementAccess().getRule();
	}
	
	//@Override
	//EsterelThread returns scl::Statement:
	//    (
	//        InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=EsterelThread))?
	//    |
	//        SCLStatement ({EsterelThread.statements+=current} (statements+=EsterelThread))?
	//    )
	//;
	public EsterelThreadElements getEsterelThreadAccess() {
		return pEsterelThread;
	}
	
	public ParserRule getEsterelThreadRule() {
		return getEsterelThreadAccess().getRule();
	}
	
	//@Override
	//EsterelAssignment returns scl::Assignment:
	//    (annotations += Annotation)*
	//    reference=VariableOrSignalReference ":=" expression=Expression
	//;
	public EsterelAssignmentElements getEsterelAssignmentAccess() {
		return pEsterelAssignment;
	}
	
	public ParserRule getEsterelAssignmentRule() {
		return getEsterelAssignmentAccess().getRule();
	}
	
	//VariableOrSignalReference returns kexpressions::ValuedObjectReference:
	//     ValuedObjectReference
	//   | SignalReferenceExpression
	//   | VariableReference
	//;
	public VariableOrSignalReferenceElements getVariableOrSignalReferenceAccess() {
		return pVariableOrSignalReference;
	}
	
	public ParserRule getVariableOrSignalReferenceRule() {
		return getVariableOrSignalReferenceAccess().getRule();
	}
	
	///* ###################################################
	// * ###                   SCEst                     ###
	// * ###################################################
	// */
	//// ==> unemit
	//// -------------------------------------
	//UnEmit:
	//    (annotations += Annotation)*
	//    "unemit"
	//    signal=[Signal|ID]
	//;
	public UnEmitElements getUnEmitAccess() {
		return pUnEmit;
	}
	
	public ParserRule getUnEmitRule() {
		return getUnEmitAccess().getRule();
	}
	
	//// ==> reset: Signal value reset (absolute write)
	//// -------------------------------------
	//Set:
	//    (annotations += Annotation)*
	//    "set"
	//    signal=[Signal|ID]
	//    ("("expression=Expression")")
	//;
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	///* ###################################################
	// * ###                   Terminal                  ###
	// * ###################################################
	// */
	//@Override
	//terminal ML_COMMENT:
	//    ('%' '{') -> ('}' '%')
	//    |
	//    ('/*'!'*') -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    ( '//' | '%' ) !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	// /* ###################################################
	// * ###               Expressions                   ###
	// * ###################################################
	// */
	//// Esterel is a bit richer than what is provided by kexpressions.
	//// These rules are introduced here.
	//// Care about order of the rules!
	//@Override
	//AtomicExpression returns kexpressions::Expression:
	//      EsterelFunctionCall
	//    | TrapExpression
	//    | BoolValue
	//    | ValuedObjectPreExpression
	//    | TextExpression
	//    | '(' BooleanExpression ')'
	//    | ConstantExpression
	//    | FunctionCall;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//@Override
	//AtomicValuedExpression returns kexpressions::Expression:
	//    IntValue
	//    | FloatValue
	//    | '(' ValuedExpression ')'
	//    | AtomicExpression
	//    | StringValue;
	public AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return pAtomicValuedExpression;
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
	//@Override
	//ValuedObjectPreExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
	//    | {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
	//    | ValuedObjectOrSignalReference;
	public ValuedObjectPreExpressionElements getValuedObjectPreExpressionAccess() {
		return pValuedObjectPreExpression;
	}
	
	public ParserRule getValuedObjectPreExpressionRule() {
		return getValuedObjectPreExpressionAccess().getRule();
	}
	
	//ValuedObjectOrSignalReference returns kexpressions::ValuedObjectReference:
	//     TickSignalExpression
	//   | ValuedObjectReference
	//   | SignalReferenceExpression
	//   | VariableReference
	//;
	public ValuedObjectOrSignalReferenceElements getValuedObjectOrSignalReferenceAccess() {
		return pValuedObjectOrSignalReference;
	}
	
	public ParserRule getValuedObjectOrSignalReferenceRule() {
		return getValuedObjectOrSignalReferenceAccess().getRule();
	}
	
	///* ###################################################
	// * ###        7.3 Interface Declaration            ###
	// * ###################################################
	// */
	//EsterelDeclaration:
	//    InputDeclaration
	//    | OutputDeclaration
	//    | InputOutputDeclaration
	//    | ReturnDeclaration
	//    | TypeDeclaration
	//    | SensorDeclaration
	//    | ConstantDeclaration
	//    | RelationDeclaration
	//    | TaskDeclaration
	//    | FunctionDeclaration
	//    | ProcedureDeclaration;
	public EsterelGrammarAccess.EsterelDeclarationElements getEsterelDeclarationAccess() {
		return gaEsterel.getEsterelDeclarationAccess();
	}
	
	public ParserRule getEsterelDeclarationRule() {
		return getEsterelDeclarationAccess().getRule();
	}
	
	//// = Interface Declaration
	//// ----------------------------------------------
	//// overwrite to allow type definitions in a specific module
	//TypeIdentifier:
	//      type=EsterelValueType
	//    | ("combine" (type=EsterelValueType | idType=ID) "with" operator=EsterelCombineOperator)
	//    | idType=ID
	//    | esterelType=[TypeDefinition|ID];
	public EsterelGrammarAccess.TypeIdentifierElements getTypeIdentifierAccess() {
		return gaEsterel.getTypeIdentifierAccess();
	}
	
	public ParserRule getTypeIdentifierRule() {
		return getTypeIdentifierAccess().getRule();
	}
	
	//// = 7.3.1 Type Declarations
	//// -------------------------------------
	//TypeDeclaration:
	//    (annotations += Annotation)*
	//    "type"
	//    valuedObjects+=TypeDefinition ("," valuedObjects+=TypeDefinition)*
	//    ";";
	public EsterelGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaEsterel.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//TypeDefinition:
	//    name=ID;
	public EsterelGrammarAccess.TypeDefinitionElements getTypeDefinitionAccess() {
		return gaEsterel.getTypeDefinitionAccess();
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//// = 7.3.2 Constant Declarations
	//// -------------------------------------
	//ConstantDeclaration:
	//    (annotations += Annotation)*
	//    "constant"
	//    valuedObjects+=Constant ("," valuedObjects+=Constant)*
	//    ";";
	public EsterelGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaEsterel.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}
	
	//Constant:
	//    name=ID ("=" initialValue=Expression)? ":" type=TypeIdentifier;
	public EsterelGrammarAccess.ConstantElements getConstantAccess() {
		return gaEsterel.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//// = 7.3.3 Function Declaration
	//// -------------------------------------
	//FunctionDeclaration:
	//    (annotations += Annotation)*
	//    "function"
	//    valuedObjects+=Function ("," valuedObjects+=Function)*
	//    ";";
	public EsterelGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaEsterel.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//Function:
	//    name=ID
	//    ("(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")" | '()')
	//    ":" returnType=TypeIdentifier;
	public EsterelGrammarAccess.FunctionElements getFunctionAccess() {
		return gaEsterel.getFunctionAccess();
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//// = 7.3.4 Procedure Declaration
	//// -------------------------------------
	//ProcedureDeclaration:
	//    (annotations += Annotation)*
	//    "procedure" valuedObjects+=Procedure ("," valuedObjects+=Procedure)*
	//    ";";
	public EsterelGrammarAccess.ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return gaEsterel.getProcedureDeclarationAccess();
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}
	
	//Procedure:
	//    name=ID
	//    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
	//    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
	public EsterelGrammarAccess.ProcedureElements getProcedureAccess() {
		return gaEsterel.getProcedureAccess();
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//// = 7.3.5 Task Declaration
	//// -------------------------------------
	//TaskDeclaration:
	//    (annotations += Annotation)*
	//    "task" valuedObjects+=Task ("," valuedObjects+=Task)*
	//    ";";
	public EsterelGrammarAccess.TaskDeclarationElements getTaskDeclarationAccess() {
		return gaEsterel.getTaskDeclarationAccess();
	}
	
	public ParserRule getTaskDeclarationRule() {
		return getTaskDeclarationAccess().getRule();
	}
	
	//Task:
	//    name=ID
	//    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
	//    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
	public EsterelGrammarAccess.TaskElements getTaskAccess() {
		return gaEsterel.getTaskAccess();
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//// = 7.3.6 Signal Declaration
	//// -------------------------------------
	//InputDeclaration:
	//    (annotations += Annotation)*
	//    "input"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public EsterelGrammarAccess.InputDeclarationElements getInputDeclarationAccess() {
		return gaEsterel.getInputDeclarationAccess();
	}
	
	public ParserRule getInputDeclarationRule() {
		return getInputDeclarationAccess().getRule();
	}
	
	//OutputDeclaration:
	//    (annotations += Annotation)*
	//    "output"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public EsterelGrammarAccess.OutputDeclarationElements getOutputDeclarationAccess() {
		return gaEsterel.getOutputDeclarationAccess();
	}
	
	public ParserRule getOutputDeclarationRule() {
		return getOutputDeclarationAccess().getRule();
	}
	
	//InputOutputDeclaration:
	//    (annotations += Annotation)*
	//    "inputoutput"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public EsterelGrammarAccess.InputOutputDeclarationElements getInputOutputDeclarationAccess() {
		return gaEsterel.getInputOutputDeclarationAccess();
	}
	
	public ParserRule getInputOutputDeclarationRule() {
		return getInputOutputDeclarationAccess().getRule();
	}
	
	//ReturnDeclaration:
	//    (annotations += Annotation)*
	//    "return"
	//    valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    ";";
	public EsterelGrammarAccess.ReturnDeclarationElements getReturnDeclarationAccess() {
		return gaEsterel.getReturnDeclarationAccess();
	}
	
	public ParserRule getReturnDeclarationRule() {
		return getReturnDeclarationAccess().getRule();
	}
	
	//// example 1:   A : combine boolean with or
	//// example 2:   A (combine boolean with or) // NO longer supported
	//// example 3:   A := 0 : combine integer with '+'
	//Signal:
	//    name=ID
	//    (
	//        (":=" initialValue=Expression)?
	//        ":"
	//        (     type=EsterelValueType
	//            | idType=ID
	//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//        )
	//    |
	//        "("
	//        (":=" initialValue=Expression ":")?
	//        (     type=EsterelValueType
	//            | idType=ID
	//            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//        )
	//        ")"
	//    )?;
	public EsterelGrammarAccess.SignalElements getSignalAccess() {
		return gaEsterel.getSignalAccess();
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//// = 7.3.7 Sensor Declaration
	//// -------------------------------------
	//SensorDeclaration:
	//    (annotations += Annotation)*
	//    "sensor"
	//    valuedObjects+=Sensor ("," valuedObjects+=Sensor)*
	//    ";";
	public EsterelGrammarAccess.SensorDeclarationElements getSensorDeclarationAccess() {
		return gaEsterel.getSensorDeclarationAccess();
	}
	
	public ParserRule getSensorDeclarationRule() {
		return getSensorDeclarationAccess().getRule();
	}
	
	//Sensor:
	//    name=ID
	//    ((":" type=TypeIdentifier) | ("(" type=TypeIdentifier ")"))?;
	public EsterelGrammarAccess.SensorElements getSensorAccess() {
		return gaEsterel.getSensorAccess();
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//// = 7.3.8 Input Relation Declaration
	//// -------------------------------------
	//RelationDeclaration:
	//    (annotations += Annotation)*
	//    "relation"
	//    relations+=Relation ("," relations+=Relation)*
	//    ";";
	public EsterelGrammarAccess.RelationDeclarationElements getRelationDeclarationAccess() {
		return gaEsterel.getRelationDeclarationAccess();
	}
	
	public ParserRule getRelationDeclarationRule() {
		return getRelationDeclarationAccess().getRule();
	}
	
	//Relation:
	//    RelationImplication | RelationIncompatibility;
	public EsterelGrammarAccess.RelationElements getRelationAccess() {
		return gaEsterel.getRelationAccess();
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelationImplication:
	//    first=[Signal|ID] type="=>" second=[Signal|ID];
	public EsterelGrammarAccess.RelationImplicationElements getRelationImplicationAccess() {
		return gaEsterel.getRelationImplicationAccess();
	}
	
	public ParserRule getRelationImplicationRule() {
		return getRelationImplicationAccess().getRule();
	}
	
	//RelationIncompatibility:
	//    incomp+=[Signal|ID] type="#" incomp+=[Signal|ID] ("#" incomp+=[Signal|ID])*;
	public EsterelGrammarAccess.RelationIncompatibilityElements getRelationIncompatibilityAccess() {
		return gaEsterel.getRelationIncompatibilityAccess();
	}
	
	public ParserRule getRelationIncompatibilityRule() {
		return getRelationIncompatibilityAccess().getRule();
	}
	
	///* ###################################################
	// * ###               7.5 Statements                ###
	// * ###################################################
	// */
	//InstructionStatement returns scl::Statement:
	//    Nothing |
	//    EsterelPause |
	//    Halt |
	//    Emit |
	//    Exit |
	//    Present |
	//    Await |
	//    EsterelAssignment |
	//    Abort |
	//    Loop |
	//    EveryDo |
	//    Sustain |
	//    Trap |
	//    Suspend |
	//    LocalSignalDeclaration |
	//    LocalVariableDeclaration |
	//    IfTest |
	//    Exec |
	//    Run |
	//    ProcedureCall |
	//    Repeat |
	//    Block |
	//    LegacyDo
	//;
	public EsterelGrammarAccess.InstructionStatementElements getEsterelInstructionStatementAccess() {
		return gaEsterel.getInstructionStatementAccess();
	}
	
	public ParserRule getEsterelInstructionStatementRule() {
		return getEsterelInstructionStatementAccess().getRule();
	}
	
	//// = Parallel: at least two threads
	//// -------------------------------------
	////EsterelParallel returns EsterelParallel:
	////    {EsterelParallel}
	////    threads+=EsterelThread (=>"||" threads+=EsterelThread)+;
	//// This rule massively improves parsing
	//EsterelParallel returns scl::Statement:
	//    EsterelThread ({EsterelParallel.statements+=current} (=>"||" statements+=EsterelThread)+)?;
	public EsterelGrammarAccess.EsterelParallelElements getEsterelParallelAccess() {
		return gaEsterel.getEsterelParallelAccess();
	}
	
	public ParserRule getEsterelParallelRule() {
		return getEsterelParallelAccess().getRule();
	}
	
	//// = Nothing
	//// -------------------------------------
	//Nothing:
	//    {Nothing}
	//    (annotations += Annotation)*
	//    "nothing"
	//;
	public EsterelGrammarAccess.NothingElements getNothingAccess() {
		return gaEsterel.getNothingAccess();
	}
	
	public ParserRule getNothingRule() {
		return getNothingAccess().getRule();
	}
	
	//// = Pause
	//// -------------------------------------
	//EsterelPause returns scl::Pause:
	//    {scl::Pause}
	//    (annotations += Annotation)*
	//    "pause"
	//;
	public EsterelGrammarAccess.EsterelPauseElements getEsterelPauseAccess() {
		return gaEsterel.getEsterelPauseAccess();
	}
	
	public ParserRule getEsterelPauseRule() {
		return getEsterelPauseAccess().getRule();
	}
	
	//// = Halt
	//// -------------------------------------
	//Halt:
	//    {Halt}
	//    (annotations += Annotation)*
	//    "halt"
	//;
	public EsterelGrammarAccess.HaltElements getHaltAccess() {
		return gaEsterel.getHaltAccess();
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}
	
	//// = Block
	//// -------------------------------------
	//Block:
	//    {Block}
	//    (annotations += Annotation)*
	//    "[" (statements+=EsterelParallel) "]"
	//;
	public EsterelGrammarAccess.BlockElements getBlockAccess() {
		return gaEsterel.getBlockAccess();
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//// = 7.5.1 Signal Emission
	//// -------------------------------------
	//Emit:
	//    (annotations += Annotation)*
	//    "emit"
	//    signal=[Signal|ID]
	//    ("("expression=Expression")")?
	//;
	public EsterelGrammarAccess.EmitElements getEmitAccess() {
		return gaEsterel.getEmitAccess();
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}
	
	//// emit a signal indefinitely
	//Sustain:
	//    (annotations += Annotation)*
	//    "sustain"
	//    signal=[Signal|ID]
	//    ("(" expression=Expression ")")?
	//;
	public EsterelGrammarAccess.SustainElements getSustainAccess() {
		return gaEsterel.getSustainAccess();
	}
	
	public ParserRule getSustainRule() {
		return getSustainAccess().getRule();
	}
	
	//VariableReference returns kexpressions::ValuedObjectReference:
	//   {VariableReference} valuedObject=[Variable|ID]
	//;
	public EsterelGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaEsterel.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//ProcedureCall:
	//    (annotations += Annotation)*
	//    "call"
	//    procedure=[Procedure|ID]
	//    ("("
	//        ( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
	//    ")" | '()')
	//    ("("
	//        ( valueArguments+=Expression ("," valueArguments+=Expression)* )?
	//    ")" | '()')
	//;
	public EsterelGrammarAccess.ProcedureCallElements getProcedureCallAccess() {
		return gaEsterel.getProcedureCallAccess();
	}
	
	public ParserRule getProcedureCallRule() {
		return getProcedureCallAccess().getRule();
	}
	
	//// = 7.5.3 The present Signal Test
	//// -------------------------------------
	//Present:
	//    (annotations += Annotation)*
	//    "present"
	//    (   (
	//            (     expression=SignalExpression
	//                | "[" expression=SignalExpression "]"
	//            )
	//            (
	//                (annotations += Annotation)*
	//                "then"
	//                (statements+=EsterelParallel)
	//            )?
	//        )
	//        |
	//        cases+=PresentCase+
	//    )
	//    (
	//        "else"
	//        (elseStatements+=EsterelParallel)
	//    )?
	//    "end" "present"?
	//;
	public EsterelGrammarAccess.PresentElements getPresentAccess() {
		return gaEsterel.getPresentAccess();
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}
	
	//PresentCase:
	//    (annotations += Annotation)*
	//    "case"
	//    (     expression=SignalExpression
	//        | "[" expression=SignalExpression "]"
	//    )
	//    (   "do"
	//        (statements+=EsterelParallel)
	//    )?;
	public EsterelGrammarAccess.PresentCaseElements getPresentCaseAccess() {
		return gaEsterel.getPresentCaseAccess();
	}
	
	public ParserRule getPresentCaseRule() {
		return getPresentCaseAccess().getRule();
	}
	
	//// = 7.5.4 The if Data Test
	//// -------------------------------------
	//IfTest:
	//    (annotations += Annotation)*
	//    "if"
	//    expression=Expression
	//    (
	//        (annotations+=Annotation)*
	//        "then"
	//        (statements+=EsterelParallel)
	//    )?
	//    (elseif+=ElsIf)*
	//    (
	//            "else"
	//            (elseStatements+=EsterelParallel)
	//    )?
	//    "end" "if"?
	//;
	public EsterelGrammarAccess.IfTestElements getIfTestAccess() {
		return gaEsterel.getIfTestAccess();
	}
	
	public ParserRule getIfTestRule() {
		return getIfTestAccess().getRule();
	}
	
	//ElsIf:
	//    (annotations += Annotation)*
	//    "elsif"
	//    expression=Expression
	//    (
	//        "then"
	//        (statements+=EsterelParallel)
	//    )?;
	public EsterelGrammarAccess.ElsIfElements getElsIfAccess() {
		return gaEsterel.getElsIfAccess();
	}
	
	public ParserRule getElsIfRule() {
		return getElsIfAccess().getRule();
	}
	
	//// = 7.5.5 Looping & 7.5.9 Temporal Loops
	//// -------------------------------------
	//Loop:
	//    {Loop}
	//    (annotations += Annotation)*
	//    "loop"
	//    (statements+=EsterelParallel)
	//    ("end" "loop"? | "each" delay=DelayExpression)
	//;
	public EsterelGrammarAccess.LoopElements getLoopAccess() {
		return gaEsterel.getLoopAccess();
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//// = 7.5.6 Repeat Looping
	//// -------------------------------------
	//Repeat:
	//    (annotations += Annotation)*
	//    (positive?="positive")?
	//    "repeat"
	//    expression=Expression
	//    "times"
	//    (statements+=EsterelParallel)
	//    "end" "repeat"?
	//;
	public EsterelGrammarAccess.RepeatElements getRepeatAccess() {
		return gaEsterel.getRepeatAccess();
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//// = 7.5.7 The abort Statements
	//// -------------------------------------
	//Abort:
	//    (annotations += Annotation)*
	//    ((weak?="weak")? "abort")
	//    (statements+=EsterelParallel)
	//    "when"
	//    (
	//        delay=DelayExpression
	//        (
	//            "do"
	//            (doStatements+=EsterelParallel)
	//            "end" "weak"? "abort"?
	//        )?
	//    |
	//        cases+=Case+
	//        "end" "weak"? "abort"?
	//    )
	//;
	public EsterelGrammarAccess.AbortElements getAbortAccess() {
		return gaEsterel.getAbortAccess();
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}
	
	//Case:
	//    (annotations += Annotation)*
	//    "case"
	//    delay=DelayExpression
	//    (
	//        "do"
	//        (statements+=EsterelParallel)
	//    )?;
	public EsterelGrammarAccess.CaseElements getCaseAccess() {
		return gaEsterel.getCaseAccess();
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//// = 7.5.8 The await Statement
	//// -------------------------------------
	//Await:
	//    (annotations += Annotation)*
	//    "await"
	//    (
	//        delay=DelayExpression
	//        (
	//            "do"
	//            (statements+=EsterelParallel)
	//            "end" "await"?
	//        )?
	//    |
	//        cases+=Case+
	//        "end" "await"?
	//    )
	//;
	public EsterelGrammarAccess.AwaitElements getAwaitAccess() {
		return gaEsterel.getAwaitAccess();
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}
	
	//// = 7.5.9 Temporal Loops
	//// -------------------------------------
	//// for 'LoopEach' look at 7.5.5
	//EveryDo:
	//    (annotations += Annotation)*
	//    "every"
	//    delay=DelayExpression
	//    "do"
	//    (statements+=EsterelParallel)
	//    "end" "every"?
	//;
	public EsterelGrammarAccess.EveryDoElements getEveryDoAccess() {
		return gaEsterel.getEveryDoAccess();
	}
	
	public ParserRule getEveryDoRule() {
		return getEveryDoAccess().getRule();
	}
	
	//// = 7.5.10 The suspend Statement
	//// -------------------------------------
	//Suspend:
	//    (annotations += Annotation)*
	//    ((weak?="weak")? "suspend")
	//    (statements+=EsterelParallel)
	//    "when"
	//    delay=DelayExpression
	//;
	public EsterelGrammarAccess.SuspendElements getSuspendAccess() {
		return gaEsterel.getSuspendAccess();
	}
	
	public ParserRule getSuspendRule() {
		return getSuspendAccess().getRule();
	}
	
	//// = 7.5.11 Traps
	//// -------------------------------------
	//Trap:
	//    (annotations += Annotation)*
	//    "trap"
	//    trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
	//    "in"
	//    (statements+=EsterelParallel)
	//    (trapHandler+=TrapHandler)*
	//    "end" "trap"?
	//;
	public EsterelGrammarAccess.TrapElements getTrapAccess() {
		return gaEsterel.getTrapAccess();
	}
	
	public ParserRule getTrapRule() {
		return getTrapAccess().getRule();
	}
	
	//TrapSignal returns Signal:
	//    {TrapSignal}
	//    name=ID
	//    (
	//        ":=" initialValue=Expression
	//        ":"
	//          (       type=EsterelValueType
	//                | idType=ID
	//                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//          )
	//    |
	//        ":"
	//          (       type=EsterelValueType
	//                | idType=ID
	//                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
	//          )
	//    )?
	//;
	public EsterelGrammarAccess.TrapSignalElements getTrapSignalAccess() {
		return gaEsterel.getTrapSignalAccess();
	}
	
	public ParserRule getTrapSignalRule() {
		return getTrapSignalAccess().getRule();
	}
	
	//TrapHandler:
	//    (annotations += Annotation)*
	//    "handle"
	//    expression=TrapExpr
	//    "do"
	//    (statements+=EsterelParallel)
	//;
	public EsterelGrammarAccess.TrapHandlerElements getTrapHandlerAccess() {
		return gaEsterel.getTrapHandlerAccess();
	}
	
	public ParserRule getTrapHandlerRule() {
		return getTrapHandlerAccess().getRule();
	}
	
	//Exit:
	//    (annotations += Annotation)*
	//    "exit"
	//    trap=[TrapSignal|ID]
	//    ("(" expression=Expression ")")?
	//;
	public EsterelGrammarAccess.ExitElements getExitAccess() {
		return gaEsterel.getExitAccess();
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//// = 7.5.12 The exec Task Execution Statement
	//// -------------------------------------
	//Exec:
	//    (annotations += Annotation)*
	//    "exec"
	//        (   task=[Task|ID]
	//            ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
	//            ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()')
	//            "return"
	//            returnSignal=[Signal]
	//            ("do" (statements+=EsterelParallel) "end" "exec"?)?
	//        |
	//            execCaseList+=ExecCase+
	//            "end" "exec"?
	//        );
	public EsterelGrammarAccess.ExecElements getExecAccess() {
		return gaEsterel.getExecAccess();
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}
	
	//ExecCase:
	//    (annotations += Annotation)*
	//    "case" task=[Task|ID]
	//    ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
	//    ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"  | '()')
	//    "return"
	//    returnSignal=[Signal]
	//    ("do" (statements+=EsterelParallel))?;
	public EsterelGrammarAccess.ExecCaseElements getExecCaseAccess() {
		return gaEsterel.getExecCaseAccess();
	}
	
	public ParserRule getExecCaseRule() {
		return getExecCaseAccess().getRule();
	}
	
	//// = 7.5.13 Local Signal Declaration
	//// -------------------------------------
	//LocalSignalDeclaration:
	//    (annotations += Annotation)*
	//    "signal" valuedObjects+=Signal ("," valuedObjects+=Signal)*
	//    "in" (statements+=EsterelParallel)
	//    "end" "signal"?
	//;
	public EsterelGrammarAccess.LocalSignalDeclarationElements getLocalSignalDeclarationAccess() {
		return gaEsterel.getLocalSignalDeclarationAccess();
	}
	
	public ParserRule getLocalSignalDeclarationRule() {
		return getLocalSignalDeclarationAccess().getRule();
	}
	
	//// = 7.5.14 Local Variable Declaration
	//// -------------------------------------
	//LocalVariableDeclaration:
	//    (annotations += Annotation)*
	//    "var"
	//    (declarations+=EsterelVariableDeclaration) ("," declarations+=EsterelVariableDeclaration)*
	//    "in"
	//    (statements+=EsterelParallel)
	//    "end" "var"?
	//;
	public EsterelGrammarAccess.LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return gaEsterel.getLocalVariableDeclarationAccess();
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}
	
	//EsterelVariableDeclaration:
	//    (valuedObjects+=Variable) ("," valuedObjects+=Variable)* ":" type=TypeIdentifier;
	public EsterelGrammarAccess.EsterelVariableDeclarationElements getEsterelVariableDeclarationAccess() {
		return gaEsterel.getEsterelVariableDeclarationAccess();
	}
	
	public ParserRule getEsterelVariableDeclarationRule() {
		return getEsterelVariableDeclarationAccess().getRule();
	}
	
	//Variable:
	//     name=ID (":=" initialValue=Expression)?;
	public EsterelGrammarAccess.VariableElements getVariableAccess() {
		return gaEsterel.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//// = 7.5.15 The run Module Instantiation Statement
	//// -------------------------------------
	//Run:
	//    (annotations += Annotation)*
	//    (   (   "run"
	//            module=ModuleRenaming
	//            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
	//        )
	//        |
	//        (   "copymodule"
	//            module=ModuleRenaming
	//            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
	//         )
	//    )
	//;
	public EsterelGrammarAccess.RunElements getRunAccess() {
		return gaEsterel.getRunAccess();
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//ModuleRenaming:
	//       module=[scl::Module|ID]
	//    | (newName=ID "/" module=[scl::Module|ID])
	//;
	public EsterelGrammarAccess.ModuleRenamingElements getModuleRenamingAccess() {
		return gaEsterel.getModuleRenamingAccess();
	}
	
	public ParserRule getModuleRenamingRule() {
		return getModuleRenamingAccess().getRule();
	}
	
	//Renamings:
	//    (annotations += Annotation)*
	//    ( "type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
	//    | "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
	//    | "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
	//    | "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
	//    | "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
	//    | "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)* );
	public EsterelGrammarAccess.RenamingsElements getRenamingsAccess() {
		return gaEsterel.getRenamingsAccess();
	}
	
	public ParserRule getRenamingsRule() {
		return getRenamingsAccess().getRule();
	}
	
	//TypeRenaming:
	//    (newName=[TypeDefinition|ID] | newType=EsterelValueType) "/" oldName=[TypeDefinition|ID];
	public EsterelGrammarAccess.TypeRenamingElements getTypeRenamingAccess() {
		return gaEsterel.getTypeRenamingAccess();
	}
	
	public ParserRule getTypeRenamingRule() {
		return getTypeRenamingAccess().getRule();
	}
	
	//ConstantRenaming:
	//    (newName=[Constant|ID] | newValue=AnyValue) "/" oldName=[Constant|ID];
	public EsterelGrammarAccess.ConstantRenamingElements getConstantRenamingAccess() {
		return gaEsterel.getConstantRenamingAccess();
	}
	
	public ParserRule getConstantRenamingRule() {
		return getConstantRenamingAccess().getRule();
	}
	
	//FunctionRenaming:
	//    (newName=[Function|ID] | newFunc=BuildInFunction) "/" oldName=[Function|ID];
	public EsterelGrammarAccess.FunctionRenamingElements getFunctionRenamingAccess() {
		return gaEsterel.getFunctionRenamingAccess();
	}
	
	public ParserRule getFunctionRenamingRule() {
		return getFunctionRenamingAccess().getRule();
	}
	
	//ProcedureRenaming:
	//    newName=[Procedure|ID] "/" oldName=[Procedure|ID];
	public EsterelGrammarAccess.ProcedureRenamingElements getProcedureRenamingAccess() {
		return gaEsterel.getProcedureRenamingAccess();
	}
	
	public ParserRule getProcedureRenamingRule() {
		return getProcedureRenamingAccess().getRule();
	}
	
	//TaskRenaming:
	//    newName=[Task|ID] "/" oldName=[Task|ID];
	public EsterelGrammarAccess.TaskRenamingElements getTaskRenamingAccess() {
		return gaEsterel.getTaskRenamingAccess();
	}
	
	public ParserRule getTaskRenamingRule() {
		return getTaskRenamingAccess().getRule();
	}
	
	//SignalRenaming:
	//    newName=SignalOrTickReferenceExpression "/" oldName=SignalOrTickReferenceExpression;
	public EsterelGrammarAccess.SignalRenamingElements getSignalRenamingAccess() {
		return gaEsterel.getSignalRenamingAccess();
	}
	
	public ParserRule getSignalRenamingRule() {
		return getSignalRenamingAccess().getRule();
	}
	
	//// renaming can also rename build in types and functions
	//BuildInFunction:
	//    "*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";
	public EsterelGrammarAccess.BuildInFunctionElements getBuildInFunctionAccess() {
		return gaEsterel.getBuildInFunctionAccess();
	}
	
	public ParserRule getBuildInFunctionRule() {
		return getBuildInFunctionAccess().getRule();
	}
	
	///* ###################################################
	// * ###               7.6 Old Syntax                ###
	// * ###################################################
	// */
	//LegacyDo returns Do:
	//    (annotations += Annotation)*
	//    "do"
	//    (statements+=EsterelParallel)
	//    (
	//        "upto"
	//        delay=DelayExpression
	//    |
	//        "watching"
	//        watching=DelayExpression
	//        (
	//            "timeout"
	//            watchingStatements+=EsterelParallel
	//            "end" "timeout"?
	//        )?
	//    );
	public EsterelGrammarAccess.LegacyDoElements getLegacyDoAccess() {
		return gaEsterel.getLegacyDoAccess();
	}
	
	public ParserRule getLegacyDoRule() {
		return getLegacyDoAccess().getRule();
	}
	
	///* ###################################################
	// * ###                    Enum                     ###
	// * ###################################################
	// */
	//enum EsterelCompareOperator returns kexpressions::OperatorType:
	//    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public EsterelGrammarAccess.EsterelCompareOperatorElements getEsterelCompareOperatorAccess() {
		return gaEsterel.getEsterelCompareOperatorAccess();
	}
	
	public EnumRule getEsterelCompareOperatorRule() {
		return getEsterelCompareOperatorAccess().getRule();
	}
	
	//enum EsterelPreOperator returns kexpressions::OperatorType:
	//    PRE="pre";
	public EsterelGrammarAccess.EsterelPreOperatorElements getEsterelPreOperatorAccess() {
		return gaEsterel.getEsterelPreOperatorAccess();
	}
	
	public EnumRule getEsterelPreOperatorRule() {
		return getEsterelPreOperatorAccess().getRule();
	}
	
	//enum EsterelOrOperator returns kexpressions::OperatorType:
	//    LOGICAL_OR="or";
	public EsterelGrammarAccess.EsterelOrOperatorElements getEsterelOrOperatorAccess() {
		return gaEsterel.getEsterelOrOperatorAccess();
	}
	
	public EnumRule getEsterelOrOperatorRule() {
		return getEsterelOrOperatorAccess().getRule();
	}
	
	//enum EsterelAndOperator returns kexpressions::OperatorType:
	//    LOGICAL_AND="and";
	public EsterelGrammarAccess.EsterelAndOperatorElements getEsterelAndOperatorAccess() {
		return gaEsterel.getEsterelAndOperatorAccess();
	}
	
	public EnumRule getEsterelAndOperatorRule() {
		return getEsterelAndOperatorAccess().getRule();
	}
	
	//enum EsterelNotOperator returns kexpressions::OperatorType:
	//    NOT="not";
	public EsterelGrammarAccess.EsterelNotOperatorElements getEsterelNotOperatorAccess() {
		return gaEsterel.getEsterelNotOperatorAccess();
	}
	
	public EnumRule getEsterelNotOperatorRule() {
		return getEsterelNotOperatorAccess().getRule();
	}
	
	//enum EsterelAddOperator returns kexpressions::OperatorType:
	//    ADD="+";
	public EsterelGrammarAccess.EsterelAddOperatorElements getEsterelAddOperatorAccess() {
		return gaEsterel.getEsterelAddOperatorAccess();
	}
	
	public EnumRule getEsterelAddOperatorRule() {
		return getEsterelAddOperatorAccess().getRule();
	}
	
	//enum EsterelSubOperator returns kexpressions::OperatorType:
	//    SUB="-";
	public EsterelGrammarAccess.EsterelSubOperatorElements getEsterelSubOperatorAccess() {
		return gaEsterel.getEsterelSubOperatorAccess();
	}
	
	public EnumRule getEsterelSubOperatorRule() {
		return getEsterelSubOperatorAccess().getRule();
	}
	
	//enum EsterelMultOperator returns kexpressions::OperatorType:
	//    MULT="*";
	public EsterelGrammarAccess.EsterelMultOperatorElements getEsterelMultOperatorAccess() {
		return gaEsterel.getEsterelMultOperatorAccess();
	}
	
	public EnumRule getEsterelMultOperatorRule() {
		return getEsterelMultOperatorAccess().getRule();
	}
	
	//enum EsterelModOperator returns kexpressions::OperatorType:
	//    MOD="mod";
	public EsterelGrammarAccess.EsterelModOperatorElements getEsterelModOperatorAccess() {
		return gaEsterel.getEsterelModOperatorAccess();
	}
	
	public EnumRule getEsterelModOperatorRule() {
		return getEsterelModOperatorAccess().getRule();
	}
	
	//enum EsterelDivOperator returns kexpressions::OperatorType:
	//    DIV="/";
	public EsterelGrammarAccess.EsterelDivOperatorElements getEsterelDivOperatorAccess() {
		return gaEsterel.getEsterelDivOperatorAccess();
	}
	
	public EnumRule getEsterelDivOperatorRule() {
		return getEsterelDivOperatorAccess().getRule();
	}
	
	//enum EsterelValueTestOperator returns kexpressions::OperatorType:
	//    VAL="?";
	public EsterelGrammarAccess.EsterelValueTestOperatorElements getEsterelValueTestOperatorAccess() {
		return gaEsterel.getEsterelValueTestOperatorAccess();
	}
	
	public EnumRule getEsterelValueTestOperatorRule() {
		return getEsterelValueTestOperatorAccess().getRule();
	}
	
	///*
	//   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext
	//*/
	//enum EsterelValueType returns kexpressions::ValueType:
	//    PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned"  |
	//    INT="integer" | FLOAT="float" | DOUBLE="double" |
	//    STRING="string" | HOST="host";
	public EsterelGrammarAccess.EsterelValueTypeElements getEsterelValueTypeAccess() {
		return gaEsterel.getEsterelValueTypeAccess();
	}
	
	public EnumRule getEsterelValueTypeRule() {
		return getEsterelValueTypeAccess().getRule();
	}
	
	//enum EsterelCombineOperator returns kexpressions::CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="or" | AND="and" | HOST="host";
	public EsterelGrammarAccess.EsterelCombineOperatorElements getEsterelCombineOperatorAccess() {
		return gaEsterel.getEsterelCombineOperatorAccess();
	}
	
	public EnumRule getEsterelCombineOperatorRule() {
		return getEsterelCombineOperatorAccess().getRule();
	}
	
	//// allow escaping by double quotes ( "this is a ""quote"", how nice." ) - Esterel style
	//@Override
	//terminal STRING:
	//    '"' (!('"') | ('"' '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaEsterel.getSTRINGRule();
	}
	
	//// custom terminal rule allowing to save transition label string as they are
	//@Override
	//terminal HOSTCODE:
	//    "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	public TerminalRule getHOSTCODERule() {
		return gaEsterel.getHOSTCODERule();
	}
	
	//TrapExpression returns kexpressions::Expression:
	//    {TrapExpression} "??" trap=[TrapSignal|ID];
	public EsterelGrammarAccess.TrapExpressionElements getTrapExpressionAccess() {
		return gaEsterel.getTrapExpressionAccess();
	}
	
	public ParserRule getTrapExpressionRule() {
		return getTrapExpressionAccess().getRule();
	}
	
	//EsterelFunctionCall:
	//    function=[Function|ID]
	//    ("(" (parameter+=Expression ("," parameter+=Expression)*)? ")" | '()');
	public EsterelGrammarAccess.EsterelFunctionCallElements getEsterelFunctionCallAccess() {
		return gaEsterel.getEsterelFunctionCallAccess();
	}
	
	public ParserRule getEsterelFunctionCallRule() {
		return getEsterelFunctionCallAccess().getRule();
	}
	
	//ConstantExpression returns kexpressions::Expression:
	//    {ConstantExpression} (constant=[Constant|ID] | value=AnyValue);
	public EsterelGrammarAccess.ConstantExpressionElements getConstantExpressionAccess() {
		return gaEsterel.getConstantExpressionAccess();
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//// --> B.3.5 Trap Expressions <--
	//// -------------------------------------
	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapExpr returns kexpressions::Expression:
	//    TrapAndExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelOrOperator subExpressions+=TrapAndExpression)+
	//    )?;
	public EsterelGrammarAccess.TrapExprElements getTrapExprAccess() {
		return gaEsterel.getTrapExprAccess();
	}
	
	public ParserRule getTrapExprRule() {
		return getTrapExprAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapAndExpression returns kexpressions::Expression:
	//    TrapNotExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+
	//    )?;
	public EsterelGrammarAccess.TrapAndExpressionElements getTrapAndExpressionAccess() {
		return gaEsterel.getTrapAndExpressionAccess();
	}
	
	public ParserRule getTrapAndExpressionRule() {
		return getTrapAndExpressionAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapNotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelNotOperator
	//    subExpressions+=TrapNotExpression
	//    |
	//    TrapAtomicExpression;
	public EsterelGrammarAccess.TrapNotExpressionElements getTrapNotExpressionAccess() {
		return gaEsterel.getTrapNotExpressionAccess();
	}
	
	public ParserRule getTrapNotExpressionRule() {
		return getTrapNotExpressionAccess().getRule();
	}
	
	//TrapAtomicExpression returns kexpressions::Expression:
	//      TrapReferenceExpr
	//    | "(" TrapExpression ")";
	public EsterelGrammarAccess.TrapAtomicExpressionElements getTrapAtomicExpressionAccess() {
		return gaEsterel.getTrapAtomicExpressionAccess();
	}
	
	public ParserRule getTrapAtomicExpressionRule() {
		return getTrapAtomicExpressionAccess().getRule();
	}
	
	//TrapReferenceExpr returns kexpressions::ValuedObjectReference:
	//    {TrapReference} valuedObject=[TrapSignal|ID];
	public EsterelGrammarAccess.TrapReferenceExprElements getTrapReferenceExprAccess() {
		return gaEsterel.getTrapReferenceExprAccess();
	}
	
	public ParserRule getTrapReferenceExprRule() {
		return getTrapReferenceExprAccess().getRule();
	}
	
	//// --> B.3.3 Signal Expressions <--
	//// -------------------------------------
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalExpression returns kexpressions::Expression:
	//    SignalAndExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelOrOperator subExpressions+=SignalAndExpression)+
	//    )?;
	public EsterelGrammarAccess.SignalExpressionElements getSignalExpressionAccess() {
		return gaEsterel.getSignalExpressionAccess();
	}
	
	public ParserRule getSignalExpressionRule() {
		return getSignalExpressionAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalAndExpression returns kexpressions::Expression:
	//    SignalNotExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAndOperator subExpressions+=SignalNotExpression)+
	//    )?;
	public EsterelGrammarAccess.SignalAndExpressionElements getSignalAndExpressionAccess() {
		return gaEsterel.getSignalAndExpressionAccess();
	}
	
	public ParserRule getSignalAndExpressionRule() {
		return getSignalAndExpressionAccess().getRule();
	}
	
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalNotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelNotOperator
	//    subExpressions+=SignalNotExpression
	//    |
	//    SignalAtomicExpression;
	public EsterelGrammarAccess.SignalNotExpressionElements getSignalNotExpressionAccess() {
		return gaEsterel.getSignalNotExpressionAccess();
	}
	
	public ParserRule getSignalNotExpressionRule() {
		return getSignalNotExpressionAccess().getRule();
	}
	
	//SignalAtomicExpression returns kexpressions::Expression:
	//     "(" SignalExpression ")"
	//    | SignalPreExpression
	//    | SignalOrTickReferenceExpression;
	public EsterelGrammarAccess.SignalAtomicExpressionElements getSignalAtomicExpressionAccess() {
		return gaEsterel.getSignalAtomicExpressionAccess();
	}
	
	public ParserRule getSignalAtomicExpressionRule() {
		return getSignalAtomicExpressionAccess().getRule();
	}
	
	//SignalOrTickReferenceExpression returns kexpressions::ValuedObjectReference:
	//    SignalReferenceExpression | TickSignalExpression
	//;
	public EsterelGrammarAccess.SignalOrTickReferenceExpressionElements getSignalOrTickReferenceExpressionAccess() {
		return gaEsterel.getSignalOrTickReferenceExpressionAccess();
	}
	
	public ParserRule getSignalOrTickReferenceExpressionRule() {
		return getSignalOrTickReferenceExpressionAccess().getRule();
	}
	
	//SignalReferenceExpression returns kexpressions::ValuedObjectReference:
	//    {SignalReference} valuedObject=[Signal|ID];
	public EsterelGrammarAccess.SignalReferenceExpressionElements getSignalReferenceExpressionAccess() {
		return gaEsterel.getSignalReferenceExpressionAccess();
	}
	
	public ParserRule getSignalReferenceExpressionRule() {
		return getSignalReferenceExpressionAccess().getRule();
	}
	
	//TickSignalExpression returns kexpressions::ValuedObjectReference:
	//    {TickReference} 'tick';
	public EsterelGrammarAccess.TickSignalExpressionElements getTickSignalExpressionAccess() {
		return gaEsterel.getTickSignalExpressionAccess();
	}
	
	public ParserRule getTickSignalExpressionRule() {
		return getTickSignalExpressionAccess().getRule();
	}
	
	//SignalPreExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelPreOperator
	//    '(' subExpressions+=SignalOrTickReferenceExpression ')';
	public EsterelGrammarAccess.SignalPreExpressionElements getSignalPreExpressionAccess() {
		return gaEsterel.getSignalPreExpressionAccess();
	}
	
	public ParserRule getSignalPreExpressionRule() {
		return getSignalPreExpressionAccess().getRule();
	}
	
	//// --> B.3.4 Delay Expressions <--
	//// -------------------------------------
	//DelayExpression:
	//    (delay=Expression
	//        (     expression=SignalOrTickReferenceExpression
	//            | expression=SignalPreExpression
	//            | "[" expression=SignalExpression "]"
	//        )
	//    )
	//    |
	//    (immediate?="immediate"?
	//        (     expression=SignalOrTickReferenceExpression
	//            | expression=SignalPreExpression
	//            | "[" expression=SignalExpression "]"
	//        )
	//    );
	public EsterelGrammarAccess.DelayExpressionElements getDelayExpressionAccess() {
		return gaEsterel.getDelayExpressionAccess();
	}
	
	public ParserRule getDelayExpressionRule() {
		return getDelayExpressionAccess().getRule();
	}
	
	///* #########################################################################
	// *
	// *
	// * Before the following was an extra plugin named
	// * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
	// *
	// *
	// * #########################################################################
	// */
	//@Override
	//Expression returns kexpressions::Expression:
	//      BooleanExpression
	//    | ValuedExpression;
	public EsterelGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaEsterel.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression returns kexpressions::Expression:
	//    OrExpression;
	public EsterelGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaEsterel.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//// The warning can be ignored since the operator will only override itself in this loop.
	//OrExpression returns kexpressions::Expression:
	//    AndExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelOrOperator subExpressions+=AndExpression)+
	//    )?;
	public EsterelGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaEsterel.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//// Example: A and B, not C and 42 <= ?D
	//// The warning can be ignored since the operator will only override itself in this loop.
	//AndExpression returns kexpressions::Expression:
	//    CompareOperation
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAndOperator subExpressions+=CompareOperation)+
	//    )?;
	public EsterelGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaEsterel.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//// Example: 42 <= ?A
	//@Override
	//CompareOperation returns kexpressions::Expression:
	//    NotOrValuedExpression
	//    ({kexpressions::OperatorExpression.subExpressions+=current}
	//        operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression
	//    )?;
	public EsterelGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaEsterel.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// order IS IMPORTANT
	//@Override
	//NotOrValuedExpression returns kexpressions::Expression:
	//      ValuedExpression
	//    | NotExpression;
	public EsterelGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaEsterel.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//@Override
	//NotExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelNotOperator
	//    subExpressions+=(NotExpression)
	//    |
	//    AtomicExpression;
	public EsterelGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaEsterel.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// everything that evaluates to a primitive number value
	//@Override
	//ValuedExpression returns kexpressions::Expression:
	//    AddExpression;
	public EsterelGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaEsterel.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//// Example: 1 + 2
	//// The warning can be ignored since the operator will only override itself in this loop.
	//@Override
	//AddExpression returns kexpressions::Expression:
	//    SubExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelAddOperator subExpressions+=SubExpression)+
	//    )?;
	public EsterelGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaEsterel.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Example: varA - ?B
	//// The warning can be ignored since the operator will only override itself in this loop.
	//@Override
	//SubExpression returns kexpressions::Expression:
	//    MultExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelSubOperator subExpressions+=MultExpression)+
	//    )?;
	public EsterelGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaEsterel.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//// Example: 2 * 4
	//// The warning can be ignored since the operator will only override itself in this loop.
	//@Override
	//MultExpression returns kexpressions::Expression:
	//    DivExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        (operator=EsterelMultOperator subExpressions+=DivExpression)+
	//    )?;
	public EsterelGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaEsterel.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Example: (2 / 4)
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//@Override
	//DivExpression returns kexpressions::Expression:
	//    ModExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        operator=EsterelDivOperator
	//        subExpressions+=ModExpression
	//    )?;
	public EsterelGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaEsterel.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Example: varA mod ?B
	//@Override
	//ModExpression returns kexpressions::Expression:
	//    NegExpression
	//    (   {kexpressions::OperatorExpression.subExpressions+=current}
	//        operator=EsterelModOperator
	//        subExpressions+=AtomicValuedExpression
	//    )?;
	public EsterelGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaEsterel.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//@Override
	//NegExpression returns kexpressions::Expression:
	//    {kexpressions::OperatorExpression}
	//    operator=EsterelSubOperator
	//    subExpressions+=(NegExpression)
	//    |
	//    AtomicValuedExpression;
	public EsterelGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaEsterel.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//// For some reason Esterel fails to parse the optional semicolon in threads if the Annotation rule includes JsonAnnotations
	//@Override
	//Annotation returns annotations::Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public EsterelGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaEsterel.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//SCLProgram returns SCLProgram:
	//    pragmas+=Pragma*
	//    modules+=Module*
	//;
	public SCLGrammarAccess.SCLProgramElements getSCLProgramAccess() {
		return gaSCL.getSCLProgramAccess();
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}
	
	//Module returns Module:
	//    (annotations += Annotation)*
	//    'module' name = ID ':'?
	//    (declarations += Declaration)*
	//    (statements += Statement)*
	//;
	public SCLGrammarAccess.ModuleElements getModuleAccess() {
		return gaSCL.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Pause returns Pause:
	//    {Pause}
	//    (annotations += Annotation)*
	//    'pause'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//Label returns Label:
	//    (annotations += Annotation)*
	//    name = ID ':'
	//;
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Goto returns Goto:
	//    (annotations += Annotation)*
	//    'goto' target = [Label|ID]
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//SclAssignment returns Assignment:
	//    (annotations += Annotation)*
	//    reference = ValuedObjectReference
	//    operator = AssignOperator
	//    expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclAssignmentElements getSclAssignmentAccess() {
		return gaSCL.getSclAssignmentAccess();
	}
	
	public ParserRule getSclAssignmentRule() {
		return getSclAssignmentAccess().getRule();
	}
	
	//SclPostfixAssignment returns Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclPostfixAssignmentElements getSclPostfixAssignmentAccess() {
		return gaSCL.getSclPostfixAssignmentAccess();
	}
	
	public ParserRule getSclPostfixAssignmentRule() {
		return getSclPostfixAssignmentAccess().getRule();
	}
	
	//SclEffectAssignment returns Assignment:
	//    (annotations += Annotation)*
	//    expression = (
	//        ReferenceCall
	//    |
	//        TextExpression
	//    |
	//        PrintCall
	//    |
	//        RandomizeCall
	//    |
	//        FunctionCall
	//    )
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.SclEffectAssignmentElements getSclEffectAssignmentAccess() {
		return gaSCL.getSclEffectAssignmentAccess();
	}
	
	public ParserRule getSclEffectAssignmentRule() {
		return getSclEffectAssignmentAccess().getRule();
	}
	
	//Return returns Return:
	//    (annotations += Annotation)*
	//    'return'
	//    expression = Expression
	//;
	public SCLGrammarAccess.ReturnElements getReturnAccess() {
		return gaSCL.getReturnAccess();
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Conditional returns Conditional:
	//    (annotations += Annotation)*
	//    'if' expression = (BoolScheduleExpression | AtomicExpression)
	//    '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    (else = ElseScope | semicolon?=';')?
	//;
	public SCLGrammarAccess.ConditionalElements getConditionalAccess() {
		return gaSCL.getConditionalAccess();
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//ElseScope returns ElseScope:
	//    {ElseScope}
	//    (annotations += Annotation)*
	//    'else' '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ElseScopeElements getElseScopeAccess() {
		return gaSCL.getElseScopeAccess();
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}
	
	//LegacyConditional returns Conditional:
	//    (annotations += Annotation)*
	//    'if' expression = BoolExpression
	//    'then'
	//    (statements += Statement)*
	//    (else = LegacyElseScope)?
	//    'end'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.LegacyConditionalElements getLegacyConditionalAccess() {
		return gaSCL.getLegacyConditionalAccess();
	}
	
	public ParserRule getLegacyConditionalRule() {
		return getLegacyConditionalAccess().getRule();
	}
	
	//LegacyElseScope returns ElseScope:
	//    {ElseScope}
	//    (annotations += Annotation)*
	//    'else'
	//    (statements += Statement)*
	//;
	public SCLGrammarAccess.LegacyElseScopeElements getLegacyElseScopeAccess() {
		return gaSCL.getLegacyElseScopeAccess();
	}
	
	public ParserRule getLegacyElseScopeRule() {
		return getLegacyElseScopeAccess().getRule();
	}
	
	//Thread returns Thread:
	//    {Thread}
	//    (
	//        (
	//            (annotations += Annotation)*
	//            '{'
	//            (declarations+=Declaration)*
	//            (statements += Statement)*
	//            '}'
	//        ) | (
	//            (statements += Statement)*
	//        )
	//    )
	//;
	public SCLGrammarAccess.ThreadElements getThreadAccess() {
		return gaSCL.getThreadAccess();
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}
	
	//Parallel returns Parallel:
	//    'fork'
	//    //(forkType=ForkType)?
	//    (
	//        threads += Thread
	//        (
	//            'par'
	//            threads += Thread
	//        )*
	//    )
	//    'join'
	//    //joinAny?='any'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ParallelElements getParallelAccess() {
		return gaSCL.getParallelAccess();
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	////enum ForkType returns ForkType:
	////    SEQUENTIAL = 'seq' | SEQUENTIAL_PREEMPTIVE = 'seq-abort';
	//ScopeStatement returns ScopeStatement:
	//    {ScopeStatement}
	//    (annotations += Annotation)*
	//    '{'
	//        (declarations+=Declaration)*
	//        (statements += Statement)*
	//    '}'
	//;
	public SCLGrammarAccess.ScopeStatementElements getScopeStatementAccess() {
		return gaSCL.getScopeStatementAccess();
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}
	
	//ForLoop returns Loop:
	//    'for' '('
	//    (initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)?
	//    ';'
	//    condition=BoolExpression
	//    ';'
	//    afterthought=EffectOrAssignment?
	//    ')' '{'
	//    (declarations += Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ForLoopElements getForLoopAccess() {
		return gaSCL.getForLoopAccess();
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//LoopDeclaration returns kexpressions::VariableDeclaration:
	//    annotations += Annotation*
	//    (
	//        (type = ValueType)
	//    |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects += ValuedObject
	//;
	public SCLGrammarAccess.LoopDeclarationElements getLoopDeclarationAccess() {
		return gaSCL.getLoopDeclarationAccess();
	}
	
	public ParserRule getLoopDeclarationRule() {
		return getLoopDeclarationAccess().getRule();
	}
	
	//EffectOrAssignment returns keffects::Assignment:
	//    (annotations += Annotation)*
	//    (
	//        reference = ValuedObjectReference
	//        operator = PostfixOperator
	//    |
	//        reference = ValuedObjectReference
	//        operator = AssignOperator
	//        expression = Expression
	//    |
	//        expression = Expression
	//    )
	//;
	public SCLGrammarAccess.EffectOrAssignmentElements getEffectOrAssignmentAccess() {
		return gaSCL.getEffectOrAssignmentAccess();
	}
	
	public ParserRule getEffectOrAssignmentRule() {
		return getEffectOrAssignmentAccess().getRule();
	}
	
	//WhileLoop returns Loop:
	//    'while' '('
	//    condition=BoolExpression
	//    ')' '{'
	//    (declarations+=Declaration)*
	//    (statements += Statement)*
	//    '}'
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.WhileLoopElements getWhileLoopAccess() {
		return gaSCL.getWhileLoopAccess();
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ModuleCall returns ModuleCall:
	//    (annotations += Annotation)*
	//    'run'
	//    module = [Module|ID]
	//    ('(' parameters += ModuleCallParameter (',' parameters += ModuleCallParameter)* ')' | '()')?
	//    semicolon?=';'?
	//;
	public SCLGrammarAccess.ModuleCallElements getModuleCallAccess() {
		return gaSCL.getModuleCallAccess();
	}
	
	public ParserRule getModuleCallRule() {
		return getModuleCallAccess().getRule();
	}
	
	//ModuleCallParameter returns kexpressions::Parameter:
	//    ((accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression)
	//    ('to' explicitBinding = [kexpressions::ValuedObject|ID] ('[' explicitBindingIndices+=Expression ']')*)?
	//;
	public SCLGrammarAccess.ModuleCallParameterElements getModuleCallParameterAccess() {
		return gaSCL.getModuleCallParameterAccess();
	}
	
	public ParserRule getModuleCallParameterRule() {
		return getModuleCallParameterAccess().getRule();
	}
	
	//@Override
	//MethodDeclaration returns kexpressions::MethodDeclaration:
	//    {MethodImplementationDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    (
	//        ';'
	//        |
	//        implemented?='{'
	//        annotations+=CommentAnnotatonSL?
	//        declarations+=Declaration*
	//        statements+=Statement*
	//        '}'
	//    )
	//    annotations+=CommentAnnotatonSL?
	//;
	public SCLGrammarAccess.MethodDeclarationElements getMethodDeclarationAccess() {
		return gaSCL.getMethodDeclarationAccess();
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//@Override
	//MethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
	//    {MethodImplementationDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    (implemented?='{'
	//        annotations+=CommentAnnotatonSL?
	//        declarations+=Declaration*
	//        statements+=Statement*
	//    '}')?
	//;
	public SCLGrammarAccess.MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return gaSCL.getMethodDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language
	// * that is used for testing kexpressions and keffects.
	// */
	//// ------------ //
	////  KEXT Rules  //
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of
	//// test entities may follow.
	//Kext returns kext::Kext:
	//    scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    (name=ID)? '{'
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//    expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'expression'
	//    expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'json'
	//    expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z
	//Declaration returns kexpressions::Declaration:
	//    VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon returns kexpressions::Declaration:
	//    VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    const?='const'?
	//    input?='input'?
	//    output?='output'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        |
	//        signal?='signal'
	//        |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    input?='input'?
	//    output?='output'?
	//    const?='const'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        | signal?='signal'
	//        | (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethod*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=Declaration*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod returns kexpressions::Declaration:
	//    Declaration | EnumDeclaration | MethodDeclaration
	//;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethodWOSemicolon*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationWOSemicolon*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return gaKExt.getClassDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon returns kexpressions::Declaration:
	//    DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
	//;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//EnumDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType=STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//        ';'
	//    '}'
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationElements getEnumDeclarationAccess() {
		return gaKExt.getEnumDeclarationAccess();
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumMemberDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return gaKExt.getEnumMemberDeclarationAccess();
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}
	
	//EnumDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType = STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//    '}'
	//    annotations+=CommentAnnotatonSL?
	//;
	public KExtGrammarAccess.EnumDeclarationWOSemicolonElements getEnumDeclarationWOSemicolonAccess() {
		return gaKExt.getEnumDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getEnumDeclarationWOSemicolonRule() {
		return getEnumDeclarationWOSemicolonAccess().getRule();
	}
	
	//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString returns kexpressions::ExternString:
	//    annotations+=TagAnnotation*
	//    code = STRING
	//;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//// ---
	////  Generics
	//// ---
	//GenericParameterDeclaration returns kexpressions::GenericParameterDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject
	//    (
	//        ('is' valueType = ValueType)
	//        |
	//        ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
	//    )?
	//;
	public KExtGrammarAccess.GenericParameterDeclarationElements getGenericParameterDeclarationAccess() {
		return gaKExt.getGenericParameterDeclarationAccess();
	}
	
	public ParserRule getGenericParameterDeclarationRule() {
		return getGenericParameterDeclarationAccess().getRule();
	}
	
	//GenericParameter returns kexpressions::Parameter:
	//    // Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
	//    // Here GenericTypeReference has precedence and has to cover certain
	//    // references to VOs. This needs to be specifically handled in the scoper and in the resource
	//    // by using the KExtGenericParamterConverter.
	//    // Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
	//    // index or sub reference specified, this is why there are special non-optional rules.
	//    expression = (ValueTypeReference
	//                 | AnyValue
	//                 | GenericParameter_GenericTypeReference_Parameterized
	//                 | GenericParameter_ValuedObjectReference_Array
	//                 | GenericParameter_ValuedObjectReference_Sub
	//                 | GenericTypeReference
	//                 | ValuedObjectReference)
	//;
	public KExtGrammarAccess.GenericParameterElements getGenericParameterAccess() {
		return gaKExt.getGenericParameterAccess();
	}
	
	public ParserRule getGenericParameterRule() {
		return getGenericParameterAccess().getRule();
	}
	
	//ValueTypeReference returns kexpressions::ValueTypeReference:
	//    valueType = ValueType
	//;
	public KExtGrammarAccess.ValueTypeReferenceElements getValueTypeReferenceAccess() {
		return gaKExt.getValueTypeReferenceAccess();
	}
	
	public ParserRule getValueTypeReferenceRule() {
		return getValueTypeReferenceAccess().getRule();
	}
	
	//GenericTypeReference returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//;
	public KExtGrammarAccess.GenericTypeReferenceElements getGenericTypeReferenceAccess() {
		return gaKExt.getGenericTypeReferenceAccess();
	}
	
	public ParserRule getGenericTypeReferenceRule() {
		return getGenericTypeReferenceAccess().getRule();
	}
	
	//// Special rules for GenericParameter parsing
	//GenericParameter_GenericTypeReference_Parameterized returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    '<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>' // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_GenericTypeReference_ParameterizedElements getGenericParameter_GenericTypeReference_ParameterizedAccess() {
		return gaKExt.getGenericParameter_GenericTypeReference_ParameterizedAccess();
	}
	
	public ParserRule getGenericParameter_GenericTypeReference_ParameterizedRule() {
		return getGenericParameter_GenericTypeReference_ParameterizedAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Array returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')+ // mandatory
	//    ('.' subReference=ValuedObjectReference)?
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_ArrayElements getGenericParameter_ValuedObjectReference_ArrayAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_ArrayAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_ArrayRule() {
		return getGenericParameter_ValuedObjectReference_ArrayAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Sub returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference) // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_SubElements getGenericParameter_ValuedObjectReference_SubAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_SubAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_SubRule() {
		return getGenericParameter_ValuedObjectReference_SubAccess().getRule();
	}
	
	//// ---
	////  Scheduling Directives
	//// ---
	//ScheduleDeclaration returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//    CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part.
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('=' initialValue=Expression)?
	//    ( 'combine'
	//      (combineOperator = CombineOperator)
	//    )?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//ReferenceValuedObject returns kexpressions::ValuedObject:
	//    {kexpressions::ValuedObject}
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
	//    ('=' initialValue=Expression)?
	//    ('label' label=STRING)?;
	public KExtGrammarAccess.ReferenceValuedObjectElements getReferenceValuedObjectAccess() {
		return gaKExt.getReferenceValuedObjectAccess();
	}
	
	public ParserRule getReferenceValuedObjectRule() {
		return getReferenceValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	//NamespaceID returns ecore::EString:
	//  ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */
	//// ---------------- //
	////  KEffects Rules  //
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect returns keffects::Effect:
	//    Assignment |
	//    PostfixEffect |
	//    ValuedEmission | // Will consume some ReferenceCallEffects
	//    HostcodeEffect |
	//    ReferenceCallEffect |
	//    FunctionCallEffect |
	//    PrintCallEffect |
	//    RandomizeCallEffect |
	//    PureEmission;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals.
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted
	//// annotations defined in the annotations grammar.
	//PureEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    "(" newValue = Expression ")"
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission returns keffects::Emission:
	//    ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1
	//Assignment returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=AssignOperator expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I--
	//PostfixEffect returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//    (annotations+=Annotation)*
	//     text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect returns keffects::ReferenceCallEffect:
	//    super?='super.'?
	//    (annotations+=Annotation)*
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//    (annotations+=Annotation)*
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.
	//PrintCallEffect returns keffects::PrintCallEffect:
	//    (annotations+=Annotation)*
	//    'print'
	//    ('(' parameters += Parameter (',' parameters += Parameter)* ')')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect returns keffects::RandomizeCallEffect:
	//    {keffects::RandomizeCallEffect}
	//    (annotations+=Annotation)*
	//    'randomize'
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//// ---------------- //
	////  KEffects Enums  //
	//// ---------------- //
	//// Assign Operator Enum
	//enum AssignOperator returns keffects::AssignOperator:
	//    ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//    ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//    ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//    ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//// Postfix Operator Enum
	//enum PostfixOperator returns keffects::AssignOperator:
	//    POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// -------------------- //
	////  KExpressions Rules  //
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */
	//// Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//    Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason.
	//// One could skip directly to the next rule.
	//BoolExpression returns Expression:
	//    LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression returns Expression:
	//    LogicalAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
	//        ('||' subExpressions+=LogicalAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression returns Expression:
	//    BitwiseOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
	//        ('&&' subExpressions+=BitwiseOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//    BitwiseXOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
	//        ('|' subExpressions+=BitwiseXOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression returns Expression:
	//    BitwiseAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
	//        ('^' subExpressions+=BitwiseAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//    CompareOperation
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
	//        ('&' subExpressions+=CompareOperation)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression returns Expression:
	//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//ShiftExpressions returns Expression:
	//    SumExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
	//        ('<<' subExpressions+=ShiftRightExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
	//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
	//        ('>>>' subExpressions+=SumExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression returns Expression:
	//    ProductExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//ProductExpression returns Expression:
	//    NegExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaKExpressions.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//TernaryOperation returns Expression:
	//    {OperatorExpression}
	//    subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
	//    | InitExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression returns Expression:
	//    FbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=InitOperator subExpressions+=FbyExpression)
	//        ('->' subExpressions+=FbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaKExpressions.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression returns Expression:
	//    SfbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=FbyOperator subExpressions+=SfbyExpression)
	//        ('fby' subExpressions+=SfbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaKExpressions.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression returns Expression:
	//    AtomicValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
	//        ('sfby' subExpressions+=AtomicValuedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.
	//BoolScheduleExpression returns Expression:
	//    LogicalOrExpression
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
	//    | ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// Accesses a arbitrary target in a static way (needs to be adjusted in the scoper of the deriving language)
	//// Example: static(Constants).MAX
	//SpecialAccessExpression returns SpecialAccessExpression:
	//    access='static' '('
	//    (container=[annotations::NamedObject|PrimeID] '.')?
	//    target=[annotations::NamedObject|PrimeID]
	//    ')' '.' subReference=ValuedObjectReference;
	public KExpressionsGrammarAccess.SpecialAccessExpressionElements getSpecialAccessExpressionAccess() {
		return gaKExpressions.getSpecialAccessExpressionAccess();
	}
	
	public ParserRule getSpecialAccessExpressionRule() {
		return getSpecialAccessExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID returns ecore::EString:
	//  ID ("'")*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference returns ValuedObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference returns ScheduleObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list.
	//ReferenceCall returns ReferenceCall:
	//    super?='super.'?
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (
	//        ('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()'
	//    );
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomCall returns RandomCall:
	//    {RandomCall}
	//    'random' ('()')?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomizeCall returns RandomizeCall:
	//    {RandomizeCall}
	//    'randomize' ('()')?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list.
	//FunctionCall returns FunctionCall:
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall returns PrintCall:
	//    {PrintCall}
	//    'print'
	//    (
	//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
	//    |
	//        '()'
	//    );
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter returns Parameter:
	//    (accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression returns TextExpression:
	//    (annotations += Annotation)*
	//    text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue returns IntValue:
	//    value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue returns FloatValue:
	//    value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue returns BoolValue:
	//    value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue returns VectorValue:
	//    '{' (
	//        values+=VectorValueMember (',' values+=VectorValueMember)*
	//        |
	//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference)
	//    ) '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember returns Expression:
	//    BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue returns IgnoreValue:
	//    {IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext.
	//AnyType returns ecore::EString:
	//    BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue returns Value:
	//    IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//// -------------------- //
	////  KExpressions Enums  //
	//// -------------------- //
	//enum CompareOperator returns OperatorType:
	//    EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//    PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//    BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//    BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//    BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//    BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//    NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//    ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//    SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//    MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//    MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//    DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//    VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//    LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//    LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//    SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//    SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//    SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//    POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//    POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//    CONDITIONAL = "?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//    INIT = "->";
	public KExpressionsGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaKExpressions.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//    FBY = "fby";
	public KExpressionsGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaKExpressions.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//    SFBY = "sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum ValueType returns ValueType:
	//    PURE="pure" | BOOL="bool" |
	//    INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//    HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//    STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//    CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum EnumType returns ValueType:
	//    ENUM="enum";
	public KExpressionsGrammarAccess.EnumTypeElements getEnumTypeAccess() {
		return gaKExpressions.getEnumTypeAccess();
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//enum CombineOperator returns CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier returns AccessModifier:
	//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//    VOID="void" |
	//    BOOL="bool" | INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType returns ParameterAccessType:
	//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
	//;
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                //
	//// -------------------- //
	//JsonObjectValue returns JsonObjectValue:
	//    {JsonObjectValue}
	//    '{'
	//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
	//    '}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember returns JsonObjectMember:
	//    key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue returns JsonArrayValue:
	//    {JsonArrayValue}
	//    '['
	//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
	//    ']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue returns Value:
	//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue returns NullValue:
	//    {NullValue}
	//    'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma returns JsonPragma:
	//    '#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation returns JsonAnnotation:
	//    '@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma returns annotations::Pragma:
	//    super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// OO
	//ThisExpression returns ThisExpression:
	//    {ThisExpression}
	//    'this';
	public KExpressionsGrammarAccess.ThisExpressionElements getThisExpressionAccess() {
		return gaKExpressions.getThisExpressionAccess();
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.
	//Pragma returns Pragma:
	//    StringPragma |
	//    PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations.
	//// You can use this rule in derived grammars if you don't want to permit typed strings.
	//RestrictedTypeAnnotation returns Annotation:
	//    CommentAnnotation |
	//    RestrictedKeyStringValueAnnotation |
	//    RestrictedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in
	//// derived grammars if you don't want to permit unquoted strings.
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)
	//QuotedStringAnnotation returns Annotation:
	//    CommentAnnotation |
	//    QuotedKeyStringValueAnnotation |
	//    QuotedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation returns CommentAnnotation:
	//    values += COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL returns CommentAnnotation:
	//    values += SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation returns TagAnnotation:
	//    '@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag returns Pragma:
	//    '#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.
	//KeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma returns StringPragma:
	//    '#' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString returns ecore::EString:
	//    STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID returns ecore::EString:
	//  ID (('.'|'-') ID)* (('#') INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID returns ecore::EString:
	//  ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer returns ecore::EInt:
	//    '-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger returns ecore::EDouble:
	//    '-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//// ---------------------- //
	////  Annotation Terminals  //
	//// ---------------------- //
	//// Comment Annotation Terminal
	//// Custom terminal rule introducing semantic comments.
	//terminal COMMENT_ANNOTATION returns ecore::EString:
	//    '/**' -> '*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION returns ecore::EString:
	//    '//*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//// Number Terminal
	//terminal fragment NUMBER :
	//    '0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//// Integer Terminal
	//// An INT is a list of numbers.
	//@Override
	//terminal INT returns ecore::EInt:
	//    NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//// Float Terminal (internal precision: double!)
	//// Make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EDouble:
	//    NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
	//    NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//// Boolean Terminal
	//// Introduce boolean values.
	//terminal BOOLEAN returns ecore::EBooleanObject :
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?(('_'?'a'..'z'|'_'?'A'..'Z')|'_''0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
