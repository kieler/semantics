/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.balloontrees.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BalloonTreesGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BalloonTreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.balloontrees.BalloonTrees.BalloonTree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBalloonTreeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBalloonTreeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChildrenBalloonTreeNodeParserRuleCall_3_1_0 = (RuleCall)cChildrenAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//BalloonTree returns BalloonTree:
		//    {BalloonTree}
		//    'BalloonTree' identifier=ID ('{'
		//        (children+=BalloonTreeNode)*
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BalloonTree}
		//'BalloonTree' identifier=ID ('{'
		//    (children+=BalloonTreeNode)*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{BalloonTree}
		public Action getBalloonTreeAction_0() { return cBalloonTreeAction_0; }
		
		//'BalloonTree'
		public Keyword getBalloonTreeKeyword_1() { return cBalloonTreeKeyword_1; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_0() { return cIdentifierIDTerminalRuleCall_2_0; }
		
		//('{'
		//       (children+=BalloonTreeNode)*
		//   '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(children+=BalloonTreeNode)*
		public Assignment getChildrenAssignment_3_1() { return cChildrenAssignment_3_1; }
		
		//BalloonTreeNode
		public RuleCall getChildrenBalloonTreeNodeParserRuleCall_3_1_0() { return cChildrenBalloonTreeNodeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class BalloonTreeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.balloontrees.BalloonTrees.BalloonTreeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBalloonTreeNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChildrenBalloonTreeNodeParserRuleCall_3_1_0 = (RuleCall)cChildrenAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//BalloonTreeNode returns BalloonTreeNode:
		//    {BalloonTreeNode}
		//    'node' identifier=ID ('{'
		//        (children+=BalloonTreeNode)*
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BalloonTreeNode}
		//'node' identifier=ID ('{'
		//    (children+=BalloonTreeNode)*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{BalloonTreeNode}
		public Action getBalloonTreeNodeAction_0() { return cBalloonTreeNodeAction_0; }
		
		//'node'
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_0() { return cIdentifierIDTerminalRuleCall_2_0; }
		
		//('{'
		//       (children+=BalloonTreeNode)*
		//   '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(children+=BalloonTreeNode)*
		public Assignment getChildrenAssignment_3_1() { return cChildrenAssignment_3_1; }
		
		//BalloonTreeNode
		public RuleCall getChildrenBalloonTreeNodeParserRuleCall_3_1_0() { return cChildrenBalloonTreeNodeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	
	
	private final BalloonTreeElements pBalloonTree;
	private final BalloonTreeNodeElements pBalloonTreeNode;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BalloonTreesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBalloonTree = new BalloonTreeElements();
		this.pBalloonTreeNode = new BalloonTreeNodeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.balloontrees.BalloonTrees".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BalloonTree returns BalloonTree:
	//    {BalloonTree}
	//    'BalloonTree' identifier=ID ('{'
	//        (children+=BalloonTreeNode)*
	//    '}')?;
	public BalloonTreeElements getBalloonTreeAccess() {
		return pBalloonTree;
	}
	
	public ParserRule getBalloonTreeRule() {
		return getBalloonTreeAccess().getRule();
	}
	
	//BalloonTreeNode returns BalloonTreeNode:
	//    {BalloonTreeNode}
	//    'node' identifier=ID ('{'
	//        (children+=BalloonTreeNode)*
	//    '}')?;
	public BalloonTreeNodeElements getBalloonTreeNodeAccess() {
		return pBalloonTreeNode;
	}
	
	public ParserRule getBalloonTreeNodeRule() {
		return getBalloonTreeNodeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
