/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kexpressions.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KExpressionsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.Root");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///**
		// * @author ssm
		// * @kieler.design 2015-08-21 proposed
		// * @kieler.rating 2015-08-21 proposed yellow
		// */
		//// -------------------- //
		////  KExpressions Rules  //
		//// -------------------- //
		///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
		// * consume tokens to create a specific expression element. Following this pattern, complex constructs
		// * can be created. This also implies an order of precedence.
		// *
		// * Expression
		// * + BooleanExpression
		// *   + LogicalOrExpression
		// *     + LogicalAndExpression
		// *       + BitwiseOrExpression
		// *         + BitwiseAndExpression
		// *           + CompareExpression
		// *             + NotOrValuedExpression
		// *               + ValuedExpression (see valued expression below)
		// *               + NotExpression *
		// *                 + AtomicExpression *
		// *                   + BoolValue
		// *                   + ValuedObjectTestExpression
		// *                     + ValuedObjectReference
		// *                   + FunctionCall
		// *                   + TextExpression
		// * + ValuedExpression
		// *   + AddExpression
		// *     + SubExpression
		// *       + MultExpression
		// *         + DivExpression
		// *           + ModExpression
		// *             + NegExpression *
		// *               + AtomicValuedExpression *
		// *                 + IntValue
		// *                 + FloatValue
		// *                 + StringValue
		// *                 + AtomicExpression
		// */
		//// Root Rule
		//// Always return an expression.
		//Root returns ecore::EObject:
		//    Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Expression Rule
		//// An expression is either a boolean expression or a valued expression.
		//Expression returns Expression:
		//     (BoolExpression | ValuedExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//(BoolExpression | ValuedExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolExpression
		public RuleCall getBoolExpressionParserRuleCall_0() { return cBoolExpressionParserRuleCall_0; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_1() { return cValuedExpressionParserRuleCall_1; }
	}
	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BoolExpression");
		private final RuleCall cLogicalOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Boolean Expression Rule
		//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason.
		//// One could skip directly to the next rule.
		//BoolExpression returns Expression:
		//    LogicalOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall() { return cLogicalOrExpressionParserRuleCall; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Logical Or Expression Rule
		//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
		//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
		//LogicalOrExpression returns Expression:
		//    LogicalAndExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		//        ('||' subExpressions+=LogicalAndExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		//    ('||' subExpressions+=LogicalAndExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		//    ('||' subExpressions+=LogicalAndExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=LogicalOrOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//LogicalOrOperator
		public RuleCall getOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0() { return cOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=LogicalAndExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//LogicalAndExpression
		public RuleCall getSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0; }
		
		//('||' subExpressions+=LogicalAndExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_2_0() { return cVerticalLineVerticalLineKeyword_1_2_0; }
		
		//subExpressions+=LogicalAndExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//LogicalAndExpression
		public RuleCall getSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsBitwiseOrExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsBitwiseOrExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Logical And Expression Rule
		//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
		//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
		//LogicalAndExpression returns Expression:
		//    BitwiseOrExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
		//        ('&&' subExpressions+=BitwiseOrExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseOrExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
		//    ('&&' subExpressions+=BitwiseOrExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//BitwiseOrExpression
		public RuleCall getBitwiseOrExpressionParserRuleCall_0() { return cBitwiseOrExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
		//    ('&&' subExpressions+=BitwiseOrExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=LogicalAndOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//LogicalAndOperator
		public RuleCall getOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0() { return cOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=BitwiseOrExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//BitwiseOrExpression
		public RuleCall getSubExpressionsBitwiseOrExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsBitwiseOrExpressionParserRuleCall_1_1_1_0; }
		
		//('&&' subExpressions+=BitwiseOrExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_2_0() { return cAmpersandAmpersandKeyword_1_2_0; }
		
		//subExpressions+=BitwiseOrExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//BitwiseOrExpression
		public RuleCall getSubExpressionsBitwiseOrExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsBitwiseOrExpressionParserRuleCall_1_2_1_0; }
	}
	public class BitwiseOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseXOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorBitwiseOrOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsBitwiseXOrExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cVerticalLineKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsBitwiseXOrExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Bitwiese Or Expression Rule
		//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
		//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
		//BitwiseOrExpression returns Expression:
		//    BitwiseXOrExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
		//        ('|' subExpressions+=BitwiseXOrExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseXOrExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
		//    ('|' subExpressions+=BitwiseXOrExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//BitwiseXOrExpression
		public RuleCall getBitwiseXOrExpressionParserRuleCall_0() { return cBitwiseXOrExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
		//    ('|' subExpressions+=BitwiseXOrExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=BitwiseOrOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//BitwiseOrOperator
		public RuleCall getOperatorBitwiseOrOperatorEnumRuleCall_1_1_0_0() { return cOperatorBitwiseOrOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=BitwiseXOrExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//BitwiseXOrExpression
		public RuleCall getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsBitwiseXOrExpressionParserRuleCall_1_1_1_0; }
		
		//('|' subExpressions+=BitwiseXOrExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_2_0() { return cVerticalLineKeyword_1_2_0; }
		
		//subExpressions+=BitwiseXOrExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//BitwiseXOrExpression
		public RuleCall getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsBitwiseXOrExpressionParserRuleCall_1_2_1_0; }
	}
	public class BitwiseXOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseXOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorBitwiseXOrOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsBitwiseAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsBitwiseAndExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//BitwiseXOrExpression returns Expression:
		//    BitwiseAndExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
		//        ('^' subExpressions+=BitwiseAndExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//BitwiseAndExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
		//    ('^' subExpressions+=BitwiseAndExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//BitwiseAndExpression
		public RuleCall getBitwiseAndExpressionParserRuleCall_0() { return cBitwiseAndExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
		//    ('^' subExpressions+=BitwiseAndExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=BitwiseXOrOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//BitwiseXOrOperator
		public RuleCall getOperatorBitwiseXOrOperatorEnumRuleCall_1_1_0_0() { return cOperatorBitwiseXOrOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=BitwiseAndExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//BitwiseAndExpression
		public RuleCall getSubExpressionsBitwiseAndExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsBitwiseAndExpressionParserRuleCall_1_1_1_0; }
		
		//('^' subExpressions+=BitwiseAndExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_2_0() { return cCircumflexAccentKeyword_1_2_0; }
		
		//subExpressions+=BitwiseAndExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//BitwiseAndExpression
		public RuleCall getSubExpressionsBitwiseAndExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsBitwiseAndExpressionParserRuleCall_1_2_1_0; }
	}
	public class BitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorBitwiseAndOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsCompareOperationParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsCompareOperationParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Bitwise And Expression Rule
		//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
		//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
		//BitwiseAndExpression returns Expression:
		//    CompareOperation
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
		//        ('&' subExpressions+=CompareOperation)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareOperation
		//({OperatorExpression.subExpressions+=current}
		//    (operator=BitwiseAndOperator subExpressions+=CompareOperation)
		//    ('&' subExpressions+=CompareOperation)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_0() { return cCompareOperationParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=BitwiseAndOperator subExpressions+=CompareOperation)
		//    ('&' subExpressions+=CompareOperation)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=BitwiseAndOperator subExpressions+=CompareOperation)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=BitwiseAndOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//BitwiseAndOperator
		public RuleCall getOperatorBitwiseAndOperatorEnumRuleCall_1_1_0_0() { return cOperatorBitwiseAndOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=CompareOperation
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//CompareOperation
		public RuleCall getSubExpressionsCompareOperationParserRuleCall_1_1_1_0() { return cSubExpressionsCompareOperationParserRuleCall_1_1_1_0; }
		
		//('&' subExpressions+=CompareOperation)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_2_0() { return cAmpersandKeyword_1_2_0; }
		
		//subExpressions+=CompareOperation
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//CompareOperation
		public RuleCall getSubExpressionsCompareOperationParserRuleCall_1_2_1_0() { return cSubExpressionsCompareOperationParserRuleCall_1_2_1_0; }
	}
	public class CompareOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.CompareOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotOrValuedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorCompareOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Compare Operation Rule
		//// Directs to the 'not or valued expression' rule and may create an operator expression for compares.
		//// Example: 42 <= val(A)
		//CompareOperation returns Expression:
		//    NotOrValuedExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        operator=CompareOperator subExpressions+=NotOrValuedExpression
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//NotOrValuedExpression
		//({OperatorExpression.subExpressions+=current}
		//    operator=CompareOperator subExpressions+=NotOrValuedExpression
		//)?
		public Group getGroup() { return cGroup; }
		
		//NotOrValuedExpression
		public RuleCall getNotOrValuedExpressionParserRuleCall_0() { return cNotOrValuedExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    operator=CompareOperator subExpressions+=NotOrValuedExpression
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//operator=CompareOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//CompareOperator
		public RuleCall getOperatorCompareOperatorEnumRuleCall_1_1_0() { return cOperatorCompareOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=NotOrValuedExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//NotOrValuedExpression
		public RuleCall getSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0() { return cSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0; }
	}
	public class NotOrValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.NotOrValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValuedExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// 'Not or Valued Expression' Rule
		//// ORDER IS IMPORTANT!
		//NotOrValuedExpression returns Expression:
		//    ValuedExpression
		//    | NotExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ValuedExpression
		//| NotExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_0() { return cValuedExpressionParserRuleCall_0; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_1() { return cNotExpressionParserRuleCall_1; }
	}
	public class BitwiseNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorBitwiseNotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsBitwiseNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BitwiseNotExpression returns Expression:
		//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
		//    | AtomicExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
		//| AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=BitwiseNotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//BitwiseNotOperator
		public RuleCall getOperatorBitwiseNotOperatorEnumRuleCall_0_1_0() { return cOperatorBitwiseNotOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=(BitwiseNotExpression)
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//(BitwiseNotExpression)
		public RuleCall getSubExpressionsBitwiseNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsBitwiseNotExpressionParserRuleCall_0_2_0; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_1() { return cAtomicExpressionParserRuleCall_1; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorNotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cBitwiseNotExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Not Expression Rule
		//// Example: !A, !false, !(A or B)
		//// At the latter we need the parents to indicate the right binding.
		//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
		//NotExpression returns Expression:
		//    {OperatorExpression} operator=NotOperator subExpressions+=(NotExpression)
		//    | BitwiseNotExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperatorExpression} operator=NotOperator subExpressions+=(NotExpression)
		//| BitwiseNotExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OperatorExpression} operator=NotOperator subExpressions+=(NotExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=NotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//NotOperator
		public RuleCall getOperatorNotOperatorEnumRuleCall_0_1_0() { return cOperatorNotOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=(NotExpression)
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//(NotExpression)
		public RuleCall getSubExpressionsNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsNotExpressionParserRuleCall_0_2_0; }
		
		//BitwiseNotExpression
		public RuleCall getBitwiseNotExpressionParserRuleCall_1() { return cBitwiseNotExpressionParserRuleCall_1; }
	}
	public class ValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ValuedExpression");
		private final RuleCall cShiftExpressionsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Valued Expression Rule
		//// Everything that evaluates to a primitive number value.
		//// Similar to the boolean rule this rule is there for overview reasons.
		//ValuedExpression returns Expression:
		//    ShiftExpressions;
		@Override public ParserRule getRule() { return rule; }
		
		//ShiftExpressions
		public RuleCall getShiftExpressionsParserRuleCall() { return cShiftExpressionsParserRuleCall; }
	}
	public class ShiftExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ShiftExpressions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOperatorExpressionSubExpressionsAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorShiftLeftOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_0_2_0 = (RuleCall)cSubExpressionsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cLessThanSignLessThanSignKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorShiftRightOperatorEnumRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cOperatorExpressionSubExpressionsAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperatorShiftRightUnsignedOperatorEnumRuleCall_1_2_1_0 = (RuleCall)cOperatorAssignment_1_2_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_2_2_0 = (RuleCall)cSubExpressionsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_2_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_3_1.eContents().get(0);
		
		//ShiftExpressions returns Expression:
		//    SumExpression
		//    (
		//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
		//    |
		//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
		//    |
		//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SumExpression
		//(
		//({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
		//)*
		public Group getGroup() { return cGroup; }
		
		//SumExpression
		public RuleCall getSumExpressionParserRuleCall_0() { return cSumExpressionParserRuleCall_0; }
		
		//(
		//({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0_0() { return cOperatorExpressionSubExpressionsAction_1_0_0; }
		
		//operator=ShiftLeftOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//ShiftLeftOperator
		public RuleCall getOperatorShiftLeftOperatorEnumRuleCall_1_0_1_0() { return cOperatorShiftLeftOperatorEnumRuleCall_1_0_1_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_0_2() { return cSubExpressionsAssignment_1_0_2; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_0_2_0() { return cSubExpressionsSumExpressionParserRuleCall_1_0_2_0; }
		
		//('<<' subExpressions+=SumExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_1_0_3_0() { return cLessThanSignLessThanSignKeyword_1_0_3_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_0_3_1() { return cSubExpressionsAssignment_1_0_3_1; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_0_3_1_0() { return cSubExpressionsSumExpressionParserRuleCall_1_0_3_1_0; }
		
		//({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_1_0() { return cOperatorExpressionSubExpressionsAction_1_1_0; }
		
		//operator=ShiftRightOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//ShiftRightOperator
		public RuleCall getOperatorShiftRightOperatorEnumRuleCall_1_1_1_0() { return cOperatorShiftRightOperatorEnumRuleCall_1_1_1_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_1_2() { return cSubExpressionsAssignment_1_1_2; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_1_2_0() { return cSubExpressionsSumExpressionParserRuleCall_1_1_2_0; }
		
		//('>>' subExpressions+=SumExpression)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_1_3_0() { return cGreaterThanSignGreaterThanSignKeyword_1_1_3_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_1_3_1() { return cSubExpressionsAssignment_1_1_3_1; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_1_3_1_0() { return cSubExpressionsSumExpressionParserRuleCall_1_1_3_1_0; }
		
		//({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_2_0() { return cOperatorExpressionSubExpressionsAction_1_2_0; }
		
		//operator=ShiftRightUnsignedOperator
		public Assignment getOperatorAssignment_1_2_1() { return cOperatorAssignment_1_2_1; }
		
		//ShiftRightUnsignedOperator
		public RuleCall getOperatorShiftRightUnsignedOperatorEnumRuleCall_1_2_1_0() { return cOperatorShiftRightUnsignedOperatorEnumRuleCall_1_2_1_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_2_2() { return cSubExpressionsAssignment_1_2_2; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_2_2_0() { return cSubExpressionsSumExpressionParserRuleCall_1_2_2_0; }
		
		//('>>>' subExpressions+=SumExpression)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//'>>>'
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_3_0() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_3_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_2_3_1() { return cSubExpressionsAssignment_1_2_3_1; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_2_3_1_0() { return cSubExpressionsSumExpressionParserRuleCall_1_2_3_1_0; }
	}
	public class ShiftLeftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ShiftLeftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorShiftLeftOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsShiftRightExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLessThanSignLessThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsShiftRightExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//ShiftLeftExpression returns Expression:
		//    SumExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
		//        ('<<' subExpressions+=ShiftRightExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//SumExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
		//    ('<<' subExpressions+=ShiftRightExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//SumExpression
		public RuleCall getSumExpressionParserRuleCall_0() { return cSumExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
		//    ('<<' subExpressions+=ShiftRightExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=ShiftLeftOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//ShiftLeftOperator
		public RuleCall getOperatorShiftLeftOperatorEnumRuleCall_1_1_0_0() { return cOperatorShiftLeftOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=ShiftRightExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//ShiftRightExpression
		public RuleCall getSubExpressionsShiftRightExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsShiftRightExpressionParserRuleCall_1_1_1_0; }
		
		//('<<' subExpressions+=ShiftRightExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_1_2_0() { return cLessThanSignLessThanSignKeyword_1_2_0; }
		
		//subExpressions+=ShiftRightExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//ShiftRightExpression
		public RuleCall getSubExpressionsShiftRightExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsShiftRightExpressionParserRuleCall_1_2_1_0; }
	}
	public class ShiftRightExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorShiftRightOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//ShiftRightExpression returns Expression:
		//    SumExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
		//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//SumExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
		//    ('>>' subExpressions+=ShiftRightUnsignedExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//SumExpression
		public RuleCall getSumExpressionParserRuleCall_0() { return cSumExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
		//    ('>>' subExpressions+=ShiftRightUnsignedExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=ShiftRightOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//ShiftRightOperator
		public RuleCall getOperatorShiftRightOperatorEnumRuleCall_1_1_0_0() { return cOperatorShiftRightOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=ShiftRightUnsignedExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//ShiftRightUnsignedExpression
		public RuleCall getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_1_1_0; }
		
		//('>>' subExpressions+=ShiftRightUnsignedExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_2_0() { return cGreaterThanSignGreaterThanSignKeyword_1_2_0; }
		
		//subExpressions+=ShiftRightUnsignedExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//ShiftRightUnsignedExpression
		public RuleCall getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_2_1_0; }
	}
	public class ShiftRightUnsignedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightUnsignedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorShiftRightUnsignedOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsSumExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//ShiftRightUnsignedExpression returns Expression:
		//    SumExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
		//        ('>>>' subExpressions+=SumExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//SumExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
		//    ('>>>' subExpressions+=SumExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//SumExpression
		public RuleCall getSumExpressionParserRuleCall_0() { return cSumExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
		//    ('>>>' subExpressions+=SumExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=ShiftRightUnsignedOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//ShiftRightUnsignedOperator
		public RuleCall getOperatorShiftRightUnsignedOperatorEnumRuleCall_1_1_0_0() { return cOperatorShiftRightUnsignedOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsSumExpressionParserRuleCall_1_1_1_0; }
		
		//('>>>' subExpressions+=SumExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'>>>'
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_0() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_0; }
		
		//subExpressions+=SumExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//SumExpression
		public RuleCall getSubExpressionsSumExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsSumExpressionParserRuleCall_1_2_1_0; }
	}
	public class SumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.SumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProductExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOperatorExpressionSubExpressionsAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorAddOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubExpressionsProductExpressionParserRuleCall_1_0_2_0 = (RuleCall)cSubExpressionsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cPlusSignKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cSubExpressionsProductExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorSubOperatorEnumRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubExpressionsProductExpressionParserRuleCall_1_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cSubExpressionsProductExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_3_1.eContents().get(0);
		
		//SumExpression returns Expression:
		//    ProductExpression
		//    (
		//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
		//    |
		//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ProductExpression
		//(
		//({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
		//)*
		public Group getGroup() { return cGroup; }
		
		//ProductExpression
		public RuleCall getProductExpressionParserRuleCall_0() { return cProductExpressionParserRuleCall_0; }
		
		//(
		//({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0_0() { return cOperatorExpressionSubExpressionsAction_1_0_0; }
		
		//operator=AddOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//AddOperator
		public RuleCall getOperatorAddOperatorEnumRuleCall_1_0_1_0() { return cOperatorAddOperatorEnumRuleCall_1_0_1_0; }
		
		//subExpressions+=ProductExpression
		public Assignment getSubExpressionsAssignment_1_0_2() { return cSubExpressionsAssignment_1_0_2; }
		
		//ProductExpression
		public RuleCall getSubExpressionsProductExpressionParserRuleCall_1_0_2_0() { return cSubExpressionsProductExpressionParserRuleCall_1_0_2_0; }
		
		//('+' subExpressions+=ProductExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_3_0() { return cPlusSignKeyword_1_0_3_0; }
		
		//subExpressions+=ProductExpression
		public Assignment getSubExpressionsAssignment_1_0_3_1() { return cSubExpressionsAssignment_1_0_3_1; }
		
		//ProductExpression
		public RuleCall getSubExpressionsProductExpressionParserRuleCall_1_0_3_1_0() { return cSubExpressionsProductExpressionParserRuleCall_1_0_3_1_0; }
		
		//({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_1_0() { return cOperatorExpressionSubExpressionsAction_1_1_0; }
		
		//operator=SubOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//SubOperator
		public RuleCall getOperatorSubOperatorEnumRuleCall_1_1_1_0() { return cOperatorSubOperatorEnumRuleCall_1_1_1_0; }
		
		//subExpressions+=ProductExpression
		public Assignment getSubExpressionsAssignment_1_1_2() { return cSubExpressionsAssignment_1_1_2; }
		
		//ProductExpression
		public RuleCall getSubExpressionsProductExpressionParserRuleCall_1_1_2_0() { return cSubExpressionsProductExpressionParserRuleCall_1_1_2_0; }
		
		//('-' subExpressions+=ProductExpression)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_3_0() { return cHyphenMinusKeyword_1_1_3_0; }
		
		//subExpressions+=ProductExpression
		public Assignment getSubExpressionsAssignment_1_1_3_1() { return cSubExpressionsAssignment_1_1_3_1; }
		
		//ProductExpression
		public RuleCall getSubExpressionsProductExpressionParserRuleCall_1_1_3_1_0() { return cSubExpressionsProductExpressionParserRuleCall_1_1_3_1_0; }
	}
	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProductExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAddOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsProductExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Add Expression Rule
		//// The rule directs the 'sub expression' rule and creates an operator expression for additions
		//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
		//// Example: 1 + 2
		//AddExpression returns Expression:
		//    ProductExpression
		//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ProductExpression
		//({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
		public Group getGroup() { return cGroup; }
		
		//ProductExpression
		public RuleCall getProductExpressionParserRuleCall_0() { return cProductExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//operator=AddOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AddOperator
		public RuleCall getOperatorAddOperatorEnumRuleCall_1_1_0() { return cOperatorAddOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=ProductExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//ProductExpression
		public RuleCall getSubExpressionsProductExpressionParserRuleCall_1_2_0() { return cSubExpressionsProductExpressionParserRuleCall_1_2_0; }
	}
	public class SubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.SubExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProductExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorSubOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsProductExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Sub Expression Rule
		//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
		//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
		//// Example: var(A) - i
		//SubExpression returns Expression:
		//    ProductExpression
		//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ProductExpression
		//({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
		public Group getGroup() { return cGroup; }
		
		//ProductExpression
		public RuleCall getProductExpressionParserRuleCall_0() { return cProductExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//operator=SubOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//SubOperator
		public RuleCall getOperatorSubOperatorEnumRuleCall_1_1_0() { return cOperatorSubOperatorEnumRuleCall_1_1_0; }
		
		//subExpressions+=ProductExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }
		
		//ProductExpression
		public RuleCall getSubExpressionsProductExpressionParserRuleCall_1_2_0() { return cSubExpressionsProductExpressionParserRuleCall_1_2_0; }
	}
	public class ProductExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ProductExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOperatorExpressionSubExpressionsAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorMultOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_0_2_0 = (RuleCall)cSubExpressionsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorDivOperatorEnumRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cSolidusKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cOperatorExpressionSubExpressionsAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperatorModOperatorEnumRuleCall_1_2_1_0 = (RuleCall)cOperatorAssignment_1_2_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_2_2_0 = (RuleCall)cSubExpressionsAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cPercentSignKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_2_3_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_3_1.eContents().get(0);
		
		//ProductExpression returns Expression:
		//    NegExpression
		//    (
		//    ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
		//    |
		//    ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
		//    |
		//    ({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NegExpression
		//(
		//({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
		//)*
		public Group getGroup() { return cGroup; }
		
		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_0() { return cNegExpressionParserRuleCall_0; }
		
		//(
		//({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
		//|
		//({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0_0() { return cOperatorExpressionSubExpressionsAction_1_0_0; }
		
		//operator=MultOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//MultOperator
		public RuleCall getOperatorMultOperatorEnumRuleCall_1_0_1_0() { return cOperatorMultOperatorEnumRuleCall_1_0_1_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_0_2() { return cSubExpressionsAssignment_1_0_2; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_0_2_0() { return cSubExpressionsNegExpressionParserRuleCall_1_0_2_0; }
		
		//('*' subExpressions+=NegExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_3_0() { return cAsteriskKeyword_1_0_3_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_0_3_1() { return cSubExpressionsAssignment_1_0_3_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_0_3_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_0_3_1_0; }
		
		//({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_1_0() { return cOperatorExpressionSubExpressionsAction_1_1_0; }
		
		//operator=DivOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//DivOperator
		public RuleCall getOperatorDivOperatorEnumRuleCall_1_1_1_0() { return cOperatorDivOperatorEnumRuleCall_1_1_1_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_1_2() { return cSubExpressionsAssignment_1_1_2; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_1_2_0() { return cSubExpressionsNegExpressionParserRuleCall_1_1_2_0; }
		
		//('/' subExpressions+=NegExpression)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_3_0() { return cSolidusKeyword_1_1_3_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_1_3_1() { return cSubExpressionsAssignment_1_1_3_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_1_3_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_1_3_1_0; }
		
		//({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_2_0() { return cOperatorExpressionSubExpressionsAction_1_2_0; }
		
		//operator=ModOperator
		public Assignment getOperatorAssignment_1_2_1() { return cOperatorAssignment_1_2_1; }
		
		//ModOperator
		public RuleCall getOperatorModOperatorEnumRuleCall_1_2_1_0() { return cOperatorModOperatorEnumRuleCall_1_2_1_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_2_2() { return cSubExpressionsAssignment_1_2_2; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_2_2_0() { return cSubExpressionsNegExpressionParserRuleCall_1_2_2_0; }
		
		//('%' subExpressions+=NegExpression)*
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_2_3_0() { return cPercentSignKeyword_1_2_3_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_2_3_1() { return cSubExpressionsAssignment_1_2_3_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_2_3_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_2_3_1_0; }
	}
	public class MultExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.MultExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorMultOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Mult Expression Rule
		//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
		//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
		//// Example: 2 * 4
		//MultExpression returns Expression:
		//    NegExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=MultOperator subExpressions+=NegExpression)
		//        ('*' subExpressions+=NegExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//NegExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=MultOperator subExpressions+=NegExpression)
		//    ('*' subExpressions+=NegExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_0() { return cNegExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=MultOperator subExpressions+=NegExpression)
		//    ('*' subExpressions+=NegExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=MultOperator subExpressions+=NegExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=MultOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//MultOperator
		public RuleCall getOperatorMultOperatorEnumRuleCall_1_1_0_0() { return cOperatorMultOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_1_1_0; }
		
		//('*' subExpressions+=NegExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_2_0() { return cAsteriskKeyword_1_2_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_2_1_0; }
	}
	public class DivExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.DivExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorDivOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cSolidusKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Div Expression Rule
		//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
		//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
		//// Example: 2 / 4
		//DivExpression returns Expression:
		//    NegExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=DivOperator subExpressions+=NegExpression)
		//        ('/' subExpressions+=NegExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//NegExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=DivOperator subExpressions+=NegExpression)
		//    ('/' subExpressions+=NegExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_0() { return cNegExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=DivOperator subExpressions+=NegExpression)
		//    ('/' subExpressions+=NegExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=DivOperator subExpressions+=NegExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=DivOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//DivOperator
		public RuleCall getOperatorDivOperatorEnumRuleCall_1_1_0_0() { return cOperatorDivOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_1_1_0; }
		
		//('/' subExpressions+=NegExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'/'
		public Keyword getSolidusKeyword_1_2_0() { return cSolidusKeyword_1_2_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_2_1_0; }
	}
	public class ModExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ModExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorModOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPercentSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//// Mod Expression Rule
		//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
		//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
		//// Example: i % j
		//ModExpression returns Expression:
		//    NegExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=ModOperator subExpressions+=NegExpression)
		//        ('%' subExpressions+=NegExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//NegExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ModOperator subExpressions+=NegExpression)
		//    ('%' subExpressions+=NegExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_0() { return cNegExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=ModOperator subExpressions+=NegExpression)
		//    ('%' subExpressions+=NegExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=ModOperator subExpressions+=NegExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=ModOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//ModOperator
		public RuleCall getOperatorModOperatorEnumRuleCall_1_1_0_0() { return cOperatorModOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_1_1_0; }
		
		//('%' subExpressions+=NegExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_2_0() { return cPercentSignKeyword_1_2_0; }
		
		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsNegExpressionParserRuleCall_1_2_1_0; }
	}
	public class NegExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.NegExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorSubOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cTernaryOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Neg Expression Rule
		//// The rule negates the actual instance or directs the atomic value expression rule if necessary.
		//// Example: -i, -2
		//NegExpression returns Expression:
		//    {OperatorExpression} operator=SubOperator subExpressions+=(NegExpression)
		//    | TernaryOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperatorExpression} operator=SubOperator subExpressions+=(NegExpression)
		//| TernaryOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OperatorExpression} operator=SubOperator subExpressions+=(NegExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=SubOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//SubOperator
		public RuleCall getOperatorSubOperatorEnumRuleCall_0_1_0() { return cOperatorSubOperatorEnumRuleCall_0_1_0; }
		
		//subExpressions+=(NegExpression)
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }
		
		//(NegExpression)
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_0_2_0() { return cSubExpressionsNegExpressionParserRuleCall_0_2_0; }
		
		//TernaryOperation
		public RuleCall getTernaryOperationParserRuleCall_1() { return cTernaryOperationParserRuleCall_1; }
	}
	public class TernaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.TernaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0 = (RuleCall)cSubExpressionsAssignment_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperatorConditionalOperatorEnumRuleCall_0_2_0 = (RuleCall)cOperatorAssignment_0_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0 = (RuleCall)cSubExpressionsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cColonKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_0_4_1_0 = (RuleCall)cSubExpressionsAssignment_0_4_1.eContents().get(0);
		private final RuleCall cInitExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TernaryOperation returns Expression:
		//    {OperatorExpression}
		//    subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
		//    | InitExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperatorExpression}
		//subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
		//| InitExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OperatorExpression}
		//subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//subExpressions += AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_0_1() { return cSubExpressionsAssignment_0_1; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0; }
		
		//operator=ConditionalOperator
		public Assignment getOperatorAssignment_0_2() { return cOperatorAssignment_0_2; }
		
		//ConditionalOperator
		public RuleCall getOperatorConditionalOperatorEnumRuleCall_0_2_0() { return cOperatorConditionalOperatorEnumRuleCall_0_2_0; }
		
		//subExpressions += AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_0_3() { return cSubExpressionsAssignment_0_3; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0; }
		
		//(':' subExpressions += AtomicValuedExpression)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//':'
		public Keyword getColonKeyword_0_4_0() { return cColonKeyword_0_4_0; }
		
		//subExpressions += AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_0_4_1() { return cSubExpressionsAssignment_0_4_1; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_0_4_1_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_0_4_1_0; }
		
		//InitExpression
		public RuleCall getInitExpressionParserRuleCall_1() { return cInitExpressionParserRuleCall_1; }
	}
	public class InitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.InitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFbyExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorInitOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsFbyExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsFbyExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//InitExpression returns Expression:
		//    FbyExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=InitOperator subExpressions+=FbyExpression)
		//        ('->' subExpressions+=FbyExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//FbyExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=InitOperator subExpressions+=FbyExpression)
		//    ('->' subExpressions+=FbyExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//FbyExpression
		public RuleCall getFbyExpressionParserRuleCall_0() { return cFbyExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=InitOperator subExpressions+=FbyExpression)
		//    ('->' subExpressions+=FbyExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=InitOperator subExpressions+=FbyExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=InitOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//InitOperator
		public RuleCall getOperatorInitOperatorEnumRuleCall_1_1_0_0() { return cOperatorInitOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=FbyExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//FbyExpression
		public RuleCall getSubExpressionsFbyExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsFbyExpressionParserRuleCall_1_1_1_0; }
		
		//('->' subExpressions+=FbyExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2_0() { return cHyphenMinusGreaterThanSignKeyword_1_2_0; }
		
		//subExpressions+=FbyExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//FbyExpression
		public RuleCall getSubExpressionsFbyExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsFbyExpressionParserRuleCall_1_2_1_0; }
	}
	public class FbyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.FbyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSfbyExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorFbyOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsSfbyExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFbyKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsSfbyExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//FbyExpression returns Expression:
		//    SfbyExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=FbyOperator subExpressions+=SfbyExpression)
		//        ('fby' subExpressions+=SfbyExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//SfbyExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=FbyOperator subExpressions+=SfbyExpression)
		//    ('fby' subExpressions+=SfbyExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//SfbyExpression
		public RuleCall getSfbyExpressionParserRuleCall_0() { return cSfbyExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=FbyOperator subExpressions+=SfbyExpression)
		//    ('fby' subExpressions+=SfbyExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=FbyOperator subExpressions+=SfbyExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=FbyOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//FbyOperator
		public RuleCall getOperatorFbyOperatorEnumRuleCall_1_1_0_0() { return cOperatorFbyOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=SfbyExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//SfbyExpression
		public RuleCall getSubExpressionsSfbyExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsSfbyExpressionParserRuleCall_1_1_1_0; }
		
		//('fby' subExpressions+=SfbyExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'fby'
		public Keyword getFbyKeyword_1_2_0() { return cFbyKeyword_1_2_0; }
		
		//subExpressions+=SfbyExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//SfbyExpression
		public RuleCall getSubExpressionsSfbyExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsSfbyExpressionParserRuleCall_1_2_1_0; }
	}
	public class SfbyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.SfbyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicValuedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorSfbyOperatorEnumRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_1_1_1_0 = (RuleCall)cSubExpressionsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cSfbyKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSubExpressionsAssignment_1_2_1.eContents().get(0);
		
		//SfbyExpression returns Expression:
		//    AtomicValuedExpression
		//    ({OperatorExpression.subExpressions+=current}
		//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
		//        ('sfby' subExpressions+=AtomicValuedExpression)*
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicValuedExpression
		//({OperatorExpression.subExpressions+=current}
		//    (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
		//    ('sfby' subExpressions+=AtomicValuedExpression)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//AtomicValuedExpression
		public RuleCall getAtomicValuedExpressionParserRuleCall_0() { return cAtomicValuedExpressionParserRuleCall_0; }
		
		//({OperatorExpression.subExpressions+=current}
		//    (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
		//    ('sfby' subExpressions+=AtomicValuedExpression)*
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }
		
		//(operator=SfbyOperator subExpressions+=AtomicValuedExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=SfbyOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//SfbyOperator
		public RuleCall getOperatorSfbyOperatorEnumRuleCall_1_1_0_0() { return cOperatorSfbyOperatorEnumRuleCall_1_1_0_0; }
		
		//subExpressions+=AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_1_1_1() { return cSubExpressionsAssignment_1_1_1; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_1_1_1_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_1_1_1_0; }
		
		//('sfby' subExpressions+=AtomicValuedExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'sfby'
		public Keyword getSfbyKeyword_1_2_0() { return cSfbyKeyword_1_2_0; }
		
		//subExpressions+=AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_1_2_1() { return cSubExpressionsAssignment_1_2_1; }
		
		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBoolExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cReferenceCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRandomCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRandomizeCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cValuedObjectTestExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSpecialAccessExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTextExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//// Atomic Expression Rule
		//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
		//// encapsulated in braces, a function call or a text expression.
		//// Basically, the rule chain may start over again at this point.
		//AtomicExpression returns Expression:
		//    BoolValue
		//    | '(' BoolExpression ')'
		//    | ReferenceCall
		//    | FunctionCall
		//    | RandomCall
		//    | RandomizeCall
		//    | ValuedObjectTestExpression // Last to allow detection of calls
		//    | SpecialAccessExpression
		//    | TextExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolValue
		//| '(' BoolExpression ')'
		//| ReferenceCall
		//| FunctionCall
		//| RandomCall
		//| RandomizeCall
		//| ValuedObjectTestExpression // Last to allow detection of calls
		//| SpecialAccessExpression
		//| TextExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolValue
		public RuleCall getBoolValueParserRuleCall_0() { return cBoolValueParserRuleCall_0; }
		
		//'(' BoolExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//BoolExpression
		public RuleCall getBoolExpressionParserRuleCall_1_1() { return cBoolExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//ReferenceCall
		public RuleCall getReferenceCallParserRuleCall_2() { return cReferenceCallParserRuleCall_2; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }
		
		//RandomCall
		public RuleCall getRandomCallParserRuleCall_4() { return cRandomCallParserRuleCall_4; }
		
		//RandomizeCall
		public RuleCall getRandomizeCallParserRuleCall_5() { return cRandomizeCallParserRuleCall_5; }
		
		//ValuedObjectTestExpression
		public RuleCall getValuedObjectTestExpressionParserRuleCall_6() { return cValuedObjectTestExpressionParserRuleCall_6; }
		
		//SpecialAccessExpression
		public RuleCall getSpecialAccessExpressionParserRuleCall_7() { return cSpecialAccessExpressionParserRuleCall_7; }
		
		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_8() { return cTextExpressionParserRuleCall_8; }
	}
	public class AtomicValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.AtomicValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVectorValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cAtomicExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// Atomic Valued Expression Rule
		//// An atomic valued expression is either a simple int float or string literal, another valued expression
		//// encapsulated in braces, or a atomic expression.
		//// Basically, the rule chain may start over again at this point.
		//AtomicValuedExpression returns Expression:
		//    IntValue
		//    | FloatValue
		//    | StringValue
		//    | VectorValue
		//    | NullValue
		//    | '(' ValuedExpression ')'
		//    | AtomicExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue
		//| FloatValue
		//| StringValue
		//| VectorValue
		//| NullValue
		//| '(' ValuedExpression ')'
		//| AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
		
		//VectorValue
		public RuleCall getVectorValueParserRuleCall_3() { return cVectorValueParserRuleCall_3; }
		
		//NullValue
		public RuleCall getNullValueParserRuleCall_4() { return cNullValueParserRuleCall_4; }
		
		//'(' ValuedExpression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_5_1() { return cValuedExpressionParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_6() { return cAtomicExpressionParserRuleCall_6; }
	}
	public class BoolScheduleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BoolScheduleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cScheduleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cScheduleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_1_1_0 = (RuleCall)cScheduleAssignment_1_1.eContents().get(0);
		
		//// Boolean expression with scheduling directives.
		//// Is meant to be used in derived grammars. Do not delete this rule.
		//BoolScheduleExpression returns Expression:
		//    LogicalOrExpression
		//    ('schedule' schedule += ScheduleObjectReference)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression
		//('schedule' schedule += ScheduleObjectReference)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }
		
		//('schedule' schedule += ScheduleObjectReference)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'schedule'
		public Keyword getScheduleKeyword_1_0() { return cScheduleKeyword_1_0; }
		
		//schedule += ScheduleObjectReference
		public Assignment getScheduleAssignment_1_1() { return cScheduleAssignment_1_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_1_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_1_1_0; }
	}
	public class ValuedObjectTestExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectTestExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOperatorAlternatives_0_1_0 = (Alternatives)cOperatorAssignment_0_1.eContents().get(0);
		private final RuleCall cOperatorPreOperatorEnumRuleCall_0_1_0_0 = (RuleCall)cOperatorAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cOperatorValOperatorEnumRuleCall_0_1_0_1 = (RuleCall)cOperatorAlternatives_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0 = (RuleCall)cSubExpressionsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cSubExpressionsValuedObjectReferenceParserRuleCall_0_4_1_0 = (RuleCall)cSubExpressionsAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cValuedObjectReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Valued Object Test Expression Rule
		//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
		//// valued object reference.
		//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
		//ValuedObjectTestExpression returns Expression:
		//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
		//    | ValuedObjectReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
		//| ValuedObjectReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }
		
		//operator=(PreOperator|ValOperator)
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//(PreOperator|ValOperator)
		public Alternatives getOperatorAlternatives_0_1_0() { return cOperatorAlternatives_0_1_0; }
		
		//PreOperator
		public RuleCall getOperatorPreOperatorEnumRuleCall_0_1_0_0() { return cOperatorPreOperatorEnumRuleCall_0_1_0_0; }
		
		//ValOperator
		public RuleCall getOperatorValOperatorEnumRuleCall_0_1_0_1() { return cOperatorValOperatorEnumRuleCall_0_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//subExpressions+=ValuedObjectTestExpression
		public Assignment getSubExpressionsAssignment_0_3() { return cSubExpressionsAssignment_0_3; }
		
		//ValuedObjectTestExpression
		public RuleCall getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0() { return cSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0; }
		
		//(',' subExpressions+=ValuedObjectReference)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }
		
		//subExpressions+=ValuedObjectReference
		public Assignment getSubExpressionsAssignment_0_4_1() { return cSubExpressionsAssignment_0_4_1; }
		
		//ValuedObjectReference
		public RuleCall getSubExpressionsValuedObjectReferenceParserRuleCall_0_4_1_0() { return cSubExpressionsValuedObjectReferenceParserRuleCall_0_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//ValuedObjectReference
		public RuleCall getValuedObjectReferenceParserRuleCall_1() { return cValuedObjectReferenceParserRuleCall_1; }
	}
	public class SpecialAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.SpecialAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAccessStaticKeyword_0_0 = (Keyword)cAccessAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cContainerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cContainerNamedObjectCrossReference_2_0_0 = (CrossReference)cContainerAssignment_2_0.eContents().get(0);
		private final RuleCall cContainerNamedObjectPrimeIDParserRuleCall_2_0_0_1 = (RuleCall)cContainerNamedObjectCrossReference_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetNamedObjectCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetNamedObjectPrimeIDParserRuleCall_3_0_1 = (RuleCall)cTargetNamedObjectCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubReferenceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubReferenceValuedObjectReferenceParserRuleCall_6_0 = (RuleCall)cSubReferenceAssignment_6.eContents().get(0);
		
		//// Accesses a arbitrary target in a static way (needs to be adjusted in the scoper of the deriving language)
		//// Example: static(Constants).MAX
		//SpecialAccessExpression returns SpecialAccessExpression:
		//    access='static' '('
		//    (container=[annotations::NamedObject|PrimeID] '.')?
		//    target=[annotations::NamedObject|PrimeID]
		//    ')' '.' subReference=ValuedObjectReference;
		@Override public ParserRule getRule() { return rule; }
		
		//access='static' '('
		//(container=[annotations::NamedObject|PrimeID] '.')?
		//target=[annotations::NamedObject|PrimeID]
		//')' '.' subReference=ValuedObjectReference
		public Group getGroup() { return cGroup; }
		
		//access='static'
		public Assignment getAccessAssignment_0() { return cAccessAssignment_0; }
		
		//'static'
		public Keyword getAccessStaticKeyword_0_0() { return cAccessStaticKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(container=[annotations::NamedObject|PrimeID] '.')?
		public Group getGroup_2() { return cGroup_2; }
		
		//container=[annotations::NamedObject|PrimeID]
		public Assignment getContainerAssignment_2_0() { return cContainerAssignment_2_0; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getContainerNamedObjectCrossReference_2_0_0() { return cContainerNamedObjectCrossReference_2_0_0; }
		
		//PrimeID
		public RuleCall getContainerNamedObjectPrimeIDParserRuleCall_2_0_0_1() { return cContainerNamedObjectPrimeIDParserRuleCall_2_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//target=[annotations::NamedObject|PrimeID]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getTargetNamedObjectCrossReference_3_0() { return cTargetNamedObjectCrossReference_3_0; }
		
		//PrimeID
		public RuleCall getTargetNamedObjectPrimeIDParserRuleCall_3_0_1() { return cTargetNamedObjectPrimeIDParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//subReference=ValuedObjectReference
		public Assignment getSubReferenceAssignment_6() { return cSubReferenceAssignment_6; }
		
		//ValuedObjectReference
		public RuleCall getSubReferenceValuedObjectReferenceParserRuleCall_6_0() { return cSubReferenceValuedObjectReferenceParserRuleCall_6_0; }
	}
	public class PrimeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.PrimeID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// ID with primes
		//PrimeID returns ecore::EString:
		//  ID ("'")*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("'")*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("'")*
		public Keyword getApostropheKeyword_1() { return cApostropheKeyword_1; }
	}
	public class ValuedObjectReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ValuedObjectReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuedObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_0_0 = (CrossReference)cValuedObjectAssignment_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubReferenceValuedObjectReferenceParserRuleCall_2_1_0 = (RuleCall)cSubReferenceAssignment_2_1.eContents().get(0);
		
		//// Valued Object Reference Rule
		//// References a valued object with arbitrary (including none) indices part.
		//// Example: A, B
		//ValuedObjectReference returns ValuedObjectReference:
		//    valuedObject=[ValuedObject|PrimeID]
		//    ('[' indices+=Expression ']')*
		//    ('.' subReference=ValuedObjectReference)?;
		@Override public ParserRule getRule() { return rule; }
		
		//valuedObject=[ValuedObject|PrimeID]
		//('[' indices+=Expression ']')*
		//('.' subReference=ValuedObjectReference)?
		public Group getGroup() { return cGroup; }
		
		//valuedObject=[ValuedObject|PrimeID]
		public Assignment getValuedObjectAssignment_0() { return cValuedObjectAssignment_0; }
		
		//[ValuedObject|PrimeID]
		public CrossReference getValuedObjectValuedObjectCrossReference_0_0() { return cValuedObjectValuedObjectCrossReference_0_0; }
		
		//PrimeID
		public RuleCall getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1() { return cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1; }
		
		//('[' indices+=Expression ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indices+=Expression
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }
		
		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_1_1_0() { return cIndicesExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//('.' subReference=ValuedObjectReference)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//subReference=ValuedObjectReference
		public Assignment getSubReferenceAssignment_2_1() { return cSubReferenceAssignment_2_1; }
		
		//ValuedObjectReference
		public RuleCall getSubReferenceValuedObjectReferenceParserRuleCall_2_1_0() { return cSubReferenceValuedObjectReferenceParserRuleCall_2_1_0; }
	}
	public class ScheduleObjectReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ScheduleObjectReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuedObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_0_0 = (CrossReference)cValuedObjectAssignment_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_0_0.eContents().get(1);
		private final Assignment cPriorityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_1_0 = (RuleCall)cPriorityAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAnnotatedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationsQuotedStringAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ScheduleObjectReference returns ScheduleObjectReference:
		//    valuedObject=[ValuedObject|PrimeID]
		//    priority=INT
		//    ('annotated(' (annotations += QuotedStringAnnotation)+ ')')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//valuedObject=[ValuedObject|PrimeID]
		//priority=INT
		//('annotated(' (annotations += QuotedStringAnnotation)+ ')')?
		public Group getGroup() { return cGroup; }
		
		//valuedObject=[ValuedObject|PrimeID]
		public Assignment getValuedObjectAssignment_0() { return cValuedObjectAssignment_0; }
		
		//[ValuedObject|PrimeID]
		public CrossReference getValuedObjectValuedObjectCrossReference_0_0() { return cValuedObjectValuedObjectCrossReference_0_0; }
		
		//PrimeID
		public RuleCall getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1() { return cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1; }
		
		//priority=INT
		public Assignment getPriorityAssignment_1() { return cPriorityAssignment_1; }
		
		//INT
		public RuleCall getPriorityINTTerminalRuleCall_1_0() { return cPriorityINTTerminalRuleCall_1_0; }
		
		//('annotated(' (annotations += QuotedStringAnnotation)+ ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'annotated('
		public Keyword getAnnotatedKeyword_2_0() { return cAnnotatedKeyword_2_0; }
		
		//(annotations += QuotedStringAnnotation)+
		public Assignment getAnnotationsAssignment_2_1() { return cAnnotationsAssignment_2_1; }
		
		//QuotedStringAnnotation
		public RuleCall getAnnotationsQuotedStringAnnotationParserRuleCall_2_1_0() { return cAnnotationsQuotedStringAnnotationParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ReferenceCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ReferenceCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSuperSuperKeyword_0_0 = (Keyword)cSuperAssignment_0.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuedObjectValuedObjectCrossReference_1_0 = (CrossReference)cValuedObjectAssignment_1.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectPrimeIDParserRuleCall_1_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndicesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_2_1_0 = (RuleCall)cIndicesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSubReferenceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubReferenceValuedObjectReferenceParserRuleCall_3_1_0 = (RuleCall)cSubReferenceAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cParametersAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_0_1_0 = (RuleCall)cParametersAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_0_2 = (Group)cGroup_4_0.eContents().get(2);
		private final Keyword cCommaKeyword_4_0_2_0 = (Keyword)cGroup_4_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_0_2_1_0 = (RuleCall)cParametersAssignment_4_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_3 = (Keyword)cGroup_4_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//// Reference Call Rule
		//// Calls to references. They may include a parameter list.
		//ReferenceCall returns ReferenceCall:
		//    super?='super.'?
		//    valuedObject=[ValuedObject|PrimeID]
		//    ('[' indices+=Expression ']')*
		//    ('.' subReference=ValuedObjectReference)?
		//    (
		//        ('(' parameters += Parameter
		//            (',' parameters += Parameter)* ')'
		//        ) | '()'
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//super?='super.'?
		//valuedObject=[ValuedObject|PrimeID]
		//('[' indices+=Expression ']')*
		//('.' subReference=ValuedObjectReference)?
		//(
		//    ('(' parameters += Parameter
		//        (',' parameters += Parameter)* ')'
		//    ) | '()'
		//)
		public Group getGroup() { return cGroup; }
		
		//super?='super.'?
		public Assignment getSuperAssignment_0() { return cSuperAssignment_0; }
		
		//'super.'
		public Keyword getSuperSuperKeyword_0_0() { return cSuperSuperKeyword_0_0; }
		
		//valuedObject=[ValuedObject|PrimeID]
		public Assignment getValuedObjectAssignment_1() { return cValuedObjectAssignment_1; }
		
		//[ValuedObject|PrimeID]
		public CrossReference getValuedObjectValuedObjectCrossReference_1_0() { return cValuedObjectValuedObjectCrossReference_1_0; }
		
		//PrimeID
		public RuleCall getValuedObjectValuedObjectPrimeIDParserRuleCall_1_0_1() { return cValuedObjectValuedObjectPrimeIDParserRuleCall_1_0_1; }
		
		//('[' indices+=Expression ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//indices+=Expression
		public Assignment getIndicesAssignment_2_1() { return cIndicesAssignment_2_1; }
		
		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_2_1_0() { return cIndicesExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//('.' subReference=ValuedObjectReference)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//subReference=ValuedObjectReference
		public Assignment getSubReferenceAssignment_3_1() { return cSubReferenceAssignment_3_1; }
		
		//ValuedObjectReference
		public RuleCall getSubReferenceValuedObjectReferenceParserRuleCall_3_1_0() { return cSubReferenceValuedObjectReferenceParserRuleCall_3_1_0; }
		
		//(
		//    ('(' parameters += Parameter
		//        (',' parameters += Parameter)* ')'
		//    ) | '()'
		//)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//('(' parameters += Parameter
		//    (',' parameters += Parameter)* ')'
		//)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_4_0_1() { return cParametersAssignment_4_0_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_1_0() { return cParametersParameterParserRuleCall_4_0_1_0; }
		
		//(',' parameters += Parameter)*
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }
		
		//','
		public Keyword getCommaKeyword_4_0_2_0() { return cCommaKeyword_4_0_2_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_4_0_2_1() { return cParametersAssignment_4_0_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_2_1_0() { return cParametersParameterParserRuleCall_4_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_0_3() { return cRightParenthesisKeyword_4_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_4_1() { return cLeftParenthesisRightParenthesisKeyword_4_1; }
	}
	public class RandomCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.RandomCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRandomKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Random Call Rule
		//// Calls the random function.
		//RandomCall returns RandomCall:
		//    {RandomCall}
		//    'random' ('()')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RandomCall}
		//'random' ('()')?
		public Group getGroup() { return cGroup; }
		
		//{RandomCall}
		public Action getRandomCallAction_0() { return cRandomCallAction_0; }
		
		//'random'
		public Keyword getRandomKeyword_1() { return cRandomKeyword_1; }
		
		//('()')?
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}
	public class RandomizeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.RandomizeCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomizeCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRandomizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Random Call Rule
		//// Calls the random function.
		//RandomizeCall returns RandomizeCall:
		//    {RandomizeCall}
		//    'randomize' ('()')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RandomizeCall}
		//'randomize' ('()')?
		public Group getGroup() { return cGroup; }
		
		//{RandomizeCall}
		public Action getRandomizeCallAction_0() { return cRandomizeCallAction_0; }
		
		//'randomize'
		public Keyword getRandomizeKeyword_1() { return cRandomizeKeyword_1; }
		
		//('()')?
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionNameIDTerminalRuleCall_1_0 = (RuleCall)cFunctionNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_0_2_1_0 = (RuleCall)cParametersAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//// Function Call Rule
		//// Calls to functions are indicated by angle brackets. They may include a parameter list.
		//FunctionCall returns FunctionCall:
		//    ('extern' functionName = ID
		//        (('(' parameters += Parameter
		//            (',' parameters += Parameter)* ')'
		//        ) | '()')
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//('extern' functionName = ID
		//    (('(' parameters += Parameter
		//        (',' parameters += Parameter)* ')'
		//    ) | '()')
		//)
		public Group getGroup() { return cGroup; }
		
		//'extern'
		public Keyword getExternKeyword_0() { return cExternKeyword_0; }
		
		//functionName = ID
		public Assignment getFunctionNameAssignment_1() { return cFunctionNameAssignment_1; }
		
		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_1_0() { return cFunctionNameIDTerminalRuleCall_1_0; }
		
		//(('(' parameters += Parameter
		//    (',' parameters += Parameter)* ')'
		//) | '()')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('(' parameters += Parameter
		//            (',' parameters += Parameter)* ')'
		//        )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_1_0() { return cParametersParameterParserRuleCall_2_0_1_0; }
		
		//(',' parameters += Parameter)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_2_0_2_1() { return cParametersAssignment_2_0_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_2_1_0() { return cParametersParameterParserRuleCall_2_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
	}
	public class PrintCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.PrintCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_0_2_1_0 = (RuleCall)cParametersAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//// Print Call Rule
		//// Calls the print function. They may include a parameter list.
		//// Do not use in expressions directly, use PrintCallEffect instead
		//PrintCall returns PrintCall:
		//    {PrintCall}
		//    'print'
		//    (
		//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
		//    |
		//        '()'
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintCall}
		//'print'
		//(
		//    ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
		//|
		//    '()'
		//)
		public Group getGroup() { return cGroup; }
		
		//{PrintCall}
		public Action getPrintCallAction_0() { return cPrintCallAction_0; }
		
		//'print'
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//(
		//    ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
		//|
		//    '()'
		//)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('(' parameters += Parameter (',' parameters += Parameter)* ')' )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_1_0() { return cParametersParameterParserRuleCall_2_0_1_0; }
		
		//(',' parameters += Parameter)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_2_0_2_1() { return cParametersAssignment_2_0_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_2_1_0() { return cParametersParameterParserRuleCall_2_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAccessTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAccessTypeParameterAccessTypeEnumRuleCall_0_0_0 = (RuleCall)cAccessTypeAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionValuedObjectReferenceParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// Parameter Rule
		//// The parameter rule is used by the function call rule. Every expression may be a paramter.
		//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
		//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
		//Parameter returns Parameter:
		//    (accessType = ParameterAccessType
		//    expression = ValuedObjectReference)
		//    |
		//    expression = Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(accessType = ParameterAccessType
		//expression = ValuedObjectReference)
		//|
		//expression = Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(accessType = ParameterAccessType
		//expression = ValuedObjectReference)
		public Group getGroup_0() { return cGroup_0; }
		
		//accessType = ParameterAccessType
		public Assignment getAccessTypeAssignment_0_0() { return cAccessTypeAssignment_0_0; }
		
		//ParameterAccessType
		public RuleCall getAccessTypeParameterAccessTypeEnumRuleCall_0_0_0() { return cAccessTypeParameterAccessTypeEnumRuleCall_0_0_0; }
		
		//expression = ValuedObjectReference
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//ValuedObjectReference
		public RuleCall getExpressionValuedObjectReferenceParserRuleCall_0_1_0() { return cExpressionValuedObjectReferenceParserRuleCall_0_1_0; }
		
		//expression = Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class TextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.TextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextHOSTCODETerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//// Text Expression Rule
		//// The text expression rule returns a text expression. Most times text expressions are used for host code.
		//// Example: 'printf(...)'
		//TextExpression returns TextExpression:
		//    (annotations += Annotation)*
		//    text=HOSTCODE;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations += Annotation)*
		//text=HOSTCODE
		public Group getGroup() { return cGroup; }
		
		//(annotations += Annotation)*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//text=HOSTCODE
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//HOSTCODE
		public RuleCall getTextHOSTCODETerminalRuleCall_1_0() { return cTextHOSTCODETerminalRuleCall_1_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue returns IntValue:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue returns FloatValue:
		//    value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}
	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BoolValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BoolValue returns BoolValue:
		//    value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue returns StringValue:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class VectorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.VectorValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cValuesVectorValueMemberParserRuleCall_1_0_0_0 = (RuleCall)cValuesAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cValuesVectorValueMemberParserRuleCall_1_0_1_1_0 = (RuleCall)cValuesAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cValuesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cValuesIntValueParserRuleCall_1_1_0_0 = (RuleCall)cValuesAssignment_1_1_0.eContents().get(0);
		private final Assignment cRangeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cRangeToKeyword_1_1_1_0 = (Keyword)cRangeAssignment_1_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final Alternatives cValuesAlternatives_1_1_2_0 = (Alternatives)cValuesAssignment_1_1_2.eContents().get(0);
		private final RuleCall cValuesIntValueParserRuleCall_1_1_2_0_0 = (RuleCall)cValuesAlternatives_1_1_2_0.eContents().get(0);
		private final RuleCall cValuesValuedObjectReferenceParserRuleCall_1_1_2_0_1 = (RuleCall)cValuesAlternatives_1_1_2_0.eContents().get(1);
		private final RuleCall cValuesSpecialAccessExpressionParserRuleCall_1_1_2_0_2 = (RuleCall)cValuesAlternatives_1_1_2_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VectorValue returns VectorValue:
		//    '{' (
		//        values+=VectorValueMember (',' values+=VectorValueMember)*
		//        |
		//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
		//    ) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (
		//    values+=VectorValueMember (',' values+=VectorValueMember)*
		//    |
		//    values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
		//) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(
		//       values+=VectorValueMember (',' values+=VectorValueMember)*
		//       |
		//       values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
		//   )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//values+=VectorValueMember (',' values+=VectorValueMember)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//values+=VectorValueMember
		public Assignment getValuesAssignment_1_0_0() { return cValuesAssignment_1_0_0; }
		
		//VectorValueMember
		public RuleCall getValuesVectorValueMemberParserRuleCall_1_0_0_0() { return cValuesVectorValueMemberParserRuleCall_1_0_0_0; }
		
		//(',' values+=VectorValueMember)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }
		
		//values+=VectorValueMember
		public Assignment getValuesAssignment_1_0_1_1() { return cValuesAssignment_1_0_1_1; }
		
		//VectorValueMember
		public RuleCall getValuesVectorValueMemberParserRuleCall_1_0_1_1_0() { return cValuesVectorValueMemberParserRuleCall_1_0_1_1_0; }
		
		//values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//values+=IntValue
		public Assignment getValuesAssignment_1_1_0() { return cValuesAssignment_1_1_0; }
		
		//IntValue
		public RuleCall getValuesIntValueParserRuleCall_1_1_0_0() { return cValuesIntValueParserRuleCall_1_1_0_0; }
		
		//range?='to'
		public Assignment getRangeAssignment_1_1_1() { return cRangeAssignment_1_1_1; }
		
		//'to'
		public Keyword getRangeToKeyword_1_1_1_0() { return cRangeToKeyword_1_1_1_0; }
		
		//values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
		public Assignment getValuesAssignment_1_1_2() { return cValuesAssignment_1_1_2; }
		
		//(IntValue | ValuedObjectReference | SpecialAccessExpression)
		public Alternatives getValuesAlternatives_1_1_2_0() { return cValuesAlternatives_1_1_2_0; }
		
		//IntValue
		public RuleCall getValuesIntValueParserRuleCall_1_1_2_0_0() { return cValuesIntValueParserRuleCall_1_1_2_0_0; }
		
		//ValuedObjectReference
		public RuleCall getValuesValuedObjectReferenceParserRuleCall_1_1_2_0_1() { return cValuesValuedObjectReferenceParserRuleCall_1_1_2_0_1; }
		
		//SpecialAccessExpression
		public RuleCall getValuesSpecialAccessExpressionParserRuleCall_1_1_2_0_2() { return cValuesSpecialAccessExpressionParserRuleCall_1_1_2_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class VectorValueMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.VectorValueMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIgnoreValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VectorValueMember returns Expression:
		//    BoolExpression | ValuedExpression | IgnoreValue;
		@Override public ParserRule getRule() { return rule; }
		
		//BoolExpression | ValuedExpression | IgnoreValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoolExpression
		public RuleCall getBoolExpressionParserRuleCall_0() { return cBoolExpressionParserRuleCall_0; }
		
		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_1() { return cValuedExpressionParserRuleCall_1; }
		
		//IgnoreValue
		public RuleCall getIgnoreValueParserRuleCall_2() { return cIgnoreValueParserRuleCall_2; }
	}
	public class IgnoreValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.IgnoreValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIgnoreValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IgnoreValue returns IgnoreValue:
		//    {IgnoreValue} '_';
		@Override public ParserRule getRule() { return rule; }
		
		//{IgnoreValue} '_'
		public Group getGroup() { return cGroup; }
		
		//{IgnoreValue}
		public Action getIgnoreValueAction_0() { return cIgnoreValueAction_0; }
		
		//'_'
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}
	public class AnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.AnyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// Any Type Rule
		//// Data type rule allowing any kind of value to be accepted,
		//// e.g. as initialValues of valued objects used in Kits.xtext.
		//AnyType returns ecore::EString:
		//    BOOLEAN | INT | FLOAT | ID | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOLEAN | INT | FLOAT | ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_0() { return cBOOLEANTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_2() { return cFLOATTerminalRuleCall_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}
	public class AnyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.AnyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AnyValue returns Value:
		//    IntValue | FloatValue | BoolValue | StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | FloatValue | BoolValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }
		
		//BoolValue
		public RuleCall getBoolValueParserRuleCall_2() { return cBoolValueParserRuleCall_2; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_3() { return cStringValueParserRuleCall_3; }
	}
	public class JsonObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.JsonObjectValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonObjectValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMembersJsonObjectMemberParserRuleCall_2_0_0 = (RuleCall)cMembersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMembersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMembersJsonObjectMemberParserRuleCall_2_1_1_0 = (RuleCall)cMembersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -------------------- //
		////  JSON                //
		//// -------------------- //
		//JsonObjectValue returns JsonObjectValue:
		//    {JsonObjectValue}
		//    '{'
		//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonObjectValue}
		//'{'
		//( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{JsonObjectValue}
		public Action getJsonObjectValueAction_0() { return cJsonObjectValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//(members+=JsonObjectMember)
		public Assignment getMembersAssignment_2_0() { return cMembersAssignment_2_0; }
		
		//JsonObjectMember
		public RuleCall getMembersJsonObjectMemberParserRuleCall_2_0_0() { return cMembersJsonObjectMemberParserRuleCall_2_0_0; }
		
		//(',' members+=JsonObjectMember)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//members+=JsonObjectMember
		public Assignment getMembersAssignment_2_1_1() { return cMembersAssignment_2_1_1; }
		
		//JsonObjectMember
		public RuleCall getMembersJsonObjectMemberParserRuleCall_2_1_1_0() { return cMembersJsonObjectMemberParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class JsonObjectMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.JsonObjectMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueJsonValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//JsonObjectMember returns JsonObjectMember:
		//    key=STRING ':' value=JsonValue;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING ':' value=JsonValue
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=JsonValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//JsonValue
		public RuleCall getValueJsonValueParserRuleCall_2_0() { return cValueJsonValueParserRuleCall_2_0; }
	}
	public class JsonArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.JsonArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonArrayValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsJsonValueParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsJsonValueParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonArrayValue returns JsonArrayValue:
		//    {JsonArrayValue}
		//    '['
		//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
		//    ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{JsonArrayValue}
		//'['
		//( (elements+=JsonValue) (',' elements+=JsonValue)* )?
		//']'
		public Group getGroup() { return cGroup; }
		
		//{JsonArrayValue}
		public Action getJsonArrayValueAction_0() { return cJsonArrayValueAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//( (elements+=JsonValue) (',' elements+=JsonValue)* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//(elements+=JsonValue)
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//JsonValue
		public RuleCall getElementsJsonValueParserRuleCall_2_0_0() { return cElementsJsonValueParserRuleCall_2_0_0; }
		
		//(',' elements+=JsonValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=JsonValue
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//JsonValue
		public RuleCall getElementsJsonValueParserRuleCall_2_1_1_0() { return cElementsJsonValueParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class JsonValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.JsonValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonObjectValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonArrayValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnyValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//JsonValue returns Value:
		//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//JsonObjectValue | JsonArrayValue | NullValue | AnyValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonObjectValue
		public RuleCall getJsonObjectValueParserRuleCall_0() { return cJsonObjectValueParserRuleCall_0; }
		
		//JsonArrayValue
		public RuleCall getJsonArrayValueParserRuleCall_1() { return cJsonArrayValueParserRuleCall_1; }
		
		//NullValue
		public RuleCall getNullValueParserRuleCall_2() { return cNullValueParserRuleCall_2; }
		
		//AnyValue
		public RuleCall getAnyValueParserRuleCall_3() { return cAnyValueParserRuleCall_3; }
	}
	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.NullValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullValue returns NullValue:
		//    {NullValue}
		//    'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullValue}
		//'null'
		public Group getGroup() { return cGroup; }
		
		//{NullValue}
		public Action getNullValueAction_0() { return cNullValueAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class JsonPragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.JsonPragma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueJsonObjectValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// New Json Annotations
		//JsonPragma returns JsonPragma:
		//    '#' name=ExtendedID value=JsonObjectValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' name=ExtendedID value=JsonObjectValue
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//name=ExtendedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_0() { return cNameExtendedIDParserRuleCall_1_0; }
		
		//value=JsonObjectValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//JsonObjectValue
		public RuleCall getValueJsonObjectValueParserRuleCall_2_0() { return cValueJsonObjectValueParserRuleCall_2_0; }
	}
	public class JsonAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.JsonAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExtendedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueJsonObjectValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//JsonAnnotation returns JsonAnnotation:
		//    '@' name=ExtendedID value=JsonObjectValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=ExtendedID value=JsonObjectValue
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ExtendedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_1_0() { return cNameExtendedIDParserRuleCall_1_0; }
		
		//value=JsonObjectValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//JsonObjectValue
		public RuleCall getValueJsonObjectValueParserRuleCall_2_0() { return cValueJsonObjectValueParserRuleCall_2_0; }
	}
	public class PragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.Pragma");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPragmaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonPragmaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//Pragma returns annotations::Pragma:
		//    super | JsonPragma;
		@Override public ParserRule getRule() { return rule; }
		
		//super | JsonPragma
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getPragmaParserRuleCall_0() { return cPragmaParserRuleCall_0; }
		
		//JsonPragma
		public RuleCall getJsonPragmaParserRuleCall_1() { return cJsonPragmaParserRuleCall_1; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.Annotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//Annotation returns annotations::Annotation:
		//    super | JsonAnnotation;
		@Override public ParserRule getRule() { return rule; }
		
		//super | JsonAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getAnnotationParserRuleCall_0() { return cAnnotationParserRuleCall_0; }
		
		//JsonAnnotation
		public RuleCall getJsonAnnotationParserRuleCall_1() { return cJsonAnnotationParserRuleCall_1; }
	}
	public class ValuedAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ValuedAnnotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValuedAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//ValuedAnnotation returns annotations::Annotation:
		//    super | JsonAnnotation;
		@Override public ParserRule getRule() { return rule; }
		
		//super | JsonAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getValuedAnnotationParserRuleCall_0() { return cValuedAnnotationParserRuleCall_0; }
		
		//JsonAnnotation
		public RuleCall getJsonAnnotationParserRuleCall_1() { return cJsonAnnotationParserRuleCall_1; }
	}
	public class QuotedStringAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.QuotedStringAnnotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuotedStringAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//QuotedStringAnnotation returns annotations::Annotation:
		//    super | JsonAnnotation;
		@Override public ParserRule getRule() { return rule; }
		
		//super | JsonAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getQuotedStringAnnotationParserRuleCall_0() { return cQuotedStringAnnotationParserRuleCall_0; }
		
		//JsonAnnotation
		public RuleCall getJsonAnnotationParserRuleCall_1() { return cJsonAnnotationParserRuleCall_1; }
	}
	public class ThisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ThisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// OO
		//ThisExpression returns ThisExpression:
		//    {ThisExpression}
		//    'this';
		@Override public ParserRule getRule() { return rule; }
		
		//{ThisExpression}
		//'this'
		public Group getGroup() { return cGroup; }
		
		//{ThisExpression}
		public Action getThisExpressionAction_0() { return cThisExpressionAction_0; }
		
		//'this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	
	public class CompareOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNEEnumLiteralDeclaration_5.eContents().get(0);
		
		//// -------------------- //
		////  KExpressions Enums  //
		//// -------------------- //
		//enum CompareOperator returns OperatorType:
		//    EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
		public EnumRule getRule() { return rule; }
		
		//EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }
		
		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_2() { return cLEQEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_2_0() { return cLEQLessThanSignEqualsSignKeyword_2_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }
		
		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_4() { return cGEQEnumLiteralDeclaration_4; }
		
		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_4_0() { return cGEQGreaterThanSignEqualsSignKeyword_4_0; }
		
		//NE="!="
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_5() { return cNEEnumLiteralDeclaration_5; }
		
		//"!="
		public Keyword getNEExclamationMarkEqualsSignKeyword_5_0() { return cNEExclamationMarkEqualsSignKeyword_5_0; }
	}
	public class PreOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.PreOperator");
		private final EnumLiteralDeclaration cPREEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPREPreKeyword_0 = (Keyword)cPREEnumLiteralDeclaration.eContents().get(0);
		
		//enum PreOperator returns OperatorType:
		//    PRE="pre";
		public EnumRule getRule() { return rule; }
		
		//PRE="pre"
		public EnumLiteralDeclaration getPREEnumLiteralDeclaration() { return cPREEnumLiteralDeclaration; }
		
		//"pre"
		public Keyword getPREPreKeyword_0() { return cPREPreKeyword_0; }
	}
	public class BitwiseNotOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseNotOperator");
		private final EnumLiteralDeclaration cBITWISE_NOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBITWISE_NOTTildeKeyword_0 = (Keyword)cBITWISE_NOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum BitwiseNotOperator returns OperatorType:
		//    BITWISE_NOT="~";
		public EnumRule getRule() { return rule; }
		
		//BITWISE_NOT="~"
		public EnumLiteralDeclaration getBITWISE_NOTEnumLiteralDeclaration() { return cBITWISE_NOTEnumLiteralDeclaration; }
		
		//"~"
		public Keyword getBITWISE_NOTTildeKeyword_0() { return cBITWISE_NOTTildeKeyword_0; }
	}
	public class BitwiseXOrOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseXOrOperator");
		private final EnumLiteralDeclaration cBITWISE_XOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBITWISE_XORCircumflexAccentKeyword_0 = (Keyword)cBITWISE_XOREnumLiteralDeclaration.eContents().get(0);
		
		//enum BitwiseXOrOperator returns OperatorType:
		//    BITWISE_XOR="^";
		public EnumRule getRule() { return rule; }
		
		//BITWISE_XOR="^"
		public EnumLiteralDeclaration getBITWISE_XOREnumLiteralDeclaration() { return cBITWISE_XOREnumLiteralDeclaration; }
		
		//"^"
		public Keyword getBITWISE_XORCircumflexAccentKeyword_0() { return cBITWISE_XORCircumflexAccentKeyword_0; }
	}
	public class BitwiseOrOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseOrOperator");
		private final EnumLiteralDeclaration cBITWISE_OREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBITWISE_ORVerticalLineKeyword_0 = (Keyword)cBITWISE_OREnumLiteralDeclaration.eContents().get(0);
		
		//enum BitwiseOrOperator returns OperatorType:
		//    BITWISE_OR="|";
		public EnumRule getRule() { return rule; }
		
		//BITWISE_OR="|"
		public EnumLiteralDeclaration getBITWISE_OREnumLiteralDeclaration() { return cBITWISE_OREnumLiteralDeclaration; }
		
		//"|"
		public Keyword getBITWISE_ORVerticalLineKeyword_0() { return cBITWISE_ORVerticalLineKeyword_0; }
	}
	public class BitwiseAndOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.BitwiseAndOperator");
		private final EnumLiteralDeclaration cBITWISE_ANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBITWISE_ANDAmpersandKeyword_0 = (Keyword)cBITWISE_ANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum BitwiseAndOperator returns OperatorType:
		//    BITWISE_AND="&";
		public EnumRule getRule() { return rule; }
		
		//BITWISE_AND="&"
		public EnumLiteralDeclaration getBITWISE_ANDEnumLiteralDeclaration() { return cBITWISE_ANDEnumLiteralDeclaration; }
		
		//"&"
		public Keyword getBITWISE_ANDAmpersandKeyword_0() { return cBITWISE_ANDAmpersandKeyword_0; }
	}
	public class NotOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.NotOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum NotOperator returns OperatorType:
		//    NOT="!";
		public EnumRule getRule() { return rule; }
		
		//NOT="!"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }
		
		//"!"
		public Keyword getNOTExclamationMarkKeyword_0() { return cNOTExclamationMarkKeyword_0; }
	}
	public class AddOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.AddOperator");
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_0 = (Keyword)cADDEnumLiteralDeclaration.eContents().get(0);
		
		//enum AddOperator returns OperatorType:
		//    ADD="+";
		public EnumRule getRule() { return rule; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration() { return cADDEnumLiteralDeclaration; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_0() { return cADDPlusSignKeyword_0; }
	}
	public class SubOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.SubOperator");
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_0 = (Keyword)cSUBEnumLiteralDeclaration.eContents().get(0);
		
		//enum SubOperator returns OperatorType:
		//    SUB="-";
		public EnumRule getRule() { return rule; }
		
		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration() { return cSUBEnumLiteralDeclaration; }
		
		//"-"
		public Keyword getSUBHyphenMinusKeyword_0() { return cSUBHyphenMinusKeyword_0; }
	}
	public class MultOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.MultOperator");
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMULTAsteriskKeyword_0 = (Keyword)cMULTEnumLiteralDeclaration.eContents().get(0);
		
		//enum MultOperator returns OperatorType:
		//    MULT="*";
		public EnumRule getRule() { return rule; }
		
		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration() { return cMULTEnumLiteralDeclaration; }
		
		//"*"
		public Keyword getMULTAsteriskKeyword_0() { return cMULTAsteriskKeyword_0; }
	}
	public class ModOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ModOperator");
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMODPercentSignKeyword_0 = (Keyword)cMODEnumLiteralDeclaration.eContents().get(0);
		
		//enum ModOperator returns OperatorType:
		//    MOD="%";
		public EnumRule getRule() { return rule; }
		
		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration() { return cMODEnumLiteralDeclaration; }
		
		//"%"
		public Keyword getMODPercentSignKeyword_0() { return cMODPercentSignKeyword_0; }
	}
	public class DivOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.DivOperator");
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_0 = (Keyword)cDIVEnumLiteralDeclaration.eContents().get(0);
		
		//enum DivOperator returns OperatorType:
		//    DIV="/";
		public EnumRule getRule() { return rule; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration() { return cDIVEnumLiteralDeclaration; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_0() { return cDIVSolidusKeyword_0; }
	}
	public class ValOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ValOperator");
		private final EnumLiteralDeclaration cVALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cVALValKeyword_0 = (Keyword)cVALEnumLiteralDeclaration.eContents().get(0);
		
		//enum ValOperator returns OperatorType:
		//    VAL="val";
		public EnumRule getRule() { return rule; }
		
		//VAL="val"
		public EnumLiteralDeclaration getVALEnumLiteralDeclaration() { return cVALEnumLiteralDeclaration; }
		
		//"val"
		public Keyword getVALValKeyword_0() { return cVALValKeyword_0; }
	}
	public class LogicalOrOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.LogicalOrOperator");
		private final EnumLiteralDeclaration cLOGICAL_OREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLOGICAL_ORVerticalLineVerticalLineKeyword_0 = (Keyword)cLOGICAL_OREnumLiteralDeclaration.eContents().get(0);
		
		//enum LogicalOrOperator returns OperatorType:
		//    LOGICAL_OR="||";
		public EnumRule getRule() { return rule; }
		
		//LOGICAL_OR="||"
		public EnumLiteralDeclaration getLOGICAL_OREnumLiteralDeclaration() { return cLOGICAL_OREnumLiteralDeclaration; }
		
		//"||"
		public Keyword getLOGICAL_ORVerticalLineVerticalLineKeyword_0() { return cLOGICAL_ORVerticalLineVerticalLineKeyword_0; }
	}
	public class LogicalAndOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.LogicalAndOperator");
		private final EnumLiteralDeclaration cLOGICAL_ANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLOGICAL_ANDAmpersandAmpersandKeyword_0 = (Keyword)cLOGICAL_ANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum LogicalAndOperator returns OperatorType:
		//    LOGICAL_AND="&&";
		public EnumRule getRule() { return rule; }
		
		//LOGICAL_AND="&&"
		public EnumLiteralDeclaration getLOGICAL_ANDEnumLiteralDeclaration() { return cLOGICAL_ANDEnumLiteralDeclaration; }
		
		//"&&"
		public Keyword getLOGICAL_ANDAmpersandAmpersandKeyword_0() { return cLOGICAL_ANDAmpersandAmpersandKeyword_0; }
	}
	public class ShiftLeftOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ShiftLeftOperator");
		private final EnumLiteralDeclaration cSHIFT_LEFTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSHIFT_LEFTLessThanSignLessThanSignKeyword_0 = (Keyword)cSHIFT_LEFTEnumLiteralDeclaration.eContents().get(0);
		
		//enum ShiftLeftOperator returns OperatorType:
		//    SHIFT_LEFT="<<";
		public EnumRule getRule() { return rule; }
		
		//SHIFT_LEFT="<<"
		public EnumLiteralDeclaration getSHIFT_LEFTEnumLiteralDeclaration() { return cSHIFT_LEFTEnumLiteralDeclaration; }
		
		//"<<"
		public Keyword getSHIFT_LEFTLessThanSignLessThanSignKeyword_0() { return cSHIFT_LEFTLessThanSignLessThanSignKeyword_0; }
	}
	public class ShiftRightOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightOperator");
		private final EnumLiteralDeclaration cSHIFT_RIGHTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSHIFT_RIGHTGreaterThanSignGreaterThanSignKeyword_0 = (Keyword)cSHIFT_RIGHTEnumLiteralDeclaration.eContents().get(0);
		
		//enum ShiftRightOperator returns OperatorType:
		//    SHIFT_RIGHT=">>";
		public EnumRule getRule() { return rule; }
		
		//SHIFT_RIGHT=">>"
		public EnumLiteralDeclaration getSHIFT_RIGHTEnumLiteralDeclaration() { return cSHIFT_RIGHTEnumLiteralDeclaration; }
		
		//">>"
		public Keyword getSHIFT_RIGHTGreaterThanSignGreaterThanSignKeyword_0() { return cSHIFT_RIGHTGreaterThanSignGreaterThanSignKeyword_0; }
	}
	public class ShiftRightUnsignedOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ShiftRightUnsignedOperator");
		private final EnumLiteralDeclaration cSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSHIFT_RIGHT_UNSIGNEDGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0 = (Keyword)cSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration.eContents().get(0);
		
		//enum ShiftRightUnsignedOperator returns OperatorType:
		//    SHIFT_RIGHT_UNSIGNED=">>>";
		public EnumRule getRule() { return rule; }
		
		//SHIFT_RIGHT_UNSIGNED=">>>"
		public EnumLiteralDeclaration getSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration() { return cSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration; }
		
		//">>>"
		public Keyword getSHIFT_RIGHT_UNSIGNEDGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0() { return cSHIFT_RIGHT_UNSIGNEDGreaterThanSignGreaterThanSignGreaterThanSignKeyword_0; }
	}
	public class PostfixAddElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.PostfixAdd");
		private final EnumLiteralDeclaration cPOSTFIX_ADDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPOSTFIX_ADDPlusSignPlusSignKeyword_0 = (Keyword)cPOSTFIX_ADDEnumLiteralDeclaration.eContents().get(0);
		
		//enum PostfixAdd returns OperatorType:
		//    POSTFIX_ADD="++";
		public EnumRule getRule() { return rule; }
		
		//POSTFIX_ADD="++"
		public EnumLiteralDeclaration getPOSTFIX_ADDEnumLiteralDeclaration() { return cPOSTFIX_ADDEnumLiteralDeclaration; }
		
		//"++"
		public Keyword getPOSTFIX_ADDPlusSignPlusSignKeyword_0() { return cPOSTFIX_ADDPlusSignPlusSignKeyword_0; }
	}
	public class PostfixSubElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.PostfixSub");
		private final EnumLiteralDeclaration cPOSTFIX_SUBEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPOSTFIX_SUBHyphenMinusHyphenMinusKeyword_0 = (Keyword)cPOSTFIX_SUBEnumLiteralDeclaration.eContents().get(0);
		
		//enum PostfixSub returns OperatorType:
		//    POSTFIX_SUB="--";
		public EnumRule getRule() { return rule; }
		
		//POSTFIX_SUB="--"
		public EnumLiteralDeclaration getPOSTFIX_SUBEnumLiteralDeclaration() { return cPOSTFIX_SUBEnumLiteralDeclaration; }
		
		//"--"
		public Keyword getPOSTFIX_SUBHyphenMinusHyphenMinusKeyword_0() { return cPOSTFIX_SUBHyphenMinusHyphenMinusKeyword_0; }
	}
	public class ConditionalOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ConditionalOperator");
		private final EnumLiteralDeclaration cCONDITIONALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCONDITIONALQuestionMarkKeyword_0 = (Keyword)cCONDITIONALEnumLiteralDeclaration.eContents().get(0);
		
		//enum ConditionalOperator returns OperatorType:
		//    CONDITIONAL = "?";
		public EnumRule getRule() { return rule; }
		
		//CONDITIONAL = "?"
		public EnumLiteralDeclaration getCONDITIONALEnumLiteralDeclaration() { return cCONDITIONALEnumLiteralDeclaration; }
		
		//"?"
		public Keyword getCONDITIONALQuestionMarkKeyword_0() { return cCONDITIONALQuestionMarkKeyword_0; }
	}
	public class InitOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.InitOperator");
		private final EnumLiteralDeclaration cINITEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINITHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cINITEnumLiteralDeclaration.eContents().get(0);
		
		//enum InitOperator returns OperatorType:
		//    INIT = "->";
		public EnumRule getRule() { return rule; }
		
		//INIT = "->"
		public EnumLiteralDeclaration getINITEnumLiteralDeclaration() { return cINITEnumLiteralDeclaration; }
		
		//"->"
		public Keyword getINITHyphenMinusGreaterThanSignKeyword_0() { return cINITHyphenMinusGreaterThanSignKeyword_0; }
	}
	public class FbyOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.FbyOperator");
		private final EnumLiteralDeclaration cFBYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFBYFbyKeyword_0 = (Keyword)cFBYEnumLiteralDeclaration.eContents().get(0);
		
		//enum FbyOperator returns OperatorType:
		//    FBY = "fby";
		public EnumRule getRule() { return rule; }
		
		//FBY = "fby"
		public EnumLiteralDeclaration getFBYEnumLiteralDeclaration() { return cFBYEnumLiteralDeclaration; }
		
		//"fby"
		public Keyword getFBYFbyKeyword_0() { return cFBYFbyKeyword_0; }
	}
	public class SfbyOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.SfbyOperator");
		private final EnumLiteralDeclaration cSFBYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSFBYSfbyKeyword_0 = (Keyword)cSFBYEnumLiteralDeclaration.eContents().get(0);
		
		//enum SfbyOperator returns OperatorType:
		//    SFBY = "sfby";
		public EnumRule getRule() { return rule; }
		
		//SFBY = "sfby"
		public EnumLiteralDeclaration getSFBYEnumLiteralDeclaration() { return cSFBYEnumLiteralDeclaration; }
		
		//"sfby"
		public Keyword getSFBYSfbyKeyword_0() { return cSFBYSfbyKeyword_0; }
	}
	public class ValueTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPureKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBoolKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTIntKeyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFLOATFloatKeyword_3_0 = (Keyword)cFLOATEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGStringKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ValueType returns ValueType:
		//    PURE="pure" | BOOL="bool" |
		//    INT="int" | FLOAT="float" |
		//    STRING="string";
		public EnumRule getRule() { return rule; }
		
		//PURE="pure" | BOOL="bool" |
		//INT="int" | FLOAT="float" |
		//STRING="string"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PURE="pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }
		
		//"pure"
		public Keyword getPUREPureKeyword_0_0() { return cPUREPureKeyword_0_0; }
		
		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }
		
		//"bool"
		public Keyword getBOOLBoolKeyword_1_0() { return cBOOLBoolKeyword_1_0; }
		
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }
		
		//"int"
		public Keyword getINTIntKeyword_2_0() { return cINTIntKeyword_2_0; }
		
		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_3() { return cFLOATEnumLiteralDeclaration_3; }
		
		//"float"
		public Keyword getFLOATFloatKeyword_3_0() { return cFLOATFloatKeyword_3_0; }
		
		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }
		
		//"string"
		public Keyword getSTRINGStringKeyword_4_0() { return cSTRINGStringKeyword_4_0; }
	}
	public class HostTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.HostType");
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cHOSTHostKeyword_0 = (Keyword)cHOSTEnumLiteralDeclaration.eContents().get(0);
		
		//enum HostType returns ValueType:
		//    HOST="host";
		public EnumRule getRule() { return rule; }
		
		//HOST="host"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration() { return cHOSTEnumLiteralDeclaration; }
		
		//"host"
		public Keyword getHOSTHostKeyword_0() { return cHOSTHostKeyword_0; }
	}
	public class StructTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.StructType");
		private final EnumLiteralDeclaration cSTRUCTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSTRUCTStructKeyword_0 = (Keyword)cSTRUCTEnumLiteralDeclaration.eContents().get(0);
		
		//enum StructType returns ValueType:
		//    STRUCT="struct";
		public EnumRule getRule() { return rule; }
		
		//STRUCT="struct"
		public EnumLiteralDeclaration getSTRUCTEnumLiteralDeclaration() { return cSTRUCTEnumLiteralDeclaration; }
		
		//"struct"
		public Keyword getSTRUCTStructKeyword_0() { return cSTRUCTStructKeyword_0; }
	}
	public class ClassTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ClassType");
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCLASSClassKeyword_0 = (Keyword)cCLASSEnumLiteralDeclaration.eContents().get(0);
		
		//enum ClassType returns ValueType:
		//    CLASS="class";
		public EnumRule getRule() { return rule; }
		
		//CLASS="class"
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration() { return cCLASSEnumLiteralDeclaration; }
		
		//"class"
		public Keyword getCLASSClassKeyword_0() { return cCLASSClassKeyword_0; }
	}
	public class EnumTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.EnumType");
		private final EnumLiteralDeclaration cENUMEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cENUMEnumKeyword_0 = (Keyword)cENUMEnumLiteralDeclaration.eContents().get(0);
		
		//enum EnumType returns ValueType:
		//    ENUM="enum";
		public EnumRule getRule() { return rule; }
		
		//ENUM="enum"
		public EnumLiteralDeclaration getENUMEnumLiteralDeclaration() { return cENUMEnumLiteralDeclaration; }
		
		//"enum"
		public Keyword getENUMEnumKeyword_0() { return cENUMEnumKeyword_0; }
	}
	public class CombineOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.CombineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTAsteriskKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMAXMaxKeyword_3_0 = (Keyword)cMAXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cORVerticalLineKeyword_5_0 = (Keyword)cOREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAmpersandKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum CombineOperator returns CombineOperator:
		//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
		//    MIN="min" | OR="|" | AND="&" | HOST="host";
		public EnumRule getRule() { return rule; }
		
		//NONE="none" | ADD="+" | MULT="*" | MAX="max" |
		//MIN="min" | OR="|" | AND="&" | HOST="host"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE="none"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//"none"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_1_0() { return cADDPlusSignKeyword_1_0; }
		
		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }
		
		//"*"
		public Keyword getMULTAsteriskKeyword_2_0() { return cMULTAsteriskKeyword_2_0; }
		
		//MAX="max"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_3() { return cMAXEnumLiteralDeclaration_3; }
		
		//"max"
		public Keyword getMAXMaxKeyword_3_0() { return cMAXMaxKeyword_3_0; }
		
		//MIN="min"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }
		
		//"min"
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }
		
		//OR="|"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_5() { return cOREnumLiteralDeclaration_5; }
		
		//"|"
		public Keyword getORVerticalLineKeyword_5_0() { return cORVerticalLineKeyword_5_0; }
		
		//AND="&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }
		
		//"&"
		public Keyword getANDAmpersandKeyword_6_0() { return cANDAmpersandKeyword_6_0; }
		
		//HOST="host"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }
		
		//"host"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}
	public class AccessModifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.AccessModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AccessModifier returns AccessModifier:
		//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC = 'public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//PROTECTED = 'protected'
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() { return cPROTECTEDEnumLiteralDeclaration_1; }
		
		//'protected'
		public Keyword getPROTECTEDProtectedKeyword_1_0() { return cPROTECTEDProtectedKeyword_1_0; }
		
		//PRIVATE = 'private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_2_0() { return cPRIVATEPrivateKeyword_2_0; }
	}
	public class MethodReturnTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.MethodReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVOIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVOIDVoidKeyword_0_0 = (Keyword)cVOIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBoolKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTIntKeyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFLOATFloatKeyword_3_0 = (Keyword)cFLOATEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGStringKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum MethodReturnType returns ValueType:
		//    VOID="void" |
		//    BOOL="bool" | INT="int" | FLOAT="float" |
		//    STRING="string";
		public EnumRule getRule() { return rule; }
		
		//VOID="void" |
		//BOOL="bool" | INT="int" | FLOAT="float" |
		//STRING="string"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VOID="void"
		public EnumLiteralDeclaration getVOIDEnumLiteralDeclaration_0() { return cVOIDEnumLiteralDeclaration_0; }
		
		//"void"
		public Keyword getVOIDVoidKeyword_0_0() { return cVOIDVoidKeyword_0_0; }
		
		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }
		
		//"bool"
		public Keyword getBOOLBoolKeyword_1_0() { return cBOOLBoolKeyword_1_0; }
		
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }
		
		//"int"
		public Keyword getINTIntKeyword_2_0() { return cINTIntKeyword_2_0; }
		
		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_3() { return cFLOATEnumLiteralDeclaration_3; }
		
		//"float"
		public Keyword getFLOATFloatKeyword_3_0() { return cFLOATFloatKeyword_3_0; }
		
		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }
		
		//"string"
		public Keyword getSTRINGStringKeyword_4_0() { return cSTRINGStringKeyword_4_0; }
	}
	public class ParameterAccessTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.ParameterAccessType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCALL_BY_REFERENCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCALL_BY_REFERENCEAmpersandKeyword_0_0 = (Keyword)cCALL_BY_REFERENCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPURE_OUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPURE_OUTPUTExclamationMarkAmpersandKeyword_1_0 = (Keyword)cPURE_OUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterAccessType returns ParameterAccessType:
		//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
		//;
		public EnumRule getRule() { return rule; }
		
		//CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CALL_BY_REFERENCE = "&"
		public EnumLiteralDeclaration getCALL_BY_REFERENCEEnumLiteralDeclaration_0() { return cCALL_BY_REFERENCEEnumLiteralDeclaration_0; }
		
		//"&"
		public Keyword getCALL_BY_REFERENCEAmpersandKeyword_0_0() { return cCALL_BY_REFERENCEAmpersandKeyword_0_0; }
		
		//PURE_OUTPUT = "!&"
		public EnumLiteralDeclaration getPURE_OUTPUTEnumLiteralDeclaration_1() { return cPURE_OUTPUTEnumLiteralDeclaration_1; }
		
		//"!&"
		public Keyword getPURE_OUTPUTExclamationMarkAmpersandKeyword_1_0() { return cPURE_OUTPUTExclamationMarkAmpersandKeyword_1_0; }
	}
	
	private final RootElements pRoot;
	private final ExpressionElements pExpression;
	private final BoolExpressionElements pBoolExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final BitwiseOrExpressionElements pBitwiseOrExpression;
	private final BitwiseXOrExpressionElements pBitwiseXOrExpression;
	private final BitwiseAndExpressionElements pBitwiseAndExpression;
	private final CompareOperationElements pCompareOperation;
	private final NotOrValuedExpressionElements pNotOrValuedExpression;
	private final BitwiseNotExpressionElements pBitwiseNotExpression;
	private final NotExpressionElements pNotExpression;
	private final ValuedExpressionElements pValuedExpression;
	private final ShiftExpressionsElements pShiftExpressions;
	private final ShiftLeftExpressionElements pShiftLeftExpression;
	private final ShiftRightExpressionElements pShiftRightExpression;
	private final ShiftRightUnsignedExpressionElements pShiftRightUnsignedExpression;
	private final SumExpressionElements pSumExpression;
	private final AddExpressionElements pAddExpression;
	private final SubExpressionElements pSubExpression;
	private final ProductExpressionElements pProductExpression;
	private final MultExpressionElements pMultExpression;
	private final DivExpressionElements pDivExpression;
	private final ModExpressionElements pModExpression;
	private final NegExpressionElements pNegExpression;
	private final TernaryOperationElements pTernaryOperation;
	private final InitExpressionElements pInitExpression;
	private final FbyExpressionElements pFbyExpression;
	private final SfbyExpressionElements pSfbyExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final AtomicValuedExpressionElements pAtomicValuedExpression;
	private final BoolScheduleExpressionElements pBoolScheduleExpression;
	private final ValuedObjectTestExpressionElements pValuedObjectTestExpression;
	private final SpecialAccessExpressionElements pSpecialAccessExpression;
	private final PrimeIDElements pPrimeID;
	private final ValuedObjectReferenceElements pValuedObjectReference;
	private final ScheduleObjectReferenceElements pScheduleObjectReference;
	private final ReferenceCallElements pReferenceCall;
	private final RandomCallElements pRandomCall;
	private final RandomizeCallElements pRandomizeCall;
	private final FunctionCallElements pFunctionCall;
	private final PrintCallElements pPrintCall;
	private final ParameterElements pParameter;
	private final TextExpressionElements pTextExpression;
	private final IntValueElements pIntValue;
	private final FloatValueElements pFloatValue;
	private final BoolValueElements pBoolValue;
	private final StringValueElements pStringValue;
	private final VectorValueElements pVectorValue;
	private final VectorValueMemberElements pVectorValueMember;
	private final IgnoreValueElements pIgnoreValue;
	private final AnyTypeElements pAnyType;
	private final AnyValueElements pAnyValue;
	private final CompareOperatorElements eCompareOperator;
	private final PreOperatorElements ePreOperator;
	private final BitwiseNotOperatorElements eBitwiseNotOperator;
	private final BitwiseXOrOperatorElements eBitwiseXOrOperator;
	private final BitwiseOrOperatorElements eBitwiseOrOperator;
	private final BitwiseAndOperatorElements eBitwiseAndOperator;
	private final NotOperatorElements eNotOperator;
	private final AddOperatorElements eAddOperator;
	private final SubOperatorElements eSubOperator;
	private final MultOperatorElements eMultOperator;
	private final ModOperatorElements eModOperator;
	private final DivOperatorElements eDivOperator;
	private final ValOperatorElements eValOperator;
	private final LogicalOrOperatorElements eLogicalOrOperator;
	private final LogicalAndOperatorElements eLogicalAndOperator;
	private final ShiftLeftOperatorElements eShiftLeftOperator;
	private final ShiftRightOperatorElements eShiftRightOperator;
	private final ShiftRightUnsignedOperatorElements eShiftRightUnsignedOperator;
	private final PostfixAddElements ePostfixAdd;
	private final PostfixSubElements ePostfixSub;
	private final ConditionalOperatorElements eConditionalOperator;
	private final InitOperatorElements eInitOperator;
	private final FbyOperatorElements eFbyOperator;
	private final SfbyOperatorElements eSfbyOperator;
	private final ValueTypeElements eValueType;
	private final HostTypeElements eHostType;
	private final StructTypeElements eStructType;
	private final ClassTypeElements eClassType;
	private final EnumTypeElements eEnumType;
	private final CombineOperatorElements eCombineOperator;
	private final AccessModifierElements eAccessModifier;
	private final MethodReturnTypeElements eMethodReturnType;
	private final ParameterAccessTypeElements eParameterAccessType;
	private final JsonObjectValueElements pJsonObjectValue;
	private final JsonObjectMemberElements pJsonObjectMember;
	private final JsonArrayValueElements pJsonArrayValue;
	private final JsonValueElements pJsonValue;
	private final NullValueElements pNullValue;
	private final JsonPragmaElements pJsonPragma;
	private final JsonAnnotationElements pJsonAnnotation;
	private final PragmaElements pPragma;
	private final AnnotationElements pAnnotation;
	private final ValuedAnnotationElements pValuedAnnotation;
	private final QuotedStringAnnotationElements pQuotedStringAnnotation;
	private final ThisExpressionElements pThisExpression;
	private final TerminalRule tHOSTCODE;
	
	private final Grammar grammar;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KExpressionsGrammarAccess(GrammarProvider grammarProvider,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pExpression = new ExpressionElements();
		this.pBoolExpression = new BoolExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pBitwiseOrExpression = new BitwiseOrExpressionElements();
		this.pBitwiseXOrExpression = new BitwiseXOrExpressionElements();
		this.pBitwiseAndExpression = new BitwiseAndExpressionElements();
		this.pCompareOperation = new CompareOperationElements();
		this.pNotOrValuedExpression = new NotOrValuedExpressionElements();
		this.pBitwiseNotExpression = new BitwiseNotExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pValuedExpression = new ValuedExpressionElements();
		this.pShiftExpressions = new ShiftExpressionsElements();
		this.pShiftLeftExpression = new ShiftLeftExpressionElements();
		this.pShiftRightExpression = new ShiftRightExpressionElements();
		this.pShiftRightUnsignedExpression = new ShiftRightUnsignedExpressionElements();
		this.pSumExpression = new SumExpressionElements();
		this.pAddExpression = new AddExpressionElements();
		this.pSubExpression = new SubExpressionElements();
		this.pProductExpression = new ProductExpressionElements();
		this.pMultExpression = new MultExpressionElements();
		this.pDivExpression = new DivExpressionElements();
		this.pModExpression = new ModExpressionElements();
		this.pNegExpression = new NegExpressionElements();
		this.pTernaryOperation = new TernaryOperationElements();
		this.pInitExpression = new InitExpressionElements();
		this.pFbyExpression = new FbyExpressionElements();
		this.pSfbyExpression = new SfbyExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pAtomicValuedExpression = new AtomicValuedExpressionElements();
		this.pBoolScheduleExpression = new BoolScheduleExpressionElements();
		this.pValuedObjectTestExpression = new ValuedObjectTestExpressionElements();
		this.pSpecialAccessExpression = new SpecialAccessExpressionElements();
		this.pPrimeID = new PrimeIDElements();
		this.pValuedObjectReference = new ValuedObjectReferenceElements();
		this.pScheduleObjectReference = new ScheduleObjectReferenceElements();
		this.pReferenceCall = new ReferenceCallElements();
		this.pRandomCall = new RandomCallElements();
		this.pRandomizeCall = new RandomizeCallElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pPrintCall = new PrintCallElements();
		this.pParameter = new ParameterElements();
		this.pTextExpression = new TextExpressionElements();
		this.pIntValue = new IntValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pBoolValue = new BoolValueElements();
		this.pStringValue = new StringValueElements();
		this.pVectorValue = new VectorValueElements();
		this.pVectorValueMember = new VectorValueMemberElements();
		this.pIgnoreValue = new IgnoreValueElements();
		this.pAnyType = new AnyTypeElements();
		this.pAnyValue = new AnyValueElements();
		this.eCompareOperator = new CompareOperatorElements();
		this.ePreOperator = new PreOperatorElements();
		this.eBitwiseNotOperator = new BitwiseNotOperatorElements();
		this.eBitwiseXOrOperator = new BitwiseXOrOperatorElements();
		this.eBitwiseOrOperator = new BitwiseOrOperatorElements();
		this.eBitwiseAndOperator = new BitwiseAndOperatorElements();
		this.eNotOperator = new NotOperatorElements();
		this.eAddOperator = new AddOperatorElements();
		this.eSubOperator = new SubOperatorElements();
		this.eMultOperator = new MultOperatorElements();
		this.eModOperator = new ModOperatorElements();
		this.eDivOperator = new DivOperatorElements();
		this.eValOperator = new ValOperatorElements();
		this.eLogicalOrOperator = new LogicalOrOperatorElements();
		this.eLogicalAndOperator = new LogicalAndOperatorElements();
		this.eShiftLeftOperator = new ShiftLeftOperatorElements();
		this.eShiftRightOperator = new ShiftRightOperatorElements();
		this.eShiftRightUnsignedOperator = new ShiftRightUnsignedOperatorElements();
		this.ePostfixAdd = new PostfixAddElements();
		this.ePostfixSub = new PostfixSubElements();
		this.eConditionalOperator = new ConditionalOperatorElements();
		this.eInitOperator = new InitOperatorElements();
		this.eFbyOperator = new FbyOperatorElements();
		this.eSfbyOperator = new SfbyOperatorElements();
		this.eValueType = new ValueTypeElements();
		this.eHostType = new HostTypeElements();
		this.eStructType = new StructTypeElements();
		this.eClassType = new ClassTypeElements();
		this.eEnumType = new EnumTypeElements();
		this.eCombineOperator = new CombineOperatorElements();
		this.eAccessModifier = new AccessModifierElements();
		this.eMethodReturnType = new MethodReturnTypeElements();
		this.eParameterAccessType = new ParameterAccessTypeElements();
		this.pJsonObjectValue = new JsonObjectValueElements();
		this.pJsonObjectMember = new JsonObjectMemberElements();
		this.pJsonArrayValue = new JsonArrayValueElements();
		this.pJsonValue = new JsonValueElements();
		this.pNullValue = new NullValueElements();
		this.pJsonPragma = new JsonPragmaElements();
		this.pJsonAnnotation = new JsonAnnotationElements();
		this.pPragma = new PragmaElements();
		this.pAnnotation = new AnnotationElements();
		this.pValuedAnnotation = new ValuedAnnotationElements();
		this.pQuotedStringAnnotation = new QuotedStringAnnotationElements();
		this.pThisExpression = new ThisExpressionElements();
		this.tHOSTCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.KExpressions.HOSTCODE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kexpressions.KExpressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// -------------------- //
	////  KExpressions Rules  //
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */
	//// Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//    Expression;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression returns Expression:
	//     (BoolExpression | ValuedExpression);
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason.
	//// One could skip directly to the next rule.
	//BoolExpression returns Expression:
	//    LogicalOrExpression;
	public BoolExpressionElements getBoolExpressionAccess() {
		return pBoolExpression;
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression returns Expression:
	//    LogicalAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
	//        ('||' subExpressions+=LogicalAndExpression)*
	//    )?;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression returns Expression:
	//    BitwiseOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
	//        ('&&' subExpressions+=BitwiseOrExpression)*
	//    )?;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//    BitwiseXOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
	//        ('|' subExpressions+=BitwiseXOrExpression)*
	//    )?;
	public BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return pBitwiseOrExpression;
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression returns Expression:
	//    BitwiseAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
	//        ('^' subExpressions+=BitwiseAndExpression)*
	//    )?;
	public BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return pBitwiseXOrExpression;
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//    CompareOperation
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
	//        ('&' subExpressions+=CompareOperation)*
	//    )?;
	public BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return pBitwiseAndExpression;
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares.
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//    NotOrValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        operator=CompareOperator subExpressions+=NotOrValuedExpression
	//    )?;
	public CompareOperationElements getCompareOperationAccess() {
		return pCompareOperation;
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression returns Expression:
	//    ValuedExpression
	//    | NotExpression;
	public NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return pNotOrValuedExpression;
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression returns Expression:
	//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
	//    | AtomicExpression;
	public BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return pBitwiseNotExpression;
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression returns Expression:
	//    {OperatorExpression} operator=NotOperator subExpressions+=(NotExpression)
	//    | BitwiseNotExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// Valued Expression Rule
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression returns Expression:
	//    ShiftExpressions;
	public ValuedExpressionElements getValuedExpressionAccess() {
		return pValuedExpression;
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//ShiftExpressions returns Expression:
	//    SumExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
	//    )*
	//;
	public ShiftExpressionsElements getShiftExpressionsAccess() {
		return pShiftExpressions;
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
	//        ('<<' subExpressions+=ShiftRightExpression)*
	//    )?;
	public ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return pShiftLeftExpression;
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
	//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
	//    )?;
	public ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return pShiftRightExpression;
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
	//        ('>>>' subExpressions+=SumExpression)*
	//    )?;
	public ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return pShiftRightUnsignedExpression;
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression returns Expression:
	//    ProductExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
	//    )*
	//;
	public SumExpressionElements getSumExpressionAccess() {
		return pSumExpression;
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
	//;
	public AddExpressionElements getAddExpressionAccess() {
		return pAddExpression;
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
	//;
	public SubExpressionElements getSubExpressionAccess() {
		return pSubExpression;
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//ProductExpression returns Expression:
	//    NegExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
	//    )*
	//;
	public ProductExpressionElements getProductExpressionAccess() {
		return pProductExpression;
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=MultOperator subExpressions+=NegExpression)
	//        ('*' subExpressions+=NegExpression)*
	//    )?;
	public MultExpressionElements getMultExpressionAccess() {
		return pMultExpression;
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=DivOperator subExpressions+=NegExpression)
	//        ('/' subExpressions+=NegExpression)*
	//    )?;
	public DivExpressionElements getDivExpressionAccess() {
		return pDivExpression;
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ModOperator subExpressions+=NegExpression)
	//        ('%' subExpressions+=NegExpression)*
	//    )?;
	public ModExpressionElements getModExpressionAccess() {
		return pModExpression;
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary.
	//// Example: -i, -2
	//NegExpression returns Expression:
	//    {OperatorExpression} operator=SubOperator subExpressions+=(NegExpression)
	//    | TernaryOperation;
	public NegExpressionElements getNegExpressionAccess() {
		return pNegExpression;
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//TernaryOperation returns Expression:
	//    {OperatorExpression}
	//    subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
	//    | InitExpression;
	public TernaryOperationElements getTernaryOperationAccess() {
		return pTernaryOperation;
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression returns Expression:
	//    FbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=InitOperator subExpressions+=FbyExpression)
	//        ('->' subExpressions+=FbyExpression)*
	//    )?;
	public InitExpressionElements getInitExpressionAccess() {
		return pInitExpression;
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression returns Expression:
	//    SfbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=FbyOperator subExpressions+=SfbyExpression)
	//        ('fby' subExpressions+=SfbyExpression)*
	//    )?;
	public FbyExpressionElements getFbyExpressionAccess() {
		return pFbyExpression;
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression returns Expression:
	//    AtomicValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
	//        ('sfby' subExpressions+=AtomicValuedExpression)*
	//    )?;
	public SfbyExpressionElements getSfbyExpressionAccess() {
		return pSfbyExpression;
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicExpression returns Expression:
	//    BoolValue
	//    | '(' BoolExpression ')'
	//    | ReferenceCall
	//    | FunctionCall
	//    | RandomCall
	//    | RandomizeCall
	//    | ValuedObjectTestExpression // Last to allow detection of calls
	//    | SpecialAccessExpression
	//    | TextExpression;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicValuedExpression returns Expression:
	//    IntValue
	//    | FloatValue
	//    | StringValue
	//    | VectorValue
	//    | NullValue
	//    | '(' ValuedExpression ')'
	//    | AtomicExpression;
	public AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return pAtomicValuedExpression;
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.
	//BoolScheduleExpression returns Expression:
	//    LogicalOrExpression
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return pBoolScheduleExpression;
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
	//    | ValuedObjectReference;
	public ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return pValuedObjectTestExpression;
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// Accesses a arbitrary target in a static way (needs to be adjusted in the scoper of the deriving language)
	//// Example: static(Constants).MAX
	//SpecialAccessExpression returns SpecialAccessExpression:
	//    access='static' '('
	//    (container=[annotations::NamedObject|PrimeID] '.')?
	//    target=[annotations::NamedObject|PrimeID]
	//    ')' '.' subReference=ValuedObjectReference;
	public SpecialAccessExpressionElements getSpecialAccessExpressionAccess() {
		return pSpecialAccessExpression;
	}
	
	public ParserRule getSpecialAccessExpressionRule() {
		return getSpecialAccessExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID returns ecore::EString:
	//  ID ("'")*;
	public PrimeIDElements getPrimeIDAccess() {
		return pPrimeID;
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference returns ValuedObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?;
	public ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return pValuedObjectReference;
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference returns ScheduleObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    priority=INT
	//    ('annotated(' (annotations += QuotedStringAnnotation)+ ')')?
	//    ;
	public ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return pScheduleObjectReference;
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list.
	//ReferenceCall returns ReferenceCall:
	//    super?='super.'?
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (
	//        ('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()'
	//    );
	public ReferenceCallElements getReferenceCallAccess() {
		return pReferenceCall;
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomCall returns RandomCall:
	//    {RandomCall}
	//    'random' ('()')?;
	public RandomCallElements getRandomCallAccess() {
		return pRandomCall;
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomizeCall returns RandomizeCall:
	//    {RandomizeCall}
	//    'randomize' ('()')?;
	public RandomizeCallElements getRandomizeCallAccess() {
		return pRandomizeCall;
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list.
	//FunctionCall returns FunctionCall:
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall returns PrintCall:
	//    {PrintCall}
	//    'print'
	//    (
	//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
	//    |
	//        '()'
	//    );
	public PrintCallElements getPrintCallAccess() {
		return pPrintCall;
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter returns Parameter:
	//    (accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression returns TextExpression:
	//    (annotations += Annotation)*
	//    text=HOSTCODE;
	public TextExpressionElements getTextExpressionAccess() {
		return pTextExpression;
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue returns IntValue:
	//    value=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue returns FloatValue:
	//    value=FLOAT;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue returns BoolValue:
	//    value=BOOLEAN;
	public BoolValueElements getBoolValueAccess() {
		return pBoolValue;
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue returns VectorValue:
	//    '{' (
	//        values+=VectorValueMember (',' values+=VectorValueMember)*
	//        |
	//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
	//    ) '}';
	public VectorValueElements getVectorValueAccess() {
		return pVectorValue;
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember returns Expression:
	//    BoolExpression | ValuedExpression | IgnoreValue;
	public VectorValueMemberElements getVectorValueMemberAccess() {
		return pVectorValueMember;
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue returns IgnoreValue:
	//    {IgnoreValue} '_';
	public IgnoreValueElements getIgnoreValueAccess() {
		return pIgnoreValue;
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext.
	//AnyType returns ecore::EString:
	//    BOOLEAN | INT | FLOAT | ID | STRING;
	public AnyTypeElements getAnyTypeAccess() {
		return pAnyType;
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue returns Value:
	//    IntValue | FloatValue | BoolValue | StringValue;
	public AnyValueElements getAnyValueAccess() {
		return pAnyValue;
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//// -------------------- //
	////  KExpressions Enums  //
	//// -------------------- //
	//enum CompareOperator returns OperatorType:
	//    EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//    PRE="pre";
	public PreOperatorElements getPreOperatorAccess() {
		return ePreOperator;
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//    BITWISE_NOT="~";
	public BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return eBitwiseNotOperator;
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//    BITWISE_XOR="^";
	public BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return eBitwiseXOrOperator;
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//    BITWISE_OR="|";
	public BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return eBitwiseOrOperator;
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//    BITWISE_AND="&";
	public BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return eBitwiseAndOperator;
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//    NOT="!";
	public NotOperatorElements getNotOperatorAccess() {
		return eNotOperator;
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//    ADD="+";
	public AddOperatorElements getAddOperatorAccess() {
		return eAddOperator;
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//    SUB="-";
	public SubOperatorElements getSubOperatorAccess() {
		return eSubOperator;
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//    MULT="*";
	public MultOperatorElements getMultOperatorAccess() {
		return eMultOperator;
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//    MOD="%";
	public ModOperatorElements getModOperatorAccess() {
		return eModOperator;
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//    DIV="/";
	public DivOperatorElements getDivOperatorAccess() {
		return eDivOperator;
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//    VAL="val";
	public ValOperatorElements getValOperatorAccess() {
		return eValOperator;
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//    LOGICAL_OR="||";
	public LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return eLogicalOrOperator;
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//    LOGICAL_AND="&&";
	public LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return eLogicalAndOperator;
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//    SHIFT_LEFT="<<";
	public ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return eShiftLeftOperator;
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//    SHIFT_RIGHT=">>";
	public ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return eShiftRightOperator;
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//    SHIFT_RIGHT_UNSIGNED=">>>";
	public ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return eShiftRightUnsignedOperator;
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//    POSTFIX_ADD="++";
	public PostfixAddElements getPostfixAddAccess() {
		return ePostfixAdd;
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//    POSTFIX_SUB="--";
	public PostfixSubElements getPostfixSubAccess() {
		return ePostfixSub;
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//    CONDITIONAL = "?";
	public ConditionalOperatorElements getConditionalOperatorAccess() {
		return eConditionalOperator;
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//    INIT = "->";
	public InitOperatorElements getInitOperatorAccess() {
		return eInitOperator;
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//    FBY = "fby";
	public FbyOperatorElements getFbyOperatorAccess() {
		return eFbyOperator;
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//    SFBY = "sfby";
	public SfbyOperatorElements getSfbyOperatorAccess() {
		return eSfbyOperator;
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum ValueType returns ValueType:
	//    PURE="pure" | BOOL="bool" |
	//    INT="int" | FLOAT="float" |
	//    STRING="string";
	public ValueTypeElements getValueTypeAccess() {
		return eValueType;
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//    HOST="host";
	public HostTypeElements getHostTypeAccess() {
		return eHostType;
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//    STRUCT="struct";
	public StructTypeElements getStructTypeAccess() {
		return eStructType;
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//    CLASS="class";
	public ClassTypeElements getClassTypeAccess() {
		return eClassType;
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum EnumType returns ValueType:
	//    ENUM="enum";
	public EnumTypeElements getEnumTypeAccess() {
		return eEnumType;
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//enum CombineOperator returns CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="|" | AND="&" | HOST="host";
	public CombineOperatorElements getCombineOperatorAccess() {
		return eCombineOperator;
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier returns AccessModifier:
	//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
	public AccessModifierElements getAccessModifierAccess() {
		return eAccessModifier;
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//    VOID="void" |
	//    BOOL="bool" | INT="int" | FLOAT="float" |
	//    STRING="string";
	public MethodReturnTypeElements getMethodReturnTypeAccess() {
		return eMethodReturnType;
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType returns ParameterAccessType:
	//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
	//;
	public ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return eParameterAccessType;
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                //
	//// -------------------- //
	//JsonObjectValue returns JsonObjectValue:
	//    {JsonObjectValue}
	//    '{'
	//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
	//    '}';
	public JsonObjectValueElements getJsonObjectValueAccess() {
		return pJsonObjectValue;
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember returns JsonObjectMember:
	//    key=STRING ':' value=JsonValue;
	public JsonObjectMemberElements getJsonObjectMemberAccess() {
		return pJsonObjectMember;
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue returns JsonArrayValue:
	//    {JsonArrayValue}
	//    '['
	//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
	//    ']';
	public JsonArrayValueElements getJsonArrayValueAccess() {
		return pJsonArrayValue;
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue returns Value:
	//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public JsonValueElements getJsonValueAccess() {
		return pJsonValue;
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue returns NullValue:
	//    {NullValue}
	//    'null';
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma returns JsonPragma:
	//    '#' name=ExtendedID value=JsonObjectValue;
	public JsonPragmaElements getJsonPragmaAccess() {
		return pJsonPragma;
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation returns JsonAnnotation:
	//    '@' name=ExtendedID value=JsonObjectValue;
	public JsonAnnotationElements getJsonAnnotationAccess() {
		return pJsonAnnotation;
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma returns annotations::Pragma:
	//    super | JsonPragma;
	public PragmaElements getPragmaAccess() {
		return pPragma;
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public ValuedAnnotationElements getValuedAnnotationAccess() {
		return pValuedAnnotation;
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return pQuotedStringAnnotation;
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// OO
	//ThisExpression returns ThisExpression:
	//    {ThisExpression}
	//    'this';
	public ThisExpressionElements getThisExpressionAccess() {
		return pThisExpression;
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//// ------------------------ //
	////  KExpressions Terminals  //
	//// ------------------------ //
	//// Hostcode Terminals
	//// Custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE returns ecore::EString:
	//    "`" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"`") )* "`";
	public TerminalRule getHOSTCODERule() {
		return tHOSTCODE;
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// ------------------ //
	////  Annotation Rules  //
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters!
	//Annotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.
	//Pragma returns Pragma:
	//    StringPragma |
	//    PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations.
	//// You can use this rule in derived grammars if you don't want to permit typed strings.
	//RestrictedTypeAnnotation returns Annotation:
	//    CommentAnnotation |
	//    RestrictedKeyStringValueAnnotation |
	//    RestrictedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in
	//// derived grammars if you don't want to permit unquoted strings.
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)
	//QuotedStringAnnotation returns Annotation:
	//    CommentAnnotation |
	//    QuotedKeyStringValueAnnotation |
	//    QuotedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation returns CommentAnnotation:
	//    values += COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL returns CommentAnnotation:
	//    values += SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation returns TagAnnotation:
	//    '@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag returns Pragma:
	//    '#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.
	//KeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma returns StringPragma:
	//    '#' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString returns ecore::EString:
	//    STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID returns ecore::EString:
	//  ID (('.'|'-') ID)* (('#') INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID returns ecore::EString:
	//  ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer returns ecore::EInt:
	//    '-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger returns ecore::EDouble:
	//    '-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//// ---------------------- //
	////  Annotation Terminals  //
	//// ---------------------- //
	//// Comment Annotation Terminal
	//// Custom terminal rule introducing semantic comments.
	//terminal COMMENT_ANNOTATION returns ecore::EString:
	//    '/**' -> '*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//// Multiline Comment Terminal
	//// Modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one.
	//@Override
	//terminal ML_COMMENT returns ecore::EString:
	//    '/*'!'*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION returns ecore::EString:
	//    '//*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '//' !'*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	}
	
	//// Number Terminal
	//terminal fragment NUMBER :
	//    '0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//// Integer Terminal
	//// An INT is a list of numbers.
	//@Override
	//terminal INT returns ecore::EInt:
	//    NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//// Float Terminal (internal precision: double!)
	//// Make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EDouble:
	//    NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
	//    NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//// Boolean Terminal
	//// Introduce boolean values.
	//terminal BOOLEAN returns ecore::EBooleanObject :
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//// String Terminal
	//// Custom terminal rule for strings, only use double quotes.
	//@Override
	//terminal STRING returns ecore::EString:
	//    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?(('_'?'a'..'z'|'_'?'A'..'Z')|'_''0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
