/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kexpressions.kext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KExtGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class KextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.Kext");
		private final Assignment cScopesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cScopesRootScopeParserRuleCall_0 = (RuleCall)cScopesAssignment.eContents().get(0);
		
		///**
		// * @author ssm
		// * @kieler.design 2015-08-23 proposed
		// * @kieler.rating 2015-08-23 proposed yellow
		// */
		///*
		// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
		// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language
		// * that is used for testing kexpressions and keffects.
		// */
		//// ------------ //
		////  KEXT Rules  //
		//// ------------ //
		//// KEXT Rule
		//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of
		//// test entities may follow.
		//Kext returns kext::Kext:
		//    scopes+=RootScope;
		@Override public ParserRule getRule() { return rule; }
		
		//scopes+=RootScope
		public Assignment getScopesAssignment() { return cScopesAssignment; }
		
		//RootScope
		public RuleCall getScopesRootScopeParserRuleCall_0() { return cScopesRootScopeParserRuleCall_0; }
	}
	public class RootScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.RootScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKExtScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesTestEntityParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cScopeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cScopesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cScopesScopeParserRuleCall_3_1_0 = (RuleCall)cScopesAssignment_3_1.eContents().get(0);
		
		//RootScope returns kext::KExtScope:
		//    {kext::KExtScope}
		//    declarations+=Declaration*
		//    entities+=TestEntity*
		//    ('scope' scopes+=Scope)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{kext::KExtScope}
		//declarations+=Declaration*
		//entities+=TestEntity*
		//('scope' scopes+=Scope)*
		public Group getGroup() { return cGroup; }
		
		//{kext::KExtScope}
		public Action getKExtScopeAction_0() { return cKExtScopeAction_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }
		
		//entities+=TestEntity*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }
		
		//TestEntity
		public RuleCall getEntitiesTestEntityParserRuleCall_2_0() { return cEntitiesTestEntityParserRuleCall_2_0; }
		
		//('scope' scopes+=Scope)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'scope'
		public Keyword getScopeKeyword_3_0() { return cScopeKeyword_3_0; }
		
		//scopes+=Scope
		public Assignment getScopesAssignment_3_1() { return cScopesAssignment_3_1; }
		
		//Scope
		public RuleCall getScopesScopeParserRuleCall_3_1_0() { return cScopesScopeParserRuleCall_3_1_0; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKExtScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesTestEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cScopeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cScopesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cScopesScopeParserRuleCall_5_1_0 = (RuleCall)cScopesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Scope returns kext::KExtScope:
		//    {kext::KExtScope}
		//    (name=ID)? '{'
		//    declarations+=Declaration*
		//    entities+=TestEntity*
		//    ('scope' scopes+=Scope)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{kext::KExtScope}
		//(name=ID)? '{'
		//declarations+=Declaration*
		//entities+=TestEntity*
		//('scope' scopes+=Scope)* '}'
		public Group getGroup() { return cGroup; }
		
		//{kext::KExtScope}
		public Action getKExtScopeAction_0() { return cKExtScopeAction_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//entities+=TestEntity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }
		
		//TestEntity
		public RuleCall getEntitiesTestEntityParserRuleCall_4_0() { return cEntitiesTestEntityParserRuleCall_4_0; }
		
		//('scope' scopes+=Scope)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'scope'
		public Keyword getScopeKeyword_5_0() { return cScopeKeyword_5_0; }
		
		//scopes+=Scope
		public Assignment getScopesAssignment_5_1() { return cScopesAssignment_5_1; }
		
		//Scope
		public RuleCall getScopesScopeParserRuleCall_5_1_0() { return cScopesScopeParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TestEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.TestEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cExpressionAlternatives_0_0 = (Alternatives)cExpressionAssignment_0.eContents().get(0);
		private final RuleCall cExpressionAnnotatedExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionAlternatives_0_0.eContents().get(0);
		private final RuleCall cExpressionAnnotatedJsonExpressionParserRuleCall_0_0_1 = (RuleCall)cExpressionAlternatives_0_0.eContents().get(1);
		private final Assignment cEffectAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEffectEffectParserRuleCall_1_0 = (RuleCall)cEffectAssignment_1.eContents().get(0);
		
		//// Test Entity Rule
		//// A test entity is either an annotation expression or an effect.
		//TestEntity returns kext::TestEntity:
		//    expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression=(AnnotatedExpression | AnnotatedJsonExpression)
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//(AnnotatedExpression | AnnotatedJsonExpression)
		public Alternatives getExpressionAlternatives_0_0() { return cExpressionAlternatives_0_0; }
		
		//AnnotatedExpression
		public RuleCall getExpressionAnnotatedExpressionParserRuleCall_0_0_0() { return cExpressionAnnotatedExpressionParserRuleCall_0_0_0; }
		
		//AnnotatedJsonExpression
		public RuleCall getExpressionAnnotatedJsonExpressionParserRuleCall_0_0_1() { return cExpressionAnnotatedJsonExpressionParserRuleCall_0_0_1; }
		
		//effect=Effect
		public Assignment getEffectAssignment_1() { return cEffectAssignment_1; }
		
		//Effect
		public RuleCall getEffectEffectParserRuleCall_1_0() { return cEffectEffectParserRuleCall_1_0; }
	}
	public class AnnotatedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.AnnotatedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//// Annotated Expression Rule
		//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
		//// of annotations. The expression itself follows the keyword.
		//AnnotatedExpression returns kext::AnnotatedExpression:
		//    annotations+=Annotation*
		//    'expression'
		//    expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//'expression'
		//expression=Expression
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_1() { return cExpressionKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class AnnotatedJsonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.AnnotatedJsonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cJsonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionJsonObjectValueParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AnnotatedJsonExpression returns kext::AnnotatedExpression:
		//    annotations+=Annotation*
		//    'json'
		//    expression=JsonObjectValue;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//'json'
		//expression=JsonObjectValue
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'json'
		public Keyword getJsonKeyword_1() { return cJsonKeyword_1; }
		
		//expression=JsonObjectValue
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//JsonObjectValue
		public RuleCall getExpressionJsonObjectValueParserRuleCall_2_0() { return cExpressionJsonObjectValueParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScheduleDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClassDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Declaration Rule
		//// A declaration follows the general KIELER pattern for variable declaration. More specific:
		//// this centralized declaration rule should replace any other declaration in drived grammars.
		//// It may start with arbitrary many declarations followed by keywords affecting the type of the
		//// valued objects that follow.
		//// Examples: const float pi = 3.14, input signal I, output bool z
		//Declaration returns kexpressions::Declaration:
		//    VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//ReferenceDeclaration
		public RuleCall getReferenceDeclarationParserRuleCall_1() { return cReferenceDeclarationParserRuleCall_1; }
		
		//ScheduleDeclaration
		public RuleCall getScheduleDeclarationParserRuleCall_2() { return cScheduleDeclarationParserRuleCall_2; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_3() { return cClassDeclarationParserRuleCall_3; }
	}
	public class DeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.DeclarationWOSemicolon");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationWOSemicolonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceDeclarationWOSemicolonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScheduleDeclarationWOSemicolonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClassDeclarationWOSemicolonParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DeclarationWOSemicolon returns kexpressions::Declaration:
		//    VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getVariableDeclarationWOSemicolonParserRuleCall_0() { return cVariableDeclarationWOSemicolonParserRuleCall_0; }
		
		//ReferenceDeclarationWOSemicolon
		public RuleCall getReferenceDeclarationWOSemicolonParserRuleCall_1() { return cReferenceDeclarationWOSemicolonParserRuleCall_1; }
		
		//ScheduleDeclarationWOSemicolon
		public RuleCall getScheduleDeclarationWOSemicolonParserRuleCall_2() { return cScheduleDeclarationWOSemicolonParserRuleCall_2; }
		
		//ClassDeclarationWOSemicolon
		public RuleCall getClassDeclarationWOSemicolonParserRuleCall_3() { return cClassDeclarationWOSemicolonParserRuleCall_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessModifierEnumRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Assignment cConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstConstKeyword_2_0 = (Keyword)cConstAssignment_2.eContents().get(0);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInputInputKeyword_3_0 = (Keyword)cInputAssignment_3.eContents().get(0);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOutputOutputKeyword_4_0 = (Keyword)cOutputAssignment_4.eContents().get(0);
		private final Assignment cGlobalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cGlobalGlobalKeyword_5_0 = (Keyword)cGlobalAssignment_5.eContents().get(0);
		private final Assignment cStaticAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cStaticStaticKeyword_6_0 = (Keyword)cStaticAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Assignment cSignalAssignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final Keyword cSignalSignalKeyword_7_0_0_0 = (Keyword)cSignalAssignment_7_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_7_0_1_0 = (RuleCall)cTypeAssignment_7_0_1.eContents().get(0);
		private final Assignment cSignalAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cSignalSignalKeyword_7_1_0 = (Keyword)cSignalAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cAlternatives_7.eContents().get(2);
		private final Assignment cTypeAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final RuleCall cTypeHostTypeEnumRuleCall_7_2_0_0 = (RuleCall)cTypeAssignment_7_2_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_7_2_1_0 = (RuleCall)cHostTypeAssignment_7_2_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_8_0 = (RuleCall)cValuedObjectsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_9_1_0 = (RuleCall)cValuedObjectsAssignment_9_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAnnotationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_11_0 = (RuleCall)cAnnotationsAssignment_11.eContents().get(0);
		
		//VariableDeclaration returns kexpressions::VariableDeclaration:
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    const?='const'?
		//    input?='input'?
		//    output?='output'?
		//    global?='global'?
		//    static?='static'?
		//    (
		//        (signal?='signal'? type = ValueType)
		//        |
		//        signal?='signal'
		//        |
		//        (type = HostType hostType = STRING)
		//    )
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
		//    annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//access=AccessModifier?
		//const?='const'?
		//input?='input'?
		//output?='output'?
		//global?='global'?
		//static?='static'?
		//(
		//    (signal?='signal'? type = ValueType)
		//    |
		//    signal?='signal'
		//    |
		//    (type = HostType hostType = STRING)
		//)
		//valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_1_0() { return cAccessAccessModifierEnumRuleCall_1_0; }
		
		//const?='const'?
		public Assignment getConstAssignment_2() { return cConstAssignment_2; }
		
		//'const'
		public Keyword getConstConstKeyword_2_0() { return cConstConstKeyword_2_0; }
		
		//input?='input'?
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }
		
		//'input'
		public Keyword getInputInputKeyword_3_0() { return cInputInputKeyword_3_0; }
		
		//output?='output'?
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//'output'
		public Keyword getOutputOutputKeyword_4_0() { return cOutputOutputKeyword_4_0; }
		
		//global?='global'?
		public Assignment getGlobalAssignment_5() { return cGlobalAssignment_5; }
		
		//'global'
		public Keyword getGlobalGlobalKeyword_5_0() { return cGlobalGlobalKeyword_5_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_6() { return cStaticAssignment_6; }
		
		//'static'
		public Keyword getStaticStaticKeyword_6_0() { return cStaticStaticKeyword_6_0; }
		
		//(
		//    (signal?='signal'? type = ValueType)
		//    |
		//    signal?='signal'
		//    |
		//    (type = HostType hostType = STRING)
		//)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//(signal?='signal'? type = ValueType)
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//signal?='signal'?
		public Assignment getSignalAssignment_7_0_0() { return cSignalAssignment_7_0_0; }
		
		//'signal'
		public Keyword getSignalSignalKeyword_7_0_0_0() { return cSignalSignalKeyword_7_0_0_0; }
		
		//type = ValueType
		public Assignment getTypeAssignment_7_0_1() { return cTypeAssignment_7_0_1; }
		
		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_7_0_1_0() { return cTypeValueTypeEnumRuleCall_7_0_1_0; }
		
		//signal?='signal'
		public Assignment getSignalAssignment_7_1() { return cSignalAssignment_7_1; }
		
		//'signal'
		public Keyword getSignalSignalKeyword_7_1_0() { return cSignalSignalKeyword_7_1_0; }
		
		//(type = HostType hostType = STRING)
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//type = HostType
		public Assignment getTypeAssignment_7_2_0() { return cTypeAssignment_7_2_0; }
		
		//HostType
		public RuleCall getTypeHostTypeEnumRuleCall_7_2_0_0() { return cTypeHostTypeEnumRuleCall_7_2_0_0; }
		
		//hostType = STRING
		public Assignment getHostTypeAssignment_7_2_1() { return cHostTypeAssignment_7_2_1; }
		
		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_7_2_1_0() { return cHostTypeSTRINGTerminalRuleCall_7_2_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_8() { return cValuedObjectsAssignment_8; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_8_0() { return cValuedObjectsValuedObjectParserRuleCall_8_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_9_1() { return cValuedObjectsAssignment_9_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_9_1_0() { return cValuedObjectsValuedObjectParserRuleCall_9_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_11() { return cAnnotationsAssignment_11; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_11_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_11_0; }
	}
	public class VariableDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.VariableDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessModifierEnumRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInputInputKeyword_2_0 = (Keyword)cInputAssignment_2.eContents().get(0);
		private final Assignment cOutputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cOutputOutputKeyword_3_0 = (Keyword)cOutputAssignment_3.eContents().get(0);
		private final Assignment cConstAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cConstConstKeyword_4_0 = (Keyword)cConstAssignment_4.eContents().get(0);
		private final Assignment cGlobalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cGlobalGlobalKeyword_5_0 = (Keyword)cGlobalAssignment_5.eContents().get(0);
		private final Assignment cStaticAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cStaticStaticKeyword_6_0 = (Keyword)cStaticAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Assignment cSignalAssignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final Keyword cSignalSignalKeyword_7_0_0_0 = (Keyword)cSignalAssignment_7_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_7_0_1_0 = (RuleCall)cTypeAssignment_7_0_1.eContents().get(0);
		private final Assignment cSignalAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cSignalSignalKeyword_7_1_0 = (Keyword)cSignalAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cAlternatives_7.eContents().get(2);
		private final Assignment cTypeAssignment_7_2_0 = (Assignment)cGroup_7_2.eContents().get(0);
		private final RuleCall cTypeHostTypeEnumRuleCall_7_2_0_0 = (RuleCall)cTypeAssignment_7_2_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_7_2_1_0 = (RuleCall)cHostTypeAssignment_7_2_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_8_0 = (RuleCall)cValuedObjectsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_9_1_0 = (RuleCall)cValuedObjectsAssignment_9_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_10_0 = (RuleCall)cAnnotationsAssignment_10.eContents().get(0);
		
		//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    input?='input'?
		//    output?='output'?
		//    const?='const'?
		//    global?='global'?
		//    static?='static'?
		//    (
		//        (signal?='signal'? type = ValueType)
		//        | signal?='signal'
		//        | (type = HostType hostType = STRING)
		//    )
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//    annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//access=AccessModifier?
		//input?='input'?
		//output?='output'?
		//const?='const'?
		//global?='global'?
		//static?='static'?
		//(
		//    (signal?='signal'? type = ValueType)
		//    | signal?='signal'
		//    | (type = HostType hostType = STRING)
		//)
		//valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_1_0() { return cAccessAccessModifierEnumRuleCall_1_0; }
		
		//input?='input'?
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//'input'
		public Keyword getInputInputKeyword_2_0() { return cInputInputKeyword_2_0; }
		
		//output?='output'?
		public Assignment getOutputAssignment_3() { return cOutputAssignment_3; }
		
		//'output'
		public Keyword getOutputOutputKeyword_3_0() { return cOutputOutputKeyword_3_0; }
		
		//const?='const'?
		public Assignment getConstAssignment_4() { return cConstAssignment_4; }
		
		//'const'
		public Keyword getConstConstKeyword_4_0() { return cConstConstKeyword_4_0; }
		
		//global?='global'?
		public Assignment getGlobalAssignment_5() { return cGlobalAssignment_5; }
		
		//'global'
		public Keyword getGlobalGlobalKeyword_5_0() { return cGlobalGlobalKeyword_5_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_6() { return cStaticAssignment_6; }
		
		//'static'
		public Keyword getStaticStaticKeyword_6_0() { return cStaticStaticKeyword_6_0; }
		
		//(
		//    (signal?='signal'? type = ValueType)
		//    | signal?='signal'
		//    | (type = HostType hostType = STRING)
		//)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//(signal?='signal'? type = ValueType)
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//signal?='signal'?
		public Assignment getSignalAssignment_7_0_0() { return cSignalAssignment_7_0_0; }
		
		//'signal'
		public Keyword getSignalSignalKeyword_7_0_0_0() { return cSignalSignalKeyword_7_0_0_0; }
		
		//type = ValueType
		public Assignment getTypeAssignment_7_0_1() { return cTypeAssignment_7_0_1; }
		
		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_7_0_1_0() { return cTypeValueTypeEnumRuleCall_7_0_1_0; }
		
		//signal?='signal'
		public Assignment getSignalAssignment_7_1() { return cSignalAssignment_7_1; }
		
		//'signal'
		public Keyword getSignalSignalKeyword_7_1_0() { return cSignalSignalKeyword_7_1_0; }
		
		//(type = HostType hostType = STRING)
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//type = HostType
		public Assignment getTypeAssignment_7_2_0() { return cTypeAssignment_7_2_0; }
		
		//HostType
		public RuleCall getTypeHostTypeEnumRuleCall_7_2_0_0() { return cTypeHostTypeEnumRuleCall_7_2_0_0; }
		
		//hostType = STRING
		public Assignment getHostTypeAssignment_7_2_1() { return cHostTypeAssignment_7_2_1; }
		
		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_7_2_1_0() { return cHostTypeSTRINGTerminalRuleCall_7_2_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_8() { return cValuedObjectsAssignment_8; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_8_0() { return cValuedObjectsValuedObjectParserRuleCall_8_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_9_1() { return cValuedObjectsAssignment_9_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_9_1_0() { return cValuedObjectsValuedObjectParserRuleCall_9_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_10() { return cAnnotationsAssignment_10; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_10_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_10_0; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHostHostKeyword_3_0 = (Keyword)cHostAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cTypeClassTypeEnumRuleCall_4_0_0_0 = (RuleCall)cTypeAssignment_4_0_0.eContents().get(0);
		private final Assignment cNameAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_4_0_1_0 = (RuleCall)cNameAssignment_4_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Assignment cDeclarationsAssignment_4_0_3 = (Assignment)cGroup_4_0.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationOrMethodParserRuleCall_4_0_3_0 = (RuleCall)cDeclarationsAssignment_4_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_4 = (Keyword)cGroup_4_0.eContents().get(4);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cTypeAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTypeStructTypeEnumRuleCall_4_1_0_0 = (RuleCall)cTypeAssignment_4_1_0.eContents().get(0);
		private final Assignment cNameAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_4_1_1_0 = (RuleCall)cNameAssignment_4_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cDeclarationsAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_1_3_0 = (RuleCall)cDeclarationsAssignment_4_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_4 = (Keyword)cGroup_4_1.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cValuedObjectsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_5_0_0 = (RuleCall)cValuedObjectsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_5_1_1_0 = (RuleCall)cValuedObjectsAssignment_5_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAnnotationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_7_0 = (RuleCall)cAnnotationsAssignment_7.eContents().get(0);
		
		//ClassDeclaration returns kext::ClassDeclaration:
		//    {kext::ClassDeclaration}
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    host?='host'?
		//    ((
		//        type = ClassType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationOrMethod*
		//        '}'
		//    )|(
		//        type = StructType
		//        (name = EString)?
		//        '{'
		//            declarations+=Declaration*
		//        '}'
		//    ))
		//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//    ';'
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kext::ClassDeclaration}
		//annotations+=Annotation*
		//access=AccessModifier?
		//host?='host'?
		//((
		//    type = ClassType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationOrMethod*
		//    '}'
		//)|(
		//    type = StructType
		//    (name = EString)?
		//    '{'
		//        declarations+=Declaration*
		//    '}'
		//))
		//(valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//';'
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{kext::ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//host?='host'?
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//'host'
		public Keyword getHostHostKeyword_3_0() { return cHostHostKeyword_3_0; }
		
		//((
		//    type = ClassType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationOrMethod*
		//    '}'
		//)|(
		//    type = StructType
		//    (name = EString)?
		//    '{'
		//        declarations+=Declaration*
		//    '}'
		//))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(
		//        type = ClassType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationOrMethod*
		//        '}'
		//    )
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//type = ClassType
		public Assignment getTypeAssignment_4_0_0() { return cTypeAssignment_4_0_0; }
		
		//ClassType
		public RuleCall getTypeClassTypeEnumRuleCall_4_0_0_0() { return cTypeClassTypeEnumRuleCall_4_0_0_0; }
		
		//(name = EString)?
		public Assignment getNameAssignment_4_0_1() { return cNameAssignment_4_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0_1_0() { return cNameEStringParserRuleCall_4_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0_2() { return cLeftCurlyBracketKeyword_4_0_2; }
		
		//declarations+=DeclarationOrMethod*
		public Assignment getDeclarationsAssignment_4_0_3() { return cDeclarationsAssignment_4_0_3; }
		
		//DeclarationOrMethod
		public RuleCall getDeclarationsDeclarationOrMethodParserRuleCall_4_0_3_0() { return cDeclarationsDeclarationOrMethodParserRuleCall_4_0_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_4() { return cRightCurlyBracketKeyword_4_0_4; }
		
		//(
		//        type = StructType
		//        (name = EString)?
		//        '{'
		//            declarations+=Declaration*
		//        '}'
		//    )
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//type = StructType
		public Assignment getTypeAssignment_4_1_0() { return cTypeAssignment_4_1_0; }
		
		//StructType
		public RuleCall getTypeStructTypeEnumRuleCall_4_1_0_0() { return cTypeStructTypeEnumRuleCall_4_1_0_0; }
		
		//(name = EString)?
		public Assignment getNameAssignment_4_1_1() { return cNameAssignment_4_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_1_1_0() { return cNameEStringParserRuleCall_4_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_2() { return cLeftCurlyBracketKeyword_4_1_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4_1_3() { return cDeclarationsAssignment_4_1_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_1_3_0() { return cDeclarationsDeclarationParserRuleCall_4_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_4() { return cRightCurlyBracketKeyword_4_1_4; }
		
		//(valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_5_0() { return cValuedObjectsAssignment_5_0; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_5_0_0() { return cValuedObjectsValuedObjectParserRuleCall_5_0_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_5_1_1() { return cValuedObjectsAssignment_5_1_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_5_1_1_0() { return cValuedObjectsValuedObjectParserRuleCall_5_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_7() { return cAnnotationsAssignment_7; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_7_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_7_0; }
	}
	public class DeclarationOrMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.DeclarationOrMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DeclarationOrMethod returns kexpressions::Declaration:
		//    Declaration | EnumDeclaration | MethodDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | EnumDeclaration | MethodDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_1() { return cEnumDeclarationParserRuleCall_1; }
		
		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_2() { return cMethodDeclarationParserRuleCall_2; }
	}
	public class ClassDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ClassDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHostHostKeyword_3_0 = (Keyword)cHostAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cTypeClassTypeEnumRuleCall_4_0_0_0 = (RuleCall)cTypeAssignment_4_0_0.eContents().get(0);
		private final Assignment cNameAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_4_0_1_0 = (RuleCall)cNameAssignment_4_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Assignment cDeclarationsAssignment_4_0_3 = (Assignment)cGroup_4_0.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_4_0_3_0 = (RuleCall)cDeclarationsAssignment_4_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_4 = (Keyword)cGroup_4_0.eContents().get(4);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cTypeAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTypeStructTypeEnumRuleCall_4_1_0_0 = (RuleCall)cTypeAssignment_4_1_0.eContents().get(0);
		private final Assignment cNameAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_4_1_1_0 = (RuleCall)cNameAssignment_4_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cDeclarationsAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_3_0 = (RuleCall)cDeclarationsAssignment_4_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_4 = (Keyword)cGroup_4_1.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cValuedObjectsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_5_0_0 = (RuleCall)cValuedObjectsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_5_1_1_0 = (RuleCall)cValuedObjectsAssignment_5_1_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_6_0 = (RuleCall)cAnnotationsAssignment_6.eContents().get(0);
		
		//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
		//    {kext::ClassDeclaration}
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    host?='host'?
		//    ((
		//        type = ClassType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationOrMethodWOSemicolon*
		//        '}'
		//    )|(
		//        type = StructType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationWOSemicolon*
		//        '}'
		//    ))
		//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kext::ClassDeclaration}
		//annotations+=Annotation*
		//access=AccessModifier?
		//host?='host'?
		//((
		//    type = ClassType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationOrMethodWOSemicolon*
		//    '}'
		//)|(
		//    type = StructType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationWOSemicolon*
		//    '}'
		//))
		//(valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{kext::ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//host?='host'?
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//'host'
		public Keyword getHostHostKeyword_3_0() { return cHostHostKeyword_3_0; }
		
		//((
		//    type = ClassType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationOrMethodWOSemicolon*
		//    '}'
		//)|(
		//    type = StructType
		//    (name = EString)?
		//    '{'
		//        declarations+=DeclarationWOSemicolon*
		//    '}'
		//))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(
		//        type = ClassType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationOrMethodWOSemicolon*
		//        '}'
		//    )
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//type = ClassType
		public Assignment getTypeAssignment_4_0_0() { return cTypeAssignment_4_0_0; }
		
		//ClassType
		public RuleCall getTypeClassTypeEnumRuleCall_4_0_0_0() { return cTypeClassTypeEnumRuleCall_4_0_0_0; }
		
		//(name = EString)?
		public Assignment getNameAssignment_4_0_1() { return cNameAssignment_4_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0_1_0() { return cNameEStringParserRuleCall_4_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0_2() { return cLeftCurlyBracketKeyword_4_0_2; }
		
		//declarations+=DeclarationOrMethodWOSemicolon*
		public Assignment getDeclarationsAssignment_4_0_3() { return cDeclarationsAssignment_4_0_3; }
		
		//DeclarationOrMethodWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_4_0_3_0() { return cDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_4_0_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_4() { return cRightCurlyBracketKeyword_4_0_4; }
		
		//(
		//        type = StructType
		//        (name = EString)?
		//        '{'
		//            declarations+=DeclarationWOSemicolon*
		//        '}'
		//    )
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//type = StructType
		public Assignment getTypeAssignment_4_1_0() { return cTypeAssignment_4_1_0; }
		
		//StructType
		public RuleCall getTypeStructTypeEnumRuleCall_4_1_0_0() { return cTypeStructTypeEnumRuleCall_4_1_0_0; }
		
		//(name = EString)?
		public Assignment getNameAssignment_4_1_1() { return cNameAssignment_4_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_1_1_0() { return cNameEStringParserRuleCall_4_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_2() { return cLeftCurlyBracketKeyword_4_1_2; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_4_1_3() { return cDeclarationsAssignment_4_1_3; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_3_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_4() { return cRightCurlyBracketKeyword_4_1_4; }
		
		//(valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_5_0() { return cValuedObjectsAssignment_5_0; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_5_0_0() { return cValuedObjectsValuedObjectParserRuleCall_5_0_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_5_1_1() { return cValuedObjectsAssignment_5_1_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_5_1_1_0() { return cValuedObjectsValuedObjectParserRuleCall_5_1_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_6() { return cAnnotationsAssignment_6; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_6_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_6_0; }
	}
	public class DeclarationOrMethodWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.DeclarationOrMethodWOSemicolon");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationWOSemicolonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumDeclarationWOSemicolonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclarationWOSemicolonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DeclarationOrMethodWOSemicolon returns kexpressions::Declaration:
		//    DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationWOSemicolonParserRuleCall_0() { return cDeclarationWOSemicolonParserRuleCall_0; }
		
		//EnumDeclarationWOSemicolon
		public RuleCall getEnumDeclarationWOSemicolonParserRuleCall_1() { return cEnumDeclarationWOSemicolonParserRuleCall_1; }
		
		//MethodDeclarationWOSemicolon
		public RuleCall getMethodDeclarationWOSemicolonParserRuleCall_2() { return cMethodDeclarationWOSemicolonParserRuleCall_2; }
	}
	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHostHostKeyword_3_0 = (Keyword)cHostAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeEnumTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_5_0 = (RuleCall)cValuedObjectsAssignment_5.eContents().get(0);
		private final Assignment cHostTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_6_0 = (RuleCall)cHostTypeAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDeclarationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDeclarationsEnumMemberDeclarationParserRuleCall_8_0 = (RuleCall)cDeclarationsAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cAnnotationsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_12_0 = (RuleCall)cAnnotationsAssignment_12.eContents().get(0);
		
		//EnumDeclaration returns kext::ClassDeclaration:
		//    {kext::ClassDeclaration}
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    host?='host'?
		//    type = EnumType
		//    valuedObjects+=SimpleValuedObject
		//    (hostType=STRING)?
		//    '{'
		//        declarations+=EnumMemberDeclaration
		//        ';'
		//    '}'
		//    ';'
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kext::ClassDeclaration}
		//annotations+=Annotation*
		//access=AccessModifier?
		//host?='host'?
		//type = EnumType
		//valuedObjects+=SimpleValuedObject
		//(hostType=STRING)?
		//'{'
		//    declarations+=EnumMemberDeclaration
		//    ';'
		//'}'
		//';'
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{kext::ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//host?='host'?
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//'host'
		public Keyword getHostHostKeyword_3_0() { return cHostHostKeyword_3_0; }
		
		//type = EnumType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//EnumType
		public RuleCall getTypeEnumTypeEnumRuleCall_4_0() { return cTypeEnumTypeEnumRuleCall_4_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_5() { return cValuedObjectsAssignment_5; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_5_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_5_0; }
		
		//(hostType=STRING)?
		public Assignment getHostTypeAssignment_6() { return cHostTypeAssignment_6; }
		
		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_6_0() { return cHostTypeSTRINGTerminalRuleCall_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//declarations+=EnumMemberDeclaration
		public Assignment getDeclarationsAssignment_8() { return cDeclarationsAssignment_8; }
		
		//EnumMemberDeclaration
		public RuleCall getDeclarationsEnumMemberDeclarationParserRuleCall_8_0() { return cDeclarationsEnumMemberDeclarationParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_12() { return cAnnotationsAssignment_12; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_12_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_12_0; }
	}
	public class EnumMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.EnumMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsQuotedStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_1_0 = (RuleCall)cValuedObjectsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_2_1_0 = (RuleCall)cValuedObjectsAssignment_2_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_3_0 = (RuleCall)cAnnotationsAssignment_3.eContents().get(0);
		
		//EnumMemberDeclaration returns kexpressions::VariableDeclaration:
		//    annotations+=QuotedStringAnnotation*
		//    valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=QuotedStringAnnotation*
		//valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//annotations+=QuotedStringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//QuotedStringAnnotation
		public RuleCall getAnnotationsQuotedStringAnnotationParserRuleCall_0_0() { return cAnnotationsQuotedStringAnnotationParserRuleCall_0_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_1() { return cValuedObjectsAssignment_1; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_1_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_1_0; }
		
		//(',' valuedObjects+=SimpleValuedObject)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_2_1() { return cValuedObjectsAssignment_2_1; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_2_1_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_2_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_3() { return cAnnotationsAssignment_3; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_3_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_3_0; }
	}
	public class EnumDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.EnumDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cHostHostKeyword_3_0 = (Keyword)cHostAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeEnumTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_5_0 = (RuleCall)cValuedObjectsAssignment_5.eContents().get(0);
		private final Assignment cHostTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_6_0 = (RuleCall)cHostTypeAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDeclarationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDeclarationsEnumMemberDeclarationParserRuleCall_8_0 = (RuleCall)cDeclarationsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAnnotationsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_10_0 = (RuleCall)cAnnotationsAssignment_10.eContents().get(0);
		
		//EnumDeclarationWOSemicolon returns kext::ClassDeclaration:
		//    {kext::ClassDeclaration}
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    host?='host'?
		//    type = EnumType
		//    valuedObjects+=SimpleValuedObject
		//    (hostType = STRING)?
		//    '{'
		//        declarations+=EnumMemberDeclaration
		//    '}'
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kext::ClassDeclaration}
		//annotations+=Annotation*
		//access=AccessModifier?
		//host?='host'?
		//type = EnumType
		//valuedObjects+=SimpleValuedObject
		//(hostType = STRING)?
		//'{'
		//    declarations+=EnumMemberDeclaration
		//'}'
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{kext::ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//host?='host'?
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//'host'
		public Keyword getHostHostKeyword_3_0() { return cHostHostKeyword_3_0; }
		
		//type = EnumType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//EnumType
		public RuleCall getTypeEnumTypeEnumRuleCall_4_0() { return cTypeEnumTypeEnumRuleCall_4_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_5() { return cValuedObjectsAssignment_5; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_5_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_5_0; }
		
		//(hostType = STRING)?
		public Assignment getHostTypeAssignment_6() { return cHostTypeAssignment_6; }
		
		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_6_0() { return cHostTypeSTRINGTerminalRuleCall_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//declarations+=EnumMemberDeclaration
		public Assignment getDeclarationsAssignment_8() { return cDeclarationsAssignment_8; }
		
		//EnumMemberDeclaration
		public RuleCall getDeclarationsEnumMemberDeclarationParserRuleCall_8_0() { return cDeclarationsEnumMemberDeclarationParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_10() { return cAnnotationsAssignment_10; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_10_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_10_0; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cReturnTypeMethodReturnTypeEnumRuleCall_3_0_0 = (RuleCall)cReturnTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cReturnTypeAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cReturnTypeHostTypeEnumRuleCall_3_1_0_0 = (RuleCall)cReturnTypeAssignment_3_1_0.eContents().get(0);
		private final Assignment cReturnHostTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cReturnHostTypeSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cReturnHostTypeAssignment_3_1_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_4_0 = (RuleCall)cValuedObjectsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cCommaKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cScheduleKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cScheduleAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_6_1_0 = (RuleCall)cScheduleAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAnnotationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_8_0 = (RuleCall)cAnnotationsAssignment_8.eContents().get(0);
		
		//MethodDeclaration returns kexpressions::MethodDeclaration:
		//    {kexpressions::MethodDeclaration}
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
		//    valuedObjects+=SimpleValuedObject
		//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//    ';'
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::MethodDeclaration}
		//annotations+=Annotation*
		//access=AccessModifier?
		//(returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
		//valuedObjects+=SimpleValuedObject
		//(('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		//('schedule' schedule+=ScheduleObjectReference+)?
		//';'
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{kexpressions::MethodDeclaration}
		public Action getMethodDeclarationAction_0() { return cMethodDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//(returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//returnType=MethodReturnType
		public Assignment getReturnTypeAssignment_3_0() { return cReturnTypeAssignment_3_0; }
		
		//MethodReturnType
		public RuleCall getReturnTypeMethodReturnTypeEnumRuleCall_3_0_0() { return cReturnTypeMethodReturnTypeEnumRuleCall_3_0_0; }
		
		//(returnType=HostType returnHostType=STRING)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//returnType=HostType
		public Assignment getReturnTypeAssignment_3_1_0() { return cReturnTypeAssignment_3_1_0; }
		
		//HostType
		public RuleCall getReturnTypeHostTypeEnumRuleCall_3_1_0_0() { return cReturnTypeHostTypeEnumRuleCall_3_1_0_0; }
		
		//returnHostType=STRING
		public Assignment getReturnHostTypeAssignment_3_1_1() { return cReturnHostTypeAssignment_3_1_1; }
		
		//STRING
		public RuleCall getReturnHostTypeSTRINGTerminalRuleCall_3_1_1_0() { return cReturnHostTypeSTRINGTerminalRuleCall_3_1_1_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_4() { return cValuedObjectsAssignment_4; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_4_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_4_0; }
		
		//(('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')')
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_1() { return cParameterDeclarationsAssignment_5_0_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0; }
		
		//(',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }
		
		//','
		public Keyword getCommaKeyword_5_0_2_0() { return cCommaKeyword_5_0_2_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_2_1() { return cParameterDeclarationsAssignment_5_0_2_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_3() { return cRightParenthesisKeyword_5_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_5_1() { return cLeftParenthesisRightParenthesisKeyword_5_1; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'schedule'
		public Keyword getScheduleKeyword_6_0() { return cScheduleKeyword_6_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_6_1() { return cScheduleAssignment_6_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_6_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_8() { return cAnnotationsAssignment_8; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_8_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_8_0; }
	}
	public class MethodDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.MethodDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cReturnTypeMethodReturnTypeEnumRuleCall_3_0_0 = (RuleCall)cReturnTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cReturnTypeAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cReturnTypeHostTypeEnumRuleCall_3_1_0_0 = (RuleCall)cReturnTypeAssignment_3_1_0.eContents().get(0);
		private final Assignment cReturnHostTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cReturnHostTypeSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cReturnHostTypeAssignment_3_1_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_4_0 = (RuleCall)cValuedObjectsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cCommaKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cScheduleKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cScheduleAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_6_1_0 = (RuleCall)cScheduleAssignment_6_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_7_0 = (RuleCall)cAnnotationsAssignment_7.eContents().get(0);
		
		//MethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
		//    {kexpressions::MethodDeclaration}
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
		//    valuedObjects+=SimpleValuedObject
		//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		//    ('schedule' schedule+=ScheduleObjectReference+)?
		//    annotations+=CommentAnnotatonSL?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::MethodDeclaration}
		//annotations+=Annotation*
		//access=AccessModifier?
		//(returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
		//valuedObjects+=SimpleValuedObject
		//(('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		//('schedule' schedule+=ScheduleObjectReference+)?
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{kexpressions::MethodDeclaration}
		public Action getMethodDeclarationAction_0() { return cMethodDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//(returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//returnType=MethodReturnType
		public Assignment getReturnTypeAssignment_3_0() { return cReturnTypeAssignment_3_0; }
		
		//MethodReturnType
		public RuleCall getReturnTypeMethodReturnTypeEnumRuleCall_3_0_0() { return cReturnTypeMethodReturnTypeEnumRuleCall_3_0_0; }
		
		//(returnType=HostType returnHostType=STRING)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//returnType=HostType
		public Assignment getReturnTypeAssignment_3_1_0() { return cReturnTypeAssignment_3_1_0; }
		
		//HostType
		public RuleCall getReturnTypeHostTypeEnumRuleCall_3_1_0_0() { return cReturnTypeHostTypeEnumRuleCall_3_1_0_0; }
		
		//returnHostType=STRING
		public Assignment getReturnHostTypeAssignment_3_1_1() { return cReturnHostTypeAssignment_3_1_1; }
		
		//STRING
		public RuleCall getReturnHostTypeSTRINGTerminalRuleCall_3_1_1_0() { return cReturnHostTypeSTRINGTerminalRuleCall_3_1_1_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_4() { return cValuedObjectsAssignment_4; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_4_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_4_0; }
		
		//(('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')')
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_1() { return cParameterDeclarationsAssignment_5_0_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0; }
		
		//(',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }
		
		//','
		public Keyword getCommaKeyword_5_0_2_0() { return cCommaKeyword_5_0_2_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_2_1() { return cParameterDeclarationsAssignment_5_0_2_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_3() { return cRightParenthesisKeyword_5_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_5_1() { return cLeftParenthesisRightParenthesisKeyword_5_1; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'schedule'
		public Keyword getScheduleKeyword_6_0() { return cScheduleKeyword_6_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_6_1() { return cScheduleAssignment_6_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_6_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_6_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_7() { return cAnnotationsAssignment_7; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_7_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_7_0; }
	}
	public class ReferenceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ReferenceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessModifierEnumRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInputAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInputInputKeyword_2_0_0_0 = (Keyword)cInputAssignment_2_0_0.eContents().get(0);
		private final Assignment cOutputAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cOutputOutputKeyword_2_0_1_0 = (Keyword)cOutputAssignment_2_0_1.eContents().get(0);
		private final Assignment cConstAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final Keyword cConstConstKeyword_2_0_2_0 = (Keyword)cConstAssignment_2_0_2.eContents().get(0);
		private final Keyword cRefKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_0_4 = (Group)cGroup_2_0.eContents().get(4);
		private final Assignment cReferenceContainerAssignment_2_0_4_0 = (Assignment)cGroup_2_0_4.eContents().get(0);
		private final CrossReference cReferenceContainerNamedObjectCrossReference_2_0_4_0_0 = (CrossReference)cReferenceContainerAssignment_2_0_4_0.eContents().get(0);
		private final RuleCall cReferenceContainerNamedObjectPrimeIDParserRuleCall_2_0_4_0_0_1 = (RuleCall)cReferenceContainerNamedObjectCrossReference_2_0_4_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_0_4_1 = (Keyword)cGroup_2_0_4.eContents().get(1);
		private final Assignment cReferenceAssignment_2_0_5 = (Assignment)cGroup_2_0.eContents().get(5);
		private final CrossReference cReferenceNamedObjectCrossReference_2_0_5_0 = (CrossReference)cReferenceAssignment_2_0_5.eContents().get(0);
		private final RuleCall cReferenceNamedObjectPrimeIDParserRuleCall_2_0_5_0_1 = (RuleCall)cReferenceNamedObjectCrossReference_2_0_5_0.eContents().get(1);
		private final Group cGroup_2_0_6 = (Group)cGroup_2_0.eContents().get(6);
		private final Keyword cLessThanSignKeyword_2_0_6_0 = (Keyword)cGroup_2_0_6.eContents().get(0);
		private final Assignment cGenericParametersAssignment_2_0_6_1 = (Assignment)cGroup_2_0_6.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_2_0_6_1_0 = (RuleCall)cGenericParametersAssignment_2_0_6_1.eContents().get(0);
		private final Group cGroup_2_0_6_2 = (Group)cGroup_2_0_6.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_6_2_0 = (Keyword)cGroup_2_0_6_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_2_0_6_2_1 = (Assignment)cGroup_2_0_6_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_2_0_6_2_1_0 = (RuleCall)cGenericParametersAssignment_2_0_6_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_0_6_3 = (Keyword)cGroup_2_0_6.eContents().get(3);
		private final Assignment cValuedObjectsAssignment_2_0_7 = (Assignment)cGroup_2_0.eContents().get(7);
		private final RuleCall cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_7_0 = (RuleCall)cValuedObjectsAssignment_2_0_7.eContents().get(0);
		private final Group cGroup_2_0_8 = (Group)cGroup_2_0.eContents().get(8);
		private final Keyword cCommaKeyword_2_0_8_0 = (Keyword)cGroup_2_0_8.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_0_8_1 = (Assignment)cGroup_2_0_8.eContents().get(1);
		private final RuleCall cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_8_1_0 = (RuleCall)cValuedObjectsAssignment_2_0_8_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cExternKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExternAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExternExternStringParserRuleCall_2_1_1_0 = (RuleCall)cExternAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cExternAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cExternExternStringParserRuleCall_2_1_2_1_0 = (RuleCall)cExternAssignment_2_1_2_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_2_1_3_0 = (RuleCall)cValuedObjectsAssignment_2_1_3.eContents().get(0);
		private final Group cGroup_2_1_4 = (Group)cGroup_2_1.eContents().get(4);
		private final Keyword cCommaKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_2_1_4_1_0 = (RuleCall)cValuedObjectsAssignment_2_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		
		//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    ((
		//        input?='input'?
		//        output?='output'?
		//        const?='const'?
		//        'ref'
		//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//        reference = [annotations::NamedObject|PrimeID]
		//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//    ) | (
		//        'extern' extern += ExternString (',' extern += ExternString)*
		//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//    ))
		//    ';'
		//    annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//access=AccessModifier?
		//((
		//    input?='input'?
		//    output?='output'?
		//    const?='const'?
		//    'ref'
		//    (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//    reference = [annotations::NamedObject|PrimeID]
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//) | (
		//    'extern' extern += ExternString (',' extern += ExternString)*
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//))
		//';'
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_1_0() { return cAccessAccessModifierEnumRuleCall_1_0; }
		
		//((
		//    input?='input'?
		//    output?='output'?
		//    const?='const'?
		//    'ref'
		//    (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//    reference = [annotations::NamedObject|PrimeID]
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//) | (
		//    'extern' extern += ExternString (',' extern += ExternString)*
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(
		//        input?='input'?
		//        output?='output'?
		//        const?='const'?
		//        'ref'
		//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//        reference = [annotations::NamedObject|PrimeID]
		//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//    )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//input?='input'?
		public Assignment getInputAssignment_2_0_0() { return cInputAssignment_2_0_0; }
		
		//'input'
		public Keyword getInputInputKeyword_2_0_0_0() { return cInputInputKeyword_2_0_0_0; }
		
		//output?='output'?
		public Assignment getOutputAssignment_2_0_1() { return cOutputAssignment_2_0_1; }
		
		//'output'
		public Keyword getOutputOutputKeyword_2_0_1_0() { return cOutputOutputKeyword_2_0_1_0; }
		
		//const?='const'?
		public Assignment getConstAssignment_2_0_2() { return cConstAssignment_2_0_2; }
		
		//'const'
		public Keyword getConstConstKeyword_2_0_2_0() { return cConstConstKeyword_2_0_2_0; }
		
		//'ref'
		public Keyword getRefKeyword_2_0_3() { return cRefKeyword_2_0_3; }
		
		//(referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }
		
		//referenceContainer = [annotations::NamedObject|PrimeID]
		public Assignment getReferenceContainerAssignment_2_0_4_0() { return cReferenceContainerAssignment_2_0_4_0; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getReferenceContainerNamedObjectCrossReference_2_0_4_0_0() { return cReferenceContainerNamedObjectCrossReference_2_0_4_0_0; }
		
		//PrimeID
		public RuleCall getReferenceContainerNamedObjectPrimeIDParserRuleCall_2_0_4_0_0_1() { return cReferenceContainerNamedObjectPrimeIDParserRuleCall_2_0_4_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_4_1() { return cFullStopKeyword_2_0_4_1; }
		
		//reference = [annotations::NamedObject|PrimeID]
		public Assignment getReferenceAssignment_2_0_5() { return cReferenceAssignment_2_0_5; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getReferenceNamedObjectCrossReference_2_0_5_0() { return cReferenceNamedObjectCrossReference_2_0_5_0; }
		
		//PrimeID
		public RuleCall getReferenceNamedObjectPrimeIDParserRuleCall_2_0_5_0_1() { return cReferenceNamedObjectPrimeIDParserRuleCall_2_0_5_0_1; }
		
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup_2_0_6() { return cGroup_2_0_6; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0_6_0() { return cLessThanSignKeyword_2_0_6_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_2_0_6_1() { return cGenericParametersAssignment_2_0_6_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_2_0_6_1_0() { return cGenericParametersGenericParameterParserRuleCall_2_0_6_1_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_2_0_6_2() { return cGroup_2_0_6_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_6_2_0() { return cCommaKeyword_2_0_6_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_2_0_6_2_1() { return cGenericParametersAssignment_2_0_6_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_2_0_6_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_2_0_6_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_0_6_3() { return cGreaterThanSignKeyword_2_0_6_3; }
		
		//valuedObjects+=ReferenceValuedObject
		public Assignment getValuedObjectsAssignment_2_0_7() { return cValuedObjectsAssignment_2_0_7; }
		
		//ReferenceValuedObject
		public RuleCall getValuedObjectsReferenceValuedObjectParserRuleCall_2_0_7_0() { return cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_7_0; }
		
		//(',' valuedObjects+=ReferenceValuedObject)*
		public Group getGroup_2_0_8() { return cGroup_2_0_8; }
		
		//','
		public Keyword getCommaKeyword_2_0_8_0() { return cCommaKeyword_2_0_8_0; }
		
		//valuedObjects+=ReferenceValuedObject
		public Assignment getValuedObjectsAssignment_2_0_8_1() { return cValuedObjectsAssignment_2_0_8_1; }
		
		//ReferenceValuedObject
		public RuleCall getValuedObjectsReferenceValuedObjectParserRuleCall_2_0_8_1_0() { return cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_8_1_0; }
		
		//(
		//       'extern' extern += ExternString (',' extern += ExternString)*
		//       valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//   )
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'extern'
		public Keyword getExternKeyword_2_1_0() { return cExternKeyword_2_1_0; }
		
		//extern += ExternString
		public Assignment getExternAssignment_2_1_1() { return cExternAssignment_2_1_1; }
		
		//ExternString
		public RuleCall getExternExternStringParserRuleCall_2_1_1_0() { return cExternExternStringParserRuleCall_2_1_1_0; }
		
		//(',' extern += ExternString)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//extern += ExternString
		public Assignment getExternAssignment_2_1_2_1() { return cExternAssignment_2_1_2_1; }
		
		//ExternString
		public RuleCall getExternExternStringParserRuleCall_2_1_2_1_0() { return cExternExternStringParserRuleCall_2_1_2_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_2_1_3() { return cValuedObjectsAssignment_2_1_3; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_2_1_3_0() { return cValuedObjectsValuedObjectParserRuleCall_2_1_3_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }
		
		//','
		public Keyword getCommaKeyword_2_1_4_0() { return cCommaKeyword_2_1_4_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_2_1_4_1() { return cValuedObjectsAssignment_2_1_4_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_2_1_4_1_0() { return cValuedObjectsValuedObjectParserRuleCall_2_1_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_4_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_4_0; }
	}
	public class ReferenceDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ReferenceDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessModifierEnumRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInputAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInputInputKeyword_2_0_0_0 = (Keyword)cInputAssignment_2_0_0.eContents().get(0);
		private final Assignment cOutputAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cOutputOutputKeyword_2_0_1_0 = (Keyword)cOutputAssignment_2_0_1.eContents().get(0);
		private final Assignment cConstAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final Keyword cConstConstKeyword_2_0_2_0 = (Keyword)cConstAssignment_2_0_2.eContents().get(0);
		private final Keyword cRefKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_0_4 = (Group)cGroup_2_0.eContents().get(4);
		private final Assignment cReferenceContainerAssignment_2_0_4_0 = (Assignment)cGroup_2_0_4.eContents().get(0);
		private final CrossReference cReferenceContainerNamedObjectCrossReference_2_0_4_0_0 = (CrossReference)cReferenceContainerAssignment_2_0_4_0.eContents().get(0);
		private final RuleCall cReferenceContainerNamedObjectPrimeIDParserRuleCall_2_0_4_0_0_1 = (RuleCall)cReferenceContainerNamedObjectCrossReference_2_0_4_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_0_4_1 = (Keyword)cGroup_2_0_4.eContents().get(1);
		private final Assignment cReferenceAssignment_2_0_5 = (Assignment)cGroup_2_0.eContents().get(5);
		private final CrossReference cReferenceNamedObjectCrossReference_2_0_5_0 = (CrossReference)cReferenceAssignment_2_0_5.eContents().get(0);
		private final RuleCall cReferenceNamedObjectPrimeIDParserRuleCall_2_0_5_0_1 = (RuleCall)cReferenceNamedObjectCrossReference_2_0_5_0.eContents().get(1);
		private final Group cGroup_2_0_6 = (Group)cGroup_2_0.eContents().get(6);
		private final Keyword cLessThanSignKeyword_2_0_6_0 = (Keyword)cGroup_2_0_6.eContents().get(0);
		private final Assignment cGenericParametersAssignment_2_0_6_1 = (Assignment)cGroup_2_0_6.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_2_0_6_1_0 = (RuleCall)cGenericParametersAssignment_2_0_6_1.eContents().get(0);
		private final Group cGroup_2_0_6_2 = (Group)cGroup_2_0_6.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_6_2_0 = (Keyword)cGroup_2_0_6_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_2_0_6_2_1 = (Assignment)cGroup_2_0_6_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_2_0_6_2_1_0 = (RuleCall)cGenericParametersAssignment_2_0_6_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_0_6_3 = (Keyword)cGroup_2_0_6.eContents().get(3);
		private final Assignment cValuedObjectsAssignment_2_0_7 = (Assignment)cGroup_2_0.eContents().get(7);
		private final RuleCall cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_7_0 = (RuleCall)cValuedObjectsAssignment_2_0_7.eContents().get(0);
		private final Group cGroup_2_0_8 = (Group)cGroup_2_0.eContents().get(8);
		private final Keyword cCommaKeyword_2_0_8_0 = (Keyword)cGroup_2_0_8.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_0_8_1 = (Assignment)cGroup_2_0_8.eContents().get(1);
		private final RuleCall cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_8_1_0 = (RuleCall)cValuedObjectsAssignment_2_0_8_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cExternKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExternAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExternExternStringParserRuleCall_2_1_1_0 = (RuleCall)cExternAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cExternAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cExternExternStringParserRuleCall_2_1_2_1_0 = (RuleCall)cExternAssignment_2_1_2_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_2_1_3_0 = (RuleCall)cValuedObjectsAssignment_2_1_3.eContents().get(0);
		private final Group cGroup_2_1_4 = (Group)cGroup_2_1.eContents().get(4);
		private final Keyword cCommaKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_2_1_4_1_0 = (RuleCall)cValuedObjectsAssignment_2_1_4_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_3_0 = (RuleCall)cAnnotationsAssignment_3.eContents().get(0);
		
		//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
		//    annotations+=Annotation*
		//    access=AccessModifier?
		//    ((
		//        input?='input'?
		//        output?='output'?
		//        const?='const'?
		//        'ref'
		//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//        reference = [annotations::NamedObject|PrimeID]
		//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//    ) | (
		//        'extern' extern += ExternString (',' extern += ExternString)*
		//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//    ))
		//    annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		//access=AccessModifier?
		//((
		//    input?='input'?
		//    output?='output'?
		//    const?='const'?
		//    'ref'
		//    (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//    reference = [annotations::NamedObject|PrimeID]
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//) | (
		//    'extern' extern += ExternString (',' extern += ExternString)*
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//))
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_1_0() { return cAccessAccessModifierEnumRuleCall_1_0; }
		
		//((
		//    input?='input'?
		//    output?='output'?
		//    const?='const'?
		//    'ref'
		//    (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//    reference = [annotations::NamedObject|PrimeID]
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//) | (
		//    'extern' extern += ExternString (',' extern += ExternString)*
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(
		//        input?='input'?
		//        output?='output'?
		//        const?='const'?
		//        'ref'
		//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		//        reference = [annotations::NamedObject|PrimeID]
		//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
		//    )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//input?='input'?
		public Assignment getInputAssignment_2_0_0() { return cInputAssignment_2_0_0; }
		
		//'input'
		public Keyword getInputInputKeyword_2_0_0_0() { return cInputInputKeyword_2_0_0_0; }
		
		//output?='output'?
		public Assignment getOutputAssignment_2_0_1() { return cOutputAssignment_2_0_1; }
		
		//'output'
		public Keyword getOutputOutputKeyword_2_0_1_0() { return cOutputOutputKeyword_2_0_1_0; }
		
		//const?='const'?
		public Assignment getConstAssignment_2_0_2() { return cConstAssignment_2_0_2; }
		
		//'const'
		public Keyword getConstConstKeyword_2_0_2_0() { return cConstConstKeyword_2_0_2_0; }
		
		//'ref'
		public Keyword getRefKeyword_2_0_3() { return cRefKeyword_2_0_3; }
		
		//(referenceContainer = [annotations::NamedObject|PrimeID] '.')?
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }
		
		//referenceContainer = [annotations::NamedObject|PrimeID]
		public Assignment getReferenceContainerAssignment_2_0_4_0() { return cReferenceContainerAssignment_2_0_4_0; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getReferenceContainerNamedObjectCrossReference_2_0_4_0_0() { return cReferenceContainerNamedObjectCrossReference_2_0_4_0_0; }
		
		//PrimeID
		public RuleCall getReferenceContainerNamedObjectPrimeIDParserRuleCall_2_0_4_0_0_1() { return cReferenceContainerNamedObjectPrimeIDParserRuleCall_2_0_4_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_4_1() { return cFullStopKeyword_2_0_4_1; }
		
		//reference = [annotations::NamedObject|PrimeID]
		public Assignment getReferenceAssignment_2_0_5() { return cReferenceAssignment_2_0_5; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getReferenceNamedObjectCrossReference_2_0_5_0() { return cReferenceNamedObjectCrossReference_2_0_5_0; }
		
		//PrimeID
		public RuleCall getReferenceNamedObjectPrimeIDParserRuleCall_2_0_5_0_1() { return cReferenceNamedObjectPrimeIDParserRuleCall_2_0_5_0_1; }
		
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup_2_0_6() { return cGroup_2_0_6; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0_6_0() { return cLessThanSignKeyword_2_0_6_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_2_0_6_1() { return cGenericParametersAssignment_2_0_6_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_2_0_6_1_0() { return cGenericParametersGenericParameterParserRuleCall_2_0_6_1_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_2_0_6_2() { return cGroup_2_0_6_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_6_2_0() { return cCommaKeyword_2_0_6_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_2_0_6_2_1() { return cGenericParametersAssignment_2_0_6_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_2_0_6_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_2_0_6_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_0_6_3() { return cGreaterThanSignKeyword_2_0_6_3; }
		
		//valuedObjects+=ReferenceValuedObject
		public Assignment getValuedObjectsAssignment_2_0_7() { return cValuedObjectsAssignment_2_0_7; }
		
		//ReferenceValuedObject
		public RuleCall getValuedObjectsReferenceValuedObjectParserRuleCall_2_0_7_0() { return cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_7_0; }
		
		//(',' valuedObjects+=ReferenceValuedObject)*
		public Group getGroup_2_0_8() { return cGroup_2_0_8; }
		
		//','
		public Keyword getCommaKeyword_2_0_8_0() { return cCommaKeyword_2_0_8_0; }
		
		//valuedObjects+=ReferenceValuedObject
		public Assignment getValuedObjectsAssignment_2_0_8_1() { return cValuedObjectsAssignment_2_0_8_1; }
		
		//ReferenceValuedObject
		public RuleCall getValuedObjectsReferenceValuedObjectParserRuleCall_2_0_8_1_0() { return cValuedObjectsReferenceValuedObjectParserRuleCall_2_0_8_1_0; }
		
		//(
		//       'extern' extern += ExternString (',' extern += ExternString)*
		//       valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//   )
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'extern'
		public Keyword getExternKeyword_2_1_0() { return cExternKeyword_2_1_0; }
		
		//extern += ExternString
		public Assignment getExternAssignment_2_1_1() { return cExternAssignment_2_1_1; }
		
		//ExternString
		public RuleCall getExternExternStringParserRuleCall_2_1_1_0() { return cExternExternStringParserRuleCall_2_1_1_0; }
		
		//(',' extern += ExternString)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//extern += ExternString
		public Assignment getExternAssignment_2_1_2_1() { return cExternAssignment_2_1_2_1; }
		
		//ExternString
		public RuleCall getExternExternStringParserRuleCall_2_1_2_1_0() { return cExternExternStringParserRuleCall_2_1_2_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_2_1_3() { return cValuedObjectsAssignment_2_1_3; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_2_1_3_0() { return cValuedObjectsValuedObjectParserRuleCall_2_1_3_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }
		
		//','
		public Keyword getCommaKeyword_2_1_4_0() { return cCommaKeyword_2_1_4_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_2_1_4_1() { return cValuedObjectsAssignment_2_1_4_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_2_1_4_1_0() { return cValuedObjectsValuedObjectParserRuleCall_2_1_4_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_3() { return cAnnotationsAssignment_3; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_3_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_3_0; }
	}
	public class ExternStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ExternString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsTagAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//ExternString returns kexpressions::ExternString:
		//    annotations+=TagAnnotation*
		//    code = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=TagAnnotation*
		//code = STRING
		public Group getGroup() { return cGroup; }
		
		//annotations+=TagAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//TagAnnotation
		public RuleCall getAnnotationsTagAnnotationParserRuleCall_0_0() { return cAnnotationsTagAnnotationParserRuleCall_0_0; }
		
		//code = STRING
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_0() { return cCodeSTRINGTerminalRuleCall_1_0; }
	}
	public class GenericParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.GenericParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsQuotedStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_1_0 = (RuleCall)cValuedObjectsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cIsKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cValueTypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValueTypeValueTypeEnumRuleCall_2_0_1_0 = (RuleCall)cValueTypeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cIsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cReferenceAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cReferenceRefKeyword_2_1_1_0 = (Keyword)cReferenceAssignment_2_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cTypeNamedObjectCrossReference_2_1_2_0 = (CrossReference)cTypeAssignment_2_1_2.eContents().get(0);
		private final RuleCall cTypeNamedObjectPrimeIDParserRuleCall_2_1_2_0_1 = (RuleCall)cTypeNamedObjectCrossReference_2_1_2_0.eContents().get(1);
		
		//// ---
		////  Generics
		//// ---
		//GenericParameterDeclaration returns kexpressions::GenericParameterDeclaration:
		//    annotations+=QuotedStringAnnotation*
		//    valuedObjects+=SimpleValuedObject
		//    (
		//        ('is' valueType = ValueType)
		//        |
		//        ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=QuotedStringAnnotation*
		//valuedObjects+=SimpleValuedObject
		//(
		//    ('is' valueType = ValueType)
		//    |
		//    ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
		//)?
		public Group getGroup() { return cGroup; }
		
		//annotations+=QuotedStringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//QuotedStringAnnotation
		public RuleCall getAnnotationsQuotedStringAnnotationParserRuleCall_0_0() { return cAnnotationsQuotedStringAnnotationParserRuleCall_0_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_1() { return cValuedObjectsAssignment_1; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_1_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_1_0; }
		
		//(
		//    ('is' valueType = ValueType)
		//    |
		//    ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
		//)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('is' valueType = ValueType)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'is'
		public Keyword getIsKeyword_2_0_0() { return cIsKeyword_2_0_0; }
		
		//valueType = ValueType
		public Assignment getValueTypeAssignment_2_0_1() { return cValueTypeAssignment_2_0_1; }
		
		//ValueType
		public RuleCall getValueTypeValueTypeEnumRuleCall_2_0_1_0() { return cValueTypeValueTypeEnumRuleCall_2_0_1_0; }
		
		//('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'is'
		public Keyword getIsKeyword_2_1_0() { return cIsKeyword_2_1_0; }
		
		//(reference?='ref')?
		public Assignment getReferenceAssignment_2_1_1() { return cReferenceAssignment_2_1_1; }
		
		//'ref'
		public Keyword getReferenceRefKeyword_2_1_1_0() { return cReferenceRefKeyword_2_1_1_0; }
		
		//type = [annotations::NamedObject|PrimeID]
		public Assignment getTypeAssignment_2_1_2() { return cTypeAssignment_2_1_2; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getTypeNamedObjectCrossReference_2_1_2_0() { return cTypeNamedObjectCrossReference_2_1_2_0; }
		
		//PrimeID
		public RuleCall getTypeNamedObjectPrimeIDParserRuleCall_2_1_2_0_1() { return cTypeNamedObjectPrimeIDParserRuleCall_2_1_2_0_1; }
	}
	public class GenericParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.GenericParameter");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cExpressionAlternatives_0 = (Alternatives)cExpressionAssignment.eContents().get(0);
		private final RuleCall cExpressionValueTypeReferenceParserRuleCall_0_0 = (RuleCall)cExpressionAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionAnyValueParserRuleCall_0_1 = (RuleCall)cExpressionAlternatives_0.eContents().get(1);
		private final RuleCall cExpressionGenericParameter_GenericTypeReference_ParameterizedParserRuleCall_0_2 = (RuleCall)cExpressionAlternatives_0.eContents().get(2);
		private final RuleCall cExpressionGenericParameter_ValuedObjectReference_ArrayParserRuleCall_0_3 = (RuleCall)cExpressionAlternatives_0.eContents().get(3);
		private final RuleCall cExpressionGenericParameter_ValuedObjectReference_SubParserRuleCall_0_4 = (RuleCall)cExpressionAlternatives_0.eContents().get(4);
		private final RuleCall cExpressionGenericTypeReferenceParserRuleCall_0_5 = (RuleCall)cExpressionAlternatives_0.eContents().get(5);
		private final RuleCall cExpressionValuedObjectReferenceParserRuleCall_0_6 = (RuleCall)cExpressionAlternatives_0.eContents().get(6);
		
		//GenericParameter returns kexpressions::Parameter:
		//    // Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
		//    // Here GenericTypeReference has precedence and has to cover certain
		//    // references to VOs. This needs to be specifically handled in the scoper and in the resource
		//    // by using the KExtGenericParamterConverter.
		//    // Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
		//    // index or sub reference specified, this is why there are special non-optional rules.
		//    expression = (ValueTypeReference
		//                 | AnyValue
		//                 | GenericParameter_GenericTypeReference_Parameterized
		//                 | GenericParameter_ValuedObjectReference_Array
		//                 | GenericParameter_ValuedObjectReference_Sub
		//                 | GenericTypeReference
		//                 | ValuedObjectReference)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
		//// Here GenericTypeReference has precedence and has to cover certain
		//// references to VOs. This needs to be specifically handled in the scoper and in the resource
		//// by using the KExtGenericParamterConverter.
		//// Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
		//// index or sub reference specified, this is why there are special non-optional rules.
		//expression = (ValueTypeReference
		//             | AnyValue
		//             | GenericParameter_GenericTypeReference_Parameterized
		//             | GenericParameter_ValuedObjectReference_Array
		//             | GenericParameter_ValuedObjectReference_Sub
		//             | GenericTypeReference
		//             | ValuedObjectReference)
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//(ValueTypeReference
		//                | AnyValue
		//                | GenericParameter_GenericTypeReference_Parameterized
		//                | GenericParameter_ValuedObjectReference_Array
		//                | GenericParameter_ValuedObjectReference_Sub
		//                | GenericTypeReference
		//                | ValuedObjectReference)
		public Alternatives getExpressionAlternatives_0() { return cExpressionAlternatives_0; }
		
		//ValueTypeReference
		public RuleCall getExpressionValueTypeReferenceParserRuleCall_0_0() { return cExpressionValueTypeReferenceParserRuleCall_0_0; }
		
		//AnyValue
		public RuleCall getExpressionAnyValueParserRuleCall_0_1() { return cExpressionAnyValueParserRuleCall_0_1; }
		
		//GenericParameter_GenericTypeReference_Parameterized
		public RuleCall getExpressionGenericParameter_GenericTypeReference_ParameterizedParserRuleCall_0_2() { return cExpressionGenericParameter_GenericTypeReference_ParameterizedParserRuleCall_0_2; }
		
		//GenericParameter_ValuedObjectReference_Array
		public RuleCall getExpressionGenericParameter_ValuedObjectReference_ArrayParserRuleCall_0_3() { return cExpressionGenericParameter_ValuedObjectReference_ArrayParserRuleCall_0_3; }
		
		//GenericParameter_ValuedObjectReference_Sub
		public RuleCall getExpressionGenericParameter_ValuedObjectReference_SubParserRuleCall_0_4() { return cExpressionGenericParameter_ValuedObjectReference_SubParserRuleCall_0_4; }
		
		//GenericTypeReference
		public RuleCall getExpressionGenericTypeReferenceParserRuleCall_0_5() { return cExpressionGenericTypeReferenceParserRuleCall_0_5; }
		
		//ValuedObjectReference
		public RuleCall getExpressionValuedObjectReferenceParserRuleCall_0_6() { return cExpressionValuedObjectReferenceParserRuleCall_0_6; }
	}
	public class ValueTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ValueTypeReference");
		private final Assignment cValueTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueTypeValueTypeEnumRuleCall_0 = (RuleCall)cValueTypeAssignment.eContents().get(0);
		
		//ValueTypeReference returns kexpressions::ValueTypeReference:
		//    valueType = ValueType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//valueType = ValueType
		public Assignment getValueTypeAssignment() { return cValueTypeAssignment; }
		
		//ValueType
		public RuleCall getValueTypeValueTypeEnumRuleCall_0() { return cValueTypeValueTypeEnumRuleCall_0; }
	}
	public class GenericTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.GenericTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeNamedObjectCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeNamedObjectPrimeIDParserRuleCall_0_0_1 = (RuleCall)cTypeNamedObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGenericParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_1_1_0 = (RuleCall)cGenericParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_1_2_1_0 = (RuleCall)cGenericParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//GenericTypeReference returns kexpressions::GenericTypeReference:
		//    type = [annotations::NamedObject|PrimeID]
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [annotations::NamedObject|PrimeID]
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup() { return cGroup; }
		
		//type = [annotations::NamedObject|PrimeID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getTypeNamedObjectCrossReference_0_0() { return cTypeNamedObjectCrossReference_0_0; }
		
		//PrimeID
		public RuleCall getTypeNamedObjectPrimeIDParserRuleCall_0_0_1() { return cTypeNamedObjectPrimeIDParserRuleCall_0_0_1; }
		
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_1_1() { return cGenericParametersAssignment_1_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_1_1_0() { return cGenericParametersGenericParameterParserRuleCall_1_1_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_1_2_1() { return cGenericParametersAssignment_1_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_1_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class GenericParameter_GenericTypeReference_ParameterizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.GenericParameter_GenericTypeReference_Parameterized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeNamedObjectCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeNamedObjectPrimeIDParserRuleCall_0_0_1 = (RuleCall)cTypeNamedObjectCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenericParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_2_0 = (RuleCall)cGenericParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGenericParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_3_1_0 = (RuleCall)cGenericParametersAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Special rules for GenericParameter parsing
		//GenericParameter_GenericTypeReference_Parameterized returns kexpressions::GenericTypeReference:
		//    type = [annotations::NamedObject|PrimeID]
		//    '<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>' // mandatory
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [annotations::NamedObject|PrimeID]
		//'<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>'
		public Group getGroup() { return cGroup; }
		
		//type = [annotations::NamedObject|PrimeID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[annotations::NamedObject|PrimeID]
		public CrossReference getTypeNamedObjectCrossReference_0_0() { return cTypeNamedObjectCrossReference_0_0; }
		
		//PrimeID
		public RuleCall getTypeNamedObjectPrimeIDParserRuleCall_0_0_1() { return cTypeNamedObjectPrimeIDParserRuleCall_0_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_2() { return cGenericParametersAssignment_2; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_2_0() { return cGenericParametersGenericParameterParserRuleCall_2_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_3_1() { return cGenericParametersAssignment_3_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_3_1_0() { return cGenericParametersGenericParameterParserRuleCall_3_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class GenericParameter_ValuedObjectReference_ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.GenericParameter_ValuedObjectReference_Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuedObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_0_0 = (CrossReference)cValuedObjectAssignment_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubReferenceValuedObjectReferenceParserRuleCall_2_1_0 = (RuleCall)cSubReferenceAssignment_2_1.eContents().get(0);
		
		//GenericParameter_ValuedObjectReference_Array returns kexpressions::ValuedObjectReference:
		//    valuedObject=[kexpressions::ValuedObject|PrimeID]
		//    ('[' indices+=Expression ']')+ // mandatory
		//    ('.' subReference=ValuedObjectReference)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//valuedObject=[kexpressions::ValuedObject|PrimeID]
		//('[' indices+=Expression ']')+ // mandatory
		//('.' subReference=ValuedObjectReference)?
		public Group getGroup() { return cGroup; }
		
		//valuedObject=[kexpressions::ValuedObject|PrimeID]
		public Assignment getValuedObjectAssignment_0() { return cValuedObjectAssignment_0; }
		
		//[kexpressions::ValuedObject|PrimeID]
		public CrossReference getValuedObjectValuedObjectCrossReference_0_0() { return cValuedObjectValuedObjectCrossReference_0_0; }
		
		//PrimeID
		public RuleCall getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1() { return cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1; }
		
		//('[' indices+=Expression ']')+
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indices+=Expression
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }
		
		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_1_1_0() { return cIndicesExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//// mandatory
		//   ('.' subReference=ValuedObjectReference)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//subReference=ValuedObjectReference
		public Assignment getSubReferenceAssignment_2_1() { return cSubReferenceAssignment_2_1; }
		
		//ValuedObjectReference
		public RuleCall getSubReferenceValuedObjectReferenceParserRuleCall_2_1_0() { return cSubReferenceValuedObjectReferenceParserRuleCall_2_1_0; }
	}
	public class GenericParameter_ValuedObjectReference_SubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.GenericParameter_ValuedObjectReference_Sub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuedObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_0_0 = (CrossReference)cValuedObjectAssignment_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubReferenceValuedObjectReferenceParserRuleCall_2_1_0 = (RuleCall)cSubReferenceAssignment_2_1.eContents().get(0);
		
		//GenericParameter_ValuedObjectReference_Sub returns kexpressions::ValuedObjectReference:
		//    valuedObject=[kexpressions::ValuedObject|PrimeID]
		//    ('[' indices+=Expression ']')*
		//    ('.' subReference=ValuedObjectReference) // mandatory
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//valuedObject=[kexpressions::ValuedObject|PrimeID]
		//('[' indices+=Expression ']')*
		//('.' subReference=ValuedObjectReference)
		public Group getGroup() { return cGroup; }
		
		//valuedObject=[kexpressions::ValuedObject|PrimeID]
		public Assignment getValuedObjectAssignment_0() { return cValuedObjectAssignment_0; }
		
		//[kexpressions::ValuedObject|PrimeID]
		public CrossReference getValuedObjectValuedObjectCrossReference_0_0() { return cValuedObjectValuedObjectCrossReference_0_0; }
		
		//PrimeID
		public RuleCall getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1() { return cValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1; }
		
		//('[' indices+=Expression ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indices+=Expression
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }
		
		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_1_1_0() { return cIndicesExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//('.' subReference=ValuedObjectReference)
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//subReference=ValuedObjectReference
		public Assignment getSubReferenceAssignment_2_1() { return cSubReferenceAssignment_2_1; }
		
		//ValuedObjectReference
		public RuleCall getSubReferenceValuedObjectReferenceParserRuleCall_2_1_0() { return cSubReferenceValuedObjectReferenceParserRuleCall_2_1_0; }
	}
	public class ScheduleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ScheduleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessModifierEnumRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Keyword cScheduleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGlobalKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGlobalAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGlobalPriorityProtocolEnumRuleCall_4_1_0 = (RuleCall)cGlobalAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPrioritiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPrioritiesPriorityProtocolEnumRuleCall_5_1_0 = (RuleCall)cPrioritiesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cPrioritiesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cPrioritiesPriorityProtocolEnumRuleCall_5_2_1_0 = (RuleCall)cPrioritiesAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cValuedObjectsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_0 = (RuleCall)cValuedObjectsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_7_1_0 = (RuleCall)cValuedObjectsAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnnotationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_9_0 = (RuleCall)cAnnotationsAssignment_9.eContents().get(0);
		
		//// ---
		////  Scheduling Directives
		//// ---
		//ScheduleDeclaration returns kexpressions::ScheduleDeclaration:
		//    annotations += Annotation*
		//    access=AccessModifier?
		//    'schedule' name=STRING?
		//    ('global' global = PriorityProtocol)?
		//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
		//    annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations += Annotation*
		//access=AccessModifier?
		//'schedule' name=STRING?
		//('global' global = PriorityProtocol)?
		//('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
		//valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//annotations += Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_1_0() { return cAccessAccessModifierEnumRuleCall_1_0; }
		
		//'schedule'
		public Keyword getScheduleKeyword_2() { return cScheduleKeyword_2; }
		
		//name=STRING?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//('global' global = PriorityProtocol)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'global'
		public Keyword getGlobalKeyword_4_0() { return cGlobalKeyword_4_0; }
		
		//global = PriorityProtocol
		public Assignment getGlobalAssignment_4_1() { return cGlobalAssignment_4_1; }
		
		//PriorityProtocol
		public RuleCall getGlobalPriorityProtocolEnumRuleCall_4_1_0() { return cGlobalPriorityProtocolEnumRuleCall_4_1_0; }
		
		//('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//priorities += PriorityProtocol
		public Assignment getPrioritiesAssignment_5_1() { return cPrioritiesAssignment_5_1; }
		
		//PriorityProtocol
		public RuleCall getPrioritiesPriorityProtocolEnumRuleCall_5_1_0() { return cPrioritiesPriorityProtocolEnumRuleCall_5_1_0; }
		
		//(',' priorities += PriorityProtocol)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//priorities += PriorityProtocol
		public Assignment getPrioritiesAssignment_5_2_1() { return cPrioritiesAssignment_5_2_1; }
		
		//PriorityProtocol
		public RuleCall getPrioritiesPriorityProtocolEnumRuleCall_5_2_1_0() { return cPrioritiesPriorityProtocolEnumRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_6() { return cValuedObjectsAssignment_6; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_0() { return cValuedObjectsValuedObjectParserRuleCall_6_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_7_1() { return cValuedObjectsAssignment_7_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_7_1_0() { return cValuedObjectsValuedObjectParserRuleCall_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_9() { return cAnnotationsAssignment_9; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_9_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_9_0; }
	}
	public class ScheduleDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ScheduleDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessAccessModifierEnumRuleCall_1_0 = (RuleCall)cAccessAssignment_1.eContents().get(0);
		private final Keyword cScheduleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGlobalKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGlobalAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGlobalPriorityProtocolEnumRuleCall_4_1_0 = (RuleCall)cGlobalAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPrioritiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPrioritiesPriorityProtocolEnumRuleCall_5_1_0 = (RuleCall)cPrioritiesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cPrioritiesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cPrioritiesPriorityProtocolEnumRuleCall_5_2_1_0 = (RuleCall)cPrioritiesAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cValuedObjectsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_0 = (RuleCall)cValuedObjectsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_7_1_0 = (RuleCall)cValuedObjectsAssignment_7_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_8_0 = (RuleCall)cAnnotationsAssignment_8.eContents().get(0);
		
		//ScheduleDeclarationWOSemicolon returns kexpressions::ScheduleDeclaration:
		//    annotations += Annotation*
		//    access=AccessModifier?
		//    'schedule' name=STRING?
		//    ('global' global = PriorityProtocol)?
		//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
		//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//    annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations += Annotation*
		//access=AccessModifier?
		//'schedule' name=STRING?
		//('global' global = PriorityProtocol)?
		//('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
		//valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//annotations += Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_1_0() { return cAccessAccessModifierEnumRuleCall_1_0; }
		
		//'schedule'
		public Keyword getScheduleKeyword_2() { return cScheduleKeyword_2; }
		
		//name=STRING?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//('global' global = PriorityProtocol)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'global'
		public Keyword getGlobalKeyword_4_0() { return cGlobalKeyword_4_0; }
		
		//global = PriorityProtocol
		public Assignment getGlobalAssignment_4_1() { return cGlobalAssignment_4_1; }
		
		//PriorityProtocol
		public RuleCall getGlobalPriorityProtocolEnumRuleCall_4_1_0() { return cGlobalPriorityProtocolEnumRuleCall_4_1_0; }
		
		//('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//priorities += PriorityProtocol
		public Assignment getPrioritiesAssignment_5_1() { return cPrioritiesAssignment_5_1; }
		
		//PriorityProtocol
		public RuleCall getPrioritiesPriorityProtocolEnumRuleCall_5_1_0() { return cPrioritiesPriorityProtocolEnumRuleCall_5_1_0; }
		
		//(',' priorities += PriorityProtocol)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//priorities += PriorityProtocol
		public Assignment getPrioritiesAssignment_5_2_1() { return cPrioritiesAssignment_5_2_1; }
		
		//PriorityProtocol
		public RuleCall getPrioritiesPriorityProtocolEnumRuleCall_5_2_1_0() { return cPrioritiesPriorityProtocolEnumRuleCall_5_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_6() { return cValuedObjectsAssignment_6; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_0() { return cValuedObjectsValuedObjectParserRuleCall_6_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_7_1() { return cValuedObjectsAssignment_7_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_7_1_0() { return cValuedObjectsValuedObjectParserRuleCall_7_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_8() { return cAnnotationsAssignment_8; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_8_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_8_0; }
	}
	public class ValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsQuotedStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrimeIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalitiesExpressionParserRuleCall_2_1_0 = (RuleCall)cCardinalitiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCombineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCombineOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_4_1_0 = (RuleCall)cCombineOperatorAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		
		//// Valued Object Rule
		//// A valued object is identified by its name. Then, a part for its cardinalities and an initial
		//// expression may follow. Additionally, the declaration of the object may be finished by a combine part.
		//// Examples: array[10], initial = false, z = 0 combine max
		//ValuedObject returns kexpressions::ValuedObject:
		//    annotations+=QuotedStringAnnotation*
		//    name=PrimeID
		//    ('[' cardinalities+=Expression ']')*
		//    ('=' initialValue=Expression)?
		//    ( 'combine'
		//      (combineOperator = CombineOperator)
		//    )?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=QuotedStringAnnotation*
		//name=PrimeID
		//('[' cardinalities+=Expression ']')*
		//('=' initialValue=Expression)?
		//( 'combine'
		//  (combineOperator = CombineOperator)
		//)?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//annotations+=QuotedStringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//QuotedStringAnnotation
		public RuleCall getAnnotationsQuotedStringAnnotationParserRuleCall_0_0() { return cAnnotationsQuotedStringAnnotationParserRuleCall_0_0; }
		
		//name=PrimeID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_1_0() { return cNamePrimeIDParserRuleCall_1_0; }
		
		//('[' cardinalities+=Expression ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//cardinalities+=Expression
		public Assignment getCardinalitiesAssignment_2_1() { return cCardinalitiesAssignment_2_1; }
		
		//Expression
		public RuleCall getCardinalitiesExpressionParserRuleCall_2_1_0() { return cCardinalitiesExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//('=' initialValue=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_3_1_0() { return cInitialValueExpressionParserRuleCall_3_1_0; }
		
		//( 'combine'
		//  (combineOperator = CombineOperator)
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'combine'
		public Keyword getCombineKeyword_4_0() { return cCombineKeyword_4_0; }
		
		//(combineOperator = CombineOperator)
		public Assignment getCombineOperatorAssignment_4_1() { return cCombineOperatorAssignment_4_1; }
		
		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_4_1_0() { return cCombineOperatorCombineOperatorEnumRuleCall_4_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }
	}
	public class ReferenceValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.ReferenceValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValuedObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsQuotedStringAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePrimeIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCardinalitiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCardinalitiesExpressionParserRuleCall_3_1_0 = (RuleCall)cCardinalitiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGenericParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_4_1_0 = (RuleCall)cGenericParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cGenericParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cGenericParametersGenericParameterParserRuleCall_4_2_1_0 = (RuleCall)cGenericParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cParametersAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_0_1_0 = (RuleCall)cParametersAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cCommaKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_0_2_1_0 = (RuleCall)cParametersAssignment_5_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitialValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_6_1_0 = (RuleCall)cInitialValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLabelKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cLabelAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cLabelAssignment_7_1.eContents().get(0);
		
		//ReferenceValuedObject returns kexpressions::ValuedObject:
		//    {kexpressions::ValuedObject}
		//    annotations+=QuotedStringAnnotation*
		//    name=PrimeID
		//    ('[' cardinalities+=Expression ']')*
		//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
		//    ('=' initialValue=Expression)?
		//    ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{kexpressions::ValuedObject}
		//annotations+=QuotedStringAnnotation*
		//name=PrimeID
		//('[' cardinalities+=Expression ']')*
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		//(('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
		//('=' initialValue=Expression)?
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{kexpressions::ValuedObject}
		public Action getValuedObjectAction_0() { return cValuedObjectAction_0; }
		
		//annotations+=QuotedStringAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//QuotedStringAnnotation
		public RuleCall getAnnotationsQuotedStringAnnotationParserRuleCall_1_0() { return cAnnotationsQuotedStringAnnotationParserRuleCall_1_0; }
		
		//name=PrimeID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_2_0() { return cNamePrimeIDParserRuleCall_2_0; }
		
		//('[' cardinalities+=Expression ']')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//cardinalities+=Expression
		public Assignment getCardinalitiesAssignment_3_1() { return cCardinalitiesAssignment_3_1; }
		
		//Expression
		public RuleCall getCardinalitiesExpressionParserRuleCall_3_1_0() { return cCardinalitiesExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_4_1() { return cGenericParametersAssignment_4_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_4_1_0() { return cGenericParametersGenericParameterParserRuleCall_4_1_0; }
		
		//(',' genericParameters += GenericParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//genericParameters += GenericParameter
		public Assignment getGenericParametersAssignment_4_2_1() { return cGenericParametersAssignment_4_2_1; }
		
		//GenericParameter
		public RuleCall getGenericParametersGenericParameterParserRuleCall_4_2_1_0() { return cGenericParametersGenericParameterParserRuleCall_4_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }
		
		//(('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//('(' parameters += Parameter (',' parameters += Parameter)* ')')
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_5_0_1() { return cParametersAssignment_5_0_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_0_1_0() { return cParametersParameterParserRuleCall_5_0_1_0; }
		
		//(',' parameters += Parameter)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }
		
		//','
		public Keyword getCommaKeyword_5_0_2_0() { return cCommaKeyword_5_0_2_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_5_0_2_1() { return cParametersAssignment_5_0_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_0_2_1_0() { return cParametersParameterParserRuleCall_5_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_3() { return cRightParenthesisKeyword_5_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_5_1() { return cLeftParenthesisRightParenthesisKeyword_5_1; }
		
		//('=' initialValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }
		
		//initialValue=Expression
		public Assignment getInitialValueAssignment_6_1() { return cInitialValueAssignment_6_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_6_1_0() { return cInitialValueExpressionParserRuleCall_6_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'label'
		public Keyword getLabelKeyword_7_0() { return cLabelKeyword_7_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_7_1() { return cLabelAssignment_7_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_7_1_0() { return cLabelSTRINGTerminalRuleCall_7_1_0; }
	}
	public class SimpleValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.SimpleValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsQuotedStringAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePrimeIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SimpleValuedObject returns kexpressions::ValuedObject:
		//    annotations+=QuotedStringAnnotation*
		//    name=PrimeID;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=QuotedStringAnnotation*
		//name=PrimeID
		public Group getGroup() { return cGroup; }
		
		//annotations+=QuotedStringAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//QuotedStringAnnotation
		public RuleCall getAnnotationsQuotedStringAnnotationParserRuleCall_0_0() { return cAnnotationsQuotedStringAnnotationParserRuleCall_0_0; }
		
		//name=PrimeID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_1_0() { return cNamePrimeIDParserRuleCall_1_0; }
	}
	public class NamespaceIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.NamespaceID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExtendedIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPrimeIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NamespaceID returns ecore::EString:
		//  ExtendedID (':' PrimeID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExtendedID (':' PrimeID)*
		public Group getGroup() { return cGroup; }
		
		//ExtendedID
		public RuleCall getExtendedIDParserRuleCall_0() { return cExtendedIDParserRuleCall_0; }
		
		//(':' PrimeID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//PrimeID
		public RuleCall getPrimeIDParserRuleCall_1_1() { return cPrimeIDParserRuleCall_1_1; }
	}
	
	public class PriorityProtocolElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kexpressions.kext.KExt.PriorityProtocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCONFLICTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCONFLICTConflictingKeyword_0_0 = (Keyword)cCONFLICTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONFLUENTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONFLUENTCommutingKeyword_1_0 = (Keyword)cCONFLUENTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PriorityProtocol returns kexpressions::PriorityProtocol:
		//    CONFLICT="conflicting" | CONFLUENT="commuting";
		public EnumRule getRule() { return rule; }
		
		//CONFLICT="conflicting" | CONFLUENT="commuting"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CONFLICT="conflicting"
		public EnumLiteralDeclaration getCONFLICTEnumLiteralDeclaration_0() { return cCONFLICTEnumLiteralDeclaration_0; }
		
		//"conflicting"
		public Keyword getCONFLICTConflictingKeyword_0_0() { return cCONFLICTConflictingKeyword_0_0; }
		
		//CONFLUENT="commuting"
		public EnumLiteralDeclaration getCONFLUENTEnumLiteralDeclaration_1() { return cCONFLUENTEnumLiteralDeclaration_1; }
		
		//"commuting"
		public Keyword getCONFLUENTCommutingKeyword_1_0() { return cCONFLUENTCommutingKeyword_1_0; }
	}
	
	private final KextElements pKext;
	private final RootScopeElements pRootScope;
	private final ScopeElements pScope;
	private final TestEntityElements pTestEntity;
	private final AnnotatedExpressionElements pAnnotatedExpression;
	private final AnnotatedJsonExpressionElements pAnnotatedJsonExpression;
	private final DeclarationElements pDeclaration;
	private final DeclarationWOSemicolonElements pDeclarationWOSemicolon;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableDeclarationWOSemicolonElements pVariableDeclarationWOSemicolon;
	private final ClassDeclarationElements pClassDeclaration;
	private final DeclarationOrMethodElements pDeclarationOrMethod;
	private final ClassDeclarationWOSemicolonElements pClassDeclarationWOSemicolon;
	private final DeclarationOrMethodWOSemicolonElements pDeclarationOrMethodWOSemicolon;
	private final EnumDeclarationElements pEnumDeclaration;
	private final EnumMemberDeclarationElements pEnumMemberDeclaration;
	private final EnumDeclarationWOSemicolonElements pEnumDeclarationWOSemicolon;
	private final MethodDeclarationElements pMethodDeclaration;
	private final MethodDeclarationWOSemicolonElements pMethodDeclarationWOSemicolon;
	private final ReferenceDeclarationElements pReferenceDeclaration;
	private final ReferenceDeclarationWOSemicolonElements pReferenceDeclarationWOSemicolon;
	private final ExternStringElements pExternString;
	private final GenericParameterDeclarationElements pGenericParameterDeclaration;
	private final GenericParameterElements pGenericParameter;
	private final ValueTypeReferenceElements pValueTypeReference;
	private final GenericTypeReferenceElements pGenericTypeReference;
	private final GenericParameter_GenericTypeReference_ParameterizedElements pGenericParameter_GenericTypeReference_Parameterized;
	private final GenericParameter_ValuedObjectReference_ArrayElements pGenericParameter_ValuedObjectReference_Array;
	private final GenericParameter_ValuedObjectReference_SubElements pGenericParameter_ValuedObjectReference_Sub;
	private final ScheduleDeclarationElements pScheduleDeclaration;
	private final ScheduleDeclarationWOSemicolonElements pScheduleDeclarationWOSemicolon;
	private final PriorityProtocolElements ePriorityProtocol;
	private final ValuedObjectElements pValuedObject;
	private final ReferenceValuedObjectElements pReferenceValuedObject;
	private final SimpleValuedObjectElements pSimpleValuedObject;
	private final NamespaceIDElements pNamespaceID;
	
	private final Grammar grammar;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KExtGrammarAccess(GrammarProvider grammarProvider,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pKext = new KextElements();
		this.pRootScope = new RootScopeElements();
		this.pScope = new ScopeElements();
		this.pTestEntity = new TestEntityElements();
		this.pAnnotatedExpression = new AnnotatedExpressionElements();
		this.pAnnotatedJsonExpression = new AnnotatedJsonExpressionElements();
		this.pDeclaration = new DeclarationElements();
		this.pDeclarationWOSemicolon = new DeclarationWOSemicolonElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableDeclarationWOSemicolon = new VariableDeclarationWOSemicolonElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pDeclarationOrMethod = new DeclarationOrMethodElements();
		this.pClassDeclarationWOSemicolon = new ClassDeclarationWOSemicolonElements();
		this.pDeclarationOrMethodWOSemicolon = new DeclarationOrMethodWOSemicolonElements();
		this.pEnumDeclaration = new EnumDeclarationElements();
		this.pEnumMemberDeclaration = new EnumMemberDeclarationElements();
		this.pEnumDeclarationWOSemicolon = new EnumDeclarationWOSemicolonElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pMethodDeclarationWOSemicolon = new MethodDeclarationWOSemicolonElements();
		this.pReferenceDeclaration = new ReferenceDeclarationElements();
		this.pReferenceDeclarationWOSemicolon = new ReferenceDeclarationWOSemicolonElements();
		this.pExternString = new ExternStringElements();
		this.pGenericParameterDeclaration = new GenericParameterDeclarationElements();
		this.pGenericParameter = new GenericParameterElements();
		this.pValueTypeReference = new ValueTypeReferenceElements();
		this.pGenericTypeReference = new GenericTypeReferenceElements();
		this.pGenericParameter_GenericTypeReference_Parameterized = new GenericParameter_GenericTypeReference_ParameterizedElements();
		this.pGenericParameter_ValuedObjectReference_Array = new GenericParameter_ValuedObjectReference_ArrayElements();
		this.pGenericParameter_ValuedObjectReference_Sub = new GenericParameter_ValuedObjectReference_SubElements();
		this.pScheduleDeclaration = new ScheduleDeclarationElements();
		this.pScheduleDeclarationWOSemicolon = new ScheduleDeclarationWOSemicolonElements();
		this.ePriorityProtocol = new PriorityProtocolElements();
		this.pValuedObject = new ValuedObjectElements();
		this.pReferenceValuedObject = new ReferenceValuedObjectElements();
		this.pSimpleValuedObject = new SimpleValuedObjectElements();
		this.pNamespaceID = new NamespaceIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kexpressions.kext.KExt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language
	// * that is used for testing kexpressions and keffects.
	// */
	//// ------------ //
	////  KEXT Rules  //
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of
	//// test entities may follow.
	//Kext returns kext::Kext:
	//    scopes+=RootScope;
	public KextElements getKextAccess() {
		return pKext;
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)*;
	public RootScopeElements getRootScopeAccess() {
		return pRootScope;
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope returns kext::KExtScope:
	//    {kext::KExtScope}
	//    (name=ID)? '{'
	//    declarations+=Declaration*
	//    entities+=TestEntity*
	//    ('scope' scopes+=Scope)* '}';
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//    expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public TestEntityElements getTestEntityAccess() {
		return pTestEntity;
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'expression'
	//    expression=Expression;
	public AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return pAnnotatedExpression;
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression returns kext::AnnotatedExpression:
	//    annotations+=Annotation*
	//    'json'
	//    expression=JsonObjectValue;
	public AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return pAnnotatedJsonExpression;
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z
	//Declaration returns kexpressions::Declaration:
	//    VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon returns kexpressions::Declaration:
	//    VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon | ClassDeclarationWOSemicolon;
	public DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return pDeclarationWOSemicolon;
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    const?='const'?
	//    input?='input'?
	//    output?='output'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        |
	//        signal?='signal'
	//        |
	//        (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    input?='input'?
	//    output?='output'?
	//    const?='const'?
	//    global?='global'?
	//    static?='static'?
	//    (
	//        (signal?='signal'? type = ValueType)
	//        | signal?='signal'
	//        | (type = HostType hostType = STRING)
	//    )
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return pVariableDeclarationWOSemicolon;
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethod*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=Declaration*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod returns kexpressions::Declaration:
	//    Declaration | EnumDeclaration | MethodDeclaration
	//;
	public DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return pDeclarationOrMethod;
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//ClassDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    ((
	//        type = ClassType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationOrMethodWOSemicolon*
	//        '}'
	//    )|(
	//        type = StructType
	//        (name = EString)?
	//        '{'
	//            declarations+=DeclarationWOSemicolon*
	//        '}'
	//    ))
	//    (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return pClassDeclarationWOSemicolon;
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon returns kexpressions::Declaration:
	//    DeclarationWOSemicolon | EnumDeclarationWOSemicolon | MethodDeclarationWOSemicolon
	//;
	public DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return pDeclarationOrMethodWOSemicolon;
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//EnumDeclaration returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType=STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//        ';'
	//    '}'
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return pEnumDeclaration;
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}
	
	//EnumMemberDeclaration returns kexpressions::VariableDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject (',' valuedObjects+=SimpleValuedObject)*
	//    annotations+=CommentAnnotatonSL?
	//;
	public EnumMemberDeclarationElements getEnumMemberDeclarationAccess() {
		return pEnumMemberDeclaration;
	}
	
	public ParserRule getEnumMemberDeclarationRule() {
		return getEnumMemberDeclarationAccess().getRule();
	}
	
	//EnumDeclarationWOSemicolon returns kext::ClassDeclaration:
	//    {kext::ClassDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    host?='host'?
	//    type = EnumType
	//    valuedObjects+=SimpleValuedObject
	//    (hostType = STRING)?
	//    '{'
	//        declarations+=EnumMemberDeclaration
	//    '}'
	//    annotations+=CommentAnnotatonSL?
	//;
	public EnumDeclarationWOSemicolonElements getEnumDeclarationWOSemicolonAccess() {
		return pEnumDeclarationWOSemicolon;
	}
	
	public ParserRule getEnumDeclarationWOSemicolonRule() {
		return getEnumDeclarationWOSemicolonAccess().getRule();
	}
	
	//MethodDeclaration returns kexpressions::MethodDeclaration:
	//    {kexpressions::MethodDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    ';'
	//    annotations+=CommentAnnotatonSL?
	//;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//MethodDeclarationWOSemicolon returns kexpressions::MethodDeclaration:
	//    {kexpressions::MethodDeclaration}
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    (returnType=MethodReturnType | (returnType=HostType returnHostType=STRING))?
	//    valuedObjects+=SimpleValuedObject
	//    (('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?
	//    annotations+=CommentAnnotatonSL?
	//;
	public MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return pMethodDeclarationWOSemicolon;
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    ';'
	//    annotations+=CommentAnnotatonSL?;
	public ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return pReferenceDeclaration;
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	//    annotations+=Annotation*
	//    access=AccessModifier?
	//    ((
	//        input?='input'?
	//        output?='output'?
	//        const?='const'?
	//        'ref'
	//        (referenceContainer = [annotations::NamedObject|PrimeID] '.')?
	//        reference = [annotations::NamedObject|PrimeID]
	//        ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//        valuedObjects+=ReferenceValuedObject (',' valuedObjects+=ReferenceValuedObject)*
	//    ) | (
	//        'extern' extern += ExternString (',' extern += ExternString)*
	//        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    ))
	//    annotations+=CommentAnnotatonSL?;
	public ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return pReferenceDeclarationWOSemicolon;
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString returns kexpressions::ExternString:
	//    annotations+=TagAnnotation*
	//    code = STRING
	//;
	public ExternStringElements getExternStringAccess() {
		return pExternString;
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//// ---
	////  Generics
	//// ---
	//GenericParameterDeclaration returns kexpressions::GenericParameterDeclaration:
	//    annotations+=QuotedStringAnnotation*
	//    valuedObjects+=SimpleValuedObject
	//    (
	//        ('is' valueType = ValueType)
	//        |
	//        ('is' (reference?='ref')? type = [annotations::NamedObject|PrimeID])
	//    )?
	//;
	public GenericParameterDeclarationElements getGenericParameterDeclarationAccess() {
		return pGenericParameterDeclaration;
	}
	
	public ParserRule getGenericParameterDeclarationRule() {
		return getGenericParameterDeclarationAccess().getRule();
	}
	
	//GenericParameter returns kexpressions::Parameter:
	//    // Both VOReference and GenericTypeReference will always match for simple names (PrimeID).
	//    // Here GenericTypeReference has precedence and has to cover certain
	//    // references to VOs. This needs to be specifically handled in the scoper and in the resource
	//    // by using the KExtGenericParamterConverter.
	//    // Furthermore, optional parts may cause VORs accepted by GTRs even if there is an array
	//    // index or sub reference specified, this is why there are special non-optional rules.
	//    expression = (ValueTypeReference
	//                 | AnyValue
	//                 | GenericParameter_GenericTypeReference_Parameterized
	//                 | GenericParameter_ValuedObjectReference_Array
	//                 | GenericParameter_ValuedObjectReference_Sub
	//                 | GenericTypeReference
	//                 | ValuedObjectReference)
	//;
	public GenericParameterElements getGenericParameterAccess() {
		return pGenericParameter;
	}
	
	public ParserRule getGenericParameterRule() {
		return getGenericParameterAccess().getRule();
	}
	
	//ValueTypeReference returns kexpressions::ValueTypeReference:
	//    valueType = ValueType
	//;
	public ValueTypeReferenceElements getValueTypeReferenceAccess() {
		return pValueTypeReference;
	}
	
	public ParserRule getValueTypeReferenceRule() {
		return getValueTypeReferenceAccess().getRule();
	}
	
	//GenericTypeReference returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//;
	public GenericTypeReferenceElements getGenericTypeReferenceAccess() {
		return pGenericTypeReference;
	}
	
	public ParserRule getGenericTypeReferenceRule() {
		return getGenericTypeReferenceAccess().getRule();
	}
	
	//// Special rules for GenericParameter parsing
	//GenericParameter_GenericTypeReference_Parameterized returns kexpressions::GenericTypeReference:
	//    type = [annotations::NamedObject|PrimeID]
	//    '<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>' // mandatory
	//;
	public GenericParameter_GenericTypeReference_ParameterizedElements getGenericParameter_GenericTypeReference_ParameterizedAccess() {
		return pGenericParameter_GenericTypeReference_Parameterized;
	}
	
	public ParserRule getGenericParameter_GenericTypeReference_ParameterizedRule() {
		return getGenericParameter_GenericTypeReference_ParameterizedAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Array returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')+ // mandatory
	//    ('.' subReference=ValuedObjectReference)?
	//;
	public GenericParameter_ValuedObjectReference_ArrayElements getGenericParameter_ValuedObjectReference_ArrayAccess() {
		return pGenericParameter_ValuedObjectReference_Array;
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_ArrayRule() {
		return getGenericParameter_ValuedObjectReference_ArrayAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Sub returns kexpressions::ValuedObjectReference:
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference) // mandatory
	//;
	public GenericParameter_ValuedObjectReference_SubElements getGenericParameter_ValuedObjectReference_SubAccess() {
		return pGenericParameter_ValuedObjectReference_Sub;
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_SubRule() {
		return getGenericParameter_ValuedObjectReference_SubAccess().getRule();
	}
	
	//// ---
	////  Scheduling Directives
	//// ---
	//ScheduleDeclaration returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//    annotations+=CommentAnnotatonSL?;
	public ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return pScheduleDeclaration;
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon returns kexpressions::ScheduleDeclaration:
	//    annotations += Annotation*
	//    access=AccessModifier?
	//    'schedule' name=STRING?
	//    ('global' global = PriorityProtocol)?
	//    ('{' priorities += PriorityProtocol (',' priorities += PriorityProtocol)* '}')?
	//    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//    annotations+=CommentAnnotatonSL?;
	public ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return pScheduleDeclarationWOSemicolon;
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//    CONFLICT="conflicting" | CONFLUENT="commuting";
	public PriorityProtocolElements getPriorityProtocolAccess() {
		return ePriorityProtocol;
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part.
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('=' initialValue=Expression)?
	//    ( 'combine'
	//      (combineOperator = CombineOperator)
	//    )?
	//    ('label' label=STRING)?;
	public ValuedObjectElements getValuedObjectAccess() {
		return pValuedObject;
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//ReferenceValuedObject returns kexpressions::ValuedObject:
	//    {kexpressions::ValuedObject}
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID
	//    ('[' cardinalities+=Expression ']')*
	//    ('<' genericParameters += GenericParameter (',' genericParameters += GenericParameter)* '>')?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
	//    ('=' initialValue=Expression)?
	//    ('label' label=STRING)?;
	public ReferenceValuedObjectElements getReferenceValuedObjectAccess() {
		return pReferenceValuedObject;
	}
	
	public ParserRule getReferenceValuedObjectRule() {
		return getReferenceValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject returns kexpressions::ValuedObject:
	//    annotations+=QuotedStringAnnotation*
	//    name=PrimeID;
	public SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return pSimpleValuedObject;
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	//NamespaceID returns ecore::EString:
	//  ExtendedID (':' PrimeID)*;
	public NamespaceIDElements getNamespaceIDAccess() {
		return pNamespaceID;
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed
	// * @kieler.rating 2015-08-23 proposed yellow
	// */
	///*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */
	//// ---------------- //
	////  KEffects Rules  //
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect returns keffects::Effect:
	//    Assignment |
	//    PostfixEffect |
	//    ValuedEmission | // Will consume some ReferenceCallEffects
	//    HostcodeEffect |
	//    ReferenceCallEffect |
	//    FunctionCallEffect |
	//    PrintCallEffect |
	//    RandomizeCallEffect |
	//    PureEmission;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals.
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted
	//// annotations defined in the annotations grammar.
	//PureEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission returns keffects::Emission:
	//    (annotations+=QuotedStringAnnotation)*
	//    reference=ValuedObjectReference
	//    "(" newValue = Expression ")"
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission returns keffects::Emission:
	//    ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1
	//Assignment returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=AssignOperator expression = Expression
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I--
	//PostfixEffect returns keffects::Assignment:
	//    (annotations+=Annotation)*
	//    reference=ValuedObjectReference
	//    operator=PostfixOperator
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//    (annotations+=Annotation)*
	//     text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect returns keffects::ReferenceCallEffect:
	//    super?='super.'?
	//    (annotations+=Annotation)*
	//    valuedObject=[kexpressions::ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//    (annotations+=Annotation)*
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.
	//PrintCallEffect returns keffects::PrintCallEffect:
	//    (annotations+=Annotation)*
	//    'print'
	//    ('(' parameters += Parameter (',' parameters += Parameter)* ')')
	//    ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect returns keffects::RandomizeCallEffect:
	//    {keffects::RandomizeCallEffect}
	//    (annotations+=Annotation)*
	//    'randomize'
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//// ---------------- //
	////  KEffects Enums  //
	//// ---------------- //
	//// Assign Operator Enum
	//enum AssignOperator returns keffects::AssignOperator:
	//    ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//    ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//    ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//    ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//// Postfix Operator Enum
	//enum PostfixOperator returns keffects::AssignOperator:
	//    POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// -------------------- //
	////  KExpressions Rules  //
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */
	//// Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//    Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression returns Expression:
	//     (BoolExpression | ValuedExpression);
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason.
	//// One could skip directly to the next rule.
	//BoolExpression returns Expression:
	//    LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression returns Expression:
	//    LogicalAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
	//        ('||' subExpressions+=LogicalAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression returns Expression:
	//    BitwiseOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)
	//        ('&&' subExpressions+=BitwiseOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//    BitwiseXOrExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseOrOperator subExpressions+=BitwiseXOrExpression)
	//        ('|' subExpressions+=BitwiseXOrExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression returns Expression:
	//    BitwiseAndExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseXOrOperator subExpressions+=BitwiseAndExpression)
	//        ('^' subExpressions+=BitwiseAndExpression)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//    CompareOperation
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=BitwiseAndOperator subExpressions+=CompareOperation)
	//        ('&' subExpressions+=CompareOperation)*
	//    )?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares.
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//    NotOrValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        operator=CompareOperator subExpressions+=NotOrValuedExpression
	//    )?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression returns Expression:
	//    ValuedExpression
	//    | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression returns Expression:
	//    {OperatorExpression} operator=BitwiseNotOperator subExpressions+=(BitwiseNotExpression)
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression returns Expression:
	//    {OperatorExpression} operator=NotOperator subExpressions+=(NotExpression)
	//    | BitwiseNotExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// Valued Expression Rule
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression returns Expression:
	//    ShiftExpressions;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//ShiftExpressions returns Expression:
	//    SumExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression ('<<' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightOperator subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftLeftOperator subExpressions+=ShiftRightExpression)
	//        ('<<' subExpressions+=ShiftRightExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightOperator subExpressions+=ShiftRightUnsignedExpression)
	//        ('>>' subExpressions+=ShiftRightUnsignedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression returns Expression:
	//    SumExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ShiftRightUnsignedOperator subExpressions+=SumExpression)
	//        ('>>>' subExpressions+=SumExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression returns Expression:
	//    ProductExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression ('+' subExpressions+=ProductExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression returns Expression:
	//    ProductExpression
	//    ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=ProductExpression)*
	//;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//ProductExpression returns Expression:
	//    NegExpression
	//    (
	//    ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=NegExpression ('/' subExpressions+=NegExpression)*)
	//    |
	//    ({OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)
	//    )*
	//;
	public KExpressionsGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaKExpressions.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=MultOperator subExpressions+=NegExpression)
	//        ('*' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=DivOperator subExpressions+=NegExpression)
	//        ('/' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression returns Expression:
	//    NegExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=ModOperator subExpressions+=NegExpression)
	//        ('%' subExpressions+=NegExpression)*
	//    )?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary.
	//// Example: -i, -2
	//NegExpression returns Expression:
	//    {OperatorExpression} operator=SubOperator subExpressions+=(NegExpression)
	//    | TernaryOperation;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//TernaryOperation returns Expression:
	//    {OperatorExpression}
	//    subExpressions += AtomicValuedExpression operator=ConditionalOperator subExpressions += AtomicValuedExpression (':' subExpressions += AtomicValuedExpression)?
	//    | InitExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression returns Expression:
	//    FbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=InitOperator subExpressions+=FbyExpression)
	//        ('->' subExpressions+=FbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaKExpressions.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression returns Expression:
	//    SfbyExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=FbyOperator subExpressions+=SfbyExpression)
	//        ('fby' subExpressions+=SfbyExpression)*
	//    )?;
	public KExpressionsGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaKExpressions.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression returns Expression:
	//    AtomicValuedExpression
	//    ({OperatorExpression.subExpressions+=current}
	//        (operator=SfbyOperator subExpressions+=AtomicValuedExpression)
	//        ('sfby' subExpressions+=AtomicValuedExpression)*
	//    )?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicExpression returns Expression:
	//    BoolValue
	//    | '(' BoolExpression ')'
	//    | ReferenceCall
	//    | FunctionCall
	//    | RandomCall
	//    | RandomizeCall
	//    | ValuedObjectTestExpression // Last to allow detection of calls
	//    | SpecialAccessExpression
	//    | TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.
	//AtomicValuedExpression returns Expression:
	//    IntValue
	//    | FloatValue
	//    | StringValue
	//    | VectorValue
	//    | NullValue
	//    | '(' ValuedExpression ')'
	//    | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.
	//BoolScheduleExpression returns Expression:
	//    LogicalOrExpression
	//    ('schedule' schedule += ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//    {OperatorExpression} operator=(PreOperator|ValOperator)  '('subExpressions+=ValuedObjectTestExpression (',' subExpressions+=ValuedObjectReference)? ')'
	//    | ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// Accesses a arbitrary target in a static way (needs to be adjusted in the scoper of the deriving language)
	//// Example: static(Constants).MAX
	//SpecialAccessExpression returns SpecialAccessExpression:
	//    access='static' '('
	//    (container=[annotations::NamedObject|PrimeID] '.')?
	//    target=[annotations::NamedObject|PrimeID]
	//    ')' '.' subReference=ValuedObjectReference;
	public KExpressionsGrammarAccess.SpecialAccessExpressionElements getSpecialAccessExpressionAccess() {
		return gaKExpressions.getSpecialAccessExpressionAccess();
	}
	
	public ParserRule getSpecialAccessExpressionRule() {
		return getSpecialAccessExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID returns ecore::EString:
	//  ID ("'")*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference returns ValuedObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference returns ScheduleObjectReference:
	//    valuedObject=[ValuedObject|PrimeID]
	//    priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list.
	//ReferenceCall returns ReferenceCall:
	//    super?='super.'?
	//    valuedObject=[ValuedObject|PrimeID]
	//    ('[' indices+=Expression ']')*
	//    ('.' subReference=ValuedObjectReference)?
	//    (
	//        ('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()'
	//    );
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomCall returns RandomCall:
	//    {RandomCall}
	//    'random' ('()')?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function.
	//RandomizeCall returns RandomizeCall:
	//    {RandomizeCall}
	//    'randomize' ('()')?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list.
	//FunctionCall returns FunctionCall:
	//    ('extern' functionName = ID
	//        (('(' parameters += Parameter
	//            (',' parameters += Parameter)* ')'
	//        ) | '()')
	//    );
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall returns PrintCall:
	//    {PrintCall}
	//    'print'
	//    (
	//        ('(' parameters += Parameter (',' parameters += Parameter)* ')' )
	//    |
	//        '()'
	//    );
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter returns Parameter:
	//    (accessType = ParameterAccessType
	//    expression = ValuedObjectReference)
	//    |
	//    expression = Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression returns TextExpression:
	//    (annotations += Annotation)*
	//    text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue returns IntValue:
	//    value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue returns FloatValue:
	//    value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue returns BoolValue:
	//    value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue returns VectorValue:
	//    '{' (
	//        values+=VectorValueMember (',' values+=VectorValueMember)*
	//        |
	//        values+=IntValue range?='to' values+=(IntValue | ValuedObjectReference | SpecialAccessExpression)
	//    ) '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember returns Expression:
	//    BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue returns IgnoreValue:
	//    {IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext.
	//AnyType returns ecore::EString:
	//    BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue returns Value:
	//    IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//// -------------------- //
	////  KExpressions Enums  //
	//// -------------------- //
	//enum CompareOperator returns OperatorType:
	//    EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//    PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//    BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//    BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//    BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//    BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//    NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//    ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//    SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//    MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//    MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//    DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//    VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//    LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//    LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//    SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//    SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//    SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//    POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//    POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//    CONDITIONAL = "?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//    INIT = "->";
	public KExpressionsGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaKExpressions.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//    FBY = "fby";
	public KExpressionsGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaKExpressions.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//    SFBY = "sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum ValueType returns ValueType:
	//    PURE="pure" | BOOL="bool" |
	//    INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//    HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//    STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//    CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum EnumType returns ValueType:
	//    ENUM="enum";
	public KExpressionsGrammarAccess.EnumTypeElements getEnumTypeAccess() {
		return gaKExpressions.getEnumTypeAccess();
	}
	
	public EnumRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//enum CombineOperator returns CombineOperator:
	//    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//    MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier returns AccessModifier:
	//    PUBLIC = 'public' | PROTECTED = 'protected' | PRIVATE = 'private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//    VOID="void" |
	//    BOOL="bool" | INT="int" | FLOAT="float" |
	//    STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType returns ParameterAccessType:
	//    CALL_BY_REFERENCE = "&" | PURE_OUTPUT = "!&"
	//;
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                //
	//// -------------------- //
	//JsonObjectValue returns JsonObjectValue:
	//    {JsonObjectValue}
	//    '{'
	//    ( (members+=JsonObjectMember) (',' members+=JsonObjectMember)* )?
	//    '}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember returns JsonObjectMember:
	//    key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue returns JsonArrayValue:
	//    {JsonArrayValue}
	//    '['
	//    ( (elements+=JsonValue) (',' elements+=JsonValue)* )?
	//    ']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue returns Value:
	//    JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue returns NullValue:
	//    {NullValue}
	//    'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma returns JsonPragma:
	//    '#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation returns JsonAnnotation:
	//    '@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma returns annotations::Pragma:
	//    super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation returns annotations::Annotation:
	//    super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//// OO
	//ThisExpression returns ThisExpression:
	//    {ThisExpression}
	//    'this';
	public KExpressionsGrammarAccess.ThisExpressionElements getThisExpressionAccess() {
		return gaKExpressions.getThisExpressionAccess();
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//// ------------------------ //
	////  KExpressions Terminals  //
	//// ------------------------ //
	//// Hostcode Terminals
	//// Custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE returns ecore::EString:
	//    "`" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"`") )* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed
	// * @kieler.rating 2015-08-21 proposed yellow
	// */
	//// ------------------ //
	////  Annotation Rules  //
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters!
	//Annotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.
	//Pragma returns Pragma:
	//    StringPragma |
	//    PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation returns Annotation:
	//    CommentAnnotation |
	//    KeyStringValueAnnotation |
	//    TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations.
	//// You can use this rule in derived grammars if you don't want to permit typed strings.
	//RestrictedTypeAnnotation returns Annotation:
	//    CommentAnnotation |
	//    RestrictedKeyStringValueAnnotation |
	//    RestrictedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in
	//// derived grammars if you don't want to permit unquoted strings.
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)
	//QuotedStringAnnotation returns Annotation:
	//    CommentAnnotation |
	//    QuotedKeyStringValueAnnotation |
	//    QuotedTypedKeyStringValueAnnotation |
	//    TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation returns CommentAnnotation:
	//    values += COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL returns CommentAnnotation:
	//    values += SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation returns TagAnnotation:
	//    '@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag returns Pragma:
	//    '#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.
	//KeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma returns StringPragma:
	//    '#' name=ExtendedID values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringAllTypes (',' values += EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += EStringBoolean (',' values += EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedKeyStringValueAnnotation returns StringAnnotation:
	//    '@' name=ExtendedID values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation.
	//QuotedTypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//    '@' name=ExtendedID '[' type=ExtendedID ']' values += STRING (',' values += STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString returns ecore::EString:
	//    STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes returns ecore::EString:
	//    STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID returns ecore::EString:
	//  ID (('.'|'-') ID)* (('#') INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID returns ecore::EString:
	//  ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer returns ecore::EInt:
	//    '-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger returns ecore::EDouble:
	//    '-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//// ---------------------- //
	////  Annotation Terminals  //
	//// ---------------------- //
	//// Comment Annotation Terminal
	//// Custom terminal rule introducing semantic comments.
	//terminal COMMENT_ANNOTATION returns ecore::EString:
	//    '/**' -> '*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//// Multiline Comment Terminal
	//// Modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one.
	//@Override
	//terminal ML_COMMENT returns ecore::EString:
	//    '/*'!'*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION returns ecore::EString:
	//    '//*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '//' !'*' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	}
	
	//// Number Terminal
	//terminal fragment NUMBER :
	//    '0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//// Integer Terminal
	//// An INT is a list of numbers.
	//@Override
	//terminal INT returns ecore::EInt:
	//    NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//// Float Terminal (internal precision: double!)
	//// Make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EDouble:
	//    NUMBER+ ('.' NUMBER*) (("e"|"E") ("+"|"-")? NUMBER+)? 'f'? |
	//    NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//// Boolean Terminal
	//// Introduce boolean values.
	//terminal BOOLEAN returns ecore::EBooleanObject :
	//    'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//// String Terminal
	//// Custom terminal rule for strings, only use double quotes.
	//@Override
	//terminal STRING returns ecore::EString:
	//    '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//    '^'?(('_'?'a'..'z'|'_'?'A'..'Z')|'_''0'..'9'|'__') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
