/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kexpressions.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.Pragma;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.StringPragma;
import de.cau.cs.kieler.annotations.TagAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.annotations.serializer.AnnotationsSemanticSequencer;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IgnoreValue;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.JsonAnnotation;
import de.cau.cs.kieler.kexpressions.JsonArrayValue;
import de.cau.cs.kieler.kexpressions.JsonObjectMember;
import de.cau.cs.kieler.kexpressions.JsonObjectValue;
import de.cau.cs.kieler.kexpressions.JsonPragma;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.NullValue;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.PrintCall;
import de.cau.cs.kieler.kexpressions.RandomCall;
import de.cau.cs.kieler.kexpressions.RandomizeCall;
import de.cau.cs.kieler.kexpressions.ReferenceCall;
import de.cau.cs.kieler.kexpressions.ScheduleObjectReference;
import de.cau.cs.kieler.kexpressions.SpecialAccessExpression;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ThisExpression;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VectorValue;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKExpressionsSemanticSequencer extends AnnotationsSemanticSequencer {

	@Inject
	private KExpressionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.COMMENT_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getCommentAnnotationRule()) {
					sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommentAnnotatonSLRule()) {
					sequence_CommentAnnotatonSL(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.PRAGMA:
				sequence_PragmaTag(context, (Pragma) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedKeyStringValueAnnotationRule()) {
					sequence_RestrictedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.STRING_PRAGMA:
				sequence_StringPragma(context, (StringPragma) semanticObject); 
				return; 
			case AnnotationsPackage.TAG_ANNOTATION:
				sequence_TagAnnotation(context, (TagAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getAnnotationsQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()) {
					sequence_RestrictedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getAnnotationsAnnotationRule()
						|| rule == grammarAccess.getAnnotationsValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_BoolValue(context, (BoolValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getBoolValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_BoolValue(context, (BoolValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.FLOAT_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_FloatValue(context, (FloatValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getFloatValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_FloatValue(context, (FloatValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.FUNCTION_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_FunctionCall(context, (FunctionCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getFunctionCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_FunctionCall(context, (FunctionCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.IGNORE_VALUE:
				sequence_IgnoreValue(context, (IgnoreValue) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_IntValue(context, (IntValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getIntValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_IntValue(context, (IntValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.JSON_ANNOTATION:
				sequence_JsonAnnotation(context, (JsonAnnotation) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_ARRAY_VALUE:
				sequence_JsonArrayValue(context, (JsonArrayValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_MEMBER:
				sequence_JsonObjectMember(context, (JsonObjectMember) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_VALUE:
				sequence_JsonObjectValue(context, (JsonObjectValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_PRAGMA:
				sequence_JsonPragma(context, (JsonPragma) semanticObject); 
				return; 
			case KExpressionsPackage.NULL_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_NullValue(context, (NullValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getJsonValueRule()
						|| rule == grammarAccess.getNullValueRule()) {
					sequence_NullValue(context, (NullValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_BoolScheduleExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDivExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_MultExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftLeftExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftLeftExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftRightExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftRightExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftRightUnsignedExpressionRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftRightUnsignedExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SubExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.PRINT_CALL:
				sequence_PrintCall(context, (PrintCall) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOM_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_RandomCall(context, (RandomCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getRandomCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_RandomCall(context, (RandomCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.RANDOMIZE_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_RandomizeCall(context, (RandomizeCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getRandomizeCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_RandomizeCall(context, (RandomizeCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.REFERENCE_CALL:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_ReferenceCall(context, (ReferenceCall) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getReferenceCallRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_ReferenceCall(context, (ReferenceCall) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_OBJECT_REFERENCE:
				sequence_ScheduleObjectReference(context, (ScheduleObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.SPECIAL_ACCESS_EXPRESSION:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_SpecialAccessExpression(context, (SpecialAccessExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getSpecialAccessExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_SpecialAccessExpression(context, (SpecialAccessExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.STRING_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_StringValue(context, (StringValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getStringValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()
						|| rule == grammarAccess.getAnyValueRule()
						|| rule == grammarAccess.getJsonValueRule()) {
					sequence_StringValue(context, (StringValue) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.TEXT_EXPRESSION:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_TextExpression(context, (TextExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getTextExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_TextExpression(context, (TextExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.THIS_EXPRESSION:
				sequence_ThisExpression(context, (ThisExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getValuedObjectTestExpressionRule()
						|| rule == grammarAccess.getValuedObjectReferenceRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VECTOR_VALUE:
				if (rule == grammarAccess.getBoolScheduleExpressionRule()) {
					sequence_BoolScheduleExpression_VectorValue(context, (VectorValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftExpressionsRule()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getShiftExpressionsAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSumExpressionRule()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getSumExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getProductExpressionRule()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0()
						|| action == grammarAccess.getProductExpressionAccess().getOperatorExpressionSubExpressionsAction_1_2_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| action == grammarAccess.getInitExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getFbyExpressionRule()
						|| action == grammarAccess.getFbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSfbyExpressionRule()
						|| action == grammarAccess.getSfbyExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_VectorValue(context, (VectorValue) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 operator=AddOperator subExpressions+=ProductExpression) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_AddExpression_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *                 operator=LogicalOrOperator 
	 *                 subExpressions+=LogicalAndExpression 
	 *                 subExpressions+=LogicalAndExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *                 operator=LogicalAndOperator 
	 *                 subExpressions+=BitwiseOrExpression 
	 *                 subExpressions+=BitwiseOrExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *                 operator=BitwiseOrOperator 
	 *                 subExpressions+=BitwiseXOrExpression 
	 *                 subExpressions+=BitwiseXOrExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *                 operator=BitwiseXOrOperator 
	 *                 subExpressions+=BitwiseAndExpression 
	 *                 subExpressions+=BitwiseAndExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *                 operator=BitwiseAndOperator 
	 *                 subExpressions+=CompareOperation 
	 *                 subExpressions+=CompareOperation*
	 *             ) | 
	 *             (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *             (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *             (operator=NotOperator subExpressions+=NotExpression) | 
	 *             (
	 *                 subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *                 operator=ShiftLeftOperator 
	 *                 subExpressions+=SumExpression 
	 *                 subExpressions+=SumExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *                 operator=ShiftRightOperator 
	 *                 subExpressions+=SumExpression 
	 *                 subExpressions+=SumExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *                 operator=ShiftRightUnsignedOperator 
	 *                 subExpressions+=SumExpression 
	 *                 subExpressions+=SumExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *                 operator=AddOperator 
	 *                 subExpressions+=ProductExpression 
	 *                 subExpressions+=ProductExpression*
	 *             ) | 
	 *             (
	 *                 subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *                 operator=SubOperator 
	 *                 subExpressions+=ProductExpression 
	 *                 subExpressions+=ProductExpression*
	 *             ) | 
	 *             (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *             (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *             (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *             (operator=SubOperator subExpressions+=NegExpression) | 
	 *             (
	 *                 subExpressions+=AtomicValuedExpression 
	 *                 operator=ConditionalOperator 
	 *                 subExpressions+=AtomicValuedExpression 
	 *                 subExpressions+=AtomicValuedExpression?
	 *             ) | 
	 *             (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *             (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *             (
	 *                 subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *                 operator=SfbyOperator 
	 *                 subExpressions+=AtomicValuedExpression 
	 *                 subExpressions+=AtomicValuedExpression*
	 *             ) | 
	 *             ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *         ) 
	 *         schedule+=ScheduleObjectReference?
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_BoolScheduleExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DivExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_MultExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShiftLeftExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftLeftExpression_OperatorExpression_1_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=ShiftRightExpression 
	 *             subExpressions+=ShiftRightExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftLeftExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShiftRightExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftRightExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=ShiftRightUnsignedExpression 
	 *             subExpressions+=ShiftRightUnsignedExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftRightExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShiftRightUnsignedExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftRightUnsignedExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_ShiftRightUnsignedExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 operator=SubOperator subExpressions+=ProductExpression) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SubExpression_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     BoolExpression returns OperatorExpression
	 *     LogicalOrExpression returns OperatorExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalAndExpression returns OperatorExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseOrExpression returns OperatorExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseXOrExpression returns OperatorExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseAndExpression returns OperatorExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     CompareOperation.OperatorExpression_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     BitwiseNotExpression returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     ShiftExpressions returns OperatorExpression
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns OperatorExpression
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns OperatorExpression
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns OperatorExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SumExpression returns OperatorExpression
	 *     SumExpression.OperatorExpression_1_0_0 returns OperatorExpression
	 *     SumExpression.OperatorExpression_1_1_0 returns OperatorExpression
	 *     ProductExpression returns OperatorExpression
	 *     ProductExpression.OperatorExpression_1_0_0 returns OperatorExpression
	 *     ProductExpression.OperatorExpression_1_1_0 returns OperatorExpression
	 *     ProductExpression.OperatorExpression_1_2_0 returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     TernaryOperation returns OperatorExpression
	 *     InitExpression returns OperatorExpression
	 *     InitExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     FbyExpression returns OperatorExpression
	 *     FbyExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SfbyExpression returns OperatorExpression
	 *     SfbyExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AtomicExpression returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *     VectorValueMember returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_0_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftExpressions_OperatorExpression_1_2_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=SumExpression 
	 *             subExpressions+=SumExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_0_0 
	 *             operator=AddOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=SumExpression_OperatorExpression_1_1_0 
	 *             operator=SubOperator 
	 *             subExpressions+=ProductExpression 
	 *             subExpressions+=ProductExpression*
	 *         ) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_0_0 operator=MultOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_1_0 operator=DivOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (subExpressions+=ProductExpression_OperatorExpression_1_2_0 operator=ModOperator subExpressions+=NegExpression subExpressions+=NegExpression*) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression?
	 *         ) | 
	 *         (subExpressions+=InitExpression_OperatorExpression_1_0 operator=InitOperator subExpressions+=FbyExpression subExpressions+=FbyExpression*) | 
	 *         (subExpressions+=FbyExpression_OperatorExpression_1_0 operator=FbyOperator subExpressions+=SfbyExpression subExpressions+=SfbyExpression*) | 
	 *         (
	 *             subExpressions+=SfbyExpression_OperatorExpression_1_0 
	 *             operator=SfbyOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 *     )
	 * </pre>
	 */
	protected void sequence_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_FbyExpression_InitExpression_LogicalAndExpression_LogicalOrExpression_NegExpression_NotExpression_ProductExpression_SfbyExpression_ShiftExpressions_SumExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns BoolValue
	 *
	 * Constraint:
	 *     (value=BOOLEAN schedule+=ScheduleObjectReference?)
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_BoolValue(ISerializationContext context, BoolValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns FloatValue
	 *
	 * Constraint:
	 *     (value=FLOAT schedule+=ScheduleObjectReference?)
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_FloatValue(ISerializationContext context, FloatValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns FunctionCall
	 *
	 * Constraint:
	 *     (functionName=ID (parameters+=Parameter parameters+=Parameter*)? schedule+=ScheduleObjectReference?)
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns IntValue
	 *
	 * Constraint:
	 *     (value=INT schedule+=ScheduleObjectReference?)
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_IntValue(ISerializationContext context, IntValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns NullValue
	 *
	 * Constraint:
	 *     schedule+=ScheduleObjectReference?
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_NullValue(ISerializationContext context, NullValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns RandomCall
	 *
	 * Constraint:
	 *     schedule+=ScheduleObjectReference?
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_RandomCall(ISerializationContext context, RandomCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns RandomizeCall
	 *
	 * Constraint:
	 *     schedule+=ScheduleObjectReference?
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_RandomizeCall(ISerializationContext context, RandomizeCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns ReferenceCall
	 *
	 * Constraint:
	 *     (
	 *         super?='super.'? 
	 *         valuedObject=[ValuedObject|PrimeID] 
	 *         indices+=Expression* 
	 *         subReference=ValuedObjectReference? 
	 *         (parameters+=Parameter parameters+=Parameter*)? 
	 *         schedule+=ScheduleObjectReference?
	 *     )
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_ReferenceCall(ISerializationContext context, ReferenceCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns SpecialAccessExpression
	 *
	 * Constraint:
	 *     (
	 *         access='static' 
	 *         container=[NamedObject|PrimeID]? 
	 *         target=[NamedObject|PrimeID] 
	 *         subReference=ValuedObjectReference 
	 *         schedule+=ScheduleObjectReference?
	 *     )
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_SpecialAccessExpression(ISerializationContext context, SpecialAccessExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns StringValue
	 *
	 * Constraint:
	 *     (value=STRING schedule+=ScheduleObjectReference?)
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_StringValue(ISerializationContext context, StringValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns TextExpression
	 *
	 * Constraint:
	 *     (annotations+=Annotation* text=HOSTCODE schedule+=ScheduleObjectReference?)
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_TextExpression(ISerializationContext context, TextExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns ValuedObjectReference
	 *
	 * Constraint:
	 *     (valuedObject=[ValuedObject|PrimeID] indices+=Expression* subReference=ValuedObjectReference? schedule+=ScheduleObjectReference?)
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_ValuedObjectReference(ISerializationContext context, ValuedObjectReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BoolScheduleExpression returns VectorValue
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (values+=VectorValueMember values+=VectorValueMember*) | 
	 *             (values+=IntValue range?='to' (values+=IntValue | values+=ValuedObjectReference | values+=SpecialAccessExpression))
	 *         ) 
	 *         schedule+=ScheduleObjectReference?
	 *     )
	 * </pre>
	 */
	protected void sequence_BoolScheduleExpression_VectorValue(ISerializationContext context, VectorValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns BoolValue
	 *     Expression returns BoolValue
	 *     BoolExpression returns BoolValue
	 *     LogicalOrExpression returns BoolValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns BoolValue
	 *     LogicalAndExpression returns BoolValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns BoolValue
	 *     BitwiseOrExpression returns BoolValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns BoolValue
	 *     BitwiseXOrExpression returns BoolValue
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns BoolValue
	 *     BitwiseAndExpression returns BoolValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns BoolValue
	 *     CompareOperation returns BoolValue
	 *     CompareOperation.OperatorExpression_1_0 returns BoolValue
	 *     NotOrValuedExpression returns BoolValue
	 *     BitwiseNotExpression returns BoolValue
	 *     NotExpression returns BoolValue
	 *     ValuedExpression returns BoolValue
	 *     ShiftExpressions returns BoolValue
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns BoolValue
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns BoolValue
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns BoolValue
	 *     ShiftLeftExpression returns BoolValue
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns BoolValue
	 *     ShiftRightExpression returns BoolValue
	 *     ShiftRightExpression.OperatorExpression_1_0 returns BoolValue
	 *     ShiftRightUnsignedExpression returns BoolValue
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns BoolValue
	 *     SumExpression returns BoolValue
	 *     SumExpression.OperatorExpression_1_0_0 returns BoolValue
	 *     SumExpression.OperatorExpression_1_1_0 returns BoolValue
	 *     AddExpression returns BoolValue
	 *     AddExpression.OperatorExpression_1_0 returns BoolValue
	 *     SubExpression returns BoolValue
	 *     SubExpression.OperatorExpression_1_0 returns BoolValue
	 *     ProductExpression returns BoolValue
	 *     ProductExpression.OperatorExpression_1_0_0 returns BoolValue
	 *     ProductExpression.OperatorExpression_1_1_0 returns BoolValue
	 *     ProductExpression.OperatorExpression_1_2_0 returns BoolValue
	 *     MultExpression returns BoolValue
	 *     MultExpression.OperatorExpression_1_0 returns BoolValue
	 *     DivExpression returns BoolValue
	 *     DivExpression.OperatorExpression_1_0 returns BoolValue
	 *     ModExpression returns BoolValue
	 *     ModExpression.OperatorExpression_1_0 returns BoolValue
	 *     NegExpression returns BoolValue
	 *     TernaryOperation returns BoolValue
	 *     InitExpression returns BoolValue
	 *     InitExpression.OperatorExpression_1_0 returns BoolValue
	 *     FbyExpression returns BoolValue
	 *     FbyExpression.OperatorExpression_1_0 returns BoolValue
	 *     SfbyExpression returns BoolValue
	 *     SfbyExpression.OperatorExpression_1_0 returns BoolValue
	 *     AtomicExpression returns BoolValue
	 *     AtomicValuedExpression returns BoolValue
	 *     BoolValue returns BoolValue
	 *     VectorValueMember returns BoolValue
	 *     AnyValue returns BoolValue
	 *     JsonValue returns BoolValue
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 * </pre>
	 */
	protected void sequence_BoolValue(ISerializationContext context, BoolValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.BOOL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.BOOL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolValueAccess().getValueBOOLEANTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns FloatValue
	 *     Expression returns FloatValue
	 *     BoolExpression returns FloatValue
	 *     LogicalOrExpression returns FloatValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns FloatValue
	 *     LogicalAndExpression returns FloatValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns FloatValue
	 *     BitwiseOrExpression returns FloatValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns FloatValue
	 *     BitwiseXOrExpression returns FloatValue
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns FloatValue
	 *     BitwiseAndExpression returns FloatValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns FloatValue
	 *     CompareOperation returns FloatValue
	 *     CompareOperation.OperatorExpression_1_0 returns FloatValue
	 *     NotOrValuedExpression returns FloatValue
	 *     BitwiseNotExpression returns FloatValue
	 *     NotExpression returns FloatValue
	 *     ValuedExpression returns FloatValue
	 *     ShiftExpressions returns FloatValue
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns FloatValue
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns FloatValue
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns FloatValue
	 *     ShiftLeftExpression returns FloatValue
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns FloatValue
	 *     ShiftRightExpression returns FloatValue
	 *     ShiftRightExpression.OperatorExpression_1_0 returns FloatValue
	 *     ShiftRightUnsignedExpression returns FloatValue
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns FloatValue
	 *     SumExpression returns FloatValue
	 *     SumExpression.OperatorExpression_1_0_0 returns FloatValue
	 *     SumExpression.OperatorExpression_1_1_0 returns FloatValue
	 *     AddExpression returns FloatValue
	 *     AddExpression.OperatorExpression_1_0 returns FloatValue
	 *     SubExpression returns FloatValue
	 *     SubExpression.OperatorExpression_1_0 returns FloatValue
	 *     ProductExpression returns FloatValue
	 *     ProductExpression.OperatorExpression_1_0_0 returns FloatValue
	 *     ProductExpression.OperatorExpression_1_1_0 returns FloatValue
	 *     ProductExpression.OperatorExpression_1_2_0 returns FloatValue
	 *     MultExpression returns FloatValue
	 *     MultExpression.OperatorExpression_1_0 returns FloatValue
	 *     DivExpression returns FloatValue
	 *     DivExpression.OperatorExpression_1_0 returns FloatValue
	 *     ModExpression returns FloatValue
	 *     ModExpression.OperatorExpression_1_0 returns FloatValue
	 *     NegExpression returns FloatValue
	 *     TernaryOperation returns FloatValue
	 *     InitExpression returns FloatValue
	 *     InitExpression.OperatorExpression_1_0 returns FloatValue
	 *     FbyExpression returns FloatValue
	 *     FbyExpression.OperatorExpression_1_0 returns FloatValue
	 *     SfbyExpression returns FloatValue
	 *     SfbyExpression.OperatorExpression_1_0 returns FloatValue
	 *     AtomicExpression returns FloatValue
	 *     AtomicValuedExpression returns FloatValue
	 *     FloatValue returns FloatValue
	 *     VectorValueMember returns FloatValue
	 *     AnyValue returns FloatValue
	 *     JsonValue returns FloatValue
	 *
	 * Constraint:
	 *     value=FLOAT
	 * </pre>
	 */
	protected void sequence_FloatValue(ISerializationContext context, FloatValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.FLOAT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.FLOAT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns FunctionCall
	 *     Expression returns FunctionCall
	 *     BoolExpression returns FunctionCall
	 *     LogicalOrExpression returns FunctionCall
	 *     LogicalOrExpression.OperatorExpression_1_0 returns FunctionCall
	 *     LogicalAndExpression returns FunctionCall
	 *     LogicalAndExpression.OperatorExpression_1_0 returns FunctionCall
	 *     BitwiseOrExpression returns FunctionCall
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns FunctionCall
	 *     BitwiseXOrExpression returns FunctionCall
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns FunctionCall
	 *     BitwiseAndExpression returns FunctionCall
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns FunctionCall
	 *     CompareOperation returns FunctionCall
	 *     CompareOperation.OperatorExpression_1_0 returns FunctionCall
	 *     NotOrValuedExpression returns FunctionCall
	 *     BitwiseNotExpression returns FunctionCall
	 *     NotExpression returns FunctionCall
	 *     ValuedExpression returns FunctionCall
	 *     ShiftExpressions returns FunctionCall
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns FunctionCall
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns FunctionCall
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns FunctionCall
	 *     ShiftLeftExpression returns FunctionCall
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns FunctionCall
	 *     ShiftRightExpression returns FunctionCall
	 *     ShiftRightExpression.OperatorExpression_1_0 returns FunctionCall
	 *     ShiftRightUnsignedExpression returns FunctionCall
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns FunctionCall
	 *     SumExpression returns FunctionCall
	 *     SumExpression.OperatorExpression_1_0_0 returns FunctionCall
	 *     SumExpression.OperatorExpression_1_1_0 returns FunctionCall
	 *     AddExpression returns FunctionCall
	 *     AddExpression.OperatorExpression_1_0 returns FunctionCall
	 *     SubExpression returns FunctionCall
	 *     SubExpression.OperatorExpression_1_0 returns FunctionCall
	 *     ProductExpression returns FunctionCall
	 *     ProductExpression.OperatorExpression_1_0_0 returns FunctionCall
	 *     ProductExpression.OperatorExpression_1_1_0 returns FunctionCall
	 *     ProductExpression.OperatorExpression_1_2_0 returns FunctionCall
	 *     MultExpression returns FunctionCall
	 *     MultExpression.OperatorExpression_1_0 returns FunctionCall
	 *     DivExpression returns FunctionCall
	 *     DivExpression.OperatorExpression_1_0 returns FunctionCall
	 *     ModExpression returns FunctionCall
	 *     ModExpression.OperatorExpression_1_0 returns FunctionCall
	 *     NegExpression returns FunctionCall
	 *     TernaryOperation returns FunctionCall
	 *     InitExpression returns FunctionCall
	 *     InitExpression.OperatorExpression_1_0 returns FunctionCall
	 *     FbyExpression returns FunctionCall
	 *     FbyExpression.OperatorExpression_1_0 returns FunctionCall
	 *     SfbyExpression returns FunctionCall
	 *     SfbyExpression.OperatorExpression_1_0 returns FunctionCall
	 *     AtomicExpression returns FunctionCall
	 *     AtomicValuedExpression returns FunctionCall
	 *     FunctionCall returns FunctionCall
	 *     VectorValueMember returns FunctionCall
	 *
	 * Constraint:
	 *     (functionName=ID (parameters+=Parameter parameters+=Parameter*)?)
	 * </pre>
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VectorValueMember returns IgnoreValue
	 *     IgnoreValue returns IgnoreValue
	 *
	 * Constraint:
	 *     {IgnoreValue}
	 * </pre>
	 */
	protected void sequence_IgnoreValue(ISerializationContext context, IgnoreValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns IntValue
	 *     Expression returns IntValue
	 *     BoolExpression returns IntValue
	 *     LogicalOrExpression returns IntValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns IntValue
	 *     LogicalAndExpression returns IntValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns IntValue
	 *     BitwiseOrExpression returns IntValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns IntValue
	 *     BitwiseXOrExpression returns IntValue
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns IntValue
	 *     BitwiseAndExpression returns IntValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns IntValue
	 *     CompareOperation returns IntValue
	 *     CompareOperation.OperatorExpression_1_0 returns IntValue
	 *     NotOrValuedExpression returns IntValue
	 *     BitwiseNotExpression returns IntValue
	 *     NotExpression returns IntValue
	 *     ValuedExpression returns IntValue
	 *     ShiftExpressions returns IntValue
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns IntValue
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns IntValue
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns IntValue
	 *     ShiftLeftExpression returns IntValue
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns IntValue
	 *     ShiftRightExpression returns IntValue
	 *     ShiftRightExpression.OperatorExpression_1_0 returns IntValue
	 *     ShiftRightUnsignedExpression returns IntValue
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns IntValue
	 *     SumExpression returns IntValue
	 *     SumExpression.OperatorExpression_1_0_0 returns IntValue
	 *     SumExpression.OperatorExpression_1_1_0 returns IntValue
	 *     AddExpression returns IntValue
	 *     AddExpression.OperatorExpression_1_0 returns IntValue
	 *     SubExpression returns IntValue
	 *     SubExpression.OperatorExpression_1_0 returns IntValue
	 *     ProductExpression returns IntValue
	 *     ProductExpression.OperatorExpression_1_0_0 returns IntValue
	 *     ProductExpression.OperatorExpression_1_1_0 returns IntValue
	 *     ProductExpression.OperatorExpression_1_2_0 returns IntValue
	 *     MultExpression returns IntValue
	 *     MultExpression.OperatorExpression_1_0 returns IntValue
	 *     DivExpression returns IntValue
	 *     DivExpression.OperatorExpression_1_0 returns IntValue
	 *     ModExpression returns IntValue
	 *     ModExpression.OperatorExpression_1_0 returns IntValue
	 *     NegExpression returns IntValue
	 *     TernaryOperation returns IntValue
	 *     InitExpression returns IntValue
	 *     InitExpression.OperatorExpression_1_0 returns IntValue
	 *     FbyExpression returns IntValue
	 *     FbyExpression.OperatorExpression_1_0 returns IntValue
	 *     SfbyExpression returns IntValue
	 *     SfbyExpression.OperatorExpression_1_0 returns IntValue
	 *     AtomicExpression returns IntValue
	 *     AtomicValuedExpression returns IntValue
	 *     IntValue returns IntValue
	 *     VectorValueMember returns IntValue
	 *     AnyValue returns IntValue
	 *     JsonValue returns IntValue
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.INT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.INT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonAnnotation returns JsonAnnotation
	 *     Annotation returns JsonAnnotation
	 *     ValuedAnnotation returns JsonAnnotation
	 *     QuotedStringAnnotation returns JsonAnnotation
	 *
	 * Constraint:
	 *     (name=ExtendedID value=JsonObjectValue)
	 * </pre>
	 */
	protected void sequence_JsonAnnotation(ISerializationContext context, JsonAnnotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME));
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.JSON_ANNOTATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.JSON_ANNOTATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonAnnotationAccess().getNameExtendedIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJsonAnnotationAccess().getValueJsonObjectValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonArrayValue returns JsonArrayValue
	 *     JsonValue returns JsonArrayValue
	 *
	 * Constraint:
	 *     (elements+=JsonValue elements+=JsonValue*)?
	 * </pre>
	 */
	protected void sequence_JsonArrayValue(ISerializationContext context, JsonArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonObjectMember returns JsonObjectMember
	 *
	 * Constraint:
	 *     (key=STRING value=JsonValue)
	 * </pre>
	 */
	protected void sequence_JsonObjectMember(ISerializationContext context, JsonObjectMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.JSON_OBJECT_MEMBER__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.JSON_OBJECT_MEMBER__KEY));
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.JSON_OBJECT_MEMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.JSON_OBJECT_MEMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonObjectMemberAccess().getKeySTRINGTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getJsonObjectMemberAccess().getValueJsonValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonObjectValue returns JsonObjectValue
	 *     JsonValue returns JsonObjectValue
	 *
	 * Constraint:
	 *     (members+=JsonObjectMember members+=JsonObjectMember*)?
	 * </pre>
	 */
	protected void sequence_JsonObjectValue(ISerializationContext context, JsonObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonPragma returns JsonPragma
	 *     Pragma returns JsonPragma
	 *
	 * Constraint:
	 *     (name=ExtendedID value=JsonObjectValue)
	 * </pre>
	 */
	protected void sequence_JsonPragma(ISerializationContext context, JsonPragma semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME));
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.JSON_PRAGMA__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.JSON_PRAGMA__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonPragmaAccess().getNameExtendedIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJsonPragmaAccess().getValueJsonObjectValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns NullValue
	 *     Expression returns NullValue
	 *     BoolExpression returns NullValue
	 *     LogicalOrExpression returns NullValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns NullValue
	 *     LogicalAndExpression returns NullValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns NullValue
	 *     BitwiseOrExpression returns NullValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns NullValue
	 *     BitwiseXOrExpression returns NullValue
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns NullValue
	 *     BitwiseAndExpression returns NullValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns NullValue
	 *     CompareOperation returns NullValue
	 *     CompareOperation.OperatorExpression_1_0 returns NullValue
	 *     NotOrValuedExpression returns NullValue
	 *     BitwiseNotExpression returns NullValue
	 *     NotExpression returns NullValue
	 *     ValuedExpression returns NullValue
	 *     ShiftExpressions returns NullValue
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns NullValue
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns NullValue
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns NullValue
	 *     ShiftLeftExpression returns NullValue
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns NullValue
	 *     ShiftRightExpression returns NullValue
	 *     ShiftRightExpression.OperatorExpression_1_0 returns NullValue
	 *     ShiftRightUnsignedExpression returns NullValue
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns NullValue
	 *     SumExpression returns NullValue
	 *     SumExpression.OperatorExpression_1_0_0 returns NullValue
	 *     SumExpression.OperatorExpression_1_1_0 returns NullValue
	 *     AddExpression returns NullValue
	 *     AddExpression.OperatorExpression_1_0 returns NullValue
	 *     SubExpression returns NullValue
	 *     SubExpression.OperatorExpression_1_0 returns NullValue
	 *     ProductExpression returns NullValue
	 *     ProductExpression.OperatorExpression_1_0_0 returns NullValue
	 *     ProductExpression.OperatorExpression_1_1_0 returns NullValue
	 *     ProductExpression.OperatorExpression_1_2_0 returns NullValue
	 *     MultExpression returns NullValue
	 *     MultExpression.OperatorExpression_1_0 returns NullValue
	 *     DivExpression returns NullValue
	 *     DivExpression.OperatorExpression_1_0 returns NullValue
	 *     ModExpression returns NullValue
	 *     ModExpression.OperatorExpression_1_0 returns NullValue
	 *     NegExpression returns NullValue
	 *     TernaryOperation returns NullValue
	 *     InitExpression returns NullValue
	 *     InitExpression.OperatorExpression_1_0 returns NullValue
	 *     FbyExpression returns NullValue
	 *     FbyExpression.OperatorExpression_1_0 returns NullValue
	 *     SfbyExpression returns NullValue
	 *     SfbyExpression.OperatorExpression_1_0 returns NullValue
	 *     AtomicExpression returns NullValue
	 *     AtomicValuedExpression returns NullValue
	 *     VectorValueMember returns NullValue
	 *     JsonValue returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     {NullValue}
	 * </pre>
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     ((accessType=ParameterAccessType expression=ValuedObjectReference) | expression=Expression)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, de.cau.cs.kieler.kexpressions.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PrintCall returns PrintCall
	 *
	 * Constraint:
	 *     (parameters+=Parameter parameters+=Parameter*)?
	 * </pre>
	 */
	protected void sequence_PrintCall(ISerializationContext context, PrintCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns RandomCall
	 *     Expression returns RandomCall
	 *     BoolExpression returns RandomCall
	 *     LogicalOrExpression returns RandomCall
	 *     LogicalOrExpression.OperatorExpression_1_0 returns RandomCall
	 *     LogicalAndExpression returns RandomCall
	 *     LogicalAndExpression.OperatorExpression_1_0 returns RandomCall
	 *     BitwiseOrExpression returns RandomCall
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns RandomCall
	 *     BitwiseXOrExpression returns RandomCall
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns RandomCall
	 *     BitwiseAndExpression returns RandomCall
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns RandomCall
	 *     CompareOperation returns RandomCall
	 *     CompareOperation.OperatorExpression_1_0 returns RandomCall
	 *     NotOrValuedExpression returns RandomCall
	 *     BitwiseNotExpression returns RandomCall
	 *     NotExpression returns RandomCall
	 *     ValuedExpression returns RandomCall
	 *     ShiftExpressions returns RandomCall
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns RandomCall
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns RandomCall
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns RandomCall
	 *     ShiftLeftExpression returns RandomCall
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns RandomCall
	 *     ShiftRightExpression returns RandomCall
	 *     ShiftRightExpression.OperatorExpression_1_0 returns RandomCall
	 *     ShiftRightUnsignedExpression returns RandomCall
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns RandomCall
	 *     SumExpression returns RandomCall
	 *     SumExpression.OperatorExpression_1_0_0 returns RandomCall
	 *     SumExpression.OperatorExpression_1_1_0 returns RandomCall
	 *     AddExpression returns RandomCall
	 *     AddExpression.OperatorExpression_1_0 returns RandomCall
	 *     SubExpression returns RandomCall
	 *     SubExpression.OperatorExpression_1_0 returns RandomCall
	 *     ProductExpression returns RandomCall
	 *     ProductExpression.OperatorExpression_1_0_0 returns RandomCall
	 *     ProductExpression.OperatorExpression_1_1_0 returns RandomCall
	 *     ProductExpression.OperatorExpression_1_2_0 returns RandomCall
	 *     MultExpression returns RandomCall
	 *     MultExpression.OperatorExpression_1_0 returns RandomCall
	 *     DivExpression returns RandomCall
	 *     DivExpression.OperatorExpression_1_0 returns RandomCall
	 *     ModExpression returns RandomCall
	 *     ModExpression.OperatorExpression_1_0 returns RandomCall
	 *     NegExpression returns RandomCall
	 *     TernaryOperation returns RandomCall
	 *     InitExpression returns RandomCall
	 *     InitExpression.OperatorExpression_1_0 returns RandomCall
	 *     FbyExpression returns RandomCall
	 *     FbyExpression.OperatorExpression_1_0 returns RandomCall
	 *     SfbyExpression returns RandomCall
	 *     SfbyExpression.OperatorExpression_1_0 returns RandomCall
	 *     AtomicExpression returns RandomCall
	 *     AtomicValuedExpression returns RandomCall
	 *     RandomCall returns RandomCall
	 *     VectorValueMember returns RandomCall
	 *
	 * Constraint:
	 *     {RandomCall}
	 * </pre>
	 */
	protected void sequence_RandomCall(ISerializationContext context, RandomCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns RandomizeCall
	 *     Expression returns RandomizeCall
	 *     BoolExpression returns RandomizeCall
	 *     LogicalOrExpression returns RandomizeCall
	 *     LogicalOrExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     LogicalAndExpression returns RandomizeCall
	 *     LogicalAndExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     BitwiseOrExpression returns RandomizeCall
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     BitwiseXOrExpression returns RandomizeCall
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     BitwiseAndExpression returns RandomizeCall
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     CompareOperation returns RandomizeCall
	 *     CompareOperation.OperatorExpression_1_0 returns RandomizeCall
	 *     NotOrValuedExpression returns RandomizeCall
	 *     BitwiseNotExpression returns RandomizeCall
	 *     NotExpression returns RandomizeCall
	 *     ValuedExpression returns RandomizeCall
	 *     ShiftExpressions returns RandomizeCall
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns RandomizeCall
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns RandomizeCall
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns RandomizeCall
	 *     ShiftLeftExpression returns RandomizeCall
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     ShiftRightExpression returns RandomizeCall
	 *     ShiftRightExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     ShiftRightUnsignedExpression returns RandomizeCall
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     SumExpression returns RandomizeCall
	 *     SumExpression.OperatorExpression_1_0_0 returns RandomizeCall
	 *     SumExpression.OperatorExpression_1_1_0 returns RandomizeCall
	 *     AddExpression returns RandomizeCall
	 *     AddExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     SubExpression returns RandomizeCall
	 *     SubExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     ProductExpression returns RandomizeCall
	 *     ProductExpression.OperatorExpression_1_0_0 returns RandomizeCall
	 *     ProductExpression.OperatorExpression_1_1_0 returns RandomizeCall
	 *     ProductExpression.OperatorExpression_1_2_0 returns RandomizeCall
	 *     MultExpression returns RandomizeCall
	 *     MultExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     DivExpression returns RandomizeCall
	 *     DivExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     ModExpression returns RandomizeCall
	 *     ModExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     NegExpression returns RandomizeCall
	 *     TernaryOperation returns RandomizeCall
	 *     InitExpression returns RandomizeCall
	 *     InitExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     FbyExpression returns RandomizeCall
	 *     FbyExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     SfbyExpression returns RandomizeCall
	 *     SfbyExpression.OperatorExpression_1_0 returns RandomizeCall
	 *     AtomicExpression returns RandomizeCall
	 *     AtomicValuedExpression returns RandomizeCall
	 *     RandomizeCall returns RandomizeCall
	 *     VectorValueMember returns RandomizeCall
	 *
	 * Constraint:
	 *     {RandomizeCall}
	 * </pre>
	 */
	protected void sequence_RandomizeCall(ISerializationContext context, RandomizeCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns ReferenceCall
	 *     Expression returns ReferenceCall
	 *     BoolExpression returns ReferenceCall
	 *     LogicalOrExpression returns ReferenceCall
	 *     LogicalOrExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     LogicalAndExpression returns ReferenceCall
	 *     LogicalAndExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     BitwiseOrExpression returns ReferenceCall
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     BitwiseXOrExpression returns ReferenceCall
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     BitwiseAndExpression returns ReferenceCall
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     CompareOperation returns ReferenceCall
	 *     CompareOperation.OperatorExpression_1_0 returns ReferenceCall
	 *     NotOrValuedExpression returns ReferenceCall
	 *     BitwiseNotExpression returns ReferenceCall
	 *     NotExpression returns ReferenceCall
	 *     ValuedExpression returns ReferenceCall
	 *     ShiftExpressions returns ReferenceCall
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns ReferenceCall
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns ReferenceCall
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns ReferenceCall
	 *     ShiftLeftExpression returns ReferenceCall
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     ShiftRightExpression returns ReferenceCall
	 *     ShiftRightExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     ShiftRightUnsignedExpression returns ReferenceCall
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     SumExpression returns ReferenceCall
	 *     SumExpression.OperatorExpression_1_0_0 returns ReferenceCall
	 *     SumExpression.OperatorExpression_1_1_0 returns ReferenceCall
	 *     AddExpression returns ReferenceCall
	 *     AddExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     SubExpression returns ReferenceCall
	 *     SubExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     ProductExpression returns ReferenceCall
	 *     ProductExpression.OperatorExpression_1_0_0 returns ReferenceCall
	 *     ProductExpression.OperatorExpression_1_1_0 returns ReferenceCall
	 *     ProductExpression.OperatorExpression_1_2_0 returns ReferenceCall
	 *     MultExpression returns ReferenceCall
	 *     MultExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     DivExpression returns ReferenceCall
	 *     DivExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     ModExpression returns ReferenceCall
	 *     ModExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     NegExpression returns ReferenceCall
	 *     TernaryOperation returns ReferenceCall
	 *     InitExpression returns ReferenceCall
	 *     InitExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     FbyExpression returns ReferenceCall
	 *     FbyExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     SfbyExpression returns ReferenceCall
	 *     SfbyExpression.OperatorExpression_1_0 returns ReferenceCall
	 *     AtomicExpression returns ReferenceCall
	 *     AtomicValuedExpression returns ReferenceCall
	 *     ReferenceCall returns ReferenceCall
	 *     VectorValueMember returns ReferenceCall
	 *
	 * Constraint:
	 *     (
	 *         super?='super.'? 
	 *         valuedObject=[ValuedObject|PrimeID] 
	 *         indices+=Expression* 
	 *         subReference=ValuedObjectReference? 
	 *         (parameters+=Parameter parameters+=Parameter*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ReferenceCall(ISerializationContext context, ReferenceCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ScheduleObjectReference returns ScheduleObjectReference
	 *
	 * Constraint:
	 *     (valuedObject=[ValuedObject|PrimeID] priority=INT)
	 * </pre>
	 */
	protected void sequence_ScheduleObjectReference(ISerializationContext context, ScheduleObjectReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT));
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.SCHEDULE_OBJECT_REFERENCE__PRIORITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.SCHEDULE_OBJECT_REFERENCE__PRIORITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1(), semanticObject.eGet(KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT, false));
		feeder.accept(grammarAccess.getScheduleObjectReferenceAccess().getPriorityINTTerminalRuleCall_1_0(), semanticObject.getPriority());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns SpecialAccessExpression
	 *     Expression returns SpecialAccessExpression
	 *     BoolExpression returns SpecialAccessExpression
	 *     LogicalOrExpression returns SpecialAccessExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     LogicalAndExpression returns SpecialAccessExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     BitwiseOrExpression returns SpecialAccessExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     BitwiseXOrExpression returns SpecialAccessExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     BitwiseAndExpression returns SpecialAccessExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     CompareOperation returns SpecialAccessExpression
	 *     CompareOperation.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     NotOrValuedExpression returns SpecialAccessExpression
	 *     BitwiseNotExpression returns SpecialAccessExpression
	 *     NotExpression returns SpecialAccessExpression
	 *     ValuedExpression returns SpecialAccessExpression
	 *     ShiftExpressions returns SpecialAccessExpression
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns SpecialAccessExpression
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns SpecialAccessExpression
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns SpecialAccessExpression
	 *     ShiftLeftExpression returns SpecialAccessExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ShiftRightExpression returns SpecialAccessExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ShiftRightUnsignedExpression returns SpecialAccessExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     SumExpression returns SpecialAccessExpression
	 *     SumExpression.OperatorExpression_1_0_0 returns SpecialAccessExpression
	 *     SumExpression.OperatorExpression_1_1_0 returns SpecialAccessExpression
	 *     AddExpression returns SpecialAccessExpression
	 *     AddExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     SubExpression returns SpecialAccessExpression
	 *     SubExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ProductExpression returns SpecialAccessExpression
	 *     ProductExpression.OperatorExpression_1_0_0 returns SpecialAccessExpression
	 *     ProductExpression.OperatorExpression_1_1_0 returns SpecialAccessExpression
	 *     ProductExpression.OperatorExpression_1_2_0 returns SpecialAccessExpression
	 *     MultExpression returns SpecialAccessExpression
	 *     MultExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     DivExpression returns SpecialAccessExpression
	 *     DivExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     ModExpression returns SpecialAccessExpression
	 *     ModExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     NegExpression returns SpecialAccessExpression
	 *     TernaryOperation returns SpecialAccessExpression
	 *     InitExpression returns SpecialAccessExpression
	 *     InitExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     FbyExpression returns SpecialAccessExpression
	 *     FbyExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     SfbyExpression returns SpecialAccessExpression
	 *     SfbyExpression.OperatorExpression_1_0 returns SpecialAccessExpression
	 *     AtomicExpression returns SpecialAccessExpression
	 *     AtomicValuedExpression returns SpecialAccessExpression
	 *     SpecialAccessExpression returns SpecialAccessExpression
	 *     VectorValueMember returns SpecialAccessExpression
	 *
	 * Constraint:
	 *     (access='static' container=[NamedObject|PrimeID]? target=[NamedObject|PrimeID] subReference=ValuedObjectReference)
	 * </pre>
	 */
	protected void sequence_SpecialAccessExpression(ISerializationContext context, SpecialAccessExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns StringValue
	 *     Expression returns StringValue
	 *     BoolExpression returns StringValue
	 *     LogicalOrExpression returns StringValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns StringValue
	 *     LogicalAndExpression returns StringValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns StringValue
	 *     BitwiseOrExpression returns StringValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns StringValue
	 *     BitwiseXOrExpression returns StringValue
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns StringValue
	 *     BitwiseAndExpression returns StringValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns StringValue
	 *     CompareOperation returns StringValue
	 *     CompareOperation.OperatorExpression_1_0 returns StringValue
	 *     NotOrValuedExpression returns StringValue
	 *     BitwiseNotExpression returns StringValue
	 *     NotExpression returns StringValue
	 *     ValuedExpression returns StringValue
	 *     ShiftExpressions returns StringValue
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns StringValue
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns StringValue
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns StringValue
	 *     ShiftLeftExpression returns StringValue
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns StringValue
	 *     ShiftRightExpression returns StringValue
	 *     ShiftRightExpression.OperatorExpression_1_0 returns StringValue
	 *     ShiftRightUnsignedExpression returns StringValue
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns StringValue
	 *     SumExpression returns StringValue
	 *     SumExpression.OperatorExpression_1_0_0 returns StringValue
	 *     SumExpression.OperatorExpression_1_1_0 returns StringValue
	 *     AddExpression returns StringValue
	 *     AddExpression.OperatorExpression_1_0 returns StringValue
	 *     SubExpression returns StringValue
	 *     SubExpression.OperatorExpression_1_0 returns StringValue
	 *     ProductExpression returns StringValue
	 *     ProductExpression.OperatorExpression_1_0_0 returns StringValue
	 *     ProductExpression.OperatorExpression_1_1_0 returns StringValue
	 *     ProductExpression.OperatorExpression_1_2_0 returns StringValue
	 *     MultExpression returns StringValue
	 *     MultExpression.OperatorExpression_1_0 returns StringValue
	 *     DivExpression returns StringValue
	 *     DivExpression.OperatorExpression_1_0 returns StringValue
	 *     ModExpression returns StringValue
	 *     ModExpression.OperatorExpression_1_0 returns StringValue
	 *     NegExpression returns StringValue
	 *     TernaryOperation returns StringValue
	 *     InitExpression returns StringValue
	 *     InitExpression.OperatorExpression_1_0 returns StringValue
	 *     FbyExpression returns StringValue
	 *     FbyExpression.OperatorExpression_1_0 returns StringValue
	 *     SfbyExpression returns StringValue
	 *     SfbyExpression.OperatorExpression_1_0 returns StringValue
	 *     AtomicExpression returns StringValue
	 *     AtomicValuedExpression returns StringValue
	 *     StringValue returns StringValue
	 *     VectorValueMember returns StringValue
	 *     AnyValue returns StringValue
	 *     JsonValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns TextExpression
	 *     Expression returns TextExpression
	 *     BoolExpression returns TextExpression
	 *     LogicalOrExpression returns TextExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns TextExpression
	 *     LogicalAndExpression returns TextExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns TextExpression
	 *     BitwiseOrExpression returns TextExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns TextExpression
	 *     BitwiseXOrExpression returns TextExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns TextExpression
	 *     BitwiseAndExpression returns TextExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns TextExpression
	 *     CompareOperation returns TextExpression
	 *     CompareOperation.OperatorExpression_1_0 returns TextExpression
	 *     NotOrValuedExpression returns TextExpression
	 *     BitwiseNotExpression returns TextExpression
	 *     NotExpression returns TextExpression
	 *     ValuedExpression returns TextExpression
	 *     ShiftExpressions returns TextExpression
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns TextExpression
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns TextExpression
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns TextExpression
	 *     ShiftLeftExpression returns TextExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns TextExpression
	 *     ShiftRightExpression returns TextExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns TextExpression
	 *     ShiftRightUnsignedExpression returns TextExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns TextExpression
	 *     SumExpression returns TextExpression
	 *     SumExpression.OperatorExpression_1_0_0 returns TextExpression
	 *     SumExpression.OperatorExpression_1_1_0 returns TextExpression
	 *     AddExpression returns TextExpression
	 *     AddExpression.OperatorExpression_1_0 returns TextExpression
	 *     SubExpression returns TextExpression
	 *     SubExpression.OperatorExpression_1_0 returns TextExpression
	 *     ProductExpression returns TextExpression
	 *     ProductExpression.OperatorExpression_1_0_0 returns TextExpression
	 *     ProductExpression.OperatorExpression_1_1_0 returns TextExpression
	 *     ProductExpression.OperatorExpression_1_2_0 returns TextExpression
	 *     MultExpression returns TextExpression
	 *     MultExpression.OperatorExpression_1_0 returns TextExpression
	 *     DivExpression returns TextExpression
	 *     DivExpression.OperatorExpression_1_0 returns TextExpression
	 *     ModExpression returns TextExpression
	 *     ModExpression.OperatorExpression_1_0 returns TextExpression
	 *     NegExpression returns TextExpression
	 *     TernaryOperation returns TextExpression
	 *     InitExpression returns TextExpression
	 *     InitExpression.OperatorExpression_1_0 returns TextExpression
	 *     FbyExpression returns TextExpression
	 *     FbyExpression.OperatorExpression_1_0 returns TextExpression
	 *     SfbyExpression returns TextExpression
	 *     SfbyExpression.OperatorExpression_1_0 returns TextExpression
	 *     AtomicExpression returns TextExpression
	 *     AtomicValuedExpression returns TextExpression
	 *     TextExpression returns TextExpression
	 *     VectorValueMember returns TextExpression
	 *
	 * Constraint:
	 *     (annotations+=Annotation* text=HOSTCODE)
	 * </pre>
	 */
	protected void sequence_TextExpression(ISerializationContext context, TextExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ThisExpression returns ThisExpression
	 *
	 * Constraint:
	 *     {ThisExpression}
	 * </pre>
	 */
	protected void sequence_ThisExpression(ISerializationContext context, ThisExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns ValuedObjectReference
	 *     Expression returns ValuedObjectReference
	 *     BoolExpression returns ValuedObjectReference
	 *     LogicalOrExpression returns ValuedObjectReference
	 *     LogicalOrExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     LogicalAndExpression returns ValuedObjectReference
	 *     LogicalAndExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     BitwiseOrExpression returns ValuedObjectReference
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     BitwiseXOrExpression returns ValuedObjectReference
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     BitwiseAndExpression returns ValuedObjectReference
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     CompareOperation returns ValuedObjectReference
	 *     CompareOperation.OperatorExpression_1_0 returns ValuedObjectReference
	 *     NotOrValuedExpression returns ValuedObjectReference
	 *     BitwiseNotExpression returns ValuedObjectReference
	 *     NotExpression returns ValuedObjectReference
	 *     ValuedExpression returns ValuedObjectReference
	 *     ShiftExpressions returns ValuedObjectReference
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns ValuedObjectReference
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns ValuedObjectReference
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns ValuedObjectReference
	 *     ShiftLeftExpression returns ValuedObjectReference
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     ShiftRightExpression returns ValuedObjectReference
	 *     ShiftRightExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     ShiftRightUnsignedExpression returns ValuedObjectReference
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     SumExpression returns ValuedObjectReference
	 *     SumExpression.OperatorExpression_1_0_0 returns ValuedObjectReference
	 *     SumExpression.OperatorExpression_1_1_0 returns ValuedObjectReference
	 *     AddExpression returns ValuedObjectReference
	 *     AddExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     SubExpression returns ValuedObjectReference
	 *     SubExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     ProductExpression returns ValuedObjectReference
	 *     ProductExpression.OperatorExpression_1_0_0 returns ValuedObjectReference
	 *     ProductExpression.OperatorExpression_1_1_0 returns ValuedObjectReference
	 *     ProductExpression.OperatorExpression_1_2_0 returns ValuedObjectReference
	 *     MultExpression returns ValuedObjectReference
	 *     MultExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     DivExpression returns ValuedObjectReference
	 *     DivExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     ModExpression returns ValuedObjectReference
	 *     ModExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     NegExpression returns ValuedObjectReference
	 *     TernaryOperation returns ValuedObjectReference
	 *     InitExpression returns ValuedObjectReference
	 *     InitExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     FbyExpression returns ValuedObjectReference
	 *     FbyExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     SfbyExpression returns ValuedObjectReference
	 *     SfbyExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     AtomicExpression returns ValuedObjectReference
	 *     AtomicValuedExpression returns ValuedObjectReference
	 *     ValuedObjectTestExpression returns ValuedObjectReference
	 *     ValuedObjectReference returns ValuedObjectReference
	 *     VectorValueMember returns ValuedObjectReference
	 *
	 * Constraint:
	 *     (valuedObject=[ValuedObject|PrimeID] indices+=Expression* subReference=ValuedObjectReference?)
	 * </pre>
	 */
	protected void sequence_ValuedObjectReference(ISerializationContext context, ValuedObjectReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ValuedObjectTestExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression subExpressions+=ValuedObjectReference?)
	 * </pre>
	 */
	protected void sequence_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns VectorValue
	 *     Expression returns VectorValue
	 *     BoolExpression returns VectorValue
	 *     LogicalOrExpression returns VectorValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns VectorValue
	 *     LogicalAndExpression returns VectorValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns VectorValue
	 *     BitwiseOrExpression returns VectorValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns VectorValue
	 *     BitwiseXOrExpression returns VectorValue
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns VectorValue
	 *     BitwiseAndExpression returns VectorValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns VectorValue
	 *     CompareOperation returns VectorValue
	 *     CompareOperation.OperatorExpression_1_0 returns VectorValue
	 *     NotOrValuedExpression returns VectorValue
	 *     BitwiseNotExpression returns VectorValue
	 *     NotExpression returns VectorValue
	 *     ValuedExpression returns VectorValue
	 *     ShiftExpressions returns VectorValue
	 *     ShiftExpressions.OperatorExpression_1_0_0 returns VectorValue
	 *     ShiftExpressions.OperatorExpression_1_1_0 returns VectorValue
	 *     ShiftExpressions.OperatorExpression_1_2_0 returns VectorValue
	 *     ShiftLeftExpression returns VectorValue
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns VectorValue
	 *     ShiftRightExpression returns VectorValue
	 *     ShiftRightExpression.OperatorExpression_1_0 returns VectorValue
	 *     ShiftRightUnsignedExpression returns VectorValue
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns VectorValue
	 *     SumExpression returns VectorValue
	 *     SumExpression.OperatorExpression_1_0_0 returns VectorValue
	 *     SumExpression.OperatorExpression_1_1_0 returns VectorValue
	 *     AddExpression returns VectorValue
	 *     AddExpression.OperatorExpression_1_0 returns VectorValue
	 *     SubExpression returns VectorValue
	 *     SubExpression.OperatorExpression_1_0 returns VectorValue
	 *     ProductExpression returns VectorValue
	 *     ProductExpression.OperatorExpression_1_0_0 returns VectorValue
	 *     ProductExpression.OperatorExpression_1_1_0 returns VectorValue
	 *     ProductExpression.OperatorExpression_1_2_0 returns VectorValue
	 *     MultExpression returns VectorValue
	 *     MultExpression.OperatorExpression_1_0 returns VectorValue
	 *     DivExpression returns VectorValue
	 *     DivExpression.OperatorExpression_1_0 returns VectorValue
	 *     ModExpression returns VectorValue
	 *     ModExpression.OperatorExpression_1_0 returns VectorValue
	 *     NegExpression returns VectorValue
	 *     TernaryOperation returns VectorValue
	 *     InitExpression returns VectorValue
	 *     InitExpression.OperatorExpression_1_0 returns VectorValue
	 *     FbyExpression returns VectorValue
	 *     FbyExpression.OperatorExpression_1_0 returns VectorValue
	 *     SfbyExpression returns VectorValue
	 *     SfbyExpression.OperatorExpression_1_0 returns VectorValue
	 *     AtomicExpression returns VectorValue
	 *     AtomicValuedExpression returns VectorValue
	 *     VectorValue returns VectorValue
	 *     VectorValueMember returns VectorValue
	 *
	 * Constraint:
	 *     (
	 *         (values+=VectorValueMember values+=VectorValueMember*) | 
	 *         (values+=IntValue range?='to' (values+=IntValue | values+=ValuedObjectReference | values+=SpecialAccessExpression))
	 *     )
	 * </pre>
	 */
	protected void sequence_VectorValue(ISerializationContext context, VectorValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
