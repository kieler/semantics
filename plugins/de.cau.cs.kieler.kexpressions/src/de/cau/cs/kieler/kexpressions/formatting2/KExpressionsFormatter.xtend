/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kexpressions.formatting2;

import com.google.inject.Inject
import de.cau.cs.kieler.annotations.formatting2.AnnotationsFormatter
import de.cau.cs.kieler.kexpressions.Expression
import de.cau.cs.kieler.kexpressions.FunctionCall
import de.cau.cs.kieler.kexpressions.OperatorExpression
import de.cau.cs.kieler.kexpressions.Parameter
import de.cau.cs.kieler.kexpressions.ReferenceCall
import de.cau.cs.kieler.kexpressions.ValuedObjectReference
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument
import de.cau.cs.kieler.kexpressions.VectorValue

class KExpressionsFormatter extends AnnotationsFormatter {
	
	@Inject extension KExpressionsGrammarAccess

	def dispatch void format(OperatorExpression operatorexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		switch(operatorexpression.operator) {
		    case POSTFIX_ADD: operatorexpression.regionFor.keyword(postfixAddAccess.POSTFIX_ADDPlusSignPlusSignKeyword_0)?.prepend[ noSpace ]
            case POSTFIX_SUB: operatorexpression.regionFor.keyword(postfixSubAccess.POSTFIX_SUBHyphenMinusHyphenMinusKeyword_0)?.prepend[ noSpace ]
            case SUB: {
                if (operatorexpression.subExpressions.size == 1) {
                    operatorexpression.regionFor.ruleCall(negExpressionAccess.operatorSubOperatorEnumRuleCall_0_1_0)?.append[ noSpace ]
                }
            }
            case NOT: {
                operatorexpression.regionFor.ruleCall(notExpressionAccess.operatorNotOperatorEnumRuleCall_0_1_0)?.append[ noSpace ]
            }
            case PRE,
            case VAL: {
        		operatorexpression.regionFor.keyword(valuedObjectTestExpressionAccess.leftParenthesisKeyword_0_2)?.prepend[ noSpace ].append[ noSpace ]
                operatorexpression.regionFor.keyword(valuedObjectTestExpressionAccess.rightParenthesisKeyword_0_5)?.prepend[ noSpace ] 
            }
            default: {
                // Nothing
            }
        }
        
        operatorexpression.regionFor.keyword("(")?.append[ noSpace ]
        operatorexpression.regionFor.keyword(")")?.prepend[ noSpace ]
        
		for (Expression subExpressions : operatorexpression.getSubExpressions()) {
			format(subExpressions, document)
		}
	}

	def dispatch void format(ValuedObjectReference valuedobjectreference, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		for (Expression indices : valuedobjectreference.getIndices()) {
			format(indices, document);
		}
		
        valuedobjectreference.regionFor.keywords(valuedObjectReferenceAccess.leftSquareBracketKeyword_1_0).forEach[prepend[ noSpace ].append[ noSpace ]]
        valuedobjectreference.regionFor.keywords(valuedObjectReferenceAccess.rightSquareBracketKeyword_1_2).forEach[prepend[ noSpace ]]
		valuedobjectreference.regionFor.keyword(valuedObjectReferenceAccess.fullStopKeyword_2_0)?.prepend[ noSpace ].append[ noSpace ]
		
		format(valuedobjectreference.getSubReference(), document);
	}

	def dispatch void format(ReferenceCall referencecall, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
        referencecall.regionFor.keyword(referenceCallAccess.leftParenthesisKeyword_4_0_0)?.prepend[ noSpace ].append[ noSpace ]
        referencecall.regionFor.keyword(referenceCallAccess.rightParenthesisKeyword_4_0_3)?.prepend[ noSpace ]
		
		for (Parameter parameters : referencecall.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(FunctionCall functioncall, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
        functioncall.regionFor.keyword(functionCallAccess.leftParenthesisKeyword_2_0_0)?.prepend[ noSpace ].append[ noSpace ]
        functioncall.regionFor.keyword(functionCallAccess.rightParenthesisKeyword_2_0_3)?.prepend[ noSpace ]
        functioncall.regionFor.keyword(functionCallAccess.leftParenthesisRightParenthesisKeyword_2_1)?.prepend[ noSpace ]
        		
		for (Parameter parameters : functioncall.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(Parameter parameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameter.getExpression(), document);
	}

    def dispatch void format(VectorValue vectorValue, extension IFormattableDocument document) {
        // TODO: format HiddenRegions around keywords, attributes, cross references, etc. 

        vectorValue.regionFor.keywords(vectorValueAccess.leftCurlyBracketKeyword_0).forEach[prepend[ noSpace ].append[ noSpace ]]
        vectorValue.regionFor.keywords(vectorValueAccess.rightCurlyBracketKeyword_2).forEach[prepend[ noSpace ]]
        
        for (member : vectorValue.values) {
            format(member, document);
        }
    }
}
