/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2015 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
grammar de.cau.cs.kieler.kexpressions.keffects.KEffects with de.cau.cs.kieler.kexpressions.KExpressions
 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions  
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects 

/**
 * @author ssm
 * @kieler.design 2015-08-23 proposed 
 * @kieler.rating 2015-08-23 proposed yellow
 */

/*
 * KEffects allow deriving grammars to use a range of different effects, namely assignments,
 * postfix effects, esterel like emissions, host code and function call effects.
 * Of course other grammars may extend this list.
 */

// ---------------- //
//  KEffects Rules  // 
// ---------------- //

// Effect Rule
// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
// function call effect.
// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
// If precedence is changed the converter has to be adapted too.
Effect returns keffects::Effect: 
    Assignment | 
	PostfixEffect | 
	ValuedEmission | // Will consume some ReferenceCallEffects
	HostcodeEffect | 
	ReferenceCallEffect |
	FunctionCallEffect |
	PrintCallEffect |
	RandomizeCallEffect |
	PureEmission;

// Emission Rule
// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
// a new value in the case of valued signals. 
// Example: A, B(2)
// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
// annotations defined in the annotations grammar.		
PureEmission returns keffects::Emission:
    (annotations+=QuotedStringAnnotation)*    
	reference=ValuedObjectReference
	('schedule' schedule+=ScheduleObjectReference+)?;

// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
ValuedEmission returns keffects::Emission:
    (annotations+=QuotedStringAnnotation)*    
    reference=ValuedObjectReference
    "(" newValue = Expression ")"
    ('schedule' schedule+=ScheduleObjectReference+)?;
    
PureOrValuedEmission returns keffects::Emission:
    ValuedEmission | PureEmission;

// Assignment Rule
// An assignment may start with a list of arbitrary annotatations.
// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
// indices part. The type of assignment is determined by the type of the operator.
// Example: A = true, I[0] = I[1], I += 1     
Assignment returns keffects::Assignment:
    (annotations+=Annotation)*    
	reference=ValuedObjectReference
	operator=AssignOperator expression = Expression
	('schedule' schedule+=ScheduleObjectReference+)?;
	 
//SubReferenceAssignment returns keffects::Assignment:
//    (annotations+=Annotation)*    
//    valuedObject=ValuedObjectReference
//     operator=AssignOperator expression = Expression
//     ('schedule' schedule+=ScheduleObjectReference+)?;	 
	 
// Postfix Effect
// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
// must be a postfix operator.
// Example: I++, I-- 
PostfixEffect returns keffects::Assignment:
    (annotations+=Annotation)*    
    reference=ValuedObjectReference
    operator=PostfixOperator
    ('schedule' schedule+=ScheduleObjectReference+)?;

// Hostcode Effect Rule
// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
HostcodeEffect returns keffects::HostcodeEffect:
    (annotations+=Annotation)*    
 	text=HOSTCODE;
 	
// Reference Call Effect Rule
// A reference call effect works similar to the reference call expression. Additionally, it may be
// preceded by a list of annotations.
ReferenceCallEffect returns keffects::ReferenceCallEffect:
    super?='super.'?
    (annotations+=Annotation)*    
    valuedObject=[kexpressions::ValuedObject|PrimeID]
    ('[' indices+=Expression ']')*
    ('.' subReference=ValuedObjectReference)?
    (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')
    ('schedule' schedule+=ScheduleObjectReference+)?;
    
// Function Call Effect Rule
// A function call effect works similar to the function call expression. Additionally, it may be
// preceded by a list of annotations.
FunctionCallEffect returns keffects::FunctionCallEffect:
    (annotations+=Annotation)*    
    ('extern' functionName = ID 
        (('(' parameters += Parameter 
            (',' parameters += Parameter)* ')'
        ) | '()')
    );

// Print Call Effect Rule
// A print functions that enables target-independent prints in the model.    
PrintCallEffect returns keffects::PrintCallEffect:
    (annotations+=Annotation)*
    'print' 
    ('(' parameters += Parameter (',' parameters += Parameter)* ')')
    ('schedule' schedule+=ScheduleObjectReference+)?;

RandomizeCallEffect returns keffects::RandomizeCallEffect:
    {keffects::RandomizeCallEffect}
    (annotations+=Annotation)*
    'randomize' 
        (('(' parameters += Parameter 
            (',' parameters += Parameter)* ')'
        ) | '()');

// ---------------- //
//  KEffects Enums  // 
// ---------------- //
    
// Assign Operator Enum    
enum AssignOperator returns keffects::AssignOperator:
    ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
    ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
    ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
    ASSIGNMIN="min=" | ASSIGNMAX="max=";

// Postfix Operator Enum    
enum PostfixOperator returns keffects::AssignOperator:
    POSTFIXADD="++" | POSTFIXSUB="--"; 
	