/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kexpressions.keffects.formatting2;

import com.google.inject.Inject
import de.cau.cs.kieler.annotations.Annotation
import de.cau.cs.kieler.kexpressions.Parameter
import de.cau.cs.kieler.kexpressions.formatting2.KExpressionsFormatter
import de.cau.cs.kieler.kexpressions.keffects.AssignOperator
import de.cau.cs.kieler.kexpressions.keffects.Assignment
import de.cau.cs.kieler.kexpressions.keffects.Emission
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect
import de.cau.cs.kieler.kexpressions.keffects.ReferenceCallEffect
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument

class KEffectsFormatter extends KExpressionsFormatter {
	
	@Inject extension KEffectsGrammarAccess

	def dispatch void format(Emission emission, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : emission.getAnnotations()) {
			format(annotations, document);
		}
		format(emission.getNewValue(), document);
	}

	def dispatch void format(Assignment assignment, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : assignment.getAnnotations()) {
			format(annotations, document);
		}
		
		if(assignment.operator == AssignOperator.POSTFIXADD || assignment.operator == AssignOperator.POSTFIXSUB) {
            assignment.regionFor.ruleCall(postfixEffectAccess.operatorPostfixOperatorEnumRuleCall_2_0)?.prepend[ noSpace ]
        }
		
		format(assignment.reference, document)
		format(assignment.getExpression(), document)
	}

	def dispatch void format(HostcodeEffect hostcodeeffect, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : hostcodeeffect.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(ReferenceCallEffect referencecalleffect, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : referencecalleffect.getAnnotations()) {
			format(annotations, document);
		}
		
        referencecalleffect.regionFor.keyword(referenceCallAccess.leftParenthesisKeyword_4_0_0)?.prepend[ noSpace ].append[ noSpace ]
        referencecalleffect.regionFor.keyword(referenceCallAccess.rightParenthesisKeyword_4_0_3)?.prepend[ noSpace ]
		
		for (Parameter parameters : referencecalleffect.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(FunctionCallEffect functioncalleffect, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : functioncalleffect.getAnnotations()) {
			format(annotations, document);
		}
		
		functioncalleffect.regionFor.keyword(functionCallAccess.leftParenthesisKeyword_2_0_0)?.prepend[ noSpace ].append[ noSpace ]
        functioncalleffect.regionFor.keyword(functionCallAccess.rightParenthesisKeyword_2_0_3)?.prepend[ noSpace ]
        functioncalleffect.regionFor.keyword(functionCallAccess.leftParenthesisRightParenthesisKeyword_2_1)?.prepend[ noSpace ]
        functioncalleffect.regionFor.keyword(functionCallAccess.leftParenthesisRightParenthesisKeyword_2_1)?.prepend[ noSpace ]
		
		for (Parameter parameters : functioncalleffect.getParameters()) {
			format(parameters, document);
		}
	}
}
